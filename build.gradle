plugins {
    // Apply the java-library plugin to add support for Java Library
    id 'java-library'
    id "com.google.protobuf" version "0.8.10"
    id 'idea'
}

def grpcVersion = '1.25.0'
def protobufVersion = '3.10.0'

repositories {
    jcenter()
    mavenCentral()
    maven { url 'https://jitpack.io' }
}

dependencies {
    compile "com.google.protobuf:protobuf-java:${protobufVersion}"
    compile "io.grpc:protoc-gen-grpc-java:${grpcVersion}"
    compile "io.grpc:grpc-stub:${grpcVersion}"
    compile "io.grpc:grpc-protobuf:${grpcVersion}"
    compile "io.grpc:grpc-core:${grpcVersion}"
    compile "io.grpc:grpc-java-api-checker:1.1.0"
    compile "javax.annotation:javax.annotation-api:1.3.1"

    // netty for desktop
    compile "io.grpc:grpc-netty:${grpcVersion}"
//    okhttp for android
//    compile "io.grpc:grpc-okhttp:${grpcVersion}"
}

protobuf {
    generatedFilesBaseDir = "$buildDir/generated"

    // Configure the protoc executable
    protoc {
        // Download from repositories
        artifact = "com.google.protobuf:protoc:${protobufVersion}"
    }
    plugins {
        grpc {
            artifact = "io.grpc:protoc-gen-grpc-java:${grpcVersion}"
        }
    }

    generateProtoTasks {
        all().each { task ->
            task.builtins {
                // Generates Python code in the output folder:
                java {}
            }

            task.plugins {
                grpc {}
            }
        }
    }
}

sourceSets {
    main {
        java {
            srcDirs "$buildDir/generated"
        }
        proto {
            srcDirs "$rootDir/proto"
        }
    }

}

clean {
    delete protobuf.generatedFilesBaseDir
}

idea {
    module {
        // proto files and generated Java files are automatically added as
        // source dirs.
        // If you have additional sources, add them here:
        sourceDirs += file("${protobuf.generatedFilesBaseDir}/main/java")
        sourceDirs += file("${protobuf.generatedFilesBaseDir}/main/grpc")
    }
}