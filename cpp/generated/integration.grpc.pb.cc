// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: integration.proto

#include "integration.pb.h"
#include "integration.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace VeriBlock {

static const char* IntegrationService_method_names[] = {
  "/VeriBlock.IntegrationService/ResetSecurity",
  "/VeriBlock.IntegrationService/AddGenesisVeriBlock",
  "/VeriBlock.IntegrationService/AddGenesisBitcoin",
  "/VeriBlock.IntegrationService/AddPayloads",
  "/VeriBlock.IntegrationService/RemovePayloads",
  "/VeriBlock.IntegrationService/AddTemporaryPayloads",
  "/VeriBlock.IntegrationService/ClearTemporaryPayloads",
  "/VeriBlock.IntegrationService/SimplifyVTBs",
  "/VeriBlock.IntegrationService/CheckATVAgainstView",
  "/VeriBlock.IntegrationService/CheckVTBInternally",
  "/VeriBlock.IntegrationService/CheckATVInternally",
  "/VeriBlock.IntegrationService/GetMainVBKHeightOfATV",
  "/VeriBlock.IntegrationService/SetAltChainParametersConfig",
  "/VeriBlock.IntegrationService/GetLastKnownVBKBlocks",
  "/VeriBlock.IntegrationService/GetLastKnownBTCBlocks",
  "/VeriBlock.IntegrationService/SavePoPTransactionData",
};

std::unique_ptr< IntegrationService::Stub> IntegrationService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< IntegrationService::Stub> stub(new IntegrationService::Stub(channel));
  return stub;
}

IntegrationService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_ResetSecurity_(IntegrationService_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_AddGenesisVeriBlock_(IntegrationService_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_AddGenesisBitcoin_(IntegrationService_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_AddPayloads_(IntegrationService_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RemovePayloads_(IntegrationService_method_names[4], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_AddTemporaryPayloads_(IntegrationService_method_names[5], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ClearTemporaryPayloads_(IntegrationService_method_names[6], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SimplifyVTBs_(IntegrationService_method_names[7], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CheckATVAgainstView_(IntegrationService_method_names[8], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CheckVTBInternally_(IntegrationService_method_names[9], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CheckATVInternally_(IntegrationService_method_names[10], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetMainVBKHeightOfATV_(IntegrationService_method_names[11], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetAltChainParametersConfig_(IntegrationService_method_names[12], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetLastKnownVBKBlocks_(IntegrationService_method_names[13], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetLastKnownBTCBlocks_(IntegrationService_method_names[14], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SavePoPTransactionData_(IntegrationService_method_names[15], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status IntegrationService::Stub::ResetSecurity(::grpc::ClientContext* context, const ::VeriBlock::EmptyRequest& request, ::VeriBlock::GeneralReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ResetSecurity_, context, request, response);
}

void IntegrationService::Stub::experimental_async::ResetSecurity(::grpc::ClientContext* context, const ::VeriBlock::EmptyRequest* request, ::VeriBlock::GeneralReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ResetSecurity_, context, request, response, std::move(f));
}

void IntegrationService::Stub::experimental_async::ResetSecurity(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::GeneralReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ResetSecurity_, context, request, response, std::move(f));
}

void IntegrationService::Stub::experimental_async::ResetSecurity(::grpc::ClientContext* context, const ::VeriBlock::EmptyRequest* request, ::VeriBlock::GeneralReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ResetSecurity_, context, request, response, reactor);
}

void IntegrationService::Stub::experimental_async::ResetSecurity(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::GeneralReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ResetSecurity_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::VeriBlock::GeneralReply>* IntegrationService::Stub::AsyncResetSecurityRaw(::grpc::ClientContext* context, const ::VeriBlock::EmptyRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::VeriBlock::GeneralReply>::Create(channel_.get(), cq, rpcmethod_ResetSecurity_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::VeriBlock::GeneralReply>* IntegrationService::Stub::PrepareAsyncResetSecurityRaw(::grpc::ClientContext* context, const ::VeriBlock::EmptyRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::VeriBlock::GeneralReply>::Create(channel_.get(), cq, rpcmethod_ResetSecurity_, context, request, false);
}

::grpc::Status IntegrationService::Stub::AddGenesisVeriBlock(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockBlock& request, ::VeriBlock::GeneralReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_AddGenesisVeriBlock_, context, request, response);
}

void IntegrationService::Stub::experimental_async::AddGenesisVeriBlock(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockBlock* request, ::VeriBlock::GeneralReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_AddGenesisVeriBlock_, context, request, response, std::move(f));
}

void IntegrationService::Stub::experimental_async::AddGenesisVeriBlock(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::GeneralReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_AddGenesisVeriBlock_, context, request, response, std::move(f));
}

void IntegrationService::Stub::experimental_async::AddGenesisVeriBlock(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockBlock* request, ::VeriBlock::GeneralReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_AddGenesisVeriBlock_, context, request, response, reactor);
}

void IntegrationService::Stub::experimental_async::AddGenesisVeriBlock(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::GeneralReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_AddGenesisVeriBlock_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::VeriBlock::GeneralReply>* IntegrationService::Stub::AsyncAddGenesisVeriBlockRaw(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockBlock& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::VeriBlock::GeneralReply>::Create(channel_.get(), cq, rpcmethod_AddGenesisVeriBlock_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::VeriBlock::GeneralReply>* IntegrationService::Stub::PrepareAsyncAddGenesisVeriBlockRaw(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockBlock& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::VeriBlock::GeneralReply>::Create(channel_.get(), cq, rpcmethod_AddGenesisVeriBlock_, context, request, false);
}

::grpc::Status IntegrationService::Stub::AddGenesisBitcoin(::grpc::ClientContext* context, const ::VeriBlock::BitcoinBlock& request, ::VeriBlock::GeneralReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_AddGenesisBitcoin_, context, request, response);
}

void IntegrationService::Stub::experimental_async::AddGenesisBitcoin(::grpc::ClientContext* context, const ::VeriBlock::BitcoinBlock* request, ::VeriBlock::GeneralReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_AddGenesisBitcoin_, context, request, response, std::move(f));
}

void IntegrationService::Stub::experimental_async::AddGenesisBitcoin(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::GeneralReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_AddGenesisBitcoin_, context, request, response, std::move(f));
}

void IntegrationService::Stub::experimental_async::AddGenesisBitcoin(::grpc::ClientContext* context, const ::VeriBlock::BitcoinBlock* request, ::VeriBlock::GeneralReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_AddGenesisBitcoin_, context, request, response, reactor);
}

void IntegrationService::Stub::experimental_async::AddGenesisBitcoin(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::GeneralReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_AddGenesisBitcoin_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::VeriBlock::GeneralReply>* IntegrationService::Stub::AsyncAddGenesisBitcoinRaw(::grpc::ClientContext* context, const ::VeriBlock::BitcoinBlock& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::VeriBlock::GeneralReply>::Create(channel_.get(), cq, rpcmethod_AddGenesisBitcoin_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::VeriBlock::GeneralReply>* IntegrationService::Stub::PrepareAsyncAddGenesisBitcoinRaw(::grpc::ClientContext* context, const ::VeriBlock::BitcoinBlock& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::VeriBlock::GeneralReply>::Create(channel_.get(), cq, rpcmethod_AddGenesisBitcoin_, context, request, false);
}

::grpc::Status IntegrationService::Stub::AddPayloads(::grpc::ClientContext* context, const ::VeriBlock::AddPayloadsRequest& request, ::VeriBlock::GeneralReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_AddPayloads_, context, request, response);
}

void IntegrationService::Stub::experimental_async::AddPayloads(::grpc::ClientContext* context, const ::VeriBlock::AddPayloadsRequest* request, ::VeriBlock::GeneralReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_AddPayloads_, context, request, response, std::move(f));
}

void IntegrationService::Stub::experimental_async::AddPayloads(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::GeneralReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_AddPayloads_, context, request, response, std::move(f));
}

void IntegrationService::Stub::experimental_async::AddPayloads(::grpc::ClientContext* context, const ::VeriBlock::AddPayloadsRequest* request, ::VeriBlock::GeneralReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_AddPayloads_, context, request, response, reactor);
}

void IntegrationService::Stub::experimental_async::AddPayloads(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::GeneralReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_AddPayloads_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::VeriBlock::GeneralReply>* IntegrationService::Stub::AsyncAddPayloadsRaw(::grpc::ClientContext* context, const ::VeriBlock::AddPayloadsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::VeriBlock::GeneralReply>::Create(channel_.get(), cq, rpcmethod_AddPayloads_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::VeriBlock::GeneralReply>* IntegrationService::Stub::PrepareAsyncAddPayloadsRaw(::grpc::ClientContext* context, const ::VeriBlock::AddPayloadsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::VeriBlock::GeneralReply>::Create(channel_.get(), cq, rpcmethod_AddPayloads_, context, request, false);
}

::grpc::Status IntegrationService::Stub::RemovePayloads(::grpc::ClientContext* context, const ::VeriBlock::RemovePayloadsRequest& request, ::VeriBlock::GeneralReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_RemovePayloads_, context, request, response);
}

void IntegrationService::Stub::experimental_async::RemovePayloads(::grpc::ClientContext* context, const ::VeriBlock::RemovePayloadsRequest* request, ::VeriBlock::GeneralReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_RemovePayloads_, context, request, response, std::move(f));
}

void IntegrationService::Stub::experimental_async::RemovePayloads(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::GeneralReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_RemovePayloads_, context, request, response, std::move(f));
}

void IntegrationService::Stub::experimental_async::RemovePayloads(::grpc::ClientContext* context, const ::VeriBlock::RemovePayloadsRequest* request, ::VeriBlock::GeneralReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_RemovePayloads_, context, request, response, reactor);
}

void IntegrationService::Stub::experimental_async::RemovePayloads(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::GeneralReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_RemovePayloads_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::VeriBlock::GeneralReply>* IntegrationService::Stub::AsyncRemovePayloadsRaw(::grpc::ClientContext* context, const ::VeriBlock::RemovePayloadsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::VeriBlock::GeneralReply>::Create(channel_.get(), cq, rpcmethod_RemovePayloads_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::VeriBlock::GeneralReply>* IntegrationService::Stub::PrepareAsyncRemovePayloadsRaw(::grpc::ClientContext* context, const ::VeriBlock::RemovePayloadsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::VeriBlock::GeneralReply>::Create(channel_.get(), cq, rpcmethod_RemovePayloads_, context, request, false);
}

::grpc::Status IntegrationService::Stub::AddTemporaryPayloads(::grpc::ClientContext* context, const ::VeriBlock::AddTemporaryPayloadsRequest& request, ::VeriBlock::GeneralReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_AddTemporaryPayloads_, context, request, response);
}

void IntegrationService::Stub::experimental_async::AddTemporaryPayloads(::grpc::ClientContext* context, const ::VeriBlock::AddTemporaryPayloadsRequest* request, ::VeriBlock::GeneralReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_AddTemporaryPayloads_, context, request, response, std::move(f));
}

void IntegrationService::Stub::experimental_async::AddTemporaryPayloads(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::GeneralReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_AddTemporaryPayloads_, context, request, response, std::move(f));
}

void IntegrationService::Stub::experimental_async::AddTemporaryPayloads(::grpc::ClientContext* context, const ::VeriBlock::AddTemporaryPayloadsRequest* request, ::VeriBlock::GeneralReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_AddTemporaryPayloads_, context, request, response, reactor);
}

void IntegrationService::Stub::experimental_async::AddTemporaryPayloads(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::GeneralReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_AddTemporaryPayloads_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::VeriBlock::GeneralReply>* IntegrationService::Stub::AsyncAddTemporaryPayloadsRaw(::grpc::ClientContext* context, const ::VeriBlock::AddTemporaryPayloadsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::VeriBlock::GeneralReply>::Create(channel_.get(), cq, rpcmethod_AddTemporaryPayloads_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::VeriBlock::GeneralReply>* IntegrationService::Stub::PrepareAsyncAddTemporaryPayloadsRaw(::grpc::ClientContext* context, const ::VeriBlock::AddTemporaryPayloadsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::VeriBlock::GeneralReply>::Create(channel_.get(), cq, rpcmethod_AddTemporaryPayloads_, context, request, false);
}

::grpc::Status IntegrationService::Stub::ClearTemporaryPayloads(::grpc::ClientContext* context, const ::VeriBlock::EmptyRequest& request, ::VeriBlock::GeneralReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ClearTemporaryPayloads_, context, request, response);
}

void IntegrationService::Stub::experimental_async::ClearTemporaryPayloads(::grpc::ClientContext* context, const ::VeriBlock::EmptyRequest* request, ::VeriBlock::GeneralReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ClearTemporaryPayloads_, context, request, response, std::move(f));
}

void IntegrationService::Stub::experimental_async::ClearTemporaryPayloads(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::GeneralReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ClearTemporaryPayloads_, context, request, response, std::move(f));
}

void IntegrationService::Stub::experimental_async::ClearTemporaryPayloads(::grpc::ClientContext* context, const ::VeriBlock::EmptyRequest* request, ::VeriBlock::GeneralReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ClearTemporaryPayloads_, context, request, response, reactor);
}

void IntegrationService::Stub::experimental_async::ClearTemporaryPayloads(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::GeneralReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ClearTemporaryPayloads_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::VeriBlock::GeneralReply>* IntegrationService::Stub::AsyncClearTemporaryPayloadsRaw(::grpc::ClientContext* context, const ::VeriBlock::EmptyRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::VeriBlock::GeneralReply>::Create(channel_.get(), cq, rpcmethod_ClearTemporaryPayloads_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::VeriBlock::GeneralReply>* IntegrationService::Stub::PrepareAsyncClearTemporaryPayloadsRaw(::grpc::ClientContext* context, const ::VeriBlock::EmptyRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::VeriBlock::GeneralReply>::Create(channel_.get(), cq, rpcmethod_ClearTemporaryPayloads_, context, request, false);
}

::grpc::Status IntegrationService::Stub::SimplifyVTBs(::grpc::ClientContext* context, const ::VeriBlock::SimplifyVTBsRequest& request, ::VeriBlock::SimplifyVTBsReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SimplifyVTBs_, context, request, response);
}

void IntegrationService::Stub::experimental_async::SimplifyVTBs(::grpc::ClientContext* context, const ::VeriBlock::SimplifyVTBsRequest* request, ::VeriBlock::SimplifyVTBsReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SimplifyVTBs_, context, request, response, std::move(f));
}

void IntegrationService::Stub::experimental_async::SimplifyVTBs(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::SimplifyVTBsReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SimplifyVTBs_, context, request, response, std::move(f));
}

void IntegrationService::Stub::experimental_async::SimplifyVTBs(::grpc::ClientContext* context, const ::VeriBlock::SimplifyVTBsRequest* request, ::VeriBlock::SimplifyVTBsReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SimplifyVTBs_, context, request, response, reactor);
}

void IntegrationService::Stub::experimental_async::SimplifyVTBs(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::SimplifyVTBsReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SimplifyVTBs_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::VeriBlock::SimplifyVTBsReply>* IntegrationService::Stub::AsyncSimplifyVTBsRaw(::grpc::ClientContext* context, const ::VeriBlock::SimplifyVTBsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::VeriBlock::SimplifyVTBsReply>::Create(channel_.get(), cq, rpcmethod_SimplifyVTBs_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::VeriBlock::SimplifyVTBsReply>* IntegrationService::Stub::PrepareAsyncSimplifyVTBsRaw(::grpc::ClientContext* context, const ::VeriBlock::SimplifyVTBsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::VeriBlock::SimplifyVTBsReply>::Create(channel_.get(), cq, rpcmethod_SimplifyVTBs_, context, request, false);
}

::grpc::Status IntegrationService::Stub::CheckATVAgainstView(::grpc::ClientContext* context, const ::VeriBlock::AltPublication& request, ::VeriBlock::GeneralReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_CheckATVAgainstView_, context, request, response);
}

void IntegrationService::Stub::experimental_async::CheckATVAgainstView(::grpc::ClientContext* context, const ::VeriBlock::AltPublication* request, ::VeriBlock::GeneralReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_CheckATVAgainstView_, context, request, response, std::move(f));
}

void IntegrationService::Stub::experimental_async::CheckATVAgainstView(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::GeneralReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_CheckATVAgainstView_, context, request, response, std::move(f));
}

void IntegrationService::Stub::experimental_async::CheckATVAgainstView(::grpc::ClientContext* context, const ::VeriBlock::AltPublication* request, ::VeriBlock::GeneralReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_CheckATVAgainstView_, context, request, response, reactor);
}

void IntegrationService::Stub::experimental_async::CheckATVAgainstView(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::GeneralReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_CheckATVAgainstView_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::VeriBlock::GeneralReply>* IntegrationService::Stub::AsyncCheckATVAgainstViewRaw(::grpc::ClientContext* context, const ::VeriBlock::AltPublication& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::VeriBlock::GeneralReply>::Create(channel_.get(), cq, rpcmethod_CheckATVAgainstView_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::VeriBlock::GeneralReply>* IntegrationService::Stub::PrepareAsyncCheckATVAgainstViewRaw(::grpc::ClientContext* context, const ::VeriBlock::AltPublication& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::VeriBlock::GeneralReply>::Create(channel_.get(), cq, rpcmethod_CheckATVAgainstView_, context, request, false);
}

::grpc::Status IntegrationService::Stub::CheckVTBInternally(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockPublication& request, ::VeriBlock::GeneralReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_CheckVTBInternally_, context, request, response);
}

void IntegrationService::Stub::experimental_async::CheckVTBInternally(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockPublication* request, ::VeriBlock::GeneralReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_CheckVTBInternally_, context, request, response, std::move(f));
}

void IntegrationService::Stub::experimental_async::CheckVTBInternally(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::GeneralReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_CheckVTBInternally_, context, request, response, std::move(f));
}

void IntegrationService::Stub::experimental_async::CheckVTBInternally(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockPublication* request, ::VeriBlock::GeneralReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_CheckVTBInternally_, context, request, response, reactor);
}

void IntegrationService::Stub::experimental_async::CheckVTBInternally(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::GeneralReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_CheckVTBInternally_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::VeriBlock::GeneralReply>* IntegrationService::Stub::AsyncCheckVTBInternallyRaw(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockPublication& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::VeriBlock::GeneralReply>::Create(channel_.get(), cq, rpcmethod_CheckVTBInternally_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::VeriBlock::GeneralReply>* IntegrationService::Stub::PrepareAsyncCheckVTBInternallyRaw(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockPublication& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::VeriBlock::GeneralReply>::Create(channel_.get(), cq, rpcmethod_CheckVTBInternally_, context, request, false);
}

::grpc::Status IntegrationService::Stub::CheckATVInternally(::grpc::ClientContext* context, const ::VeriBlock::AltPublication& request, ::VeriBlock::GeneralReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_CheckATVInternally_, context, request, response);
}

void IntegrationService::Stub::experimental_async::CheckATVInternally(::grpc::ClientContext* context, const ::VeriBlock::AltPublication* request, ::VeriBlock::GeneralReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_CheckATVInternally_, context, request, response, std::move(f));
}

void IntegrationService::Stub::experimental_async::CheckATVInternally(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::GeneralReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_CheckATVInternally_, context, request, response, std::move(f));
}

void IntegrationService::Stub::experimental_async::CheckATVInternally(::grpc::ClientContext* context, const ::VeriBlock::AltPublication* request, ::VeriBlock::GeneralReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_CheckATVInternally_, context, request, response, reactor);
}

void IntegrationService::Stub::experimental_async::CheckATVInternally(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::GeneralReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_CheckATVInternally_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::VeriBlock::GeneralReply>* IntegrationService::Stub::AsyncCheckATVInternallyRaw(::grpc::ClientContext* context, const ::VeriBlock::AltPublication& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::VeriBlock::GeneralReply>::Create(channel_.get(), cq, rpcmethod_CheckATVInternally_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::VeriBlock::GeneralReply>* IntegrationService::Stub::PrepareAsyncCheckATVInternallyRaw(::grpc::ClientContext* context, const ::VeriBlock::AltPublication& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::VeriBlock::GeneralReply>::Create(channel_.get(), cq, rpcmethod_CheckATVInternally_, context, request, false);
}

::grpc::Status IntegrationService::Stub::GetMainVBKHeightOfATV(::grpc::ClientContext* context, const ::VeriBlock::AltPublication& request, ::VeriBlock::GetMainVBKHeightOfATVReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetMainVBKHeightOfATV_, context, request, response);
}

void IntegrationService::Stub::experimental_async::GetMainVBKHeightOfATV(::grpc::ClientContext* context, const ::VeriBlock::AltPublication* request, ::VeriBlock::GetMainVBKHeightOfATVReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetMainVBKHeightOfATV_, context, request, response, std::move(f));
}

void IntegrationService::Stub::experimental_async::GetMainVBKHeightOfATV(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::GetMainVBKHeightOfATVReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetMainVBKHeightOfATV_, context, request, response, std::move(f));
}

void IntegrationService::Stub::experimental_async::GetMainVBKHeightOfATV(::grpc::ClientContext* context, const ::VeriBlock::AltPublication* request, ::VeriBlock::GetMainVBKHeightOfATVReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetMainVBKHeightOfATV_, context, request, response, reactor);
}

void IntegrationService::Stub::experimental_async::GetMainVBKHeightOfATV(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::GetMainVBKHeightOfATVReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetMainVBKHeightOfATV_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::VeriBlock::GetMainVBKHeightOfATVReply>* IntegrationService::Stub::AsyncGetMainVBKHeightOfATVRaw(::grpc::ClientContext* context, const ::VeriBlock::AltPublication& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::VeriBlock::GetMainVBKHeightOfATVReply>::Create(channel_.get(), cq, rpcmethod_GetMainVBKHeightOfATV_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::VeriBlock::GetMainVBKHeightOfATVReply>* IntegrationService::Stub::PrepareAsyncGetMainVBKHeightOfATVRaw(::grpc::ClientContext* context, const ::VeriBlock::AltPublication& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::VeriBlock::GetMainVBKHeightOfATVReply>::Create(channel_.get(), cq, rpcmethod_GetMainVBKHeightOfATV_, context, request, false);
}

::grpc::Status IntegrationService::Stub::SetAltChainParametersConfig(::grpc::ClientContext* context, const ::VeriBlock::AltChainConfigRequest& request, ::VeriBlock::GeneralReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SetAltChainParametersConfig_, context, request, response);
}

void IntegrationService::Stub::experimental_async::SetAltChainParametersConfig(::grpc::ClientContext* context, const ::VeriBlock::AltChainConfigRequest* request, ::VeriBlock::GeneralReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetAltChainParametersConfig_, context, request, response, std::move(f));
}

void IntegrationService::Stub::experimental_async::SetAltChainParametersConfig(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::GeneralReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetAltChainParametersConfig_, context, request, response, std::move(f));
}

void IntegrationService::Stub::experimental_async::SetAltChainParametersConfig(::grpc::ClientContext* context, const ::VeriBlock::AltChainConfigRequest* request, ::VeriBlock::GeneralReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SetAltChainParametersConfig_, context, request, response, reactor);
}

void IntegrationService::Stub::experimental_async::SetAltChainParametersConfig(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::GeneralReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SetAltChainParametersConfig_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::VeriBlock::GeneralReply>* IntegrationService::Stub::AsyncSetAltChainParametersConfigRaw(::grpc::ClientContext* context, const ::VeriBlock::AltChainConfigRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::VeriBlock::GeneralReply>::Create(channel_.get(), cq, rpcmethod_SetAltChainParametersConfig_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::VeriBlock::GeneralReply>* IntegrationService::Stub::PrepareAsyncSetAltChainParametersConfigRaw(::grpc::ClientContext* context, const ::VeriBlock::AltChainConfigRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::VeriBlock::GeneralReply>::Create(channel_.get(), cq, rpcmethod_SetAltChainParametersConfig_, context, request, false);
}

::grpc::Status IntegrationService::Stub::GetLastKnownVBKBlocks(::grpc::ClientContext* context, const ::VeriBlock::GetLastKnownBlocksRequest& request, ::VeriBlock::GetLastKnownVBKBlocksReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetLastKnownVBKBlocks_, context, request, response);
}

void IntegrationService::Stub::experimental_async::GetLastKnownVBKBlocks(::grpc::ClientContext* context, const ::VeriBlock::GetLastKnownBlocksRequest* request, ::VeriBlock::GetLastKnownVBKBlocksReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetLastKnownVBKBlocks_, context, request, response, std::move(f));
}

void IntegrationService::Stub::experimental_async::GetLastKnownVBKBlocks(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::GetLastKnownVBKBlocksReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetLastKnownVBKBlocks_, context, request, response, std::move(f));
}

void IntegrationService::Stub::experimental_async::GetLastKnownVBKBlocks(::grpc::ClientContext* context, const ::VeriBlock::GetLastKnownBlocksRequest* request, ::VeriBlock::GetLastKnownVBKBlocksReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetLastKnownVBKBlocks_, context, request, response, reactor);
}

void IntegrationService::Stub::experimental_async::GetLastKnownVBKBlocks(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::GetLastKnownVBKBlocksReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetLastKnownVBKBlocks_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::VeriBlock::GetLastKnownVBKBlocksReply>* IntegrationService::Stub::AsyncGetLastKnownVBKBlocksRaw(::grpc::ClientContext* context, const ::VeriBlock::GetLastKnownBlocksRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::VeriBlock::GetLastKnownVBKBlocksReply>::Create(channel_.get(), cq, rpcmethod_GetLastKnownVBKBlocks_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::VeriBlock::GetLastKnownVBKBlocksReply>* IntegrationService::Stub::PrepareAsyncGetLastKnownVBKBlocksRaw(::grpc::ClientContext* context, const ::VeriBlock::GetLastKnownBlocksRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::VeriBlock::GetLastKnownVBKBlocksReply>::Create(channel_.get(), cq, rpcmethod_GetLastKnownVBKBlocks_, context, request, false);
}

::grpc::Status IntegrationService::Stub::GetLastKnownBTCBlocks(::grpc::ClientContext* context, const ::VeriBlock::GetLastKnownBlocksRequest& request, ::VeriBlock::GetLastKnownBTCBlocksReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetLastKnownBTCBlocks_, context, request, response);
}

void IntegrationService::Stub::experimental_async::GetLastKnownBTCBlocks(::grpc::ClientContext* context, const ::VeriBlock::GetLastKnownBlocksRequest* request, ::VeriBlock::GetLastKnownBTCBlocksReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetLastKnownBTCBlocks_, context, request, response, std::move(f));
}

void IntegrationService::Stub::experimental_async::GetLastKnownBTCBlocks(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::GetLastKnownBTCBlocksReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetLastKnownBTCBlocks_, context, request, response, std::move(f));
}

void IntegrationService::Stub::experimental_async::GetLastKnownBTCBlocks(::grpc::ClientContext* context, const ::VeriBlock::GetLastKnownBlocksRequest* request, ::VeriBlock::GetLastKnownBTCBlocksReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetLastKnownBTCBlocks_, context, request, response, reactor);
}

void IntegrationService::Stub::experimental_async::GetLastKnownBTCBlocks(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::GetLastKnownBTCBlocksReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetLastKnownBTCBlocks_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::VeriBlock::GetLastKnownBTCBlocksReply>* IntegrationService::Stub::AsyncGetLastKnownBTCBlocksRaw(::grpc::ClientContext* context, const ::VeriBlock::GetLastKnownBlocksRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::VeriBlock::GetLastKnownBTCBlocksReply>::Create(channel_.get(), cq, rpcmethod_GetLastKnownBTCBlocks_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::VeriBlock::GetLastKnownBTCBlocksReply>* IntegrationService::Stub::PrepareAsyncGetLastKnownBTCBlocksRaw(::grpc::ClientContext* context, const ::VeriBlock::GetLastKnownBlocksRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::VeriBlock::GetLastKnownBTCBlocksReply>::Create(channel_.get(), cq, rpcmethod_GetLastKnownBTCBlocks_, context, request, false);
}

::grpc::Status IntegrationService::Stub::SavePoPTransactionData(::grpc::ClientContext* context, const ::VeriBlock::SavePoPTransactionDataRequest& request, ::VeriBlock::GeneralReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SavePoPTransactionData_, context, request, response);
}

void IntegrationService::Stub::experimental_async::SavePoPTransactionData(::grpc::ClientContext* context, const ::VeriBlock::SavePoPTransactionDataRequest* request, ::VeriBlock::GeneralReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SavePoPTransactionData_, context, request, response, std::move(f));
}

void IntegrationService::Stub::experimental_async::SavePoPTransactionData(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::GeneralReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SavePoPTransactionData_, context, request, response, std::move(f));
}

void IntegrationService::Stub::experimental_async::SavePoPTransactionData(::grpc::ClientContext* context, const ::VeriBlock::SavePoPTransactionDataRequest* request, ::VeriBlock::GeneralReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SavePoPTransactionData_, context, request, response, reactor);
}

void IntegrationService::Stub::experimental_async::SavePoPTransactionData(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::GeneralReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SavePoPTransactionData_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::VeriBlock::GeneralReply>* IntegrationService::Stub::AsyncSavePoPTransactionDataRaw(::grpc::ClientContext* context, const ::VeriBlock::SavePoPTransactionDataRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::VeriBlock::GeneralReply>::Create(channel_.get(), cq, rpcmethod_SavePoPTransactionData_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::VeriBlock::GeneralReply>* IntegrationService::Stub::PrepareAsyncSavePoPTransactionDataRaw(::grpc::ClientContext* context, const ::VeriBlock::SavePoPTransactionDataRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::VeriBlock::GeneralReply>::Create(channel_.get(), cq, rpcmethod_SavePoPTransactionData_, context, request, false);
}

IntegrationService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      IntegrationService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< IntegrationService::Service, ::VeriBlock::EmptyRequest, ::VeriBlock::GeneralReply>(
          std::mem_fn(&IntegrationService::Service::ResetSecurity), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      IntegrationService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< IntegrationService::Service, ::VeriBlock::VeriBlockBlock, ::VeriBlock::GeneralReply>(
          std::mem_fn(&IntegrationService::Service::AddGenesisVeriBlock), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      IntegrationService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< IntegrationService::Service, ::VeriBlock::BitcoinBlock, ::VeriBlock::GeneralReply>(
          std::mem_fn(&IntegrationService::Service::AddGenesisBitcoin), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      IntegrationService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< IntegrationService::Service, ::VeriBlock::AddPayloadsRequest, ::VeriBlock::GeneralReply>(
          std::mem_fn(&IntegrationService::Service::AddPayloads), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      IntegrationService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< IntegrationService::Service, ::VeriBlock::RemovePayloadsRequest, ::VeriBlock::GeneralReply>(
          std::mem_fn(&IntegrationService::Service::RemovePayloads), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      IntegrationService_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< IntegrationService::Service, ::VeriBlock::AddTemporaryPayloadsRequest, ::VeriBlock::GeneralReply>(
          std::mem_fn(&IntegrationService::Service::AddTemporaryPayloads), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      IntegrationService_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< IntegrationService::Service, ::VeriBlock::EmptyRequest, ::VeriBlock::GeneralReply>(
          std::mem_fn(&IntegrationService::Service::ClearTemporaryPayloads), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      IntegrationService_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< IntegrationService::Service, ::VeriBlock::SimplifyVTBsRequest, ::VeriBlock::SimplifyVTBsReply>(
          std::mem_fn(&IntegrationService::Service::SimplifyVTBs), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      IntegrationService_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< IntegrationService::Service, ::VeriBlock::AltPublication, ::VeriBlock::GeneralReply>(
          std::mem_fn(&IntegrationService::Service::CheckATVAgainstView), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      IntegrationService_method_names[9],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< IntegrationService::Service, ::VeriBlock::VeriBlockPublication, ::VeriBlock::GeneralReply>(
          std::mem_fn(&IntegrationService::Service::CheckVTBInternally), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      IntegrationService_method_names[10],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< IntegrationService::Service, ::VeriBlock::AltPublication, ::VeriBlock::GeneralReply>(
          std::mem_fn(&IntegrationService::Service::CheckATVInternally), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      IntegrationService_method_names[11],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< IntegrationService::Service, ::VeriBlock::AltPublication, ::VeriBlock::GetMainVBKHeightOfATVReply>(
          std::mem_fn(&IntegrationService::Service::GetMainVBKHeightOfATV), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      IntegrationService_method_names[12],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< IntegrationService::Service, ::VeriBlock::AltChainConfigRequest, ::VeriBlock::GeneralReply>(
          std::mem_fn(&IntegrationService::Service::SetAltChainParametersConfig), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      IntegrationService_method_names[13],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< IntegrationService::Service, ::VeriBlock::GetLastKnownBlocksRequest, ::VeriBlock::GetLastKnownVBKBlocksReply>(
          std::mem_fn(&IntegrationService::Service::GetLastKnownVBKBlocks), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      IntegrationService_method_names[14],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< IntegrationService::Service, ::VeriBlock::GetLastKnownBlocksRequest, ::VeriBlock::GetLastKnownBTCBlocksReply>(
          std::mem_fn(&IntegrationService::Service::GetLastKnownBTCBlocks), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      IntegrationService_method_names[15],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< IntegrationService::Service, ::VeriBlock::SavePoPTransactionDataRequest, ::VeriBlock::GeneralReply>(
          std::mem_fn(&IntegrationService::Service::SavePoPTransactionData), this)));
}

IntegrationService::Service::~Service() {
}

::grpc::Status IntegrationService::Service::ResetSecurity(::grpc::ServerContext* context, const ::VeriBlock::EmptyRequest* request, ::VeriBlock::GeneralReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status IntegrationService::Service::AddGenesisVeriBlock(::grpc::ServerContext* context, const ::VeriBlock::VeriBlockBlock* request, ::VeriBlock::GeneralReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status IntegrationService::Service::AddGenesisBitcoin(::grpc::ServerContext* context, const ::VeriBlock::BitcoinBlock* request, ::VeriBlock::GeneralReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status IntegrationService::Service::AddPayloads(::grpc::ServerContext* context, const ::VeriBlock::AddPayloadsRequest* request, ::VeriBlock::GeneralReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status IntegrationService::Service::RemovePayloads(::grpc::ServerContext* context, const ::VeriBlock::RemovePayloadsRequest* request, ::VeriBlock::GeneralReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status IntegrationService::Service::AddTemporaryPayloads(::grpc::ServerContext* context, const ::VeriBlock::AddTemporaryPayloadsRequest* request, ::VeriBlock::GeneralReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status IntegrationService::Service::ClearTemporaryPayloads(::grpc::ServerContext* context, const ::VeriBlock::EmptyRequest* request, ::VeriBlock::GeneralReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status IntegrationService::Service::SimplifyVTBs(::grpc::ServerContext* context, const ::VeriBlock::SimplifyVTBsRequest* request, ::VeriBlock::SimplifyVTBsReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status IntegrationService::Service::CheckATVAgainstView(::grpc::ServerContext* context, const ::VeriBlock::AltPublication* request, ::VeriBlock::GeneralReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status IntegrationService::Service::CheckVTBInternally(::grpc::ServerContext* context, const ::VeriBlock::VeriBlockPublication* request, ::VeriBlock::GeneralReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status IntegrationService::Service::CheckATVInternally(::grpc::ServerContext* context, const ::VeriBlock::AltPublication* request, ::VeriBlock::GeneralReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status IntegrationService::Service::GetMainVBKHeightOfATV(::grpc::ServerContext* context, const ::VeriBlock::AltPublication* request, ::VeriBlock::GetMainVBKHeightOfATVReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status IntegrationService::Service::SetAltChainParametersConfig(::grpc::ServerContext* context, const ::VeriBlock::AltChainConfigRequest* request, ::VeriBlock::GeneralReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status IntegrationService::Service::GetLastKnownVBKBlocks(::grpc::ServerContext* context, const ::VeriBlock::GetLastKnownBlocksRequest* request, ::VeriBlock::GetLastKnownVBKBlocksReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status IntegrationService::Service::GetLastKnownBTCBlocks(::grpc::ServerContext* context, const ::VeriBlock::GetLastKnownBlocksRequest* request, ::VeriBlock::GetLastKnownBTCBlocksReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status IntegrationService::Service::SavePoPTransactionData(::grpc::ServerContext* context, const ::VeriBlock::SavePoPTransactionDataRequest* request, ::VeriBlock::GeneralReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* RewardsService_method_names[] = {
  "/VeriBlock.RewardsService/ResetRewards",
  "/VeriBlock.RewardsService/GetCalculator",
  "/VeriBlock.RewardsService/SetCalculator",
  "/VeriBlock.RewardsService/RewardsCalculateScore",
  "/VeriBlock.RewardsService/RewardsCalculateOutputs",
  "/VeriBlock.RewardsService/RewardsCalculatePopDifficulty",
};

std::unique_ptr< RewardsService::Stub> RewardsService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< RewardsService::Stub> stub(new RewardsService::Stub(channel));
  return stub;
}

RewardsService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_ResetRewards_(RewardsService_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetCalculator_(RewardsService_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetCalculator_(RewardsService_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RewardsCalculateScore_(RewardsService_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RewardsCalculateOutputs_(RewardsService_method_names[4], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RewardsCalculatePopDifficulty_(RewardsService_method_names[5], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status RewardsService::Stub::ResetRewards(::grpc::ClientContext* context, const ::VeriBlock::EmptyRequest& request, ::VeriBlock::GeneralReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ResetRewards_, context, request, response);
}

void RewardsService::Stub::experimental_async::ResetRewards(::grpc::ClientContext* context, const ::VeriBlock::EmptyRequest* request, ::VeriBlock::GeneralReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ResetRewards_, context, request, response, std::move(f));
}

void RewardsService::Stub::experimental_async::ResetRewards(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::GeneralReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ResetRewards_, context, request, response, std::move(f));
}

void RewardsService::Stub::experimental_async::ResetRewards(::grpc::ClientContext* context, const ::VeriBlock::EmptyRequest* request, ::VeriBlock::GeneralReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ResetRewards_, context, request, response, reactor);
}

void RewardsService::Stub::experimental_async::ResetRewards(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::GeneralReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ResetRewards_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::VeriBlock::GeneralReply>* RewardsService::Stub::AsyncResetRewardsRaw(::grpc::ClientContext* context, const ::VeriBlock::EmptyRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::VeriBlock::GeneralReply>::Create(channel_.get(), cq, rpcmethod_ResetRewards_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::VeriBlock::GeneralReply>* RewardsService::Stub::PrepareAsyncResetRewardsRaw(::grpc::ClientContext* context, const ::VeriBlock::EmptyRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::VeriBlock::GeneralReply>::Create(channel_.get(), cq, rpcmethod_ResetRewards_, context, request, false);
}

::grpc::Status RewardsService::Stub::GetCalculator(::grpc::ClientContext* context, const ::VeriBlock::EmptyRequest& request, ::VeriBlock::GetCalculatorReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetCalculator_, context, request, response);
}

void RewardsService::Stub::experimental_async::GetCalculator(::grpc::ClientContext* context, const ::VeriBlock::EmptyRequest* request, ::VeriBlock::GetCalculatorReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetCalculator_, context, request, response, std::move(f));
}

void RewardsService::Stub::experimental_async::GetCalculator(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::GetCalculatorReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetCalculator_, context, request, response, std::move(f));
}

void RewardsService::Stub::experimental_async::GetCalculator(::grpc::ClientContext* context, const ::VeriBlock::EmptyRequest* request, ::VeriBlock::GetCalculatorReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetCalculator_, context, request, response, reactor);
}

void RewardsService::Stub::experimental_async::GetCalculator(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::GetCalculatorReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetCalculator_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::VeriBlock::GetCalculatorReply>* RewardsService::Stub::AsyncGetCalculatorRaw(::grpc::ClientContext* context, const ::VeriBlock::EmptyRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::VeriBlock::GetCalculatorReply>::Create(channel_.get(), cq, rpcmethod_GetCalculator_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::VeriBlock::GetCalculatorReply>* RewardsService::Stub::PrepareAsyncGetCalculatorRaw(::grpc::ClientContext* context, const ::VeriBlock::EmptyRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::VeriBlock::GetCalculatorReply>::Create(channel_.get(), cq, rpcmethod_GetCalculator_, context, request, false);
}

::grpc::Status RewardsService::Stub::SetCalculator(::grpc::ClientContext* context, const ::VeriBlock::SetCalculatorRequest& request, ::VeriBlock::GeneralReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SetCalculator_, context, request, response);
}

void RewardsService::Stub::experimental_async::SetCalculator(::grpc::ClientContext* context, const ::VeriBlock::SetCalculatorRequest* request, ::VeriBlock::GeneralReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetCalculator_, context, request, response, std::move(f));
}

void RewardsService::Stub::experimental_async::SetCalculator(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::GeneralReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetCalculator_, context, request, response, std::move(f));
}

void RewardsService::Stub::experimental_async::SetCalculator(::grpc::ClientContext* context, const ::VeriBlock::SetCalculatorRequest* request, ::VeriBlock::GeneralReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SetCalculator_, context, request, response, reactor);
}

void RewardsService::Stub::experimental_async::SetCalculator(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::GeneralReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SetCalculator_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::VeriBlock::GeneralReply>* RewardsService::Stub::AsyncSetCalculatorRaw(::grpc::ClientContext* context, const ::VeriBlock::SetCalculatorRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::VeriBlock::GeneralReply>::Create(channel_.get(), cq, rpcmethod_SetCalculator_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::VeriBlock::GeneralReply>* RewardsService::Stub::PrepareAsyncSetCalculatorRaw(::grpc::ClientContext* context, const ::VeriBlock::SetCalculatorRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::VeriBlock::GeneralReply>::Create(channel_.get(), cq, rpcmethod_SetCalculator_, context, request, false);
}

::grpc::Status RewardsService::Stub::RewardsCalculateScore(::grpc::ClientContext* context, const ::VeriBlock::RewardsCalculateScoreRequest& request, ::VeriBlock::RewardsCalculateScoreReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_RewardsCalculateScore_, context, request, response);
}

void RewardsService::Stub::experimental_async::RewardsCalculateScore(::grpc::ClientContext* context, const ::VeriBlock::RewardsCalculateScoreRequest* request, ::VeriBlock::RewardsCalculateScoreReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_RewardsCalculateScore_, context, request, response, std::move(f));
}

void RewardsService::Stub::experimental_async::RewardsCalculateScore(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::RewardsCalculateScoreReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_RewardsCalculateScore_, context, request, response, std::move(f));
}

void RewardsService::Stub::experimental_async::RewardsCalculateScore(::grpc::ClientContext* context, const ::VeriBlock::RewardsCalculateScoreRequest* request, ::VeriBlock::RewardsCalculateScoreReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_RewardsCalculateScore_, context, request, response, reactor);
}

void RewardsService::Stub::experimental_async::RewardsCalculateScore(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::RewardsCalculateScoreReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_RewardsCalculateScore_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::VeriBlock::RewardsCalculateScoreReply>* RewardsService::Stub::AsyncRewardsCalculateScoreRaw(::grpc::ClientContext* context, const ::VeriBlock::RewardsCalculateScoreRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::VeriBlock::RewardsCalculateScoreReply>::Create(channel_.get(), cq, rpcmethod_RewardsCalculateScore_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::VeriBlock::RewardsCalculateScoreReply>* RewardsService::Stub::PrepareAsyncRewardsCalculateScoreRaw(::grpc::ClientContext* context, const ::VeriBlock::RewardsCalculateScoreRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::VeriBlock::RewardsCalculateScoreReply>::Create(channel_.get(), cq, rpcmethod_RewardsCalculateScore_, context, request, false);
}

::grpc::Status RewardsService::Stub::RewardsCalculateOutputs(::grpc::ClientContext* context, const ::VeriBlock::RewardsCalculateOutputsRequest& request, ::VeriBlock::RewardsCalculateOutputsReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_RewardsCalculateOutputs_, context, request, response);
}

void RewardsService::Stub::experimental_async::RewardsCalculateOutputs(::grpc::ClientContext* context, const ::VeriBlock::RewardsCalculateOutputsRequest* request, ::VeriBlock::RewardsCalculateOutputsReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_RewardsCalculateOutputs_, context, request, response, std::move(f));
}

void RewardsService::Stub::experimental_async::RewardsCalculateOutputs(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::RewardsCalculateOutputsReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_RewardsCalculateOutputs_, context, request, response, std::move(f));
}

void RewardsService::Stub::experimental_async::RewardsCalculateOutputs(::grpc::ClientContext* context, const ::VeriBlock::RewardsCalculateOutputsRequest* request, ::VeriBlock::RewardsCalculateOutputsReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_RewardsCalculateOutputs_, context, request, response, reactor);
}

void RewardsService::Stub::experimental_async::RewardsCalculateOutputs(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::RewardsCalculateOutputsReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_RewardsCalculateOutputs_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::VeriBlock::RewardsCalculateOutputsReply>* RewardsService::Stub::AsyncRewardsCalculateOutputsRaw(::grpc::ClientContext* context, const ::VeriBlock::RewardsCalculateOutputsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::VeriBlock::RewardsCalculateOutputsReply>::Create(channel_.get(), cq, rpcmethod_RewardsCalculateOutputs_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::VeriBlock::RewardsCalculateOutputsReply>* RewardsService::Stub::PrepareAsyncRewardsCalculateOutputsRaw(::grpc::ClientContext* context, const ::VeriBlock::RewardsCalculateOutputsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::VeriBlock::RewardsCalculateOutputsReply>::Create(channel_.get(), cq, rpcmethod_RewardsCalculateOutputs_, context, request, false);
}

::grpc::Status RewardsService::Stub::RewardsCalculatePopDifficulty(::grpc::ClientContext* context, const ::VeriBlock::RewardsCalculatePopDifficultyRequest& request, ::VeriBlock::RewardsCalculateScoreReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_RewardsCalculatePopDifficulty_, context, request, response);
}

void RewardsService::Stub::experimental_async::RewardsCalculatePopDifficulty(::grpc::ClientContext* context, const ::VeriBlock::RewardsCalculatePopDifficultyRequest* request, ::VeriBlock::RewardsCalculateScoreReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_RewardsCalculatePopDifficulty_, context, request, response, std::move(f));
}

void RewardsService::Stub::experimental_async::RewardsCalculatePopDifficulty(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::RewardsCalculateScoreReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_RewardsCalculatePopDifficulty_, context, request, response, std::move(f));
}

void RewardsService::Stub::experimental_async::RewardsCalculatePopDifficulty(::grpc::ClientContext* context, const ::VeriBlock::RewardsCalculatePopDifficultyRequest* request, ::VeriBlock::RewardsCalculateScoreReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_RewardsCalculatePopDifficulty_, context, request, response, reactor);
}

void RewardsService::Stub::experimental_async::RewardsCalculatePopDifficulty(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::RewardsCalculateScoreReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_RewardsCalculatePopDifficulty_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::VeriBlock::RewardsCalculateScoreReply>* RewardsService::Stub::AsyncRewardsCalculatePopDifficultyRaw(::grpc::ClientContext* context, const ::VeriBlock::RewardsCalculatePopDifficultyRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::VeriBlock::RewardsCalculateScoreReply>::Create(channel_.get(), cq, rpcmethod_RewardsCalculatePopDifficulty_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::VeriBlock::RewardsCalculateScoreReply>* RewardsService::Stub::PrepareAsyncRewardsCalculatePopDifficultyRaw(::grpc::ClientContext* context, const ::VeriBlock::RewardsCalculatePopDifficultyRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::VeriBlock::RewardsCalculateScoreReply>::Create(channel_.get(), cq, rpcmethod_RewardsCalculatePopDifficulty_, context, request, false);
}

RewardsService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RewardsService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RewardsService::Service, ::VeriBlock::EmptyRequest, ::VeriBlock::GeneralReply>(
          std::mem_fn(&RewardsService::Service::ResetRewards), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RewardsService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RewardsService::Service, ::VeriBlock::EmptyRequest, ::VeriBlock::GetCalculatorReply>(
          std::mem_fn(&RewardsService::Service::GetCalculator), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RewardsService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RewardsService::Service, ::VeriBlock::SetCalculatorRequest, ::VeriBlock::GeneralReply>(
          std::mem_fn(&RewardsService::Service::SetCalculator), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RewardsService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RewardsService::Service, ::VeriBlock::RewardsCalculateScoreRequest, ::VeriBlock::RewardsCalculateScoreReply>(
          std::mem_fn(&RewardsService::Service::RewardsCalculateScore), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RewardsService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RewardsService::Service, ::VeriBlock::RewardsCalculateOutputsRequest, ::VeriBlock::RewardsCalculateOutputsReply>(
          std::mem_fn(&RewardsService::Service::RewardsCalculateOutputs), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RewardsService_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RewardsService::Service, ::VeriBlock::RewardsCalculatePopDifficultyRequest, ::VeriBlock::RewardsCalculateScoreReply>(
          std::mem_fn(&RewardsService::Service::RewardsCalculatePopDifficulty), this)));
}

RewardsService::Service::~Service() {
}

::grpc::Status RewardsService::Service::ResetRewards(::grpc::ServerContext* context, const ::VeriBlock::EmptyRequest* request, ::VeriBlock::GeneralReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RewardsService::Service::GetCalculator(::grpc::ServerContext* context, const ::VeriBlock::EmptyRequest* request, ::VeriBlock::GetCalculatorReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RewardsService::Service::SetCalculator(::grpc::ServerContext* context, const ::VeriBlock::SetCalculatorRequest* request, ::VeriBlock::GeneralReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RewardsService::Service::RewardsCalculateScore(::grpc::ServerContext* context, const ::VeriBlock::RewardsCalculateScoreRequest* request, ::VeriBlock::RewardsCalculateScoreReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RewardsService::Service::RewardsCalculateOutputs(::grpc::ServerContext* context, const ::VeriBlock::RewardsCalculateOutputsRequest* request, ::VeriBlock::RewardsCalculateOutputsReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RewardsService::Service::RewardsCalculatePopDifficulty(::grpc::ServerContext* context, const ::VeriBlock::RewardsCalculatePopDifficultyRequest* request, ::VeriBlock::RewardsCalculateScoreReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* DeserializeService_method_names[] = {
  "/VeriBlock.DeserializeService/ParseAltPublication",
  "/VeriBlock.DeserializeService/ParsePublicationData",
  "/VeriBlock.DeserializeService/ParseBitcoinTransaction",
  "/VeriBlock.DeserializeService/ParseVeriBlockBlock",
  "/VeriBlock.DeserializeService/ParseVeriBlockTransaction",
  "/VeriBlock.DeserializeService/ParseVeriBlockPublication",
  "/VeriBlock.DeserializeService/ParseVeriBlockPopTx",
  "/VeriBlock.DeserializeService/ParseOutput",
  "/VeriBlock.DeserializeService/ParseAddress",
  "/VeriBlock.DeserializeService/ParseBitcoinBlock",
  "/VeriBlock.DeserializeService/ParseVeriBlockMerklePath",
  "/VeriBlock.DeserializeService/ParseMerklePath",
};

std::unique_ptr< DeserializeService::Stub> DeserializeService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< DeserializeService::Stub> stub(new DeserializeService::Stub(channel));
  return stub;
}

DeserializeService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_ParseAltPublication_(DeserializeService_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ParsePublicationData_(DeserializeService_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ParseBitcoinTransaction_(DeserializeService_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ParseVeriBlockBlock_(DeserializeService_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ParseVeriBlockTransaction_(DeserializeService_method_names[4], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ParseVeriBlockPublication_(DeserializeService_method_names[5], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ParseVeriBlockPopTx_(DeserializeService_method_names[6], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ParseOutput_(DeserializeService_method_names[7], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ParseAddress_(DeserializeService_method_names[8], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ParseBitcoinBlock_(DeserializeService_method_names[9], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ParseVeriBlockMerklePath_(DeserializeService_method_names[10], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ParseMerklePath_(DeserializeService_method_names[11], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status DeserializeService::Stub::ParseAltPublication(::grpc::ClientContext* context, const ::VeriBlock::BytesArrayRequest& request, ::VeriBlock::AltPublicationReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ParseAltPublication_, context, request, response);
}

void DeserializeService::Stub::experimental_async::ParseAltPublication(::grpc::ClientContext* context, const ::VeriBlock::BytesArrayRequest* request, ::VeriBlock::AltPublicationReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ParseAltPublication_, context, request, response, std::move(f));
}

void DeserializeService::Stub::experimental_async::ParseAltPublication(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::AltPublicationReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ParseAltPublication_, context, request, response, std::move(f));
}

void DeserializeService::Stub::experimental_async::ParseAltPublication(::grpc::ClientContext* context, const ::VeriBlock::BytesArrayRequest* request, ::VeriBlock::AltPublicationReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ParseAltPublication_, context, request, response, reactor);
}

void DeserializeService::Stub::experimental_async::ParseAltPublication(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::AltPublicationReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ParseAltPublication_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::VeriBlock::AltPublicationReply>* DeserializeService::Stub::AsyncParseAltPublicationRaw(::grpc::ClientContext* context, const ::VeriBlock::BytesArrayRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::VeriBlock::AltPublicationReply>::Create(channel_.get(), cq, rpcmethod_ParseAltPublication_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::VeriBlock::AltPublicationReply>* DeserializeService::Stub::PrepareAsyncParseAltPublicationRaw(::grpc::ClientContext* context, const ::VeriBlock::BytesArrayRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::VeriBlock::AltPublicationReply>::Create(channel_.get(), cq, rpcmethod_ParseAltPublication_, context, request, false);
}

::grpc::Status DeserializeService::Stub::ParsePublicationData(::grpc::ClientContext* context, const ::VeriBlock::BytesArrayRequest& request, ::VeriBlock::PublicationDataReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ParsePublicationData_, context, request, response);
}

void DeserializeService::Stub::experimental_async::ParsePublicationData(::grpc::ClientContext* context, const ::VeriBlock::BytesArrayRequest* request, ::VeriBlock::PublicationDataReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ParsePublicationData_, context, request, response, std::move(f));
}

void DeserializeService::Stub::experimental_async::ParsePublicationData(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::PublicationDataReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ParsePublicationData_, context, request, response, std::move(f));
}

void DeserializeService::Stub::experimental_async::ParsePublicationData(::grpc::ClientContext* context, const ::VeriBlock::BytesArrayRequest* request, ::VeriBlock::PublicationDataReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ParsePublicationData_, context, request, response, reactor);
}

void DeserializeService::Stub::experimental_async::ParsePublicationData(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::PublicationDataReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ParsePublicationData_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::VeriBlock::PublicationDataReply>* DeserializeService::Stub::AsyncParsePublicationDataRaw(::grpc::ClientContext* context, const ::VeriBlock::BytesArrayRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::VeriBlock::PublicationDataReply>::Create(channel_.get(), cq, rpcmethod_ParsePublicationData_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::VeriBlock::PublicationDataReply>* DeserializeService::Stub::PrepareAsyncParsePublicationDataRaw(::grpc::ClientContext* context, const ::VeriBlock::BytesArrayRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::VeriBlock::PublicationDataReply>::Create(channel_.get(), cq, rpcmethod_ParsePublicationData_, context, request, false);
}

::grpc::Status DeserializeService::Stub::ParseBitcoinTransaction(::grpc::ClientContext* context, const ::VeriBlock::BytesArrayRequest& request, ::VeriBlock::BitcoinTransactionReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ParseBitcoinTransaction_, context, request, response);
}

void DeserializeService::Stub::experimental_async::ParseBitcoinTransaction(::grpc::ClientContext* context, const ::VeriBlock::BytesArrayRequest* request, ::VeriBlock::BitcoinTransactionReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ParseBitcoinTransaction_, context, request, response, std::move(f));
}

void DeserializeService::Stub::experimental_async::ParseBitcoinTransaction(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::BitcoinTransactionReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ParseBitcoinTransaction_, context, request, response, std::move(f));
}

void DeserializeService::Stub::experimental_async::ParseBitcoinTransaction(::grpc::ClientContext* context, const ::VeriBlock::BytesArrayRequest* request, ::VeriBlock::BitcoinTransactionReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ParseBitcoinTransaction_, context, request, response, reactor);
}

void DeserializeService::Stub::experimental_async::ParseBitcoinTransaction(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::BitcoinTransactionReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ParseBitcoinTransaction_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::VeriBlock::BitcoinTransactionReply>* DeserializeService::Stub::AsyncParseBitcoinTransactionRaw(::grpc::ClientContext* context, const ::VeriBlock::BytesArrayRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::VeriBlock::BitcoinTransactionReply>::Create(channel_.get(), cq, rpcmethod_ParseBitcoinTransaction_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::VeriBlock::BitcoinTransactionReply>* DeserializeService::Stub::PrepareAsyncParseBitcoinTransactionRaw(::grpc::ClientContext* context, const ::VeriBlock::BytesArrayRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::VeriBlock::BitcoinTransactionReply>::Create(channel_.get(), cq, rpcmethod_ParseBitcoinTransaction_, context, request, false);
}

::grpc::Status DeserializeService::Stub::ParseVeriBlockBlock(::grpc::ClientContext* context, const ::VeriBlock::BytesArrayRequest& request, ::VeriBlock::VeriBlockBlockReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ParseVeriBlockBlock_, context, request, response);
}

void DeserializeService::Stub::experimental_async::ParseVeriBlockBlock(::grpc::ClientContext* context, const ::VeriBlock::BytesArrayRequest* request, ::VeriBlock::VeriBlockBlockReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ParseVeriBlockBlock_, context, request, response, std::move(f));
}

void DeserializeService::Stub::experimental_async::ParseVeriBlockBlock(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::VeriBlockBlockReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ParseVeriBlockBlock_, context, request, response, std::move(f));
}

void DeserializeService::Stub::experimental_async::ParseVeriBlockBlock(::grpc::ClientContext* context, const ::VeriBlock::BytesArrayRequest* request, ::VeriBlock::VeriBlockBlockReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ParseVeriBlockBlock_, context, request, response, reactor);
}

void DeserializeService::Stub::experimental_async::ParseVeriBlockBlock(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::VeriBlockBlockReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ParseVeriBlockBlock_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::VeriBlock::VeriBlockBlockReply>* DeserializeService::Stub::AsyncParseVeriBlockBlockRaw(::grpc::ClientContext* context, const ::VeriBlock::BytesArrayRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::VeriBlock::VeriBlockBlockReply>::Create(channel_.get(), cq, rpcmethod_ParseVeriBlockBlock_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::VeriBlock::VeriBlockBlockReply>* DeserializeService::Stub::PrepareAsyncParseVeriBlockBlockRaw(::grpc::ClientContext* context, const ::VeriBlock::BytesArrayRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::VeriBlock::VeriBlockBlockReply>::Create(channel_.get(), cq, rpcmethod_ParseVeriBlockBlock_, context, request, false);
}

::grpc::Status DeserializeService::Stub::ParseVeriBlockTransaction(::grpc::ClientContext* context, const ::VeriBlock::BytesArrayRequest& request, ::VeriBlock::VeriBlockTransactionReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ParseVeriBlockTransaction_, context, request, response);
}

void DeserializeService::Stub::experimental_async::ParseVeriBlockTransaction(::grpc::ClientContext* context, const ::VeriBlock::BytesArrayRequest* request, ::VeriBlock::VeriBlockTransactionReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ParseVeriBlockTransaction_, context, request, response, std::move(f));
}

void DeserializeService::Stub::experimental_async::ParseVeriBlockTransaction(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::VeriBlockTransactionReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ParseVeriBlockTransaction_, context, request, response, std::move(f));
}

void DeserializeService::Stub::experimental_async::ParseVeriBlockTransaction(::grpc::ClientContext* context, const ::VeriBlock::BytesArrayRequest* request, ::VeriBlock::VeriBlockTransactionReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ParseVeriBlockTransaction_, context, request, response, reactor);
}

void DeserializeService::Stub::experimental_async::ParseVeriBlockTransaction(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::VeriBlockTransactionReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ParseVeriBlockTransaction_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::VeriBlock::VeriBlockTransactionReply>* DeserializeService::Stub::AsyncParseVeriBlockTransactionRaw(::grpc::ClientContext* context, const ::VeriBlock::BytesArrayRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::VeriBlock::VeriBlockTransactionReply>::Create(channel_.get(), cq, rpcmethod_ParseVeriBlockTransaction_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::VeriBlock::VeriBlockTransactionReply>* DeserializeService::Stub::PrepareAsyncParseVeriBlockTransactionRaw(::grpc::ClientContext* context, const ::VeriBlock::BytesArrayRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::VeriBlock::VeriBlockTransactionReply>::Create(channel_.get(), cq, rpcmethod_ParseVeriBlockTransaction_, context, request, false);
}

::grpc::Status DeserializeService::Stub::ParseVeriBlockPublication(::grpc::ClientContext* context, const ::VeriBlock::BytesArrayRequest& request, ::VeriBlock::VeriBlockPublicationReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ParseVeriBlockPublication_, context, request, response);
}

void DeserializeService::Stub::experimental_async::ParseVeriBlockPublication(::grpc::ClientContext* context, const ::VeriBlock::BytesArrayRequest* request, ::VeriBlock::VeriBlockPublicationReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ParseVeriBlockPublication_, context, request, response, std::move(f));
}

void DeserializeService::Stub::experimental_async::ParseVeriBlockPublication(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::VeriBlockPublicationReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ParseVeriBlockPublication_, context, request, response, std::move(f));
}

void DeserializeService::Stub::experimental_async::ParseVeriBlockPublication(::grpc::ClientContext* context, const ::VeriBlock::BytesArrayRequest* request, ::VeriBlock::VeriBlockPublicationReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ParseVeriBlockPublication_, context, request, response, reactor);
}

void DeserializeService::Stub::experimental_async::ParseVeriBlockPublication(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::VeriBlockPublicationReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ParseVeriBlockPublication_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::VeriBlock::VeriBlockPublicationReply>* DeserializeService::Stub::AsyncParseVeriBlockPublicationRaw(::grpc::ClientContext* context, const ::VeriBlock::BytesArrayRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::VeriBlock::VeriBlockPublicationReply>::Create(channel_.get(), cq, rpcmethod_ParseVeriBlockPublication_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::VeriBlock::VeriBlockPublicationReply>* DeserializeService::Stub::PrepareAsyncParseVeriBlockPublicationRaw(::grpc::ClientContext* context, const ::VeriBlock::BytesArrayRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::VeriBlock::VeriBlockPublicationReply>::Create(channel_.get(), cq, rpcmethod_ParseVeriBlockPublication_, context, request, false);
}

::grpc::Status DeserializeService::Stub::ParseVeriBlockPopTx(::grpc::ClientContext* context, const ::VeriBlock::BytesArrayRequest& request, ::VeriBlock::VeriBlockPoPTransactionReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ParseVeriBlockPopTx_, context, request, response);
}

void DeserializeService::Stub::experimental_async::ParseVeriBlockPopTx(::grpc::ClientContext* context, const ::VeriBlock::BytesArrayRequest* request, ::VeriBlock::VeriBlockPoPTransactionReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ParseVeriBlockPopTx_, context, request, response, std::move(f));
}

void DeserializeService::Stub::experimental_async::ParseVeriBlockPopTx(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::VeriBlockPoPTransactionReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ParseVeriBlockPopTx_, context, request, response, std::move(f));
}

void DeserializeService::Stub::experimental_async::ParseVeriBlockPopTx(::grpc::ClientContext* context, const ::VeriBlock::BytesArrayRequest* request, ::VeriBlock::VeriBlockPoPTransactionReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ParseVeriBlockPopTx_, context, request, response, reactor);
}

void DeserializeService::Stub::experimental_async::ParseVeriBlockPopTx(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::VeriBlockPoPTransactionReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ParseVeriBlockPopTx_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::VeriBlock::VeriBlockPoPTransactionReply>* DeserializeService::Stub::AsyncParseVeriBlockPopTxRaw(::grpc::ClientContext* context, const ::VeriBlock::BytesArrayRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::VeriBlock::VeriBlockPoPTransactionReply>::Create(channel_.get(), cq, rpcmethod_ParseVeriBlockPopTx_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::VeriBlock::VeriBlockPoPTransactionReply>* DeserializeService::Stub::PrepareAsyncParseVeriBlockPopTxRaw(::grpc::ClientContext* context, const ::VeriBlock::BytesArrayRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::VeriBlock::VeriBlockPoPTransactionReply>::Create(channel_.get(), cq, rpcmethod_ParseVeriBlockPopTx_, context, request, false);
}

::grpc::Status DeserializeService::Stub::ParseOutput(::grpc::ClientContext* context, const ::VeriBlock::BytesArrayRequest& request, ::VeriBlock::OutputReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ParseOutput_, context, request, response);
}

void DeserializeService::Stub::experimental_async::ParseOutput(::grpc::ClientContext* context, const ::VeriBlock::BytesArrayRequest* request, ::VeriBlock::OutputReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ParseOutput_, context, request, response, std::move(f));
}

void DeserializeService::Stub::experimental_async::ParseOutput(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::OutputReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ParseOutput_, context, request, response, std::move(f));
}

void DeserializeService::Stub::experimental_async::ParseOutput(::grpc::ClientContext* context, const ::VeriBlock::BytesArrayRequest* request, ::VeriBlock::OutputReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ParseOutput_, context, request, response, reactor);
}

void DeserializeService::Stub::experimental_async::ParseOutput(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::OutputReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ParseOutput_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::VeriBlock::OutputReply>* DeserializeService::Stub::AsyncParseOutputRaw(::grpc::ClientContext* context, const ::VeriBlock::BytesArrayRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::VeriBlock::OutputReply>::Create(channel_.get(), cq, rpcmethod_ParseOutput_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::VeriBlock::OutputReply>* DeserializeService::Stub::PrepareAsyncParseOutputRaw(::grpc::ClientContext* context, const ::VeriBlock::BytesArrayRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::VeriBlock::OutputReply>::Create(channel_.get(), cq, rpcmethod_ParseOutput_, context, request, false);
}

::grpc::Status DeserializeService::Stub::ParseAddress(::grpc::ClientContext* context, const ::VeriBlock::BytesArrayRequest& request, ::VeriBlock::AddressReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ParseAddress_, context, request, response);
}

void DeserializeService::Stub::experimental_async::ParseAddress(::grpc::ClientContext* context, const ::VeriBlock::BytesArrayRequest* request, ::VeriBlock::AddressReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ParseAddress_, context, request, response, std::move(f));
}

void DeserializeService::Stub::experimental_async::ParseAddress(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::AddressReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ParseAddress_, context, request, response, std::move(f));
}

void DeserializeService::Stub::experimental_async::ParseAddress(::grpc::ClientContext* context, const ::VeriBlock::BytesArrayRequest* request, ::VeriBlock::AddressReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ParseAddress_, context, request, response, reactor);
}

void DeserializeService::Stub::experimental_async::ParseAddress(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::AddressReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ParseAddress_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::VeriBlock::AddressReply>* DeserializeService::Stub::AsyncParseAddressRaw(::grpc::ClientContext* context, const ::VeriBlock::BytesArrayRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::VeriBlock::AddressReply>::Create(channel_.get(), cq, rpcmethod_ParseAddress_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::VeriBlock::AddressReply>* DeserializeService::Stub::PrepareAsyncParseAddressRaw(::grpc::ClientContext* context, const ::VeriBlock::BytesArrayRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::VeriBlock::AddressReply>::Create(channel_.get(), cq, rpcmethod_ParseAddress_, context, request, false);
}

::grpc::Status DeserializeService::Stub::ParseBitcoinBlock(::grpc::ClientContext* context, const ::VeriBlock::BytesArrayRequest& request, ::VeriBlock::BitcoinBlockReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ParseBitcoinBlock_, context, request, response);
}

void DeserializeService::Stub::experimental_async::ParseBitcoinBlock(::grpc::ClientContext* context, const ::VeriBlock::BytesArrayRequest* request, ::VeriBlock::BitcoinBlockReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ParseBitcoinBlock_, context, request, response, std::move(f));
}

void DeserializeService::Stub::experimental_async::ParseBitcoinBlock(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::BitcoinBlockReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ParseBitcoinBlock_, context, request, response, std::move(f));
}

void DeserializeService::Stub::experimental_async::ParseBitcoinBlock(::grpc::ClientContext* context, const ::VeriBlock::BytesArrayRequest* request, ::VeriBlock::BitcoinBlockReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ParseBitcoinBlock_, context, request, response, reactor);
}

void DeserializeService::Stub::experimental_async::ParseBitcoinBlock(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::BitcoinBlockReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ParseBitcoinBlock_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::VeriBlock::BitcoinBlockReply>* DeserializeService::Stub::AsyncParseBitcoinBlockRaw(::grpc::ClientContext* context, const ::VeriBlock::BytesArrayRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::VeriBlock::BitcoinBlockReply>::Create(channel_.get(), cq, rpcmethod_ParseBitcoinBlock_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::VeriBlock::BitcoinBlockReply>* DeserializeService::Stub::PrepareAsyncParseBitcoinBlockRaw(::grpc::ClientContext* context, const ::VeriBlock::BytesArrayRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::VeriBlock::BitcoinBlockReply>::Create(channel_.get(), cq, rpcmethod_ParseBitcoinBlock_, context, request, false);
}

::grpc::Status DeserializeService::Stub::ParseVeriBlockMerklePath(::grpc::ClientContext* context, const ::VeriBlock::BytesArrayRequest& request, ::VeriBlock::VeriBlockMerklePathReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ParseVeriBlockMerklePath_, context, request, response);
}

void DeserializeService::Stub::experimental_async::ParseVeriBlockMerklePath(::grpc::ClientContext* context, const ::VeriBlock::BytesArrayRequest* request, ::VeriBlock::VeriBlockMerklePathReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ParseVeriBlockMerklePath_, context, request, response, std::move(f));
}

void DeserializeService::Stub::experimental_async::ParseVeriBlockMerklePath(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::VeriBlockMerklePathReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ParseVeriBlockMerklePath_, context, request, response, std::move(f));
}

void DeserializeService::Stub::experimental_async::ParseVeriBlockMerklePath(::grpc::ClientContext* context, const ::VeriBlock::BytesArrayRequest* request, ::VeriBlock::VeriBlockMerklePathReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ParseVeriBlockMerklePath_, context, request, response, reactor);
}

void DeserializeService::Stub::experimental_async::ParseVeriBlockMerklePath(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::VeriBlockMerklePathReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ParseVeriBlockMerklePath_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::VeriBlock::VeriBlockMerklePathReply>* DeserializeService::Stub::AsyncParseVeriBlockMerklePathRaw(::grpc::ClientContext* context, const ::VeriBlock::BytesArrayRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::VeriBlock::VeriBlockMerklePathReply>::Create(channel_.get(), cq, rpcmethod_ParseVeriBlockMerklePath_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::VeriBlock::VeriBlockMerklePathReply>* DeserializeService::Stub::PrepareAsyncParseVeriBlockMerklePathRaw(::grpc::ClientContext* context, const ::VeriBlock::BytesArrayRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::VeriBlock::VeriBlockMerklePathReply>::Create(channel_.get(), cq, rpcmethod_ParseVeriBlockMerklePath_, context, request, false);
}

::grpc::Status DeserializeService::Stub::ParseMerklePath(::grpc::ClientContext* context, const ::VeriBlock::MerklePathRequest& request, ::VeriBlock::MerklePathReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ParseMerklePath_, context, request, response);
}

void DeserializeService::Stub::experimental_async::ParseMerklePath(::grpc::ClientContext* context, const ::VeriBlock::MerklePathRequest* request, ::VeriBlock::MerklePathReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ParseMerklePath_, context, request, response, std::move(f));
}

void DeserializeService::Stub::experimental_async::ParseMerklePath(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::MerklePathReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ParseMerklePath_, context, request, response, std::move(f));
}

void DeserializeService::Stub::experimental_async::ParseMerklePath(::grpc::ClientContext* context, const ::VeriBlock::MerklePathRequest* request, ::VeriBlock::MerklePathReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ParseMerklePath_, context, request, response, reactor);
}

void DeserializeService::Stub::experimental_async::ParseMerklePath(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::MerklePathReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ParseMerklePath_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::VeriBlock::MerklePathReply>* DeserializeService::Stub::AsyncParseMerklePathRaw(::grpc::ClientContext* context, const ::VeriBlock::MerklePathRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::VeriBlock::MerklePathReply>::Create(channel_.get(), cq, rpcmethod_ParseMerklePath_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::VeriBlock::MerklePathReply>* DeserializeService::Stub::PrepareAsyncParseMerklePathRaw(::grpc::ClientContext* context, const ::VeriBlock::MerklePathRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::VeriBlock::MerklePathReply>::Create(channel_.get(), cq, rpcmethod_ParseMerklePath_, context, request, false);
}

DeserializeService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DeserializeService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DeserializeService::Service, ::VeriBlock::BytesArrayRequest, ::VeriBlock::AltPublicationReply>(
          std::mem_fn(&DeserializeService::Service::ParseAltPublication), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DeserializeService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DeserializeService::Service, ::VeriBlock::BytesArrayRequest, ::VeriBlock::PublicationDataReply>(
          std::mem_fn(&DeserializeService::Service::ParsePublicationData), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DeserializeService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DeserializeService::Service, ::VeriBlock::BytesArrayRequest, ::VeriBlock::BitcoinTransactionReply>(
          std::mem_fn(&DeserializeService::Service::ParseBitcoinTransaction), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DeserializeService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DeserializeService::Service, ::VeriBlock::BytesArrayRequest, ::VeriBlock::VeriBlockBlockReply>(
          std::mem_fn(&DeserializeService::Service::ParseVeriBlockBlock), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DeserializeService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DeserializeService::Service, ::VeriBlock::BytesArrayRequest, ::VeriBlock::VeriBlockTransactionReply>(
          std::mem_fn(&DeserializeService::Service::ParseVeriBlockTransaction), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DeserializeService_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DeserializeService::Service, ::VeriBlock::BytesArrayRequest, ::VeriBlock::VeriBlockPublicationReply>(
          std::mem_fn(&DeserializeService::Service::ParseVeriBlockPublication), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DeserializeService_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DeserializeService::Service, ::VeriBlock::BytesArrayRequest, ::VeriBlock::VeriBlockPoPTransactionReply>(
          std::mem_fn(&DeserializeService::Service::ParseVeriBlockPopTx), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DeserializeService_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DeserializeService::Service, ::VeriBlock::BytesArrayRequest, ::VeriBlock::OutputReply>(
          std::mem_fn(&DeserializeService::Service::ParseOutput), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DeserializeService_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DeserializeService::Service, ::VeriBlock::BytesArrayRequest, ::VeriBlock::AddressReply>(
          std::mem_fn(&DeserializeService::Service::ParseAddress), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DeserializeService_method_names[9],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DeserializeService::Service, ::VeriBlock::BytesArrayRequest, ::VeriBlock::BitcoinBlockReply>(
          std::mem_fn(&DeserializeService::Service::ParseBitcoinBlock), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DeserializeService_method_names[10],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DeserializeService::Service, ::VeriBlock::BytesArrayRequest, ::VeriBlock::VeriBlockMerklePathReply>(
          std::mem_fn(&DeserializeService::Service::ParseVeriBlockMerklePath), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DeserializeService_method_names[11],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DeserializeService::Service, ::VeriBlock::MerklePathRequest, ::VeriBlock::MerklePathReply>(
          std::mem_fn(&DeserializeService::Service::ParseMerklePath), this)));
}

DeserializeService::Service::~Service() {
}

::grpc::Status DeserializeService::Service::ParseAltPublication(::grpc::ServerContext* context, const ::VeriBlock::BytesArrayRequest* request, ::VeriBlock::AltPublicationReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DeserializeService::Service::ParsePublicationData(::grpc::ServerContext* context, const ::VeriBlock::BytesArrayRequest* request, ::VeriBlock::PublicationDataReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DeserializeService::Service::ParseBitcoinTransaction(::grpc::ServerContext* context, const ::VeriBlock::BytesArrayRequest* request, ::VeriBlock::BitcoinTransactionReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DeserializeService::Service::ParseVeriBlockBlock(::grpc::ServerContext* context, const ::VeriBlock::BytesArrayRequest* request, ::VeriBlock::VeriBlockBlockReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DeserializeService::Service::ParseVeriBlockTransaction(::grpc::ServerContext* context, const ::VeriBlock::BytesArrayRequest* request, ::VeriBlock::VeriBlockTransactionReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DeserializeService::Service::ParseVeriBlockPublication(::grpc::ServerContext* context, const ::VeriBlock::BytesArrayRequest* request, ::VeriBlock::VeriBlockPublicationReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DeserializeService::Service::ParseVeriBlockPopTx(::grpc::ServerContext* context, const ::VeriBlock::BytesArrayRequest* request, ::VeriBlock::VeriBlockPoPTransactionReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DeserializeService::Service::ParseOutput(::grpc::ServerContext* context, const ::VeriBlock::BytesArrayRequest* request, ::VeriBlock::OutputReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DeserializeService::Service::ParseAddress(::grpc::ServerContext* context, const ::VeriBlock::BytesArrayRequest* request, ::VeriBlock::AddressReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DeserializeService::Service::ParseBitcoinBlock(::grpc::ServerContext* context, const ::VeriBlock::BytesArrayRequest* request, ::VeriBlock::BitcoinBlockReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DeserializeService::Service::ParseVeriBlockMerklePath(::grpc::ServerContext* context, const ::VeriBlock::BytesArrayRequest* request, ::VeriBlock::VeriBlockMerklePathReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DeserializeService::Service::ParseMerklePath(::grpc::ServerContext* context, const ::VeriBlock::MerklePathRequest* request, ::VeriBlock::MerklePathReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* SerializeService_method_names[] = {
  "/VeriBlock.SerializeService/SerializeAltPublication",
  "/VeriBlock.SerializeService/SerializePublicationData",
  "/VeriBlock.SerializeService/SerializeBitcoinTransaction",
  "/VeriBlock.SerializeService/SerializeVeriBlockBlock",
  "/VeriBlock.SerializeService/SerializeVeriBlockTransaction",
  "/VeriBlock.SerializeService/SerializeVeriBlockPublication",
  "/VeriBlock.SerializeService/SerializeVeriBlockPopTx",
  "/VeriBlock.SerializeService/SerializeOutput",
  "/VeriBlock.SerializeService/SerializeAddress",
  "/VeriBlock.SerializeService/SerializeBitcoinBlock",
  "/VeriBlock.SerializeService/SerializeVeriBlockMerklePath",
  "/VeriBlock.SerializeService/SerializeMerklePath",
};

std::unique_ptr< SerializeService::Stub> SerializeService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< SerializeService::Stub> stub(new SerializeService::Stub(channel));
  return stub;
}

SerializeService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_SerializeAltPublication_(SerializeService_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SerializePublicationData_(SerializeService_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SerializeBitcoinTransaction_(SerializeService_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SerializeVeriBlockBlock_(SerializeService_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SerializeVeriBlockTransaction_(SerializeService_method_names[4], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SerializeVeriBlockPublication_(SerializeService_method_names[5], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SerializeVeriBlockPopTx_(SerializeService_method_names[6], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SerializeOutput_(SerializeService_method_names[7], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SerializeAddress_(SerializeService_method_names[8], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SerializeBitcoinBlock_(SerializeService_method_names[9], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SerializeVeriBlockMerklePath_(SerializeService_method_names[10], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SerializeMerklePath_(SerializeService_method_names[11], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status SerializeService::Stub::SerializeAltPublication(::grpc::ClientContext* context, const ::VeriBlock::AltPublication& request, ::VeriBlock::BytesArrayReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SerializeAltPublication_, context, request, response);
}

void SerializeService::Stub::experimental_async::SerializeAltPublication(::grpc::ClientContext* context, const ::VeriBlock::AltPublication* request, ::VeriBlock::BytesArrayReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SerializeAltPublication_, context, request, response, std::move(f));
}

void SerializeService::Stub::experimental_async::SerializeAltPublication(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::BytesArrayReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SerializeAltPublication_, context, request, response, std::move(f));
}

void SerializeService::Stub::experimental_async::SerializeAltPublication(::grpc::ClientContext* context, const ::VeriBlock::AltPublication* request, ::VeriBlock::BytesArrayReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SerializeAltPublication_, context, request, response, reactor);
}

void SerializeService::Stub::experimental_async::SerializeAltPublication(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::BytesArrayReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SerializeAltPublication_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::VeriBlock::BytesArrayReply>* SerializeService::Stub::AsyncSerializeAltPublicationRaw(::grpc::ClientContext* context, const ::VeriBlock::AltPublication& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::VeriBlock::BytesArrayReply>::Create(channel_.get(), cq, rpcmethod_SerializeAltPublication_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::VeriBlock::BytesArrayReply>* SerializeService::Stub::PrepareAsyncSerializeAltPublicationRaw(::grpc::ClientContext* context, const ::VeriBlock::AltPublication& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::VeriBlock::BytesArrayReply>::Create(channel_.get(), cq, rpcmethod_SerializeAltPublication_, context, request, false);
}

::grpc::Status SerializeService::Stub::SerializePublicationData(::grpc::ClientContext* context, const ::VeriBlock::PublicationData& request, ::VeriBlock::BytesArrayReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SerializePublicationData_, context, request, response);
}

void SerializeService::Stub::experimental_async::SerializePublicationData(::grpc::ClientContext* context, const ::VeriBlock::PublicationData* request, ::VeriBlock::BytesArrayReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SerializePublicationData_, context, request, response, std::move(f));
}

void SerializeService::Stub::experimental_async::SerializePublicationData(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::BytesArrayReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SerializePublicationData_, context, request, response, std::move(f));
}

void SerializeService::Stub::experimental_async::SerializePublicationData(::grpc::ClientContext* context, const ::VeriBlock::PublicationData* request, ::VeriBlock::BytesArrayReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SerializePublicationData_, context, request, response, reactor);
}

void SerializeService::Stub::experimental_async::SerializePublicationData(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::BytesArrayReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SerializePublicationData_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::VeriBlock::BytesArrayReply>* SerializeService::Stub::AsyncSerializePublicationDataRaw(::grpc::ClientContext* context, const ::VeriBlock::PublicationData& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::VeriBlock::BytesArrayReply>::Create(channel_.get(), cq, rpcmethod_SerializePublicationData_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::VeriBlock::BytesArrayReply>* SerializeService::Stub::PrepareAsyncSerializePublicationDataRaw(::grpc::ClientContext* context, const ::VeriBlock::PublicationData& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::VeriBlock::BytesArrayReply>::Create(channel_.get(), cq, rpcmethod_SerializePublicationData_, context, request, false);
}

::grpc::Status SerializeService::Stub::SerializeBitcoinTransaction(::grpc::ClientContext* context, const ::VeriBlock::BitcoinTransaction& request, ::VeriBlock::BytesArrayReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SerializeBitcoinTransaction_, context, request, response);
}

void SerializeService::Stub::experimental_async::SerializeBitcoinTransaction(::grpc::ClientContext* context, const ::VeriBlock::BitcoinTransaction* request, ::VeriBlock::BytesArrayReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SerializeBitcoinTransaction_, context, request, response, std::move(f));
}

void SerializeService::Stub::experimental_async::SerializeBitcoinTransaction(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::BytesArrayReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SerializeBitcoinTransaction_, context, request, response, std::move(f));
}

void SerializeService::Stub::experimental_async::SerializeBitcoinTransaction(::grpc::ClientContext* context, const ::VeriBlock::BitcoinTransaction* request, ::VeriBlock::BytesArrayReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SerializeBitcoinTransaction_, context, request, response, reactor);
}

void SerializeService::Stub::experimental_async::SerializeBitcoinTransaction(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::BytesArrayReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SerializeBitcoinTransaction_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::VeriBlock::BytesArrayReply>* SerializeService::Stub::AsyncSerializeBitcoinTransactionRaw(::grpc::ClientContext* context, const ::VeriBlock::BitcoinTransaction& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::VeriBlock::BytesArrayReply>::Create(channel_.get(), cq, rpcmethod_SerializeBitcoinTransaction_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::VeriBlock::BytesArrayReply>* SerializeService::Stub::PrepareAsyncSerializeBitcoinTransactionRaw(::grpc::ClientContext* context, const ::VeriBlock::BitcoinTransaction& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::VeriBlock::BytesArrayReply>::Create(channel_.get(), cq, rpcmethod_SerializeBitcoinTransaction_, context, request, false);
}

::grpc::Status SerializeService::Stub::SerializeVeriBlockBlock(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockBlock& request, ::VeriBlock::BytesArrayReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SerializeVeriBlockBlock_, context, request, response);
}

void SerializeService::Stub::experimental_async::SerializeVeriBlockBlock(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockBlock* request, ::VeriBlock::BytesArrayReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SerializeVeriBlockBlock_, context, request, response, std::move(f));
}

void SerializeService::Stub::experimental_async::SerializeVeriBlockBlock(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::BytesArrayReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SerializeVeriBlockBlock_, context, request, response, std::move(f));
}

void SerializeService::Stub::experimental_async::SerializeVeriBlockBlock(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockBlock* request, ::VeriBlock::BytesArrayReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SerializeVeriBlockBlock_, context, request, response, reactor);
}

void SerializeService::Stub::experimental_async::SerializeVeriBlockBlock(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::BytesArrayReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SerializeVeriBlockBlock_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::VeriBlock::BytesArrayReply>* SerializeService::Stub::AsyncSerializeVeriBlockBlockRaw(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockBlock& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::VeriBlock::BytesArrayReply>::Create(channel_.get(), cq, rpcmethod_SerializeVeriBlockBlock_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::VeriBlock::BytesArrayReply>* SerializeService::Stub::PrepareAsyncSerializeVeriBlockBlockRaw(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockBlock& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::VeriBlock::BytesArrayReply>::Create(channel_.get(), cq, rpcmethod_SerializeVeriBlockBlock_, context, request, false);
}

::grpc::Status SerializeService::Stub::SerializeVeriBlockTransaction(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockTransaction& request, ::VeriBlock::BytesArrayReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SerializeVeriBlockTransaction_, context, request, response);
}

void SerializeService::Stub::experimental_async::SerializeVeriBlockTransaction(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockTransaction* request, ::VeriBlock::BytesArrayReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SerializeVeriBlockTransaction_, context, request, response, std::move(f));
}

void SerializeService::Stub::experimental_async::SerializeVeriBlockTransaction(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::BytesArrayReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SerializeVeriBlockTransaction_, context, request, response, std::move(f));
}

void SerializeService::Stub::experimental_async::SerializeVeriBlockTransaction(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockTransaction* request, ::VeriBlock::BytesArrayReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SerializeVeriBlockTransaction_, context, request, response, reactor);
}

void SerializeService::Stub::experimental_async::SerializeVeriBlockTransaction(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::BytesArrayReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SerializeVeriBlockTransaction_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::VeriBlock::BytesArrayReply>* SerializeService::Stub::AsyncSerializeVeriBlockTransactionRaw(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockTransaction& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::VeriBlock::BytesArrayReply>::Create(channel_.get(), cq, rpcmethod_SerializeVeriBlockTransaction_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::VeriBlock::BytesArrayReply>* SerializeService::Stub::PrepareAsyncSerializeVeriBlockTransactionRaw(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockTransaction& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::VeriBlock::BytesArrayReply>::Create(channel_.get(), cq, rpcmethod_SerializeVeriBlockTransaction_, context, request, false);
}

::grpc::Status SerializeService::Stub::SerializeVeriBlockPublication(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockPublication& request, ::VeriBlock::BytesArrayReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SerializeVeriBlockPublication_, context, request, response);
}

void SerializeService::Stub::experimental_async::SerializeVeriBlockPublication(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockPublication* request, ::VeriBlock::BytesArrayReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SerializeVeriBlockPublication_, context, request, response, std::move(f));
}

void SerializeService::Stub::experimental_async::SerializeVeriBlockPublication(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::BytesArrayReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SerializeVeriBlockPublication_, context, request, response, std::move(f));
}

void SerializeService::Stub::experimental_async::SerializeVeriBlockPublication(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockPublication* request, ::VeriBlock::BytesArrayReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SerializeVeriBlockPublication_, context, request, response, reactor);
}

void SerializeService::Stub::experimental_async::SerializeVeriBlockPublication(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::BytesArrayReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SerializeVeriBlockPublication_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::VeriBlock::BytesArrayReply>* SerializeService::Stub::AsyncSerializeVeriBlockPublicationRaw(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockPublication& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::VeriBlock::BytesArrayReply>::Create(channel_.get(), cq, rpcmethod_SerializeVeriBlockPublication_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::VeriBlock::BytesArrayReply>* SerializeService::Stub::PrepareAsyncSerializeVeriBlockPublicationRaw(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockPublication& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::VeriBlock::BytesArrayReply>::Create(channel_.get(), cq, rpcmethod_SerializeVeriBlockPublication_, context, request, false);
}

::grpc::Status SerializeService::Stub::SerializeVeriBlockPopTx(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockPoPTransaction& request, ::VeriBlock::BytesArrayReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SerializeVeriBlockPopTx_, context, request, response);
}

void SerializeService::Stub::experimental_async::SerializeVeriBlockPopTx(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockPoPTransaction* request, ::VeriBlock::BytesArrayReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SerializeVeriBlockPopTx_, context, request, response, std::move(f));
}

void SerializeService::Stub::experimental_async::SerializeVeriBlockPopTx(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::BytesArrayReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SerializeVeriBlockPopTx_, context, request, response, std::move(f));
}

void SerializeService::Stub::experimental_async::SerializeVeriBlockPopTx(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockPoPTransaction* request, ::VeriBlock::BytesArrayReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SerializeVeriBlockPopTx_, context, request, response, reactor);
}

void SerializeService::Stub::experimental_async::SerializeVeriBlockPopTx(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::BytesArrayReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SerializeVeriBlockPopTx_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::VeriBlock::BytesArrayReply>* SerializeService::Stub::AsyncSerializeVeriBlockPopTxRaw(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockPoPTransaction& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::VeriBlock::BytesArrayReply>::Create(channel_.get(), cq, rpcmethod_SerializeVeriBlockPopTx_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::VeriBlock::BytesArrayReply>* SerializeService::Stub::PrepareAsyncSerializeVeriBlockPopTxRaw(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockPoPTransaction& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::VeriBlock::BytesArrayReply>::Create(channel_.get(), cq, rpcmethod_SerializeVeriBlockPopTx_, context, request, false);
}

::grpc::Status SerializeService::Stub::SerializeOutput(::grpc::ClientContext* context, const ::VeriBlock::Output& request, ::VeriBlock::BytesArrayReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SerializeOutput_, context, request, response);
}

void SerializeService::Stub::experimental_async::SerializeOutput(::grpc::ClientContext* context, const ::VeriBlock::Output* request, ::VeriBlock::BytesArrayReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SerializeOutput_, context, request, response, std::move(f));
}

void SerializeService::Stub::experimental_async::SerializeOutput(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::BytesArrayReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SerializeOutput_, context, request, response, std::move(f));
}

void SerializeService::Stub::experimental_async::SerializeOutput(::grpc::ClientContext* context, const ::VeriBlock::Output* request, ::VeriBlock::BytesArrayReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SerializeOutput_, context, request, response, reactor);
}

void SerializeService::Stub::experimental_async::SerializeOutput(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::BytesArrayReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SerializeOutput_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::VeriBlock::BytesArrayReply>* SerializeService::Stub::AsyncSerializeOutputRaw(::grpc::ClientContext* context, const ::VeriBlock::Output& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::VeriBlock::BytesArrayReply>::Create(channel_.get(), cq, rpcmethod_SerializeOutput_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::VeriBlock::BytesArrayReply>* SerializeService::Stub::PrepareAsyncSerializeOutputRaw(::grpc::ClientContext* context, const ::VeriBlock::Output& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::VeriBlock::BytesArrayReply>::Create(channel_.get(), cq, rpcmethod_SerializeOutput_, context, request, false);
}

::grpc::Status SerializeService::Stub::SerializeAddress(::grpc::ClientContext* context, const ::VeriBlock::Address& request, ::VeriBlock::BytesArrayReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SerializeAddress_, context, request, response);
}

void SerializeService::Stub::experimental_async::SerializeAddress(::grpc::ClientContext* context, const ::VeriBlock::Address* request, ::VeriBlock::BytesArrayReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SerializeAddress_, context, request, response, std::move(f));
}

void SerializeService::Stub::experimental_async::SerializeAddress(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::BytesArrayReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SerializeAddress_, context, request, response, std::move(f));
}

void SerializeService::Stub::experimental_async::SerializeAddress(::grpc::ClientContext* context, const ::VeriBlock::Address* request, ::VeriBlock::BytesArrayReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SerializeAddress_, context, request, response, reactor);
}

void SerializeService::Stub::experimental_async::SerializeAddress(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::BytesArrayReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SerializeAddress_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::VeriBlock::BytesArrayReply>* SerializeService::Stub::AsyncSerializeAddressRaw(::grpc::ClientContext* context, const ::VeriBlock::Address& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::VeriBlock::BytesArrayReply>::Create(channel_.get(), cq, rpcmethod_SerializeAddress_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::VeriBlock::BytesArrayReply>* SerializeService::Stub::PrepareAsyncSerializeAddressRaw(::grpc::ClientContext* context, const ::VeriBlock::Address& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::VeriBlock::BytesArrayReply>::Create(channel_.get(), cq, rpcmethod_SerializeAddress_, context, request, false);
}

::grpc::Status SerializeService::Stub::SerializeBitcoinBlock(::grpc::ClientContext* context, const ::VeriBlock::BitcoinBlock& request, ::VeriBlock::BytesArrayReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SerializeBitcoinBlock_, context, request, response);
}

void SerializeService::Stub::experimental_async::SerializeBitcoinBlock(::grpc::ClientContext* context, const ::VeriBlock::BitcoinBlock* request, ::VeriBlock::BytesArrayReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SerializeBitcoinBlock_, context, request, response, std::move(f));
}

void SerializeService::Stub::experimental_async::SerializeBitcoinBlock(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::BytesArrayReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SerializeBitcoinBlock_, context, request, response, std::move(f));
}

void SerializeService::Stub::experimental_async::SerializeBitcoinBlock(::grpc::ClientContext* context, const ::VeriBlock::BitcoinBlock* request, ::VeriBlock::BytesArrayReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SerializeBitcoinBlock_, context, request, response, reactor);
}

void SerializeService::Stub::experimental_async::SerializeBitcoinBlock(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::BytesArrayReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SerializeBitcoinBlock_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::VeriBlock::BytesArrayReply>* SerializeService::Stub::AsyncSerializeBitcoinBlockRaw(::grpc::ClientContext* context, const ::VeriBlock::BitcoinBlock& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::VeriBlock::BytesArrayReply>::Create(channel_.get(), cq, rpcmethod_SerializeBitcoinBlock_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::VeriBlock::BytesArrayReply>* SerializeService::Stub::PrepareAsyncSerializeBitcoinBlockRaw(::grpc::ClientContext* context, const ::VeriBlock::BitcoinBlock& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::VeriBlock::BytesArrayReply>::Create(channel_.get(), cq, rpcmethod_SerializeBitcoinBlock_, context, request, false);
}

::grpc::Status SerializeService::Stub::SerializeVeriBlockMerklePath(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockMerklePath& request, ::VeriBlock::BytesArrayReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SerializeVeriBlockMerklePath_, context, request, response);
}

void SerializeService::Stub::experimental_async::SerializeVeriBlockMerklePath(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockMerklePath* request, ::VeriBlock::BytesArrayReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SerializeVeriBlockMerklePath_, context, request, response, std::move(f));
}

void SerializeService::Stub::experimental_async::SerializeVeriBlockMerklePath(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::BytesArrayReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SerializeVeriBlockMerklePath_, context, request, response, std::move(f));
}

void SerializeService::Stub::experimental_async::SerializeVeriBlockMerklePath(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockMerklePath* request, ::VeriBlock::BytesArrayReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SerializeVeriBlockMerklePath_, context, request, response, reactor);
}

void SerializeService::Stub::experimental_async::SerializeVeriBlockMerklePath(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::BytesArrayReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SerializeVeriBlockMerklePath_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::VeriBlock::BytesArrayReply>* SerializeService::Stub::AsyncSerializeVeriBlockMerklePathRaw(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockMerklePath& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::VeriBlock::BytesArrayReply>::Create(channel_.get(), cq, rpcmethod_SerializeVeriBlockMerklePath_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::VeriBlock::BytesArrayReply>* SerializeService::Stub::PrepareAsyncSerializeVeriBlockMerklePathRaw(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockMerklePath& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::VeriBlock::BytesArrayReply>::Create(channel_.get(), cq, rpcmethod_SerializeVeriBlockMerklePath_, context, request, false);
}

::grpc::Status SerializeService::Stub::SerializeMerklePath(::grpc::ClientContext* context, const ::VeriBlock::MerklePath& request, ::VeriBlock::BytesArrayReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SerializeMerklePath_, context, request, response);
}

void SerializeService::Stub::experimental_async::SerializeMerklePath(::grpc::ClientContext* context, const ::VeriBlock::MerklePath* request, ::VeriBlock::BytesArrayReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SerializeMerklePath_, context, request, response, std::move(f));
}

void SerializeService::Stub::experimental_async::SerializeMerklePath(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::BytesArrayReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SerializeMerklePath_, context, request, response, std::move(f));
}

void SerializeService::Stub::experimental_async::SerializeMerklePath(::grpc::ClientContext* context, const ::VeriBlock::MerklePath* request, ::VeriBlock::BytesArrayReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SerializeMerklePath_, context, request, response, reactor);
}

void SerializeService::Stub::experimental_async::SerializeMerklePath(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::BytesArrayReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SerializeMerklePath_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::VeriBlock::BytesArrayReply>* SerializeService::Stub::AsyncSerializeMerklePathRaw(::grpc::ClientContext* context, const ::VeriBlock::MerklePath& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::VeriBlock::BytesArrayReply>::Create(channel_.get(), cq, rpcmethod_SerializeMerklePath_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::VeriBlock::BytesArrayReply>* SerializeService::Stub::PrepareAsyncSerializeMerklePathRaw(::grpc::ClientContext* context, const ::VeriBlock::MerklePath& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::VeriBlock::BytesArrayReply>::Create(channel_.get(), cq, rpcmethod_SerializeMerklePath_, context, request, false);
}

SerializeService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SerializeService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SerializeService::Service, ::VeriBlock::AltPublication, ::VeriBlock::BytesArrayReply>(
          std::mem_fn(&SerializeService::Service::SerializeAltPublication), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SerializeService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SerializeService::Service, ::VeriBlock::PublicationData, ::VeriBlock::BytesArrayReply>(
          std::mem_fn(&SerializeService::Service::SerializePublicationData), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SerializeService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SerializeService::Service, ::VeriBlock::BitcoinTransaction, ::VeriBlock::BytesArrayReply>(
          std::mem_fn(&SerializeService::Service::SerializeBitcoinTransaction), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SerializeService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SerializeService::Service, ::VeriBlock::VeriBlockBlock, ::VeriBlock::BytesArrayReply>(
          std::mem_fn(&SerializeService::Service::SerializeVeriBlockBlock), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SerializeService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SerializeService::Service, ::VeriBlock::VeriBlockTransaction, ::VeriBlock::BytesArrayReply>(
          std::mem_fn(&SerializeService::Service::SerializeVeriBlockTransaction), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SerializeService_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SerializeService::Service, ::VeriBlock::VeriBlockPublication, ::VeriBlock::BytesArrayReply>(
          std::mem_fn(&SerializeService::Service::SerializeVeriBlockPublication), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SerializeService_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SerializeService::Service, ::VeriBlock::VeriBlockPoPTransaction, ::VeriBlock::BytesArrayReply>(
          std::mem_fn(&SerializeService::Service::SerializeVeriBlockPopTx), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SerializeService_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SerializeService::Service, ::VeriBlock::Output, ::VeriBlock::BytesArrayReply>(
          std::mem_fn(&SerializeService::Service::SerializeOutput), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SerializeService_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SerializeService::Service, ::VeriBlock::Address, ::VeriBlock::BytesArrayReply>(
          std::mem_fn(&SerializeService::Service::SerializeAddress), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SerializeService_method_names[9],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SerializeService::Service, ::VeriBlock::BitcoinBlock, ::VeriBlock::BytesArrayReply>(
          std::mem_fn(&SerializeService::Service::SerializeBitcoinBlock), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SerializeService_method_names[10],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SerializeService::Service, ::VeriBlock::VeriBlockMerklePath, ::VeriBlock::BytesArrayReply>(
          std::mem_fn(&SerializeService::Service::SerializeVeriBlockMerklePath), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SerializeService_method_names[11],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SerializeService::Service, ::VeriBlock::MerklePath, ::VeriBlock::BytesArrayReply>(
          std::mem_fn(&SerializeService::Service::SerializeMerklePath), this)));
}

SerializeService::Service::~Service() {
}

::grpc::Status SerializeService::Service::SerializeAltPublication(::grpc::ServerContext* context, const ::VeriBlock::AltPublication* request, ::VeriBlock::BytesArrayReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SerializeService::Service::SerializePublicationData(::grpc::ServerContext* context, const ::VeriBlock::PublicationData* request, ::VeriBlock::BytesArrayReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SerializeService::Service::SerializeBitcoinTransaction(::grpc::ServerContext* context, const ::VeriBlock::BitcoinTransaction* request, ::VeriBlock::BytesArrayReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SerializeService::Service::SerializeVeriBlockBlock(::grpc::ServerContext* context, const ::VeriBlock::VeriBlockBlock* request, ::VeriBlock::BytesArrayReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SerializeService::Service::SerializeVeriBlockTransaction(::grpc::ServerContext* context, const ::VeriBlock::VeriBlockTransaction* request, ::VeriBlock::BytesArrayReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SerializeService::Service::SerializeVeriBlockPublication(::grpc::ServerContext* context, const ::VeriBlock::VeriBlockPublication* request, ::VeriBlock::BytesArrayReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SerializeService::Service::SerializeVeriBlockPopTx(::grpc::ServerContext* context, const ::VeriBlock::VeriBlockPoPTransaction* request, ::VeriBlock::BytesArrayReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SerializeService::Service::SerializeOutput(::grpc::ServerContext* context, const ::VeriBlock::Output* request, ::VeriBlock::BytesArrayReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SerializeService::Service::SerializeAddress(::grpc::ServerContext* context, const ::VeriBlock::Address* request, ::VeriBlock::BytesArrayReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SerializeService::Service::SerializeBitcoinBlock(::grpc::ServerContext* context, const ::VeriBlock::BitcoinBlock* request, ::VeriBlock::BytesArrayReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SerializeService::Service::SerializeVeriBlockMerklePath(::grpc::ServerContext* context, const ::VeriBlock::VeriBlockMerklePath* request, ::VeriBlock::BytesArrayReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SerializeService::Service::SerializeMerklePath(::grpc::ServerContext* context, const ::VeriBlock::MerklePath* request, ::VeriBlock::BytesArrayReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* ValidationService_method_names[] = {
  "/VeriBlock.ValidationService/VerifyVeriBlockPoPTx",
  "/VeriBlock.ValidationService/CheckSignatureVeriBlockPoPTx",
  "/VeriBlock.ValidationService/CheckBitcoinTransactionForPoPData",
  "/VeriBlock.ValidationService/CheckBitcoinMerklePathVeriBlockPoPTx",
  "/VeriBlock.ValidationService/CheckBitcoinBlocksVeriBlockPoPTx",
  "/VeriBlock.ValidationService/VerifyVeriBlockPublication",
  "/VeriBlock.ValidationService/CheckBlocksVeriBlockPublication",
  "/VeriBlock.ValidationService/CheckMerklePathVeriBlockPublication",
  "/VeriBlock.ValidationService/VerifyVeriBlockTransaction",
  "/VeriBlock.ValidationService/CheckSignatureVeriBlockTransaction",
  "/VeriBlock.ValidationService/VerifyVeriBlockBlock",
  "/VeriBlock.ValidationService/CheckProofOfWorkVeriBlockBlock",
  "/VeriBlock.ValidationService/CheckMaximumDriftVeriBlockBlock",
  "/VeriBlock.ValidationService/VerifyBitcoinBlock",
  "/VeriBlock.ValidationService/CheckProofOfWorkBitcoinBlock",
  "/VeriBlock.ValidationService/CheckMaximumDriftBitcoinBlock",
  "/VeriBlock.ValidationService/VerifyAltPublication",
  "/VeriBlock.ValidationService/CheckMerklePathAltPublication",
  "/VeriBlock.ValidationService/CheckBlocksAltPublication",
};

std::unique_ptr< ValidationService::Stub> ValidationService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< ValidationService::Stub> stub(new ValidationService::Stub(channel));
  return stub;
}

ValidationService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_VerifyVeriBlockPoPTx_(ValidationService_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CheckSignatureVeriBlockPoPTx_(ValidationService_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CheckBitcoinTransactionForPoPData_(ValidationService_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CheckBitcoinMerklePathVeriBlockPoPTx_(ValidationService_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CheckBitcoinBlocksVeriBlockPoPTx_(ValidationService_method_names[4], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_VerifyVeriBlockPublication_(ValidationService_method_names[5], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CheckBlocksVeriBlockPublication_(ValidationService_method_names[6], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CheckMerklePathVeriBlockPublication_(ValidationService_method_names[7], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_VerifyVeriBlockTransaction_(ValidationService_method_names[8], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CheckSignatureVeriBlockTransaction_(ValidationService_method_names[9], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_VerifyVeriBlockBlock_(ValidationService_method_names[10], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CheckProofOfWorkVeriBlockBlock_(ValidationService_method_names[11], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CheckMaximumDriftVeriBlockBlock_(ValidationService_method_names[12], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_VerifyBitcoinBlock_(ValidationService_method_names[13], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CheckProofOfWorkBitcoinBlock_(ValidationService_method_names[14], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CheckMaximumDriftBitcoinBlock_(ValidationService_method_names[15], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_VerifyAltPublication_(ValidationService_method_names[16], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CheckMerklePathAltPublication_(ValidationService_method_names[17], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CheckBlocksAltPublication_(ValidationService_method_names[18], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status ValidationService::Stub::VerifyVeriBlockPoPTx(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockPoPTransaction& request, ::VeriBlock::GeneralReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_VerifyVeriBlockPoPTx_, context, request, response);
}

void ValidationService::Stub::experimental_async::VerifyVeriBlockPoPTx(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockPoPTransaction* request, ::VeriBlock::GeneralReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_VerifyVeriBlockPoPTx_, context, request, response, std::move(f));
}

void ValidationService::Stub::experimental_async::VerifyVeriBlockPoPTx(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::GeneralReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_VerifyVeriBlockPoPTx_, context, request, response, std::move(f));
}

void ValidationService::Stub::experimental_async::VerifyVeriBlockPoPTx(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockPoPTransaction* request, ::VeriBlock::GeneralReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_VerifyVeriBlockPoPTx_, context, request, response, reactor);
}

void ValidationService::Stub::experimental_async::VerifyVeriBlockPoPTx(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::GeneralReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_VerifyVeriBlockPoPTx_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::VeriBlock::GeneralReply>* ValidationService::Stub::AsyncVerifyVeriBlockPoPTxRaw(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockPoPTransaction& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::VeriBlock::GeneralReply>::Create(channel_.get(), cq, rpcmethod_VerifyVeriBlockPoPTx_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::VeriBlock::GeneralReply>* ValidationService::Stub::PrepareAsyncVerifyVeriBlockPoPTxRaw(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockPoPTransaction& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::VeriBlock::GeneralReply>::Create(channel_.get(), cq, rpcmethod_VerifyVeriBlockPoPTx_, context, request, false);
}

::grpc::Status ValidationService::Stub::CheckSignatureVeriBlockPoPTx(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockPoPTransaction& request, ::VeriBlock::GeneralReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_CheckSignatureVeriBlockPoPTx_, context, request, response);
}

void ValidationService::Stub::experimental_async::CheckSignatureVeriBlockPoPTx(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockPoPTransaction* request, ::VeriBlock::GeneralReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_CheckSignatureVeriBlockPoPTx_, context, request, response, std::move(f));
}

void ValidationService::Stub::experimental_async::CheckSignatureVeriBlockPoPTx(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::GeneralReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_CheckSignatureVeriBlockPoPTx_, context, request, response, std::move(f));
}

void ValidationService::Stub::experimental_async::CheckSignatureVeriBlockPoPTx(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockPoPTransaction* request, ::VeriBlock::GeneralReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_CheckSignatureVeriBlockPoPTx_, context, request, response, reactor);
}

void ValidationService::Stub::experimental_async::CheckSignatureVeriBlockPoPTx(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::GeneralReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_CheckSignatureVeriBlockPoPTx_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::VeriBlock::GeneralReply>* ValidationService::Stub::AsyncCheckSignatureVeriBlockPoPTxRaw(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockPoPTransaction& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::VeriBlock::GeneralReply>::Create(channel_.get(), cq, rpcmethod_CheckSignatureVeriBlockPoPTx_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::VeriBlock::GeneralReply>* ValidationService::Stub::PrepareAsyncCheckSignatureVeriBlockPoPTxRaw(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockPoPTransaction& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::VeriBlock::GeneralReply>::Create(channel_.get(), cq, rpcmethod_CheckSignatureVeriBlockPoPTx_, context, request, false);
}

::grpc::Status ValidationService::Stub::CheckBitcoinTransactionForPoPData(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockPoPTransaction& request, ::VeriBlock::GeneralReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_CheckBitcoinTransactionForPoPData_, context, request, response);
}

void ValidationService::Stub::experimental_async::CheckBitcoinTransactionForPoPData(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockPoPTransaction* request, ::VeriBlock::GeneralReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_CheckBitcoinTransactionForPoPData_, context, request, response, std::move(f));
}

void ValidationService::Stub::experimental_async::CheckBitcoinTransactionForPoPData(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::GeneralReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_CheckBitcoinTransactionForPoPData_, context, request, response, std::move(f));
}

void ValidationService::Stub::experimental_async::CheckBitcoinTransactionForPoPData(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockPoPTransaction* request, ::VeriBlock::GeneralReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_CheckBitcoinTransactionForPoPData_, context, request, response, reactor);
}

void ValidationService::Stub::experimental_async::CheckBitcoinTransactionForPoPData(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::GeneralReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_CheckBitcoinTransactionForPoPData_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::VeriBlock::GeneralReply>* ValidationService::Stub::AsyncCheckBitcoinTransactionForPoPDataRaw(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockPoPTransaction& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::VeriBlock::GeneralReply>::Create(channel_.get(), cq, rpcmethod_CheckBitcoinTransactionForPoPData_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::VeriBlock::GeneralReply>* ValidationService::Stub::PrepareAsyncCheckBitcoinTransactionForPoPDataRaw(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockPoPTransaction& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::VeriBlock::GeneralReply>::Create(channel_.get(), cq, rpcmethod_CheckBitcoinTransactionForPoPData_, context, request, false);
}

::grpc::Status ValidationService::Stub::CheckBitcoinMerklePathVeriBlockPoPTx(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockPoPTransaction& request, ::VeriBlock::GeneralReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_CheckBitcoinMerklePathVeriBlockPoPTx_, context, request, response);
}

void ValidationService::Stub::experimental_async::CheckBitcoinMerklePathVeriBlockPoPTx(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockPoPTransaction* request, ::VeriBlock::GeneralReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_CheckBitcoinMerklePathVeriBlockPoPTx_, context, request, response, std::move(f));
}

void ValidationService::Stub::experimental_async::CheckBitcoinMerklePathVeriBlockPoPTx(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::GeneralReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_CheckBitcoinMerklePathVeriBlockPoPTx_, context, request, response, std::move(f));
}

void ValidationService::Stub::experimental_async::CheckBitcoinMerklePathVeriBlockPoPTx(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockPoPTransaction* request, ::VeriBlock::GeneralReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_CheckBitcoinMerklePathVeriBlockPoPTx_, context, request, response, reactor);
}

void ValidationService::Stub::experimental_async::CheckBitcoinMerklePathVeriBlockPoPTx(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::GeneralReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_CheckBitcoinMerklePathVeriBlockPoPTx_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::VeriBlock::GeneralReply>* ValidationService::Stub::AsyncCheckBitcoinMerklePathVeriBlockPoPTxRaw(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockPoPTransaction& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::VeriBlock::GeneralReply>::Create(channel_.get(), cq, rpcmethod_CheckBitcoinMerklePathVeriBlockPoPTx_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::VeriBlock::GeneralReply>* ValidationService::Stub::PrepareAsyncCheckBitcoinMerklePathVeriBlockPoPTxRaw(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockPoPTransaction& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::VeriBlock::GeneralReply>::Create(channel_.get(), cq, rpcmethod_CheckBitcoinMerklePathVeriBlockPoPTx_, context, request, false);
}

::grpc::Status ValidationService::Stub::CheckBitcoinBlocksVeriBlockPoPTx(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockPoPTransaction& request, ::VeriBlock::GeneralReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_CheckBitcoinBlocksVeriBlockPoPTx_, context, request, response);
}

void ValidationService::Stub::experimental_async::CheckBitcoinBlocksVeriBlockPoPTx(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockPoPTransaction* request, ::VeriBlock::GeneralReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_CheckBitcoinBlocksVeriBlockPoPTx_, context, request, response, std::move(f));
}

void ValidationService::Stub::experimental_async::CheckBitcoinBlocksVeriBlockPoPTx(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::GeneralReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_CheckBitcoinBlocksVeriBlockPoPTx_, context, request, response, std::move(f));
}

void ValidationService::Stub::experimental_async::CheckBitcoinBlocksVeriBlockPoPTx(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockPoPTransaction* request, ::VeriBlock::GeneralReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_CheckBitcoinBlocksVeriBlockPoPTx_, context, request, response, reactor);
}

void ValidationService::Stub::experimental_async::CheckBitcoinBlocksVeriBlockPoPTx(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::GeneralReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_CheckBitcoinBlocksVeriBlockPoPTx_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::VeriBlock::GeneralReply>* ValidationService::Stub::AsyncCheckBitcoinBlocksVeriBlockPoPTxRaw(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockPoPTransaction& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::VeriBlock::GeneralReply>::Create(channel_.get(), cq, rpcmethod_CheckBitcoinBlocksVeriBlockPoPTx_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::VeriBlock::GeneralReply>* ValidationService::Stub::PrepareAsyncCheckBitcoinBlocksVeriBlockPoPTxRaw(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockPoPTransaction& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::VeriBlock::GeneralReply>::Create(channel_.get(), cq, rpcmethod_CheckBitcoinBlocksVeriBlockPoPTx_, context, request, false);
}

::grpc::Status ValidationService::Stub::VerifyVeriBlockPublication(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockPublication& request, ::VeriBlock::GeneralReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_VerifyVeriBlockPublication_, context, request, response);
}

void ValidationService::Stub::experimental_async::VerifyVeriBlockPublication(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockPublication* request, ::VeriBlock::GeneralReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_VerifyVeriBlockPublication_, context, request, response, std::move(f));
}

void ValidationService::Stub::experimental_async::VerifyVeriBlockPublication(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::GeneralReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_VerifyVeriBlockPublication_, context, request, response, std::move(f));
}

void ValidationService::Stub::experimental_async::VerifyVeriBlockPublication(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockPublication* request, ::VeriBlock::GeneralReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_VerifyVeriBlockPublication_, context, request, response, reactor);
}

void ValidationService::Stub::experimental_async::VerifyVeriBlockPublication(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::GeneralReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_VerifyVeriBlockPublication_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::VeriBlock::GeneralReply>* ValidationService::Stub::AsyncVerifyVeriBlockPublicationRaw(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockPublication& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::VeriBlock::GeneralReply>::Create(channel_.get(), cq, rpcmethod_VerifyVeriBlockPublication_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::VeriBlock::GeneralReply>* ValidationService::Stub::PrepareAsyncVerifyVeriBlockPublicationRaw(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockPublication& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::VeriBlock::GeneralReply>::Create(channel_.get(), cq, rpcmethod_VerifyVeriBlockPublication_, context, request, false);
}

::grpc::Status ValidationService::Stub::CheckBlocksVeriBlockPublication(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockPublication& request, ::VeriBlock::GeneralReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_CheckBlocksVeriBlockPublication_, context, request, response);
}

void ValidationService::Stub::experimental_async::CheckBlocksVeriBlockPublication(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockPublication* request, ::VeriBlock::GeneralReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_CheckBlocksVeriBlockPublication_, context, request, response, std::move(f));
}

void ValidationService::Stub::experimental_async::CheckBlocksVeriBlockPublication(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::GeneralReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_CheckBlocksVeriBlockPublication_, context, request, response, std::move(f));
}

void ValidationService::Stub::experimental_async::CheckBlocksVeriBlockPublication(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockPublication* request, ::VeriBlock::GeneralReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_CheckBlocksVeriBlockPublication_, context, request, response, reactor);
}

void ValidationService::Stub::experimental_async::CheckBlocksVeriBlockPublication(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::GeneralReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_CheckBlocksVeriBlockPublication_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::VeriBlock::GeneralReply>* ValidationService::Stub::AsyncCheckBlocksVeriBlockPublicationRaw(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockPublication& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::VeriBlock::GeneralReply>::Create(channel_.get(), cq, rpcmethod_CheckBlocksVeriBlockPublication_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::VeriBlock::GeneralReply>* ValidationService::Stub::PrepareAsyncCheckBlocksVeriBlockPublicationRaw(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockPublication& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::VeriBlock::GeneralReply>::Create(channel_.get(), cq, rpcmethod_CheckBlocksVeriBlockPublication_, context, request, false);
}

::grpc::Status ValidationService::Stub::CheckMerklePathVeriBlockPublication(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockPublication& request, ::VeriBlock::GeneralReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_CheckMerklePathVeriBlockPublication_, context, request, response);
}

void ValidationService::Stub::experimental_async::CheckMerklePathVeriBlockPublication(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockPublication* request, ::VeriBlock::GeneralReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_CheckMerklePathVeriBlockPublication_, context, request, response, std::move(f));
}

void ValidationService::Stub::experimental_async::CheckMerklePathVeriBlockPublication(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::GeneralReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_CheckMerklePathVeriBlockPublication_, context, request, response, std::move(f));
}

void ValidationService::Stub::experimental_async::CheckMerklePathVeriBlockPublication(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockPublication* request, ::VeriBlock::GeneralReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_CheckMerklePathVeriBlockPublication_, context, request, response, reactor);
}

void ValidationService::Stub::experimental_async::CheckMerklePathVeriBlockPublication(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::GeneralReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_CheckMerklePathVeriBlockPublication_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::VeriBlock::GeneralReply>* ValidationService::Stub::AsyncCheckMerklePathVeriBlockPublicationRaw(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockPublication& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::VeriBlock::GeneralReply>::Create(channel_.get(), cq, rpcmethod_CheckMerklePathVeriBlockPublication_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::VeriBlock::GeneralReply>* ValidationService::Stub::PrepareAsyncCheckMerklePathVeriBlockPublicationRaw(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockPublication& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::VeriBlock::GeneralReply>::Create(channel_.get(), cq, rpcmethod_CheckMerklePathVeriBlockPublication_, context, request, false);
}

::grpc::Status ValidationService::Stub::VerifyVeriBlockTransaction(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockTransaction& request, ::VeriBlock::GeneralReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_VerifyVeriBlockTransaction_, context, request, response);
}

void ValidationService::Stub::experimental_async::VerifyVeriBlockTransaction(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockTransaction* request, ::VeriBlock::GeneralReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_VerifyVeriBlockTransaction_, context, request, response, std::move(f));
}

void ValidationService::Stub::experimental_async::VerifyVeriBlockTransaction(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::GeneralReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_VerifyVeriBlockTransaction_, context, request, response, std::move(f));
}

void ValidationService::Stub::experimental_async::VerifyVeriBlockTransaction(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockTransaction* request, ::VeriBlock::GeneralReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_VerifyVeriBlockTransaction_, context, request, response, reactor);
}

void ValidationService::Stub::experimental_async::VerifyVeriBlockTransaction(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::GeneralReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_VerifyVeriBlockTransaction_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::VeriBlock::GeneralReply>* ValidationService::Stub::AsyncVerifyVeriBlockTransactionRaw(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockTransaction& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::VeriBlock::GeneralReply>::Create(channel_.get(), cq, rpcmethod_VerifyVeriBlockTransaction_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::VeriBlock::GeneralReply>* ValidationService::Stub::PrepareAsyncVerifyVeriBlockTransactionRaw(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockTransaction& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::VeriBlock::GeneralReply>::Create(channel_.get(), cq, rpcmethod_VerifyVeriBlockTransaction_, context, request, false);
}

::grpc::Status ValidationService::Stub::CheckSignatureVeriBlockTransaction(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockTransaction& request, ::VeriBlock::GeneralReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_CheckSignatureVeriBlockTransaction_, context, request, response);
}

void ValidationService::Stub::experimental_async::CheckSignatureVeriBlockTransaction(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockTransaction* request, ::VeriBlock::GeneralReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_CheckSignatureVeriBlockTransaction_, context, request, response, std::move(f));
}

void ValidationService::Stub::experimental_async::CheckSignatureVeriBlockTransaction(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::GeneralReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_CheckSignatureVeriBlockTransaction_, context, request, response, std::move(f));
}

void ValidationService::Stub::experimental_async::CheckSignatureVeriBlockTransaction(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockTransaction* request, ::VeriBlock::GeneralReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_CheckSignatureVeriBlockTransaction_, context, request, response, reactor);
}

void ValidationService::Stub::experimental_async::CheckSignatureVeriBlockTransaction(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::GeneralReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_CheckSignatureVeriBlockTransaction_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::VeriBlock::GeneralReply>* ValidationService::Stub::AsyncCheckSignatureVeriBlockTransactionRaw(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockTransaction& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::VeriBlock::GeneralReply>::Create(channel_.get(), cq, rpcmethod_CheckSignatureVeriBlockTransaction_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::VeriBlock::GeneralReply>* ValidationService::Stub::PrepareAsyncCheckSignatureVeriBlockTransactionRaw(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockTransaction& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::VeriBlock::GeneralReply>::Create(channel_.get(), cq, rpcmethod_CheckSignatureVeriBlockTransaction_, context, request, false);
}

::grpc::Status ValidationService::Stub::VerifyVeriBlockBlock(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockBlock& request, ::VeriBlock::GeneralReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_VerifyVeriBlockBlock_, context, request, response);
}

void ValidationService::Stub::experimental_async::VerifyVeriBlockBlock(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockBlock* request, ::VeriBlock::GeneralReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_VerifyVeriBlockBlock_, context, request, response, std::move(f));
}

void ValidationService::Stub::experimental_async::VerifyVeriBlockBlock(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::GeneralReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_VerifyVeriBlockBlock_, context, request, response, std::move(f));
}

void ValidationService::Stub::experimental_async::VerifyVeriBlockBlock(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockBlock* request, ::VeriBlock::GeneralReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_VerifyVeriBlockBlock_, context, request, response, reactor);
}

void ValidationService::Stub::experimental_async::VerifyVeriBlockBlock(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::GeneralReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_VerifyVeriBlockBlock_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::VeriBlock::GeneralReply>* ValidationService::Stub::AsyncVerifyVeriBlockBlockRaw(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockBlock& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::VeriBlock::GeneralReply>::Create(channel_.get(), cq, rpcmethod_VerifyVeriBlockBlock_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::VeriBlock::GeneralReply>* ValidationService::Stub::PrepareAsyncVerifyVeriBlockBlockRaw(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockBlock& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::VeriBlock::GeneralReply>::Create(channel_.get(), cq, rpcmethod_VerifyVeriBlockBlock_, context, request, false);
}

::grpc::Status ValidationService::Stub::CheckProofOfWorkVeriBlockBlock(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockBlock& request, ::VeriBlock::GeneralReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_CheckProofOfWorkVeriBlockBlock_, context, request, response);
}

void ValidationService::Stub::experimental_async::CheckProofOfWorkVeriBlockBlock(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockBlock* request, ::VeriBlock::GeneralReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_CheckProofOfWorkVeriBlockBlock_, context, request, response, std::move(f));
}

void ValidationService::Stub::experimental_async::CheckProofOfWorkVeriBlockBlock(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::GeneralReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_CheckProofOfWorkVeriBlockBlock_, context, request, response, std::move(f));
}

void ValidationService::Stub::experimental_async::CheckProofOfWorkVeriBlockBlock(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockBlock* request, ::VeriBlock::GeneralReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_CheckProofOfWorkVeriBlockBlock_, context, request, response, reactor);
}

void ValidationService::Stub::experimental_async::CheckProofOfWorkVeriBlockBlock(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::GeneralReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_CheckProofOfWorkVeriBlockBlock_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::VeriBlock::GeneralReply>* ValidationService::Stub::AsyncCheckProofOfWorkVeriBlockBlockRaw(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockBlock& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::VeriBlock::GeneralReply>::Create(channel_.get(), cq, rpcmethod_CheckProofOfWorkVeriBlockBlock_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::VeriBlock::GeneralReply>* ValidationService::Stub::PrepareAsyncCheckProofOfWorkVeriBlockBlockRaw(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockBlock& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::VeriBlock::GeneralReply>::Create(channel_.get(), cq, rpcmethod_CheckProofOfWorkVeriBlockBlock_, context, request, false);
}

::grpc::Status ValidationService::Stub::CheckMaximumDriftVeriBlockBlock(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockBlock& request, ::VeriBlock::GeneralReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_CheckMaximumDriftVeriBlockBlock_, context, request, response);
}

void ValidationService::Stub::experimental_async::CheckMaximumDriftVeriBlockBlock(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockBlock* request, ::VeriBlock::GeneralReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_CheckMaximumDriftVeriBlockBlock_, context, request, response, std::move(f));
}

void ValidationService::Stub::experimental_async::CheckMaximumDriftVeriBlockBlock(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::GeneralReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_CheckMaximumDriftVeriBlockBlock_, context, request, response, std::move(f));
}

void ValidationService::Stub::experimental_async::CheckMaximumDriftVeriBlockBlock(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockBlock* request, ::VeriBlock::GeneralReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_CheckMaximumDriftVeriBlockBlock_, context, request, response, reactor);
}

void ValidationService::Stub::experimental_async::CheckMaximumDriftVeriBlockBlock(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::GeneralReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_CheckMaximumDriftVeriBlockBlock_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::VeriBlock::GeneralReply>* ValidationService::Stub::AsyncCheckMaximumDriftVeriBlockBlockRaw(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockBlock& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::VeriBlock::GeneralReply>::Create(channel_.get(), cq, rpcmethod_CheckMaximumDriftVeriBlockBlock_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::VeriBlock::GeneralReply>* ValidationService::Stub::PrepareAsyncCheckMaximumDriftVeriBlockBlockRaw(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockBlock& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::VeriBlock::GeneralReply>::Create(channel_.get(), cq, rpcmethod_CheckMaximumDriftVeriBlockBlock_, context, request, false);
}

::grpc::Status ValidationService::Stub::VerifyBitcoinBlock(::grpc::ClientContext* context, const ::VeriBlock::BitcoinBlock& request, ::VeriBlock::GeneralReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_VerifyBitcoinBlock_, context, request, response);
}

void ValidationService::Stub::experimental_async::VerifyBitcoinBlock(::grpc::ClientContext* context, const ::VeriBlock::BitcoinBlock* request, ::VeriBlock::GeneralReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_VerifyBitcoinBlock_, context, request, response, std::move(f));
}

void ValidationService::Stub::experimental_async::VerifyBitcoinBlock(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::GeneralReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_VerifyBitcoinBlock_, context, request, response, std::move(f));
}

void ValidationService::Stub::experimental_async::VerifyBitcoinBlock(::grpc::ClientContext* context, const ::VeriBlock::BitcoinBlock* request, ::VeriBlock::GeneralReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_VerifyBitcoinBlock_, context, request, response, reactor);
}

void ValidationService::Stub::experimental_async::VerifyBitcoinBlock(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::GeneralReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_VerifyBitcoinBlock_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::VeriBlock::GeneralReply>* ValidationService::Stub::AsyncVerifyBitcoinBlockRaw(::grpc::ClientContext* context, const ::VeriBlock::BitcoinBlock& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::VeriBlock::GeneralReply>::Create(channel_.get(), cq, rpcmethod_VerifyBitcoinBlock_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::VeriBlock::GeneralReply>* ValidationService::Stub::PrepareAsyncVerifyBitcoinBlockRaw(::grpc::ClientContext* context, const ::VeriBlock::BitcoinBlock& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::VeriBlock::GeneralReply>::Create(channel_.get(), cq, rpcmethod_VerifyBitcoinBlock_, context, request, false);
}

::grpc::Status ValidationService::Stub::CheckProofOfWorkBitcoinBlock(::grpc::ClientContext* context, const ::VeriBlock::BitcoinBlock& request, ::VeriBlock::GeneralReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_CheckProofOfWorkBitcoinBlock_, context, request, response);
}

void ValidationService::Stub::experimental_async::CheckProofOfWorkBitcoinBlock(::grpc::ClientContext* context, const ::VeriBlock::BitcoinBlock* request, ::VeriBlock::GeneralReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_CheckProofOfWorkBitcoinBlock_, context, request, response, std::move(f));
}

void ValidationService::Stub::experimental_async::CheckProofOfWorkBitcoinBlock(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::GeneralReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_CheckProofOfWorkBitcoinBlock_, context, request, response, std::move(f));
}

void ValidationService::Stub::experimental_async::CheckProofOfWorkBitcoinBlock(::grpc::ClientContext* context, const ::VeriBlock::BitcoinBlock* request, ::VeriBlock::GeneralReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_CheckProofOfWorkBitcoinBlock_, context, request, response, reactor);
}

void ValidationService::Stub::experimental_async::CheckProofOfWorkBitcoinBlock(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::GeneralReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_CheckProofOfWorkBitcoinBlock_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::VeriBlock::GeneralReply>* ValidationService::Stub::AsyncCheckProofOfWorkBitcoinBlockRaw(::grpc::ClientContext* context, const ::VeriBlock::BitcoinBlock& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::VeriBlock::GeneralReply>::Create(channel_.get(), cq, rpcmethod_CheckProofOfWorkBitcoinBlock_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::VeriBlock::GeneralReply>* ValidationService::Stub::PrepareAsyncCheckProofOfWorkBitcoinBlockRaw(::grpc::ClientContext* context, const ::VeriBlock::BitcoinBlock& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::VeriBlock::GeneralReply>::Create(channel_.get(), cq, rpcmethod_CheckProofOfWorkBitcoinBlock_, context, request, false);
}

::grpc::Status ValidationService::Stub::CheckMaximumDriftBitcoinBlock(::grpc::ClientContext* context, const ::VeriBlock::BitcoinBlock& request, ::VeriBlock::GeneralReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_CheckMaximumDriftBitcoinBlock_, context, request, response);
}

void ValidationService::Stub::experimental_async::CheckMaximumDriftBitcoinBlock(::grpc::ClientContext* context, const ::VeriBlock::BitcoinBlock* request, ::VeriBlock::GeneralReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_CheckMaximumDriftBitcoinBlock_, context, request, response, std::move(f));
}

void ValidationService::Stub::experimental_async::CheckMaximumDriftBitcoinBlock(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::GeneralReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_CheckMaximumDriftBitcoinBlock_, context, request, response, std::move(f));
}

void ValidationService::Stub::experimental_async::CheckMaximumDriftBitcoinBlock(::grpc::ClientContext* context, const ::VeriBlock::BitcoinBlock* request, ::VeriBlock::GeneralReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_CheckMaximumDriftBitcoinBlock_, context, request, response, reactor);
}

void ValidationService::Stub::experimental_async::CheckMaximumDriftBitcoinBlock(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::GeneralReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_CheckMaximumDriftBitcoinBlock_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::VeriBlock::GeneralReply>* ValidationService::Stub::AsyncCheckMaximumDriftBitcoinBlockRaw(::grpc::ClientContext* context, const ::VeriBlock::BitcoinBlock& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::VeriBlock::GeneralReply>::Create(channel_.get(), cq, rpcmethod_CheckMaximumDriftBitcoinBlock_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::VeriBlock::GeneralReply>* ValidationService::Stub::PrepareAsyncCheckMaximumDriftBitcoinBlockRaw(::grpc::ClientContext* context, const ::VeriBlock::BitcoinBlock& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::VeriBlock::GeneralReply>::Create(channel_.get(), cq, rpcmethod_CheckMaximumDriftBitcoinBlock_, context, request, false);
}

::grpc::Status ValidationService::Stub::VerifyAltPublication(::grpc::ClientContext* context, const ::VeriBlock::AltPublication& request, ::VeriBlock::GeneralReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_VerifyAltPublication_, context, request, response);
}

void ValidationService::Stub::experimental_async::VerifyAltPublication(::grpc::ClientContext* context, const ::VeriBlock::AltPublication* request, ::VeriBlock::GeneralReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_VerifyAltPublication_, context, request, response, std::move(f));
}

void ValidationService::Stub::experimental_async::VerifyAltPublication(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::GeneralReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_VerifyAltPublication_, context, request, response, std::move(f));
}

void ValidationService::Stub::experimental_async::VerifyAltPublication(::grpc::ClientContext* context, const ::VeriBlock::AltPublication* request, ::VeriBlock::GeneralReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_VerifyAltPublication_, context, request, response, reactor);
}

void ValidationService::Stub::experimental_async::VerifyAltPublication(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::GeneralReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_VerifyAltPublication_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::VeriBlock::GeneralReply>* ValidationService::Stub::AsyncVerifyAltPublicationRaw(::grpc::ClientContext* context, const ::VeriBlock::AltPublication& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::VeriBlock::GeneralReply>::Create(channel_.get(), cq, rpcmethod_VerifyAltPublication_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::VeriBlock::GeneralReply>* ValidationService::Stub::PrepareAsyncVerifyAltPublicationRaw(::grpc::ClientContext* context, const ::VeriBlock::AltPublication& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::VeriBlock::GeneralReply>::Create(channel_.get(), cq, rpcmethod_VerifyAltPublication_, context, request, false);
}

::grpc::Status ValidationService::Stub::CheckMerklePathAltPublication(::grpc::ClientContext* context, const ::VeriBlock::AltPublication& request, ::VeriBlock::GeneralReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_CheckMerklePathAltPublication_, context, request, response);
}

void ValidationService::Stub::experimental_async::CheckMerklePathAltPublication(::grpc::ClientContext* context, const ::VeriBlock::AltPublication* request, ::VeriBlock::GeneralReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_CheckMerklePathAltPublication_, context, request, response, std::move(f));
}

void ValidationService::Stub::experimental_async::CheckMerklePathAltPublication(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::GeneralReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_CheckMerklePathAltPublication_, context, request, response, std::move(f));
}

void ValidationService::Stub::experimental_async::CheckMerklePathAltPublication(::grpc::ClientContext* context, const ::VeriBlock::AltPublication* request, ::VeriBlock::GeneralReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_CheckMerklePathAltPublication_, context, request, response, reactor);
}

void ValidationService::Stub::experimental_async::CheckMerklePathAltPublication(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::GeneralReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_CheckMerklePathAltPublication_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::VeriBlock::GeneralReply>* ValidationService::Stub::AsyncCheckMerklePathAltPublicationRaw(::grpc::ClientContext* context, const ::VeriBlock::AltPublication& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::VeriBlock::GeneralReply>::Create(channel_.get(), cq, rpcmethod_CheckMerklePathAltPublication_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::VeriBlock::GeneralReply>* ValidationService::Stub::PrepareAsyncCheckMerklePathAltPublicationRaw(::grpc::ClientContext* context, const ::VeriBlock::AltPublication& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::VeriBlock::GeneralReply>::Create(channel_.get(), cq, rpcmethod_CheckMerklePathAltPublication_, context, request, false);
}

::grpc::Status ValidationService::Stub::CheckBlocksAltPublication(::grpc::ClientContext* context, const ::VeriBlock::AltPublication& request, ::VeriBlock::GeneralReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_CheckBlocksAltPublication_, context, request, response);
}

void ValidationService::Stub::experimental_async::CheckBlocksAltPublication(::grpc::ClientContext* context, const ::VeriBlock::AltPublication* request, ::VeriBlock::GeneralReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_CheckBlocksAltPublication_, context, request, response, std::move(f));
}

void ValidationService::Stub::experimental_async::CheckBlocksAltPublication(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::GeneralReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_CheckBlocksAltPublication_, context, request, response, std::move(f));
}

void ValidationService::Stub::experimental_async::CheckBlocksAltPublication(::grpc::ClientContext* context, const ::VeriBlock::AltPublication* request, ::VeriBlock::GeneralReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_CheckBlocksAltPublication_, context, request, response, reactor);
}

void ValidationService::Stub::experimental_async::CheckBlocksAltPublication(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::GeneralReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_CheckBlocksAltPublication_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::VeriBlock::GeneralReply>* ValidationService::Stub::AsyncCheckBlocksAltPublicationRaw(::grpc::ClientContext* context, const ::VeriBlock::AltPublication& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::VeriBlock::GeneralReply>::Create(channel_.get(), cq, rpcmethod_CheckBlocksAltPublication_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::VeriBlock::GeneralReply>* ValidationService::Stub::PrepareAsyncCheckBlocksAltPublicationRaw(::grpc::ClientContext* context, const ::VeriBlock::AltPublication& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::VeriBlock::GeneralReply>::Create(channel_.get(), cq, rpcmethod_CheckBlocksAltPublication_, context, request, false);
}

ValidationService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ValidationService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ValidationService::Service, ::VeriBlock::VeriBlockPoPTransaction, ::VeriBlock::GeneralReply>(
          std::mem_fn(&ValidationService::Service::VerifyVeriBlockPoPTx), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ValidationService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ValidationService::Service, ::VeriBlock::VeriBlockPoPTransaction, ::VeriBlock::GeneralReply>(
          std::mem_fn(&ValidationService::Service::CheckSignatureVeriBlockPoPTx), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ValidationService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ValidationService::Service, ::VeriBlock::VeriBlockPoPTransaction, ::VeriBlock::GeneralReply>(
          std::mem_fn(&ValidationService::Service::CheckBitcoinTransactionForPoPData), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ValidationService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ValidationService::Service, ::VeriBlock::VeriBlockPoPTransaction, ::VeriBlock::GeneralReply>(
          std::mem_fn(&ValidationService::Service::CheckBitcoinMerklePathVeriBlockPoPTx), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ValidationService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ValidationService::Service, ::VeriBlock::VeriBlockPoPTransaction, ::VeriBlock::GeneralReply>(
          std::mem_fn(&ValidationService::Service::CheckBitcoinBlocksVeriBlockPoPTx), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ValidationService_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ValidationService::Service, ::VeriBlock::VeriBlockPublication, ::VeriBlock::GeneralReply>(
          std::mem_fn(&ValidationService::Service::VerifyVeriBlockPublication), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ValidationService_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ValidationService::Service, ::VeriBlock::VeriBlockPublication, ::VeriBlock::GeneralReply>(
          std::mem_fn(&ValidationService::Service::CheckBlocksVeriBlockPublication), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ValidationService_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ValidationService::Service, ::VeriBlock::VeriBlockPublication, ::VeriBlock::GeneralReply>(
          std::mem_fn(&ValidationService::Service::CheckMerklePathVeriBlockPublication), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ValidationService_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ValidationService::Service, ::VeriBlock::VeriBlockTransaction, ::VeriBlock::GeneralReply>(
          std::mem_fn(&ValidationService::Service::VerifyVeriBlockTransaction), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ValidationService_method_names[9],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ValidationService::Service, ::VeriBlock::VeriBlockTransaction, ::VeriBlock::GeneralReply>(
          std::mem_fn(&ValidationService::Service::CheckSignatureVeriBlockTransaction), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ValidationService_method_names[10],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ValidationService::Service, ::VeriBlock::VeriBlockBlock, ::VeriBlock::GeneralReply>(
          std::mem_fn(&ValidationService::Service::VerifyVeriBlockBlock), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ValidationService_method_names[11],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ValidationService::Service, ::VeriBlock::VeriBlockBlock, ::VeriBlock::GeneralReply>(
          std::mem_fn(&ValidationService::Service::CheckProofOfWorkVeriBlockBlock), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ValidationService_method_names[12],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ValidationService::Service, ::VeriBlock::VeriBlockBlock, ::VeriBlock::GeneralReply>(
          std::mem_fn(&ValidationService::Service::CheckMaximumDriftVeriBlockBlock), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ValidationService_method_names[13],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ValidationService::Service, ::VeriBlock::BitcoinBlock, ::VeriBlock::GeneralReply>(
          std::mem_fn(&ValidationService::Service::VerifyBitcoinBlock), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ValidationService_method_names[14],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ValidationService::Service, ::VeriBlock::BitcoinBlock, ::VeriBlock::GeneralReply>(
          std::mem_fn(&ValidationService::Service::CheckProofOfWorkBitcoinBlock), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ValidationService_method_names[15],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ValidationService::Service, ::VeriBlock::BitcoinBlock, ::VeriBlock::GeneralReply>(
          std::mem_fn(&ValidationService::Service::CheckMaximumDriftBitcoinBlock), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ValidationService_method_names[16],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ValidationService::Service, ::VeriBlock::AltPublication, ::VeriBlock::GeneralReply>(
          std::mem_fn(&ValidationService::Service::VerifyAltPublication), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ValidationService_method_names[17],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ValidationService::Service, ::VeriBlock::AltPublication, ::VeriBlock::GeneralReply>(
          std::mem_fn(&ValidationService::Service::CheckMerklePathAltPublication), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ValidationService_method_names[18],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ValidationService::Service, ::VeriBlock::AltPublication, ::VeriBlock::GeneralReply>(
          std::mem_fn(&ValidationService::Service::CheckBlocksAltPublication), this)));
}

ValidationService::Service::~Service() {
}

::grpc::Status ValidationService::Service::VerifyVeriBlockPoPTx(::grpc::ServerContext* context, const ::VeriBlock::VeriBlockPoPTransaction* request, ::VeriBlock::GeneralReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ValidationService::Service::CheckSignatureVeriBlockPoPTx(::grpc::ServerContext* context, const ::VeriBlock::VeriBlockPoPTransaction* request, ::VeriBlock::GeneralReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ValidationService::Service::CheckBitcoinTransactionForPoPData(::grpc::ServerContext* context, const ::VeriBlock::VeriBlockPoPTransaction* request, ::VeriBlock::GeneralReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ValidationService::Service::CheckBitcoinMerklePathVeriBlockPoPTx(::grpc::ServerContext* context, const ::VeriBlock::VeriBlockPoPTransaction* request, ::VeriBlock::GeneralReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ValidationService::Service::CheckBitcoinBlocksVeriBlockPoPTx(::grpc::ServerContext* context, const ::VeriBlock::VeriBlockPoPTransaction* request, ::VeriBlock::GeneralReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ValidationService::Service::VerifyVeriBlockPublication(::grpc::ServerContext* context, const ::VeriBlock::VeriBlockPublication* request, ::VeriBlock::GeneralReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ValidationService::Service::CheckBlocksVeriBlockPublication(::grpc::ServerContext* context, const ::VeriBlock::VeriBlockPublication* request, ::VeriBlock::GeneralReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ValidationService::Service::CheckMerklePathVeriBlockPublication(::grpc::ServerContext* context, const ::VeriBlock::VeriBlockPublication* request, ::VeriBlock::GeneralReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ValidationService::Service::VerifyVeriBlockTransaction(::grpc::ServerContext* context, const ::VeriBlock::VeriBlockTransaction* request, ::VeriBlock::GeneralReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ValidationService::Service::CheckSignatureVeriBlockTransaction(::grpc::ServerContext* context, const ::VeriBlock::VeriBlockTransaction* request, ::VeriBlock::GeneralReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ValidationService::Service::VerifyVeriBlockBlock(::grpc::ServerContext* context, const ::VeriBlock::VeriBlockBlock* request, ::VeriBlock::GeneralReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ValidationService::Service::CheckProofOfWorkVeriBlockBlock(::grpc::ServerContext* context, const ::VeriBlock::VeriBlockBlock* request, ::VeriBlock::GeneralReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ValidationService::Service::CheckMaximumDriftVeriBlockBlock(::grpc::ServerContext* context, const ::VeriBlock::VeriBlockBlock* request, ::VeriBlock::GeneralReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ValidationService::Service::VerifyBitcoinBlock(::grpc::ServerContext* context, const ::VeriBlock::BitcoinBlock* request, ::VeriBlock::GeneralReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ValidationService::Service::CheckProofOfWorkBitcoinBlock(::grpc::ServerContext* context, const ::VeriBlock::BitcoinBlock* request, ::VeriBlock::GeneralReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ValidationService::Service::CheckMaximumDriftBitcoinBlock(::grpc::ServerContext* context, const ::VeriBlock::BitcoinBlock* request, ::VeriBlock::GeneralReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ValidationService::Service::VerifyAltPublication(::grpc::ServerContext* context, const ::VeriBlock::AltPublication* request, ::VeriBlock::GeneralReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ValidationService::Service::CheckMerklePathAltPublication(::grpc::ServerContext* context, const ::VeriBlock::AltPublication* request, ::VeriBlock::GeneralReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ValidationService::Service::CheckBlocksAltPublication(::grpc::ServerContext* context, const ::VeriBlock::AltPublication* request, ::VeriBlock::GeneralReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* ForkresolutionService_method_names[] = {
  "/VeriBlock.ForkresolutionService/CompareTwoBranches",
  "/VeriBlock.ForkresolutionService/SetForkresolutionConfig",
};

std::unique_ptr< ForkresolutionService::Stub> ForkresolutionService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< ForkresolutionService::Stub> stub(new ForkresolutionService::Stub(channel));
  return stub;
}

ForkresolutionService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_CompareTwoBranches_(ForkresolutionService_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetForkresolutionConfig_(ForkresolutionService_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status ForkresolutionService::Stub::CompareTwoBranches(::grpc::ClientContext* context, const ::VeriBlock::TwoBranchesRequest& request, ::VeriBlock::CompareReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_CompareTwoBranches_, context, request, response);
}

void ForkresolutionService::Stub::experimental_async::CompareTwoBranches(::grpc::ClientContext* context, const ::VeriBlock::TwoBranchesRequest* request, ::VeriBlock::CompareReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_CompareTwoBranches_, context, request, response, std::move(f));
}

void ForkresolutionService::Stub::experimental_async::CompareTwoBranches(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::CompareReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_CompareTwoBranches_, context, request, response, std::move(f));
}

void ForkresolutionService::Stub::experimental_async::CompareTwoBranches(::grpc::ClientContext* context, const ::VeriBlock::TwoBranchesRequest* request, ::VeriBlock::CompareReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_CompareTwoBranches_, context, request, response, reactor);
}

void ForkresolutionService::Stub::experimental_async::CompareTwoBranches(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::CompareReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_CompareTwoBranches_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::VeriBlock::CompareReply>* ForkresolutionService::Stub::AsyncCompareTwoBranchesRaw(::grpc::ClientContext* context, const ::VeriBlock::TwoBranchesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::VeriBlock::CompareReply>::Create(channel_.get(), cq, rpcmethod_CompareTwoBranches_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::VeriBlock::CompareReply>* ForkresolutionService::Stub::PrepareAsyncCompareTwoBranchesRaw(::grpc::ClientContext* context, const ::VeriBlock::TwoBranchesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::VeriBlock::CompareReply>::Create(channel_.get(), cq, rpcmethod_CompareTwoBranches_, context, request, false);
}

::grpc::Status ForkresolutionService::Stub::SetForkresolutionConfig(::grpc::ClientContext* context, const ::VeriBlock::ForkresolutionConfigRequest& request, ::VeriBlock::GeneralReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SetForkresolutionConfig_, context, request, response);
}

void ForkresolutionService::Stub::experimental_async::SetForkresolutionConfig(::grpc::ClientContext* context, const ::VeriBlock::ForkresolutionConfigRequest* request, ::VeriBlock::GeneralReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetForkresolutionConfig_, context, request, response, std::move(f));
}

void ForkresolutionService::Stub::experimental_async::SetForkresolutionConfig(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::GeneralReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetForkresolutionConfig_, context, request, response, std::move(f));
}

void ForkresolutionService::Stub::experimental_async::SetForkresolutionConfig(::grpc::ClientContext* context, const ::VeriBlock::ForkresolutionConfigRequest* request, ::VeriBlock::GeneralReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SetForkresolutionConfig_, context, request, response, reactor);
}

void ForkresolutionService::Stub::experimental_async::SetForkresolutionConfig(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::GeneralReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SetForkresolutionConfig_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::VeriBlock::GeneralReply>* ForkresolutionService::Stub::AsyncSetForkresolutionConfigRaw(::grpc::ClientContext* context, const ::VeriBlock::ForkresolutionConfigRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::VeriBlock::GeneralReply>::Create(channel_.get(), cq, rpcmethod_SetForkresolutionConfig_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::VeriBlock::GeneralReply>* ForkresolutionService::Stub::PrepareAsyncSetForkresolutionConfigRaw(::grpc::ClientContext* context, const ::VeriBlock::ForkresolutionConfigRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::VeriBlock::GeneralReply>::Create(channel_.get(), cq, rpcmethod_SetForkresolutionConfig_, context, request, false);
}

ForkresolutionService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ForkresolutionService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ForkresolutionService::Service, ::VeriBlock::TwoBranchesRequest, ::VeriBlock::CompareReply>(
          std::mem_fn(&ForkresolutionService::Service::CompareTwoBranches), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ForkresolutionService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ForkresolutionService::Service, ::VeriBlock::ForkresolutionConfigRequest, ::VeriBlock::GeneralReply>(
          std::mem_fn(&ForkresolutionService::Service::SetForkresolutionConfig), this)));
}

ForkresolutionService::Service::~Service() {
}

::grpc::Status ForkresolutionService::Service::CompareTwoBranches(::grpc::ServerContext* context, const ::VeriBlock::TwoBranchesRequest* request, ::VeriBlock::CompareReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ForkresolutionService::Service::SetForkresolutionConfig(::grpc::ServerContext* context, const ::VeriBlock::ForkresolutionConfigRequest* request, ::VeriBlock::GeneralReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace VeriBlock

