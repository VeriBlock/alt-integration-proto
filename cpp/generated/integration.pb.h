// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: integration.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_integration_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_integration_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/descriptor.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_integration_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_integration_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[60]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_integration_2eproto;
namespace VeriBlock {
class AddPayloadsRequest;
class AddPayloadsRequestDefaultTypeInternal;
extern AddPayloadsRequestDefaultTypeInternal _AddPayloadsRequest_default_instance_;
class AddTemporaryPayloadsRequest;
class AddTemporaryPayloadsRequestDefaultTypeInternal;
extern AddTemporaryPayloadsRequestDefaultTypeInternal _AddTemporaryPayloadsRequest_default_instance_;
class Address;
class AddressDefaultTypeInternal;
extern AddressDefaultTypeInternal _Address_default_instance_;
class AddressReply;
class AddressReplyDefaultTypeInternal;
extern AddressReplyDefaultTypeInternal _AddressReply_default_instance_;
class AltChainBlock;
class AltChainBlockDefaultTypeInternal;
extern AltChainBlockDefaultTypeInternal _AltChainBlock_default_instance_;
class AltChainConfigRequest;
class AltChainConfigRequestDefaultTypeInternal;
extern AltChainConfigRequestDefaultTypeInternal _AltChainConfigRequest_default_instance_;
class AltPublication;
class AltPublicationDefaultTypeInternal;
extern AltPublicationDefaultTypeInternal _AltPublication_default_instance_;
class AltPublicationReply;
class AltPublicationReplyDefaultTypeInternal;
extern AltPublicationReplyDefaultTypeInternal _AltPublicationReply_default_instance_;
class BitcoinBlock;
class BitcoinBlockDefaultTypeInternal;
extern BitcoinBlockDefaultTypeInternal _BitcoinBlock_default_instance_;
class BitcoinBlockReply;
class BitcoinBlockReplyDefaultTypeInternal;
extern BitcoinBlockReplyDefaultTypeInternal _BitcoinBlockReply_default_instance_;
class BitcoinTransaction;
class BitcoinTransactionDefaultTypeInternal;
extern BitcoinTransactionDefaultTypeInternal _BitcoinTransaction_default_instance_;
class BitcoinTransactionReply;
class BitcoinTransactionReplyDefaultTypeInternal;
extern BitcoinTransactionReplyDefaultTypeInternal _BitcoinTransactionReply_default_instance_;
class BlockIndex;
class BlockIndexDefaultTypeInternal;
extern BlockIndexDefaultTypeInternal _BlockIndex_default_instance_;
class BytesArrayReply;
class BytesArrayReplyDefaultTypeInternal;
extern BytesArrayReplyDefaultTypeInternal _BytesArrayReply_default_instance_;
class BytesArrayRequest;
class BytesArrayRequestDefaultTypeInternal;
extern BytesArrayRequestDefaultTypeInternal _BytesArrayRequest_default_instance_;
class CalculatorConfig;
class CalculatorConfigDefaultTypeInternal;
extern CalculatorConfigDefaultTypeInternal _CalculatorConfig_default_instance_;
class Coin;
class CoinDefaultTypeInternal;
extern CoinDefaultTypeInternal _Coin_default_instance_;
class CompareReply;
class CompareReplyDefaultTypeInternal;
extern CompareReplyDefaultTypeInternal _CompareReply_default_instance_;
class EmptyRequest;
class EmptyRequestDefaultTypeInternal;
extern EmptyRequestDefaultTypeInternal _EmptyRequest_default_instance_;
class FlatScoreRoundConfig;
class FlatScoreRoundConfigDefaultTypeInternal;
extern FlatScoreRoundConfigDefaultTypeInternal _FlatScoreRoundConfig_default_instance_;
class ForkresolutionConfigRequest;
class ForkresolutionConfigRequestDefaultTypeInternal;
extern ForkresolutionConfigRequestDefaultTypeInternal _ForkresolutionConfigRequest_default_instance_;
class GeneralReply;
class GeneralReplyDefaultTypeInternal;
extern GeneralReplyDefaultTypeInternal _GeneralReply_default_instance_;
class GetCalculatorReply;
class GetCalculatorReplyDefaultTypeInternal;
extern GetCalculatorReplyDefaultTypeInternal _GetCalculatorReply_default_instance_;
class GetLastKnownBTCBlocksReply;
class GetLastKnownBTCBlocksReplyDefaultTypeInternal;
extern GetLastKnownBTCBlocksReplyDefaultTypeInternal _GetLastKnownBTCBlocksReply_default_instance_;
class GetLastKnownBlocksRequest;
class GetLastKnownBlocksRequestDefaultTypeInternal;
extern GetLastKnownBlocksRequestDefaultTypeInternal _GetLastKnownBlocksRequest_default_instance_;
class GetLastKnownVBKBlocksReply;
class GetLastKnownVBKBlocksReplyDefaultTypeInternal;
extern GetLastKnownVBKBlocksReplyDefaultTypeInternal _GetLastKnownVBKBlocksReply_default_instance_;
class GetMainVBKHeightOfATVReply;
class GetMainVBKHeightOfATVReplyDefaultTypeInternal;
extern GetMainVBKHeightOfATVReplyDefaultTypeInternal _GetMainVBKHeightOfATVReply_default_instance_;
class MerklePath;
class MerklePathDefaultTypeInternal;
extern MerklePathDefaultTypeInternal _MerklePath_default_instance_;
class MerklePathReply;
class MerklePathReplyDefaultTypeInternal;
extern MerklePathReplyDefaultTypeInternal _MerklePathReply_default_instance_;
class MerklePathRequest;
class MerklePathRequestDefaultTypeInternal;
extern MerklePathRequestDefaultTypeInternal _MerklePathRequest_default_instance_;
class NetworkByte;
class NetworkByteDefaultTypeInternal;
extern NetworkByteDefaultTypeInternal _NetworkByte_default_instance_;
class Output;
class OutputDefaultTypeInternal;
extern OutputDefaultTypeInternal _Output_default_instance_;
class OutputReply;
class OutputReplyDefaultTypeInternal;
extern OutputReplyDefaultTypeInternal _OutputReply_default_instance_;
class PopEndorsement;
class PopEndorsementDefaultTypeInternal;
extern PopEndorsementDefaultTypeInternal _PopEndorsement_default_instance_;
class PublicationData;
class PublicationDataDefaultTypeInternal;
extern PublicationDataDefaultTypeInternal _PublicationData_default_instance_;
class PublicationDataReply;
class PublicationDataReplyDefaultTypeInternal;
extern PublicationDataReplyDefaultTypeInternal _PublicationDataReply_default_instance_;
class RelativeScoreConfig;
class RelativeScoreConfigDefaultTypeInternal;
extern RelativeScoreConfigDefaultTypeInternal _RelativeScoreConfig_default_instance_;
class RemovePayloadsRequest;
class RemovePayloadsRequestDefaultTypeInternal;
extern RemovePayloadsRequestDefaultTypeInternal _RemovePayloadsRequest_default_instance_;
class RewardCurveConfig;
class RewardCurveConfigDefaultTypeInternal;
extern RewardCurveConfigDefaultTypeInternal _RewardCurveConfig_default_instance_;
class RewardEndorsement;
class RewardEndorsementDefaultTypeInternal;
extern RewardEndorsementDefaultTypeInternal _RewardEndorsement_default_instance_;
class RewardOutput;
class RewardOutputDefaultTypeInternal;
extern RewardOutputDefaultTypeInternal _RewardOutput_default_instance_;
class RewardsCalculateOutputsReply;
class RewardsCalculateOutputsReplyDefaultTypeInternal;
extern RewardsCalculateOutputsReplyDefaultTypeInternal _RewardsCalculateOutputsReply_default_instance_;
class RewardsCalculateOutputsRequest;
class RewardsCalculateOutputsRequestDefaultTypeInternal;
extern RewardsCalculateOutputsRequestDefaultTypeInternal _RewardsCalculateOutputsRequest_default_instance_;
class RewardsCalculateScoreReply;
class RewardsCalculateScoreReplyDefaultTypeInternal;
extern RewardsCalculateScoreReplyDefaultTypeInternal _RewardsCalculateScoreReply_default_instance_;
class RewardsCalculateScoreRequest;
class RewardsCalculateScoreRequestDefaultTypeInternal;
extern RewardsCalculateScoreRequestDefaultTypeInternal _RewardsCalculateScoreRequest_default_instance_;
class RoundRatioConfig;
class RoundRatioConfigDefaultTypeInternal;
extern RoundRatioConfigDefaultTypeInternal _RoundRatioConfig_default_instance_;
class SetCalculatorRequest;
class SetCalculatorRequestDefaultTypeInternal;
extern SetCalculatorRequestDefaultTypeInternal _SetCalculatorRequest_default_instance_;
class SimplifyVTBsReply;
class SimplifyVTBsReplyDefaultTypeInternal;
extern SimplifyVTBsReplyDefaultTypeInternal _SimplifyVTBsReply_default_instance_;
class SimplifyVTBsRequest;
class SimplifyVTBsRequestDefaultTypeInternal;
extern SimplifyVTBsRequestDefaultTypeInternal _SimplifyVTBsRequest_default_instance_;
class TwoBranchesRequest;
class TwoBranchesRequestDefaultTypeInternal;
extern TwoBranchesRequestDefaultTypeInternal _TwoBranchesRequest_default_instance_;
class VeriBlockBlock;
class VeriBlockBlockDefaultTypeInternal;
extern VeriBlockBlockDefaultTypeInternal _VeriBlockBlock_default_instance_;
class VeriBlockBlockReply;
class VeriBlockBlockReplyDefaultTypeInternal;
extern VeriBlockBlockReplyDefaultTypeInternal _VeriBlockBlockReply_default_instance_;
class VeriBlockMerklePath;
class VeriBlockMerklePathDefaultTypeInternal;
extern VeriBlockMerklePathDefaultTypeInternal _VeriBlockMerklePath_default_instance_;
class VeriBlockMerklePathReply;
class VeriBlockMerklePathReplyDefaultTypeInternal;
extern VeriBlockMerklePathReplyDefaultTypeInternal _VeriBlockMerklePathReply_default_instance_;
class VeriBlockPoPTransaction;
class VeriBlockPoPTransactionDefaultTypeInternal;
extern VeriBlockPoPTransactionDefaultTypeInternal _VeriBlockPoPTransaction_default_instance_;
class VeriBlockPoPTransactionReply;
class VeriBlockPoPTransactionReplyDefaultTypeInternal;
extern VeriBlockPoPTransactionReplyDefaultTypeInternal _VeriBlockPoPTransactionReply_default_instance_;
class VeriBlockPublication;
class VeriBlockPublicationDefaultTypeInternal;
extern VeriBlockPublicationDefaultTypeInternal _VeriBlockPublication_default_instance_;
class VeriBlockPublicationReply;
class VeriBlockPublicationReplyDefaultTypeInternal;
extern VeriBlockPublicationReplyDefaultTypeInternal _VeriBlockPublicationReply_default_instance_;
class VeriBlockTransaction;
class VeriBlockTransactionDefaultTypeInternal;
extern VeriBlockTransactionDefaultTypeInternal _VeriBlockTransaction_default_instance_;
class VeriBlockTransactionReply;
class VeriBlockTransactionReplyDefaultTypeInternal;
extern VeriBlockTransactionReplyDefaultTypeInternal _VeriBlockTransactionReply_default_instance_;
}  // namespace VeriBlock
PROTOBUF_NAMESPACE_OPEN
template<> ::VeriBlock::AddPayloadsRequest* Arena::CreateMaybeMessage<::VeriBlock::AddPayloadsRequest>(Arena*);
template<> ::VeriBlock::AddTemporaryPayloadsRequest* Arena::CreateMaybeMessage<::VeriBlock::AddTemporaryPayloadsRequest>(Arena*);
template<> ::VeriBlock::Address* Arena::CreateMaybeMessage<::VeriBlock::Address>(Arena*);
template<> ::VeriBlock::AddressReply* Arena::CreateMaybeMessage<::VeriBlock::AddressReply>(Arena*);
template<> ::VeriBlock::AltChainBlock* Arena::CreateMaybeMessage<::VeriBlock::AltChainBlock>(Arena*);
template<> ::VeriBlock::AltChainConfigRequest* Arena::CreateMaybeMessage<::VeriBlock::AltChainConfigRequest>(Arena*);
template<> ::VeriBlock::AltPublication* Arena::CreateMaybeMessage<::VeriBlock::AltPublication>(Arena*);
template<> ::VeriBlock::AltPublicationReply* Arena::CreateMaybeMessage<::VeriBlock::AltPublicationReply>(Arena*);
template<> ::VeriBlock::BitcoinBlock* Arena::CreateMaybeMessage<::VeriBlock::BitcoinBlock>(Arena*);
template<> ::VeriBlock::BitcoinBlockReply* Arena::CreateMaybeMessage<::VeriBlock::BitcoinBlockReply>(Arena*);
template<> ::VeriBlock::BitcoinTransaction* Arena::CreateMaybeMessage<::VeriBlock::BitcoinTransaction>(Arena*);
template<> ::VeriBlock::BitcoinTransactionReply* Arena::CreateMaybeMessage<::VeriBlock::BitcoinTransactionReply>(Arena*);
template<> ::VeriBlock::BlockIndex* Arena::CreateMaybeMessage<::VeriBlock::BlockIndex>(Arena*);
template<> ::VeriBlock::BytesArrayReply* Arena::CreateMaybeMessage<::VeriBlock::BytesArrayReply>(Arena*);
template<> ::VeriBlock::BytesArrayRequest* Arena::CreateMaybeMessage<::VeriBlock::BytesArrayRequest>(Arena*);
template<> ::VeriBlock::CalculatorConfig* Arena::CreateMaybeMessage<::VeriBlock::CalculatorConfig>(Arena*);
template<> ::VeriBlock::Coin* Arena::CreateMaybeMessage<::VeriBlock::Coin>(Arena*);
template<> ::VeriBlock::CompareReply* Arena::CreateMaybeMessage<::VeriBlock::CompareReply>(Arena*);
template<> ::VeriBlock::EmptyRequest* Arena::CreateMaybeMessage<::VeriBlock::EmptyRequest>(Arena*);
template<> ::VeriBlock::FlatScoreRoundConfig* Arena::CreateMaybeMessage<::VeriBlock::FlatScoreRoundConfig>(Arena*);
template<> ::VeriBlock::ForkresolutionConfigRequest* Arena::CreateMaybeMessage<::VeriBlock::ForkresolutionConfigRequest>(Arena*);
template<> ::VeriBlock::GeneralReply* Arena::CreateMaybeMessage<::VeriBlock::GeneralReply>(Arena*);
template<> ::VeriBlock::GetCalculatorReply* Arena::CreateMaybeMessage<::VeriBlock::GetCalculatorReply>(Arena*);
template<> ::VeriBlock::GetLastKnownBTCBlocksReply* Arena::CreateMaybeMessage<::VeriBlock::GetLastKnownBTCBlocksReply>(Arena*);
template<> ::VeriBlock::GetLastKnownBlocksRequest* Arena::CreateMaybeMessage<::VeriBlock::GetLastKnownBlocksRequest>(Arena*);
template<> ::VeriBlock::GetLastKnownVBKBlocksReply* Arena::CreateMaybeMessage<::VeriBlock::GetLastKnownVBKBlocksReply>(Arena*);
template<> ::VeriBlock::GetMainVBKHeightOfATVReply* Arena::CreateMaybeMessage<::VeriBlock::GetMainVBKHeightOfATVReply>(Arena*);
template<> ::VeriBlock::MerklePath* Arena::CreateMaybeMessage<::VeriBlock::MerklePath>(Arena*);
template<> ::VeriBlock::MerklePathReply* Arena::CreateMaybeMessage<::VeriBlock::MerklePathReply>(Arena*);
template<> ::VeriBlock::MerklePathRequest* Arena::CreateMaybeMessage<::VeriBlock::MerklePathRequest>(Arena*);
template<> ::VeriBlock::NetworkByte* Arena::CreateMaybeMessage<::VeriBlock::NetworkByte>(Arena*);
template<> ::VeriBlock::Output* Arena::CreateMaybeMessage<::VeriBlock::Output>(Arena*);
template<> ::VeriBlock::OutputReply* Arena::CreateMaybeMessage<::VeriBlock::OutputReply>(Arena*);
template<> ::VeriBlock::PopEndorsement* Arena::CreateMaybeMessage<::VeriBlock::PopEndorsement>(Arena*);
template<> ::VeriBlock::PublicationData* Arena::CreateMaybeMessage<::VeriBlock::PublicationData>(Arena*);
template<> ::VeriBlock::PublicationDataReply* Arena::CreateMaybeMessage<::VeriBlock::PublicationDataReply>(Arena*);
template<> ::VeriBlock::RelativeScoreConfig* Arena::CreateMaybeMessage<::VeriBlock::RelativeScoreConfig>(Arena*);
template<> ::VeriBlock::RemovePayloadsRequest* Arena::CreateMaybeMessage<::VeriBlock::RemovePayloadsRequest>(Arena*);
template<> ::VeriBlock::RewardCurveConfig* Arena::CreateMaybeMessage<::VeriBlock::RewardCurveConfig>(Arena*);
template<> ::VeriBlock::RewardEndorsement* Arena::CreateMaybeMessage<::VeriBlock::RewardEndorsement>(Arena*);
template<> ::VeriBlock::RewardOutput* Arena::CreateMaybeMessage<::VeriBlock::RewardOutput>(Arena*);
template<> ::VeriBlock::RewardsCalculateOutputsReply* Arena::CreateMaybeMessage<::VeriBlock::RewardsCalculateOutputsReply>(Arena*);
template<> ::VeriBlock::RewardsCalculateOutputsRequest* Arena::CreateMaybeMessage<::VeriBlock::RewardsCalculateOutputsRequest>(Arena*);
template<> ::VeriBlock::RewardsCalculateScoreReply* Arena::CreateMaybeMessage<::VeriBlock::RewardsCalculateScoreReply>(Arena*);
template<> ::VeriBlock::RewardsCalculateScoreRequest* Arena::CreateMaybeMessage<::VeriBlock::RewardsCalculateScoreRequest>(Arena*);
template<> ::VeriBlock::RoundRatioConfig* Arena::CreateMaybeMessage<::VeriBlock::RoundRatioConfig>(Arena*);
template<> ::VeriBlock::SetCalculatorRequest* Arena::CreateMaybeMessage<::VeriBlock::SetCalculatorRequest>(Arena*);
template<> ::VeriBlock::SimplifyVTBsReply* Arena::CreateMaybeMessage<::VeriBlock::SimplifyVTBsReply>(Arena*);
template<> ::VeriBlock::SimplifyVTBsRequest* Arena::CreateMaybeMessage<::VeriBlock::SimplifyVTBsRequest>(Arena*);
template<> ::VeriBlock::TwoBranchesRequest* Arena::CreateMaybeMessage<::VeriBlock::TwoBranchesRequest>(Arena*);
template<> ::VeriBlock::VeriBlockBlock* Arena::CreateMaybeMessage<::VeriBlock::VeriBlockBlock>(Arena*);
template<> ::VeriBlock::VeriBlockBlockReply* Arena::CreateMaybeMessage<::VeriBlock::VeriBlockBlockReply>(Arena*);
template<> ::VeriBlock::VeriBlockMerklePath* Arena::CreateMaybeMessage<::VeriBlock::VeriBlockMerklePath>(Arena*);
template<> ::VeriBlock::VeriBlockMerklePathReply* Arena::CreateMaybeMessage<::VeriBlock::VeriBlockMerklePathReply>(Arena*);
template<> ::VeriBlock::VeriBlockPoPTransaction* Arena::CreateMaybeMessage<::VeriBlock::VeriBlockPoPTransaction>(Arena*);
template<> ::VeriBlock::VeriBlockPoPTransactionReply* Arena::CreateMaybeMessage<::VeriBlock::VeriBlockPoPTransactionReply>(Arena*);
template<> ::VeriBlock::VeriBlockPublication* Arena::CreateMaybeMessage<::VeriBlock::VeriBlockPublication>(Arena*);
template<> ::VeriBlock::VeriBlockPublicationReply* Arena::CreateMaybeMessage<::VeriBlock::VeriBlockPublicationReply>(Arena*);
template<> ::VeriBlock::VeriBlockTransaction* Arena::CreateMaybeMessage<::VeriBlock::VeriBlockTransaction>(Arena*);
template<> ::VeriBlock::VeriBlockTransactionReply* Arena::CreateMaybeMessage<::VeriBlock::VeriBlockTransactionReply>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace VeriBlock {

// ===================================================================

class PublicationData :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:VeriBlock.PublicationData) */ {
 public:
  PublicationData();
  virtual ~PublicationData();

  PublicationData(const PublicationData& from);
  PublicationData(PublicationData&& from) noexcept
    : PublicationData() {
    *this = ::std::move(from);
  }

  inline PublicationData& operator=(const PublicationData& from) {
    CopyFrom(from);
    return *this;
  }
  inline PublicationData& operator=(PublicationData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PublicationData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PublicationData* internal_default_instance() {
    return reinterpret_cast<const PublicationData*>(
               &_PublicationData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PublicationData& a, PublicationData& b) {
    a.Swap(&b);
  }
  inline void Swap(PublicationData* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PublicationData* New() const final {
    return CreateMaybeMessage<PublicationData>(nullptr);
  }

  PublicationData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PublicationData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PublicationData& from);
  void MergeFrom(const PublicationData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PublicationData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "VeriBlock.PublicationData";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_integration_2eproto);
    return ::descriptor_table_integration_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 2,
    kPayoutInfoFieldNumber = 3,
    kVeriblockContextFieldNumber = 4,
    kIdentifierFieldNumber = 1,
  };
  // bytes header = 2 [(.VeriBlock.hex_encoded) = true];
  void clear_header();
  const std::string& header() const;
  void set_header(const std::string& value);
  void set_header(std::string&& value);
  void set_header(const char* value);
  void set_header(const void* value, size_t size);
  std::string* mutable_header();
  std::string* release_header();
  void set_allocated_header(std::string* header);

  // bytes payoutInfo = 3 [(.VeriBlock.hex_encoded) = true];
  void clear_payoutinfo();
  const std::string& payoutinfo() const;
  void set_payoutinfo(const std::string& value);
  void set_payoutinfo(std::string&& value);
  void set_payoutinfo(const char* value);
  void set_payoutinfo(const void* value, size_t size);
  std::string* mutable_payoutinfo();
  std::string* release_payoutinfo();
  void set_allocated_payoutinfo(std::string* payoutinfo);

  // bytes veriblockContext = 4 [(.VeriBlock.hex_encoded) = true];
  void clear_veriblockcontext();
  const std::string& veriblockcontext() const;
  void set_veriblockcontext(const std::string& value);
  void set_veriblockcontext(std::string&& value);
  void set_veriblockcontext(const char* value);
  void set_veriblockcontext(const void* value, size_t size);
  std::string* mutable_veriblockcontext();
  std::string* release_veriblockcontext();
  void set_allocated_veriblockcontext(std::string* veriblockcontext);

  // int64 identifier = 1;
  void clear_identifier();
  ::PROTOBUF_NAMESPACE_ID::int64 identifier() const;
  void set_identifier(::PROTOBUF_NAMESPACE_ID::int64 value);

  // @@protoc_insertion_point(class_scope:VeriBlock.PublicationData)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr header_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr payoutinfo_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr veriblockcontext_;
  ::PROTOBUF_NAMESPACE_ID::int64 identifier_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_integration_2eproto;
};
// -------------------------------------------------------------------

class BitcoinBlock :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:VeriBlock.BitcoinBlock) */ {
 public:
  BitcoinBlock();
  virtual ~BitcoinBlock();

  BitcoinBlock(const BitcoinBlock& from);
  BitcoinBlock(BitcoinBlock&& from) noexcept
    : BitcoinBlock() {
    *this = ::std::move(from);
  }

  inline BitcoinBlock& operator=(const BitcoinBlock& from) {
    CopyFrom(from);
    return *this;
  }
  inline BitcoinBlock& operator=(BitcoinBlock&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BitcoinBlock& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BitcoinBlock* internal_default_instance() {
    return reinterpret_cast<const BitcoinBlock*>(
               &_BitcoinBlock_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(BitcoinBlock& a, BitcoinBlock& b) {
    a.Swap(&b);
  }
  inline void Swap(BitcoinBlock* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BitcoinBlock* New() const final {
    return CreateMaybeMessage<BitcoinBlock>(nullptr);
  }

  BitcoinBlock* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BitcoinBlock>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BitcoinBlock& from);
  void MergeFrom(const BitcoinBlock& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BitcoinBlock* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "VeriBlock.BitcoinBlock";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_integration_2eproto);
    return ::descriptor_table_integration_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPreviousBlockFieldNumber = 2,
    kMerkleRootFieldNumber = 3,
    kVersionFieldNumber = 1,
    kTimestampFieldNumber = 4,
    kBitsFieldNumber = 5,
    kNonceFieldNumber = 6,
  };
  // bytes previousBlock = 2 [(.VeriBlock.hex_encoded) = true];
  void clear_previousblock();
  const std::string& previousblock() const;
  void set_previousblock(const std::string& value);
  void set_previousblock(std::string&& value);
  void set_previousblock(const char* value);
  void set_previousblock(const void* value, size_t size);
  std::string* mutable_previousblock();
  std::string* release_previousblock();
  void set_allocated_previousblock(std::string* previousblock);

  // bytes merkleRoot = 3 [(.VeriBlock.hex_encoded) = true];
  void clear_merkleroot();
  const std::string& merkleroot() const;
  void set_merkleroot(const std::string& value);
  void set_merkleroot(std::string&& value);
  void set_merkleroot(const char* value);
  void set_merkleroot(const void* value, size_t size);
  std::string* mutable_merkleroot();
  std::string* release_merkleroot();
  void set_allocated_merkleroot(std::string* merkleroot);

  // int32 version = 1;
  void clear_version();
  ::PROTOBUF_NAMESPACE_ID::int32 version() const;
  void set_version(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 timestamp = 4;
  void clear_timestamp();
  ::PROTOBUF_NAMESPACE_ID::int32 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 bits = 5;
  void clear_bits();
  ::PROTOBUF_NAMESPACE_ID::int32 bits() const;
  void set_bits(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 nonce = 6;
  void clear_nonce();
  ::PROTOBUF_NAMESPACE_ID::int32 nonce() const;
  void set_nonce(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:VeriBlock.BitcoinBlock)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr previousblock_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr merkleroot_;
  ::PROTOBUF_NAMESPACE_ID::int32 version_;
  ::PROTOBUF_NAMESPACE_ID::int32 timestamp_;
  ::PROTOBUF_NAMESPACE_ID::int32 bits_;
  ::PROTOBUF_NAMESPACE_ID::int32 nonce_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_integration_2eproto;
};
// -------------------------------------------------------------------

class BitcoinTransaction :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:VeriBlock.BitcoinTransaction) */ {
 public:
  BitcoinTransaction();
  virtual ~BitcoinTransaction();

  BitcoinTransaction(const BitcoinTransaction& from);
  BitcoinTransaction(BitcoinTransaction&& from) noexcept
    : BitcoinTransaction() {
    *this = ::std::move(from);
  }

  inline BitcoinTransaction& operator=(const BitcoinTransaction& from) {
    CopyFrom(from);
    return *this;
  }
  inline BitcoinTransaction& operator=(BitcoinTransaction&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BitcoinTransaction& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BitcoinTransaction* internal_default_instance() {
    return reinterpret_cast<const BitcoinTransaction*>(
               &_BitcoinTransaction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(BitcoinTransaction& a, BitcoinTransaction& b) {
    a.Swap(&b);
  }
  inline void Swap(BitcoinTransaction* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BitcoinTransaction* New() const final {
    return CreateMaybeMessage<BitcoinTransaction>(nullptr);
  }

  BitcoinTransaction* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BitcoinTransaction>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BitcoinTransaction& from);
  void MergeFrom(const BitcoinTransaction& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BitcoinTransaction* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "VeriBlock.BitcoinTransaction";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_integration_2eproto);
    return ::descriptor_table_integration_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRawFieldNumber = 1,
  };
  // bytes raw = 1;
  void clear_raw();
  const std::string& raw() const;
  void set_raw(const std::string& value);
  void set_raw(std::string&& value);
  void set_raw(const char* value);
  void set_raw(const void* value, size_t size);
  std::string* mutable_raw();
  std::string* release_raw();
  void set_allocated_raw(std::string* raw);

  // @@protoc_insertion_point(class_scope:VeriBlock.BitcoinTransaction)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr raw_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_integration_2eproto;
};
// -------------------------------------------------------------------

class VeriBlockBlock :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:VeriBlock.VeriBlockBlock) */ {
 public:
  VeriBlockBlock();
  virtual ~VeriBlockBlock();

  VeriBlockBlock(const VeriBlockBlock& from);
  VeriBlockBlock(VeriBlockBlock&& from) noexcept
    : VeriBlockBlock() {
    *this = ::std::move(from);
  }

  inline VeriBlockBlock& operator=(const VeriBlockBlock& from) {
    CopyFrom(from);
    return *this;
  }
  inline VeriBlockBlock& operator=(VeriBlockBlock&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const VeriBlockBlock& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VeriBlockBlock* internal_default_instance() {
    return reinterpret_cast<const VeriBlockBlock*>(
               &_VeriBlockBlock_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(VeriBlockBlock& a, VeriBlockBlock& b) {
    a.Swap(&b);
  }
  inline void Swap(VeriBlockBlock* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VeriBlockBlock* New() const final {
    return CreateMaybeMessage<VeriBlockBlock>(nullptr);
  }

  VeriBlockBlock* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VeriBlockBlock>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VeriBlockBlock& from);
  void MergeFrom(const VeriBlockBlock& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VeriBlockBlock* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "VeriBlock.VeriBlockBlock";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_integration_2eproto);
    return ::descriptor_table_integration_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPreviousBlockFieldNumber = 3,
    kPreviousKeystoneFieldNumber = 4,
    kSecondPreviousKeystoneFieldNumber = 5,
    kMerkleRootFieldNumber = 6,
    kHeightFieldNumber = 1,
    kVersionFieldNumber = 2,
    kTimestampFieldNumber = 7,
    kDifficultyFieldNumber = 8,
    kNonceFieldNumber = 9,
  };
  // bytes previousBlock = 3 [(.VeriBlock.hex_encoded) = true];
  void clear_previousblock();
  const std::string& previousblock() const;
  void set_previousblock(const std::string& value);
  void set_previousblock(std::string&& value);
  void set_previousblock(const char* value);
  void set_previousblock(const void* value, size_t size);
  std::string* mutable_previousblock();
  std::string* release_previousblock();
  void set_allocated_previousblock(std::string* previousblock);

  // bytes previousKeystone = 4 [(.VeriBlock.hex_encoded) = true];
  void clear_previouskeystone();
  const std::string& previouskeystone() const;
  void set_previouskeystone(const std::string& value);
  void set_previouskeystone(std::string&& value);
  void set_previouskeystone(const char* value);
  void set_previouskeystone(const void* value, size_t size);
  std::string* mutable_previouskeystone();
  std::string* release_previouskeystone();
  void set_allocated_previouskeystone(std::string* previouskeystone);

  // bytes secondPreviousKeystone = 5 [(.VeriBlock.hex_encoded) = true];
  void clear_secondpreviouskeystone();
  const std::string& secondpreviouskeystone() const;
  void set_secondpreviouskeystone(const std::string& value);
  void set_secondpreviouskeystone(std::string&& value);
  void set_secondpreviouskeystone(const char* value);
  void set_secondpreviouskeystone(const void* value, size_t size);
  std::string* mutable_secondpreviouskeystone();
  std::string* release_secondpreviouskeystone();
  void set_allocated_secondpreviouskeystone(std::string* secondpreviouskeystone);

  // bytes merkleRoot = 6 [(.VeriBlock.hex_encoded) = true];
  void clear_merkleroot();
  const std::string& merkleroot() const;
  void set_merkleroot(const std::string& value);
  void set_merkleroot(std::string&& value);
  void set_merkleroot(const char* value);
  void set_merkleroot(const void* value, size_t size);
  std::string* mutable_merkleroot();
  std::string* release_merkleroot();
  void set_allocated_merkleroot(std::string* merkleroot);

  // int32 height = 1;
  void clear_height();
  ::PROTOBUF_NAMESPACE_ID::int32 height() const;
  void set_height(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 version = 2;
  void clear_version();
  ::PROTOBUF_NAMESPACE_ID::int32 version() const;
  void set_version(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 timestamp = 7;
  void clear_timestamp();
  ::PROTOBUF_NAMESPACE_ID::int32 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 difficulty = 8;
  void clear_difficulty();
  ::PROTOBUF_NAMESPACE_ID::int32 difficulty() const;
  void set_difficulty(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 nonce = 9;
  void clear_nonce();
  ::PROTOBUF_NAMESPACE_ID::int32 nonce() const;
  void set_nonce(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:VeriBlock.VeriBlockBlock)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr previousblock_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr previouskeystone_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr secondpreviouskeystone_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr merkleroot_;
  ::PROTOBUF_NAMESPACE_ID::int32 height_;
  ::PROTOBUF_NAMESPACE_ID::int32 version_;
  ::PROTOBUF_NAMESPACE_ID::int32 timestamp_;
  ::PROTOBUF_NAMESPACE_ID::int32 difficulty_;
  ::PROTOBUF_NAMESPACE_ID::int32 nonce_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_integration_2eproto;
};
// -------------------------------------------------------------------

class NetworkByte :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:VeriBlock.NetworkByte) */ {
 public:
  NetworkByte();
  virtual ~NetworkByte();

  NetworkByte(const NetworkByte& from);
  NetworkByte(NetworkByte&& from) noexcept
    : NetworkByte() {
    *this = ::std::move(from);
  }

  inline NetworkByte& operator=(const NetworkByte& from) {
    CopyFrom(from);
    return *this;
  }
  inline NetworkByte& operator=(NetworkByte&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NetworkByte& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NetworkByte* internal_default_instance() {
    return reinterpret_cast<const NetworkByte*>(
               &_NetworkByte_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(NetworkByte& a, NetworkByte& b) {
    a.Swap(&b);
  }
  inline void Swap(NetworkByte* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NetworkByte* New() const final {
    return CreateMaybeMessage<NetworkByte>(nullptr);
  }

  NetworkByte* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NetworkByte>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NetworkByte& from);
  void MergeFrom(const NetworkByte& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NetworkByte* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "VeriBlock.NetworkByte";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_integration_2eproto);
    return ::descriptor_table_integration_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kByteExistsFieldNumber = 1,
    kNetworkByteFieldNumber = 2,
  };
  // bool byteExists = 1;
  void clear_byteexists();
  bool byteexists() const;
  void set_byteexists(bool value);

  // int32 networkByte = 2;
  void clear_networkbyte();
  ::PROTOBUF_NAMESPACE_ID::int32 networkbyte() const;
  void set_networkbyte(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:VeriBlock.NetworkByte)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  bool byteexists_;
  ::PROTOBUF_NAMESPACE_ID::int32 networkbyte_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_integration_2eproto;
};
// -------------------------------------------------------------------

class VeriBlockTransaction :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:VeriBlock.VeriBlockTransaction) */ {
 public:
  VeriBlockTransaction();
  virtual ~VeriBlockTransaction();

  VeriBlockTransaction(const VeriBlockTransaction& from);
  VeriBlockTransaction(VeriBlockTransaction&& from) noexcept
    : VeriBlockTransaction() {
    *this = ::std::move(from);
  }

  inline VeriBlockTransaction& operator=(const VeriBlockTransaction& from) {
    CopyFrom(from);
    return *this;
  }
  inline VeriBlockTransaction& operator=(VeriBlockTransaction&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const VeriBlockTransaction& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VeriBlockTransaction* internal_default_instance() {
    return reinterpret_cast<const VeriBlockTransaction*>(
               &_VeriBlockTransaction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(VeriBlockTransaction& a, VeriBlockTransaction& b) {
    a.Swap(&b);
  }
  inline void Swap(VeriBlockTransaction* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VeriBlockTransaction* New() const final {
    return CreateMaybeMessage<VeriBlockTransaction>(nullptr);
  }

  VeriBlockTransaction* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VeriBlockTransaction>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VeriBlockTransaction& from);
  void MergeFrom(const VeriBlockTransaction& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VeriBlockTransaction* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "VeriBlock.VeriBlockTransaction";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_integration_2eproto);
    return ::descriptor_table_integration_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOutputsFieldNumber = 5,
    kIdFieldNumber = 1,
    kDataFieldNumber = 7,
    kSignatureFieldNumber = 9,
    kPublicKeyFieldNumber = 10,
    kSourceAddressFieldNumber = 3,
    kSourceAmountFieldNumber = 4,
    kPublicationDataFieldNumber = 8,
    kNetworkByteFieldNumber = 11,
    kSignatureIndexFieldNumber = 6,
    kTypeFieldNumber = 2,
  };
  // repeated .VeriBlock.Output outputs = 5;
  int outputs_size() const;
  void clear_outputs();
  ::VeriBlock::Output* mutable_outputs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::VeriBlock::Output >*
      mutable_outputs();
  const ::VeriBlock::Output& outputs(int index) const;
  ::VeriBlock::Output* add_outputs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::VeriBlock::Output >&
      outputs() const;

  // bytes id = 1 [(.VeriBlock.hex_encoded) = true];
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const void* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);

  // bytes data = 7 [(.VeriBlock.hex_encoded) = true];
  void clear_data();
  const std::string& data() const;
  void set_data(const std::string& value);
  void set_data(std::string&& value);
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  std::string* mutable_data();
  std::string* release_data();
  void set_allocated_data(std::string* data);

  // bytes signature = 9 [(.VeriBlock.hex_encoded) = true];
  void clear_signature();
  const std::string& signature() const;
  void set_signature(const std::string& value);
  void set_signature(std::string&& value);
  void set_signature(const char* value);
  void set_signature(const void* value, size_t size);
  std::string* mutable_signature();
  std::string* release_signature();
  void set_allocated_signature(std::string* signature);

  // bytes publicKey = 10 [(.VeriBlock.hex_encoded) = true];
  void clear_publickey();
  const std::string& publickey() const;
  void set_publickey(const std::string& value);
  void set_publickey(std::string&& value);
  void set_publickey(const char* value);
  void set_publickey(const void* value, size_t size);
  std::string* mutable_publickey();
  std::string* release_publickey();
  void set_allocated_publickey(std::string* publickey);

  // .VeriBlock.Address sourceAddress = 3;
  bool has_sourceaddress() const;
  void clear_sourceaddress();
  const ::VeriBlock::Address& sourceaddress() const;
  ::VeriBlock::Address* release_sourceaddress();
  ::VeriBlock::Address* mutable_sourceaddress();
  void set_allocated_sourceaddress(::VeriBlock::Address* sourceaddress);

  // .VeriBlock.Coin sourceAmount = 4;
  bool has_sourceamount() const;
  void clear_sourceamount();
  const ::VeriBlock::Coin& sourceamount() const;
  ::VeriBlock::Coin* release_sourceamount();
  ::VeriBlock::Coin* mutable_sourceamount();
  void set_allocated_sourceamount(::VeriBlock::Coin* sourceamount);

  // .VeriBlock.PublicationData publicationData = 8;
  bool has_publicationdata() const;
  void clear_publicationdata();
  const ::VeriBlock::PublicationData& publicationdata() const;
  ::VeriBlock::PublicationData* release_publicationdata();
  ::VeriBlock::PublicationData* mutable_publicationdata();
  void set_allocated_publicationdata(::VeriBlock::PublicationData* publicationdata);

  // .VeriBlock.NetworkByte networkByte = 11;
  bool has_networkbyte() const;
  void clear_networkbyte();
  const ::VeriBlock::NetworkByte& networkbyte() const;
  ::VeriBlock::NetworkByte* release_networkbyte();
  ::VeriBlock::NetworkByte* mutable_networkbyte();
  void set_allocated_networkbyte(::VeriBlock::NetworkByte* networkbyte);

  // int64 signatureIndex = 6;
  void clear_signatureindex();
  ::PROTOBUF_NAMESPACE_ID::int64 signatureindex() const;
  void set_signatureindex(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int32 type = 2;
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::int32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:VeriBlock.VeriBlockTransaction)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::VeriBlock::Output > outputs_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr signature_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr publickey_;
  ::VeriBlock::Address* sourceaddress_;
  ::VeriBlock::Coin* sourceamount_;
  ::VeriBlock::PublicationData* publicationdata_;
  ::VeriBlock::NetworkByte* networkbyte_;
  ::PROTOBUF_NAMESPACE_ID::int64 signatureindex_;
  ::PROTOBUF_NAMESPACE_ID::int32 type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_integration_2eproto;
};
// -------------------------------------------------------------------

class Address :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:VeriBlock.Address) */ {
 public:
  Address();
  virtual ~Address();

  Address(const Address& from);
  Address(Address&& from) noexcept
    : Address() {
    *this = ::std::move(from);
  }

  inline Address& operator=(const Address& from) {
    CopyFrom(from);
    return *this;
  }
  inline Address& operator=(Address&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Address& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Address* internal_default_instance() {
    return reinterpret_cast<const Address*>(
               &_Address_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(Address& a, Address& b) {
    a.Swap(&b);
  }
  inline void Swap(Address* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Address* New() const final {
    return CreateMaybeMessage<Address>(nullptr);
  }

  Address* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Address>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Address& from);
  void MergeFrom(const Address& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Address* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "VeriBlock.Address";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_integration_2eproto);
    return ::descriptor_table_integration_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAddressFieldNumber = 1,
  };
  // string address = 1;
  void clear_address();
  const std::string& address() const;
  void set_address(const std::string& value);
  void set_address(std::string&& value);
  void set_address(const char* value);
  void set_address(const char* value, size_t size);
  std::string* mutable_address();
  std::string* release_address();
  void set_allocated_address(std::string* address);

  // @@protoc_insertion_point(class_scope:VeriBlock.Address)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr address_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_integration_2eproto;
};
// -------------------------------------------------------------------

class Coin :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:VeriBlock.Coin) */ {
 public:
  Coin();
  virtual ~Coin();

  Coin(const Coin& from);
  Coin(Coin&& from) noexcept
    : Coin() {
    *this = ::std::move(from);
  }

  inline Coin& operator=(const Coin& from) {
    CopyFrom(from);
    return *this;
  }
  inline Coin& operator=(Coin&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Coin& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Coin* internal_default_instance() {
    return reinterpret_cast<const Coin*>(
               &_Coin_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(Coin& a, Coin& b) {
    a.Swap(&b);
  }
  inline void Swap(Coin* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Coin* New() const final {
    return CreateMaybeMessage<Coin>(nullptr);
  }

  Coin* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Coin>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Coin& from);
  void MergeFrom(const Coin& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Coin* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "VeriBlock.Coin";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_integration_2eproto);
    return ::descriptor_table_integration_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAtomicUnitsFieldNumber = 1,
  };
  // int64 atomicUnits = 1;
  void clear_atomicunits();
  ::PROTOBUF_NAMESPACE_ID::int64 atomicunits() const;
  void set_atomicunits(::PROTOBUF_NAMESPACE_ID::int64 value);

  // @@protoc_insertion_point(class_scope:VeriBlock.Coin)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int64 atomicunits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_integration_2eproto;
};
// -------------------------------------------------------------------

class Output :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:VeriBlock.Output) */ {
 public:
  Output();
  virtual ~Output();

  Output(const Output& from);
  Output(Output&& from) noexcept
    : Output() {
    *this = ::std::move(from);
  }

  inline Output& operator=(const Output& from) {
    CopyFrom(from);
    return *this;
  }
  inline Output& operator=(Output&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Output& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Output* internal_default_instance() {
    return reinterpret_cast<const Output*>(
               &_Output_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(Output& a, Output& b) {
    a.Swap(&b);
  }
  inline void Swap(Output* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Output* New() const final {
    return CreateMaybeMessage<Output>(nullptr);
  }

  Output* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Output>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Output& from);
  void MergeFrom(const Output& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Output* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "VeriBlock.Output";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_integration_2eproto);
    return ::descriptor_table_integration_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAddressFieldNumber = 1,
    kAmountFieldNumber = 2,
  };
  // .VeriBlock.Address address = 1;
  bool has_address() const;
  void clear_address();
  const ::VeriBlock::Address& address() const;
  ::VeriBlock::Address* release_address();
  ::VeriBlock::Address* mutable_address();
  void set_allocated_address(::VeriBlock::Address* address);

  // .VeriBlock.Coin amount = 2;
  bool has_amount() const;
  void clear_amount();
  const ::VeriBlock::Coin& amount() const;
  ::VeriBlock::Coin* release_amount();
  ::VeriBlock::Coin* mutable_amount();
  void set_allocated_amount(::VeriBlock::Coin* amount);

  // @@protoc_insertion_point(class_scope:VeriBlock.Output)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::VeriBlock::Address* address_;
  ::VeriBlock::Coin* amount_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_integration_2eproto;
};
// -------------------------------------------------------------------

class AltPublication :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:VeriBlock.AltPublication) */ {
 public:
  AltPublication();
  virtual ~AltPublication();

  AltPublication(const AltPublication& from);
  AltPublication(AltPublication&& from) noexcept
    : AltPublication() {
    *this = ::std::move(from);
  }

  inline AltPublication& operator=(const AltPublication& from) {
    CopyFrom(from);
    return *this;
  }
  inline AltPublication& operator=(AltPublication&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AltPublication& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AltPublication* internal_default_instance() {
    return reinterpret_cast<const AltPublication*>(
               &_AltPublication_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(AltPublication& a, AltPublication& b) {
    a.Swap(&b);
  }
  inline void Swap(AltPublication* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AltPublication* New() const final {
    return CreateMaybeMessage<AltPublication>(nullptr);
  }

  AltPublication* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AltPublication>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AltPublication& from);
  void MergeFrom(const AltPublication& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AltPublication* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "VeriBlock.AltPublication";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_integration_2eproto);
    return ::descriptor_table_integration_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContextFieldNumber = 4,
    kMerklePathFieldNumber = 2,
    kTransactionFieldNumber = 1,
    kContainingBlockFieldNumber = 3,
  };
  // repeated .VeriBlock.VeriBlockBlock context = 4;
  int context_size() const;
  void clear_context();
  ::VeriBlock::VeriBlockBlock* mutable_context(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::VeriBlock::VeriBlockBlock >*
      mutable_context();
  const ::VeriBlock::VeriBlockBlock& context(int index) const;
  ::VeriBlock::VeriBlockBlock* add_context();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::VeriBlock::VeriBlockBlock >&
      context() const;

  // string merklePath = 2;
  void clear_merklepath();
  const std::string& merklepath() const;
  void set_merklepath(const std::string& value);
  void set_merklepath(std::string&& value);
  void set_merklepath(const char* value);
  void set_merklepath(const char* value, size_t size);
  std::string* mutable_merklepath();
  std::string* release_merklepath();
  void set_allocated_merklepath(std::string* merklepath);

  // .VeriBlock.VeriBlockTransaction transaction = 1;
  bool has_transaction() const;
  void clear_transaction();
  const ::VeriBlock::VeriBlockTransaction& transaction() const;
  ::VeriBlock::VeriBlockTransaction* release_transaction();
  ::VeriBlock::VeriBlockTransaction* mutable_transaction();
  void set_allocated_transaction(::VeriBlock::VeriBlockTransaction* transaction);

  // .VeriBlock.VeriBlockBlock containingBlock = 3;
  bool has_containingblock() const;
  void clear_containingblock();
  const ::VeriBlock::VeriBlockBlock& containingblock() const;
  ::VeriBlock::VeriBlockBlock* release_containingblock();
  ::VeriBlock::VeriBlockBlock* mutable_containingblock();
  void set_allocated_containingblock(::VeriBlock::VeriBlockBlock* containingblock);

  // @@protoc_insertion_point(class_scope:VeriBlock.AltPublication)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::VeriBlock::VeriBlockBlock > context_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr merklepath_;
  ::VeriBlock::VeriBlockTransaction* transaction_;
  ::VeriBlock::VeriBlockBlock* containingblock_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_integration_2eproto;
};
// -------------------------------------------------------------------

class VeriBlockPoPTransaction :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:VeriBlock.VeriBlockPoPTransaction) */ {
 public:
  VeriBlockPoPTransaction();
  virtual ~VeriBlockPoPTransaction();

  VeriBlockPoPTransaction(const VeriBlockPoPTransaction& from);
  VeriBlockPoPTransaction(VeriBlockPoPTransaction&& from) noexcept
    : VeriBlockPoPTransaction() {
    *this = ::std::move(from);
  }

  inline VeriBlockPoPTransaction& operator=(const VeriBlockPoPTransaction& from) {
    CopyFrom(from);
    return *this;
  }
  inline VeriBlockPoPTransaction& operator=(VeriBlockPoPTransaction&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const VeriBlockPoPTransaction& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VeriBlockPoPTransaction* internal_default_instance() {
    return reinterpret_cast<const VeriBlockPoPTransaction*>(
               &_VeriBlockPoPTransaction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(VeriBlockPoPTransaction& a, VeriBlockPoPTransaction& b) {
    a.Swap(&b);
  }
  inline void Swap(VeriBlockPoPTransaction* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VeriBlockPoPTransaction* New() const final {
    return CreateMaybeMessage<VeriBlockPoPTransaction>(nullptr);
  }

  VeriBlockPoPTransaction* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VeriBlockPoPTransaction>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VeriBlockPoPTransaction& from);
  void MergeFrom(const VeriBlockPoPTransaction& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VeriBlockPoPTransaction* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "VeriBlock.VeriBlockPoPTransaction";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_integration_2eproto);
    return ::descriptor_table_integration_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBlockOfProofContextFieldNumber = 7,
    kIdFieldNumber = 1,
    kMerklePathFieldNumber = 5,
    kSignatureFieldNumber = 8,
    kPublicKeyFieldNumber = 9,
    kAddressFieldNumber = 2,
    kPublishedBlockFieldNumber = 3,
    kBitcoinTransactionFieldNumber = 4,
    kBlockOfProofFieldNumber = 6,
    kNetworkByteFieldNumber = 10,
  };
  // repeated .VeriBlock.BitcoinBlock blockOfProofContext = 7;
  int blockofproofcontext_size() const;
  void clear_blockofproofcontext();
  ::VeriBlock::BitcoinBlock* mutable_blockofproofcontext(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::VeriBlock::BitcoinBlock >*
      mutable_blockofproofcontext();
  const ::VeriBlock::BitcoinBlock& blockofproofcontext(int index) const;
  ::VeriBlock::BitcoinBlock* add_blockofproofcontext();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::VeriBlock::BitcoinBlock >&
      blockofproofcontext() const;

  // bytes id = 1 [(.VeriBlock.hex_encoded) = true];
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const void* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);

  // string merklePath = 5;
  void clear_merklepath();
  const std::string& merklepath() const;
  void set_merklepath(const std::string& value);
  void set_merklepath(std::string&& value);
  void set_merklepath(const char* value);
  void set_merklepath(const char* value, size_t size);
  std::string* mutable_merklepath();
  std::string* release_merklepath();
  void set_allocated_merklepath(std::string* merklepath);

  // bytes signature = 8 [(.VeriBlock.hex_encoded) = true];
  void clear_signature();
  const std::string& signature() const;
  void set_signature(const std::string& value);
  void set_signature(std::string&& value);
  void set_signature(const char* value);
  void set_signature(const void* value, size_t size);
  std::string* mutable_signature();
  std::string* release_signature();
  void set_allocated_signature(std::string* signature);

  // bytes publicKey = 9 [(.VeriBlock.hex_encoded) = true];
  void clear_publickey();
  const std::string& publickey() const;
  void set_publickey(const std::string& value);
  void set_publickey(std::string&& value);
  void set_publickey(const char* value);
  void set_publickey(const void* value, size_t size);
  std::string* mutable_publickey();
  std::string* release_publickey();
  void set_allocated_publickey(std::string* publickey);

  // .VeriBlock.Address address = 2;
  bool has_address() const;
  void clear_address();
  const ::VeriBlock::Address& address() const;
  ::VeriBlock::Address* release_address();
  ::VeriBlock::Address* mutable_address();
  void set_allocated_address(::VeriBlock::Address* address);

  // .VeriBlock.VeriBlockBlock publishedBlock = 3;
  bool has_publishedblock() const;
  void clear_publishedblock();
  const ::VeriBlock::VeriBlockBlock& publishedblock() const;
  ::VeriBlock::VeriBlockBlock* release_publishedblock();
  ::VeriBlock::VeriBlockBlock* mutable_publishedblock();
  void set_allocated_publishedblock(::VeriBlock::VeriBlockBlock* publishedblock);

  // .VeriBlock.BitcoinTransaction bitcoinTransaction = 4;
  bool has_bitcointransaction() const;
  void clear_bitcointransaction();
  const ::VeriBlock::BitcoinTransaction& bitcointransaction() const;
  ::VeriBlock::BitcoinTransaction* release_bitcointransaction();
  ::VeriBlock::BitcoinTransaction* mutable_bitcointransaction();
  void set_allocated_bitcointransaction(::VeriBlock::BitcoinTransaction* bitcointransaction);

  // .VeriBlock.BitcoinBlock blockOfProof = 6;
  bool has_blockofproof() const;
  void clear_blockofproof();
  const ::VeriBlock::BitcoinBlock& blockofproof() const;
  ::VeriBlock::BitcoinBlock* release_blockofproof();
  ::VeriBlock::BitcoinBlock* mutable_blockofproof();
  void set_allocated_blockofproof(::VeriBlock::BitcoinBlock* blockofproof);

  // .VeriBlock.NetworkByte networkByte = 10;
  bool has_networkbyte() const;
  void clear_networkbyte();
  const ::VeriBlock::NetworkByte& networkbyte() const;
  ::VeriBlock::NetworkByte* release_networkbyte();
  ::VeriBlock::NetworkByte* mutable_networkbyte();
  void set_allocated_networkbyte(::VeriBlock::NetworkByte* networkbyte);

  // @@protoc_insertion_point(class_scope:VeriBlock.VeriBlockPoPTransaction)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::VeriBlock::BitcoinBlock > blockofproofcontext_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr merklepath_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr signature_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr publickey_;
  ::VeriBlock::Address* address_;
  ::VeriBlock::VeriBlockBlock* publishedblock_;
  ::VeriBlock::BitcoinTransaction* bitcointransaction_;
  ::VeriBlock::BitcoinBlock* blockofproof_;
  ::VeriBlock::NetworkByte* networkbyte_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_integration_2eproto;
};
// -------------------------------------------------------------------

class VeriBlockPublication :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:VeriBlock.VeriBlockPublication) */ {
 public:
  VeriBlockPublication();
  virtual ~VeriBlockPublication();

  VeriBlockPublication(const VeriBlockPublication& from);
  VeriBlockPublication(VeriBlockPublication&& from) noexcept
    : VeriBlockPublication() {
    *this = ::std::move(from);
  }

  inline VeriBlockPublication& operator=(const VeriBlockPublication& from) {
    CopyFrom(from);
    return *this;
  }
  inline VeriBlockPublication& operator=(VeriBlockPublication&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const VeriBlockPublication& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VeriBlockPublication* internal_default_instance() {
    return reinterpret_cast<const VeriBlockPublication*>(
               &_VeriBlockPublication_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(VeriBlockPublication& a, VeriBlockPublication& b) {
    a.Swap(&b);
  }
  inline void Swap(VeriBlockPublication* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VeriBlockPublication* New() const final {
    return CreateMaybeMessage<VeriBlockPublication>(nullptr);
  }

  VeriBlockPublication* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VeriBlockPublication>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VeriBlockPublication& from);
  void MergeFrom(const VeriBlockPublication& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VeriBlockPublication* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "VeriBlock.VeriBlockPublication";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_integration_2eproto);
    return ::descriptor_table_integration_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContextFieldNumber = 4,
    kMerklePathFieldNumber = 2,
    kTransactionFieldNumber = 1,
    kContainingBlockFieldNumber = 3,
  };
  // repeated .VeriBlock.VeriBlockBlock context = 4;
  int context_size() const;
  void clear_context();
  ::VeriBlock::VeriBlockBlock* mutable_context(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::VeriBlock::VeriBlockBlock >*
      mutable_context();
  const ::VeriBlock::VeriBlockBlock& context(int index) const;
  ::VeriBlock::VeriBlockBlock* add_context();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::VeriBlock::VeriBlockBlock >&
      context() const;

  // string merklePath = 2;
  void clear_merklepath();
  const std::string& merklepath() const;
  void set_merklepath(const std::string& value);
  void set_merklepath(std::string&& value);
  void set_merklepath(const char* value);
  void set_merklepath(const char* value, size_t size);
  std::string* mutable_merklepath();
  std::string* release_merklepath();
  void set_allocated_merklepath(std::string* merklepath);

  // .VeriBlock.VeriBlockPoPTransaction transaction = 1;
  bool has_transaction() const;
  void clear_transaction();
  const ::VeriBlock::VeriBlockPoPTransaction& transaction() const;
  ::VeriBlock::VeriBlockPoPTransaction* release_transaction();
  ::VeriBlock::VeriBlockPoPTransaction* mutable_transaction();
  void set_allocated_transaction(::VeriBlock::VeriBlockPoPTransaction* transaction);

  // .VeriBlock.VeriBlockBlock containingBlock = 3;
  bool has_containingblock() const;
  void clear_containingblock();
  const ::VeriBlock::VeriBlockBlock& containingblock() const;
  ::VeriBlock::VeriBlockBlock* release_containingblock();
  ::VeriBlock::VeriBlockBlock* mutable_containingblock();
  void set_allocated_containingblock(::VeriBlock::VeriBlockBlock* containingblock);

  // @@protoc_insertion_point(class_scope:VeriBlock.VeriBlockPublication)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::VeriBlock::VeriBlockBlock > context_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr merklepath_;
  ::VeriBlock::VeriBlockPoPTransaction* transaction_;
  ::VeriBlock::VeriBlockBlock* containingblock_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_integration_2eproto;
};
// -------------------------------------------------------------------

class EmptyRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:VeriBlock.EmptyRequest) */ {
 public:
  EmptyRequest();
  virtual ~EmptyRequest();

  EmptyRequest(const EmptyRequest& from);
  EmptyRequest(EmptyRequest&& from) noexcept
    : EmptyRequest() {
    *this = ::std::move(from);
  }

  inline EmptyRequest& operator=(const EmptyRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline EmptyRequest& operator=(EmptyRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EmptyRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EmptyRequest* internal_default_instance() {
    return reinterpret_cast<const EmptyRequest*>(
               &_EmptyRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(EmptyRequest& a, EmptyRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(EmptyRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EmptyRequest* New() const final {
    return CreateMaybeMessage<EmptyRequest>(nullptr);
  }

  EmptyRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EmptyRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EmptyRequest& from);
  void MergeFrom(const EmptyRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EmptyRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "VeriBlock.EmptyRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_integration_2eproto);
    return ::descriptor_table_integration_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:VeriBlock.EmptyRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_integration_2eproto;
};
// -------------------------------------------------------------------

class GeneralReply :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:VeriBlock.GeneralReply) */ {
 public:
  GeneralReply();
  virtual ~GeneralReply();

  GeneralReply(const GeneralReply& from);
  GeneralReply(GeneralReply&& from) noexcept
    : GeneralReply() {
    *this = ::std::move(from);
  }

  inline GeneralReply& operator=(const GeneralReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline GeneralReply& operator=(GeneralReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GeneralReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GeneralReply* internal_default_instance() {
    return reinterpret_cast<const GeneralReply*>(
               &_GeneralReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(GeneralReply& a, GeneralReply& b) {
    a.Swap(&b);
  }
  inline void Swap(GeneralReply* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GeneralReply* New() const final {
    return CreateMaybeMessage<GeneralReply>(nullptr);
  }

  GeneralReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GeneralReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GeneralReply& from);
  void MergeFrom(const GeneralReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GeneralReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "VeriBlock.GeneralReply";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_integration_2eproto);
    return ::descriptor_table_integration_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultMessageFieldNumber = 2,
    kResultFieldNumber = 1,
  };
  // string resultMessage = 2;
  void clear_resultmessage();
  const std::string& resultmessage() const;
  void set_resultmessage(const std::string& value);
  void set_resultmessage(std::string&& value);
  void set_resultmessage(const char* value);
  void set_resultmessage(const char* value, size_t size);
  std::string* mutable_resultmessage();
  std::string* release_resultmessage();
  void set_allocated_resultmessage(std::string* resultmessage);

  // bool result = 1;
  void clear_result();
  bool result() const;
  void set_result(bool value);

  // @@protoc_insertion_point(class_scope:VeriBlock.GeneralReply)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr resultmessage_;
  bool result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_integration_2eproto;
};
// -------------------------------------------------------------------

class BlockIndex :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:VeriBlock.BlockIndex) */ {
 public:
  BlockIndex();
  virtual ~BlockIndex();

  BlockIndex(const BlockIndex& from);
  BlockIndex(BlockIndex&& from) noexcept
    : BlockIndex() {
    *this = ::std::move(from);
  }

  inline BlockIndex& operator=(const BlockIndex& from) {
    CopyFrom(from);
    return *this;
  }
  inline BlockIndex& operator=(BlockIndex&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BlockIndex& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BlockIndex* internal_default_instance() {
    return reinterpret_cast<const BlockIndex*>(
               &_BlockIndex_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(BlockIndex& a, BlockIndex& b) {
    a.Swap(&b);
  }
  inline void Swap(BlockIndex* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BlockIndex* New() const final {
    return CreateMaybeMessage<BlockIndex>(nullptr);
  }

  BlockIndex* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BlockIndex>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BlockIndex& from);
  void MergeFrom(const BlockIndex& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BlockIndex* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "VeriBlock.BlockIndex";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_integration_2eproto);
    return ::descriptor_table_integration_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHashFieldNumber = 2,
    kHeightFieldNumber = 1,
  };
  // string hash = 2;
  void clear_hash();
  const std::string& hash() const;
  void set_hash(const std::string& value);
  void set_hash(std::string&& value);
  void set_hash(const char* value);
  void set_hash(const char* value, size_t size);
  std::string* mutable_hash();
  std::string* release_hash();
  void set_allocated_hash(std::string* hash);

  // int64 height = 1;
  void clear_height();
  ::PROTOBUF_NAMESPACE_ID::int64 height() const;
  void set_height(::PROTOBUF_NAMESPACE_ID::int64 value);

  // @@protoc_insertion_point(class_scope:VeriBlock.BlockIndex)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hash_;
  ::PROTOBUF_NAMESPACE_ID::int64 height_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_integration_2eproto;
};
// -------------------------------------------------------------------

class AddPayloadsRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:VeriBlock.AddPayloadsRequest) */ {
 public:
  AddPayloadsRequest();
  virtual ~AddPayloadsRequest();

  AddPayloadsRequest(const AddPayloadsRequest& from);
  AddPayloadsRequest(AddPayloadsRequest&& from) noexcept
    : AddPayloadsRequest() {
    *this = ::std::move(from);
  }

  inline AddPayloadsRequest& operator=(const AddPayloadsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddPayloadsRequest& operator=(AddPayloadsRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AddPayloadsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AddPayloadsRequest* internal_default_instance() {
    return reinterpret_cast<const AddPayloadsRequest*>(
               &_AddPayloadsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(AddPayloadsRequest& a, AddPayloadsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(AddPayloadsRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AddPayloadsRequest* New() const final {
    return CreateMaybeMessage<AddPayloadsRequest>(nullptr);
  }

  AddPayloadsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AddPayloadsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AddPayloadsRequest& from);
  void MergeFrom(const AddPayloadsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddPayloadsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "VeriBlock.AddPayloadsRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_integration_2eproto);
    return ::descriptor_table_integration_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVeriblockPublicationsFieldNumber = 2,
    kAltPublicationsFieldNumber = 3,
    kBlockIndexFieldNumber = 1,
  };
  // repeated .VeriBlock.VeriBlockPublication veriblockPublications = 2;
  int veriblockpublications_size() const;
  void clear_veriblockpublications();
  ::VeriBlock::VeriBlockPublication* mutable_veriblockpublications(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::VeriBlock::VeriBlockPublication >*
      mutable_veriblockpublications();
  const ::VeriBlock::VeriBlockPublication& veriblockpublications(int index) const;
  ::VeriBlock::VeriBlockPublication* add_veriblockpublications();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::VeriBlock::VeriBlockPublication >&
      veriblockpublications() const;

  // repeated .VeriBlock.AltPublication altPublications = 3;
  int altpublications_size() const;
  void clear_altpublications();
  ::VeriBlock::AltPublication* mutable_altpublications(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::VeriBlock::AltPublication >*
      mutable_altpublications();
  const ::VeriBlock::AltPublication& altpublications(int index) const;
  ::VeriBlock::AltPublication* add_altpublications();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::VeriBlock::AltPublication >&
      altpublications() const;

  // .VeriBlock.BlockIndex blockIndex = 1;
  bool has_blockindex() const;
  void clear_blockindex();
  const ::VeriBlock::BlockIndex& blockindex() const;
  ::VeriBlock::BlockIndex* release_blockindex();
  ::VeriBlock::BlockIndex* mutable_blockindex();
  void set_allocated_blockindex(::VeriBlock::BlockIndex* blockindex);

  // @@protoc_insertion_point(class_scope:VeriBlock.AddPayloadsRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::VeriBlock::VeriBlockPublication > veriblockpublications_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::VeriBlock::AltPublication > altpublications_;
  ::VeriBlock::BlockIndex* blockindex_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_integration_2eproto;
};
// -------------------------------------------------------------------

class AddTemporaryPayloadsRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:VeriBlock.AddTemporaryPayloadsRequest) */ {
 public:
  AddTemporaryPayloadsRequest();
  virtual ~AddTemporaryPayloadsRequest();

  AddTemporaryPayloadsRequest(const AddTemporaryPayloadsRequest& from);
  AddTemporaryPayloadsRequest(AddTemporaryPayloadsRequest&& from) noexcept
    : AddTemporaryPayloadsRequest() {
    *this = ::std::move(from);
  }

  inline AddTemporaryPayloadsRequest& operator=(const AddTemporaryPayloadsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddTemporaryPayloadsRequest& operator=(AddTemporaryPayloadsRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AddTemporaryPayloadsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AddTemporaryPayloadsRequest* internal_default_instance() {
    return reinterpret_cast<const AddTemporaryPayloadsRequest*>(
               &_AddTemporaryPayloadsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(AddTemporaryPayloadsRequest& a, AddTemporaryPayloadsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(AddTemporaryPayloadsRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AddTemporaryPayloadsRequest* New() const final {
    return CreateMaybeMessage<AddTemporaryPayloadsRequest>(nullptr);
  }

  AddTemporaryPayloadsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AddTemporaryPayloadsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AddTemporaryPayloadsRequest& from);
  void MergeFrom(const AddTemporaryPayloadsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddTemporaryPayloadsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "VeriBlock.AddTemporaryPayloadsRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_integration_2eproto);
    return ::descriptor_table_integration_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVeriblockPublicationsFieldNumber = 1,
    kAltPublicationsFieldNumber = 2,
  };
  // repeated .VeriBlock.VeriBlockPublication veriblockPublications = 1;
  int veriblockpublications_size() const;
  void clear_veriblockpublications();
  ::VeriBlock::VeriBlockPublication* mutable_veriblockpublications(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::VeriBlock::VeriBlockPublication >*
      mutable_veriblockpublications();
  const ::VeriBlock::VeriBlockPublication& veriblockpublications(int index) const;
  ::VeriBlock::VeriBlockPublication* add_veriblockpublications();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::VeriBlock::VeriBlockPublication >&
      veriblockpublications() const;

  // repeated .VeriBlock.AltPublication altPublications = 2;
  int altpublications_size() const;
  void clear_altpublications();
  ::VeriBlock::AltPublication* mutable_altpublications(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::VeriBlock::AltPublication >*
      mutable_altpublications();
  const ::VeriBlock::AltPublication& altpublications(int index) const;
  ::VeriBlock::AltPublication* add_altpublications();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::VeriBlock::AltPublication >&
      altpublications() const;

  // @@protoc_insertion_point(class_scope:VeriBlock.AddTemporaryPayloadsRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::VeriBlock::VeriBlockPublication > veriblockpublications_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::VeriBlock::AltPublication > altpublications_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_integration_2eproto;
};
// -------------------------------------------------------------------

class SimplifyVTBsRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:VeriBlock.SimplifyVTBsRequest) */ {
 public:
  SimplifyVTBsRequest();
  virtual ~SimplifyVTBsRequest();

  SimplifyVTBsRequest(const SimplifyVTBsRequest& from);
  SimplifyVTBsRequest(SimplifyVTBsRequest&& from) noexcept
    : SimplifyVTBsRequest() {
    *this = ::std::move(from);
  }

  inline SimplifyVTBsRequest& operator=(const SimplifyVTBsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SimplifyVTBsRequest& operator=(SimplifyVTBsRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SimplifyVTBsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SimplifyVTBsRequest* internal_default_instance() {
    return reinterpret_cast<const SimplifyVTBsRequest*>(
               &_SimplifyVTBsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(SimplifyVTBsRequest& a, SimplifyVTBsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SimplifyVTBsRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SimplifyVTBsRequest* New() const final {
    return CreateMaybeMessage<SimplifyVTBsRequest>(nullptr);
  }

  SimplifyVTBsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SimplifyVTBsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SimplifyVTBsRequest& from);
  void MergeFrom(const SimplifyVTBsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SimplifyVTBsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "VeriBlock.SimplifyVTBsRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_integration_2eproto);
    return ::descriptor_table_integration_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVeriblockPublicationsFieldNumber = 1,
  };
  // repeated .VeriBlock.VeriBlockPublication veriblockPublications = 1;
  int veriblockpublications_size() const;
  void clear_veriblockpublications();
  ::VeriBlock::VeriBlockPublication* mutable_veriblockpublications(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::VeriBlock::VeriBlockPublication >*
      mutable_veriblockpublications();
  const ::VeriBlock::VeriBlockPublication& veriblockpublications(int index) const;
  ::VeriBlock::VeriBlockPublication* add_veriblockpublications();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::VeriBlock::VeriBlockPublication >&
      veriblockpublications() const;

  // @@protoc_insertion_point(class_scope:VeriBlock.SimplifyVTBsRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::VeriBlock::VeriBlockPublication > veriblockpublications_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_integration_2eproto;
};
// -------------------------------------------------------------------

class SimplifyVTBsReply :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:VeriBlock.SimplifyVTBsReply) */ {
 public:
  SimplifyVTBsReply();
  virtual ~SimplifyVTBsReply();

  SimplifyVTBsReply(const SimplifyVTBsReply& from);
  SimplifyVTBsReply(SimplifyVTBsReply&& from) noexcept
    : SimplifyVTBsReply() {
    *this = ::std::move(from);
  }

  inline SimplifyVTBsReply& operator=(const SimplifyVTBsReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline SimplifyVTBsReply& operator=(SimplifyVTBsReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SimplifyVTBsReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SimplifyVTBsReply* internal_default_instance() {
    return reinterpret_cast<const SimplifyVTBsReply*>(
               &_SimplifyVTBsReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(SimplifyVTBsReply& a, SimplifyVTBsReply& b) {
    a.Swap(&b);
  }
  inline void Swap(SimplifyVTBsReply* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SimplifyVTBsReply* New() const final {
    return CreateMaybeMessage<SimplifyVTBsReply>(nullptr);
  }

  SimplifyVTBsReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SimplifyVTBsReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SimplifyVTBsReply& from);
  void MergeFrom(const SimplifyVTBsReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SimplifyVTBsReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "VeriBlock.SimplifyVTBsReply";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_integration_2eproto);
    return ::descriptor_table_integration_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVeriblockPublicationsFieldNumber = 2,
    kResultFieldNumber = 1,
  };
  // repeated .VeriBlock.VeriBlockPublication veriblockPublications = 2;
  int veriblockpublications_size() const;
  void clear_veriblockpublications();
  ::VeriBlock::VeriBlockPublication* mutable_veriblockpublications(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::VeriBlock::VeriBlockPublication >*
      mutable_veriblockpublications();
  const ::VeriBlock::VeriBlockPublication& veriblockpublications(int index) const;
  ::VeriBlock::VeriBlockPublication* add_veriblockpublications();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::VeriBlock::VeriBlockPublication >&
      veriblockpublications() const;

  // .VeriBlock.GeneralReply result = 1;
  bool has_result() const;
  void clear_result();
  const ::VeriBlock::GeneralReply& result() const;
  ::VeriBlock::GeneralReply* release_result();
  ::VeriBlock::GeneralReply* mutable_result();
  void set_allocated_result(::VeriBlock::GeneralReply* result);

  // @@protoc_insertion_point(class_scope:VeriBlock.SimplifyVTBsReply)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::VeriBlock::VeriBlockPublication > veriblockpublications_;
  ::VeriBlock::GeneralReply* result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_integration_2eproto;
};
// -------------------------------------------------------------------

class GetMainVBKHeightOfATVReply :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:VeriBlock.GetMainVBKHeightOfATVReply) */ {
 public:
  GetMainVBKHeightOfATVReply();
  virtual ~GetMainVBKHeightOfATVReply();

  GetMainVBKHeightOfATVReply(const GetMainVBKHeightOfATVReply& from);
  GetMainVBKHeightOfATVReply(GetMainVBKHeightOfATVReply&& from) noexcept
    : GetMainVBKHeightOfATVReply() {
    *this = ::std::move(from);
  }

  inline GetMainVBKHeightOfATVReply& operator=(const GetMainVBKHeightOfATVReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetMainVBKHeightOfATVReply& operator=(GetMainVBKHeightOfATVReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetMainVBKHeightOfATVReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetMainVBKHeightOfATVReply* internal_default_instance() {
    return reinterpret_cast<const GetMainVBKHeightOfATVReply*>(
               &_GetMainVBKHeightOfATVReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(GetMainVBKHeightOfATVReply& a, GetMainVBKHeightOfATVReply& b) {
    a.Swap(&b);
  }
  inline void Swap(GetMainVBKHeightOfATVReply* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetMainVBKHeightOfATVReply* New() const final {
    return CreateMaybeMessage<GetMainVBKHeightOfATVReply>(nullptr);
  }

  GetMainVBKHeightOfATVReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetMainVBKHeightOfATVReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetMainVBKHeightOfATVReply& from);
  void MergeFrom(const GetMainVBKHeightOfATVReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetMainVBKHeightOfATVReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "VeriBlock.GetMainVBKHeightOfATVReply";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_integration_2eproto);
    return ::descriptor_table_integration_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
    kHeightFieldNumber = 2,
  };
  // .VeriBlock.GeneralReply result = 1;
  bool has_result() const;
  void clear_result();
  const ::VeriBlock::GeneralReply& result() const;
  ::VeriBlock::GeneralReply* release_result();
  ::VeriBlock::GeneralReply* mutable_result();
  void set_allocated_result(::VeriBlock::GeneralReply* result);

  // int32 height = 2;
  void clear_height();
  ::PROTOBUF_NAMESPACE_ID::int32 height() const;
  void set_height(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:VeriBlock.GetMainVBKHeightOfATVReply)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::VeriBlock::GeneralReply* result_;
  ::PROTOBUF_NAMESPACE_ID::int32 height_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_integration_2eproto;
};
// -------------------------------------------------------------------

class RemovePayloadsRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:VeriBlock.RemovePayloadsRequest) */ {
 public:
  RemovePayloadsRequest();
  virtual ~RemovePayloadsRequest();

  RemovePayloadsRequest(const RemovePayloadsRequest& from);
  RemovePayloadsRequest(RemovePayloadsRequest&& from) noexcept
    : RemovePayloadsRequest() {
    *this = ::std::move(from);
  }

  inline RemovePayloadsRequest& operator=(const RemovePayloadsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RemovePayloadsRequest& operator=(RemovePayloadsRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RemovePayloadsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RemovePayloadsRequest* internal_default_instance() {
    return reinterpret_cast<const RemovePayloadsRequest*>(
               &_RemovePayloadsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(RemovePayloadsRequest& a, RemovePayloadsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(RemovePayloadsRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RemovePayloadsRequest* New() const final {
    return CreateMaybeMessage<RemovePayloadsRequest>(nullptr);
  }

  RemovePayloadsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RemovePayloadsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RemovePayloadsRequest& from);
  void MergeFrom(const RemovePayloadsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RemovePayloadsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "VeriBlock.RemovePayloadsRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_integration_2eproto);
    return ::descriptor_table_integration_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBlockIndexFieldNumber = 1,
  };
  // .VeriBlock.BlockIndex blockIndex = 1;
  bool has_blockindex() const;
  void clear_blockindex();
  const ::VeriBlock::BlockIndex& blockindex() const;
  ::VeriBlock::BlockIndex* release_blockindex();
  ::VeriBlock::BlockIndex* mutable_blockindex();
  void set_allocated_blockindex(::VeriBlock::BlockIndex* blockindex);

  // @@protoc_insertion_point(class_scope:VeriBlock.RemovePayloadsRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::VeriBlock::BlockIndex* blockindex_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_integration_2eproto;
};
// -------------------------------------------------------------------

class AltChainConfigRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:VeriBlock.AltChainConfigRequest) */ {
 public:
  AltChainConfigRequest();
  virtual ~AltChainConfigRequest();

  AltChainConfigRequest(const AltChainConfigRequest& from);
  AltChainConfigRequest(AltChainConfigRequest&& from) noexcept
    : AltChainConfigRequest() {
    *this = ::std::move(from);
  }

  inline AltChainConfigRequest& operator=(const AltChainConfigRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AltChainConfigRequest& operator=(AltChainConfigRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AltChainConfigRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AltChainConfigRequest* internal_default_instance() {
    return reinterpret_cast<const AltChainConfigRequest*>(
               &_AltChainConfigRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(AltChainConfigRequest& a, AltChainConfigRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(AltChainConfigRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AltChainConfigRequest* New() const final {
    return CreateMaybeMessage<AltChainConfigRequest>(nullptr);
  }

  AltChainConfigRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AltChainConfigRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AltChainConfigRequest& from);
  void MergeFrom(const AltChainConfigRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AltChainConfigRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "VeriBlock.AltChainConfigRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_integration_2eproto);
    return ::descriptor_table_integration_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeystoneIntervalFieldNumber = 1,
  };
  // int32 keystoneInterval = 1;
  void clear_keystoneinterval();
  ::PROTOBUF_NAMESPACE_ID::int32 keystoneinterval() const;
  void set_keystoneinterval(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:VeriBlock.AltChainConfigRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 keystoneinterval_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_integration_2eproto;
};
// -------------------------------------------------------------------

class GetLastKnownBlocksRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:VeriBlock.GetLastKnownBlocksRequest) */ {
 public:
  GetLastKnownBlocksRequest();
  virtual ~GetLastKnownBlocksRequest();

  GetLastKnownBlocksRequest(const GetLastKnownBlocksRequest& from);
  GetLastKnownBlocksRequest(GetLastKnownBlocksRequest&& from) noexcept
    : GetLastKnownBlocksRequest() {
    *this = ::std::move(from);
  }

  inline GetLastKnownBlocksRequest& operator=(const GetLastKnownBlocksRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetLastKnownBlocksRequest& operator=(GetLastKnownBlocksRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetLastKnownBlocksRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetLastKnownBlocksRequest* internal_default_instance() {
    return reinterpret_cast<const GetLastKnownBlocksRequest*>(
               &_GetLastKnownBlocksRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(GetLastKnownBlocksRequest& a, GetLastKnownBlocksRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetLastKnownBlocksRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetLastKnownBlocksRequest* New() const final {
    return CreateMaybeMessage<GetLastKnownBlocksRequest>(nullptr);
  }

  GetLastKnownBlocksRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetLastKnownBlocksRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetLastKnownBlocksRequest& from);
  void MergeFrom(const GetLastKnownBlocksRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetLastKnownBlocksRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "VeriBlock.GetLastKnownBlocksRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_integration_2eproto);
    return ::descriptor_table_integration_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMaxBlockCountFieldNumber = 1,
  };
  // int32 maxBlockCount = 1;
  void clear_maxblockcount();
  ::PROTOBUF_NAMESPACE_ID::int32 maxblockcount() const;
  void set_maxblockcount(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:VeriBlock.GetLastKnownBlocksRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 maxblockcount_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_integration_2eproto;
};
// -------------------------------------------------------------------

class GetLastKnownVBKBlocksReply :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:VeriBlock.GetLastKnownVBKBlocksReply) */ {
 public:
  GetLastKnownVBKBlocksReply();
  virtual ~GetLastKnownVBKBlocksReply();

  GetLastKnownVBKBlocksReply(const GetLastKnownVBKBlocksReply& from);
  GetLastKnownVBKBlocksReply(GetLastKnownVBKBlocksReply&& from) noexcept
    : GetLastKnownVBKBlocksReply() {
    *this = ::std::move(from);
  }

  inline GetLastKnownVBKBlocksReply& operator=(const GetLastKnownVBKBlocksReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetLastKnownVBKBlocksReply& operator=(GetLastKnownVBKBlocksReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetLastKnownVBKBlocksReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetLastKnownVBKBlocksReply* internal_default_instance() {
    return reinterpret_cast<const GetLastKnownVBKBlocksReply*>(
               &_GetLastKnownVBKBlocksReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(GetLastKnownVBKBlocksReply& a, GetLastKnownVBKBlocksReply& b) {
    a.Swap(&b);
  }
  inline void Swap(GetLastKnownVBKBlocksReply* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetLastKnownVBKBlocksReply* New() const final {
    return CreateMaybeMessage<GetLastKnownVBKBlocksReply>(nullptr);
  }

  GetLastKnownVBKBlocksReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetLastKnownVBKBlocksReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetLastKnownVBKBlocksReply& from);
  void MergeFrom(const GetLastKnownVBKBlocksReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetLastKnownVBKBlocksReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "VeriBlock.GetLastKnownVBKBlocksReply";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_integration_2eproto);
    return ::descriptor_table_integration_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBlocksFieldNumber = 2,
    kResultFieldNumber = 1,
  };
  // repeated bytes blocks = 2 [(.VeriBlock.hex_encoded) = true];
  int blocks_size() const;
  void clear_blocks();
  const std::string& blocks(int index) const;
  std::string* mutable_blocks(int index);
  void set_blocks(int index, const std::string& value);
  void set_blocks(int index, std::string&& value);
  void set_blocks(int index, const char* value);
  void set_blocks(int index, const void* value, size_t size);
  std::string* add_blocks();
  void add_blocks(const std::string& value);
  void add_blocks(std::string&& value);
  void add_blocks(const char* value);
  void add_blocks(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& blocks() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_blocks();

  // .VeriBlock.GeneralReply result = 1;
  bool has_result() const;
  void clear_result();
  const ::VeriBlock::GeneralReply& result() const;
  ::VeriBlock::GeneralReply* release_result();
  ::VeriBlock::GeneralReply* mutable_result();
  void set_allocated_result(::VeriBlock::GeneralReply* result);

  // @@protoc_insertion_point(class_scope:VeriBlock.GetLastKnownVBKBlocksReply)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> blocks_;
  ::VeriBlock::GeneralReply* result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_integration_2eproto;
};
// -------------------------------------------------------------------

class GetLastKnownBTCBlocksReply :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:VeriBlock.GetLastKnownBTCBlocksReply) */ {
 public:
  GetLastKnownBTCBlocksReply();
  virtual ~GetLastKnownBTCBlocksReply();

  GetLastKnownBTCBlocksReply(const GetLastKnownBTCBlocksReply& from);
  GetLastKnownBTCBlocksReply(GetLastKnownBTCBlocksReply&& from) noexcept
    : GetLastKnownBTCBlocksReply() {
    *this = ::std::move(from);
  }

  inline GetLastKnownBTCBlocksReply& operator=(const GetLastKnownBTCBlocksReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetLastKnownBTCBlocksReply& operator=(GetLastKnownBTCBlocksReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetLastKnownBTCBlocksReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetLastKnownBTCBlocksReply* internal_default_instance() {
    return reinterpret_cast<const GetLastKnownBTCBlocksReply*>(
               &_GetLastKnownBTCBlocksReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(GetLastKnownBTCBlocksReply& a, GetLastKnownBTCBlocksReply& b) {
    a.Swap(&b);
  }
  inline void Swap(GetLastKnownBTCBlocksReply* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetLastKnownBTCBlocksReply* New() const final {
    return CreateMaybeMessage<GetLastKnownBTCBlocksReply>(nullptr);
  }

  GetLastKnownBTCBlocksReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetLastKnownBTCBlocksReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetLastKnownBTCBlocksReply& from);
  void MergeFrom(const GetLastKnownBTCBlocksReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetLastKnownBTCBlocksReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "VeriBlock.GetLastKnownBTCBlocksReply";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_integration_2eproto);
    return ::descriptor_table_integration_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBlocksFieldNumber = 2,
    kResultFieldNumber = 1,
  };
  // repeated bytes blocks = 2 [(.VeriBlock.hex_encoded) = true];
  int blocks_size() const;
  void clear_blocks();
  const std::string& blocks(int index) const;
  std::string* mutable_blocks(int index);
  void set_blocks(int index, const std::string& value);
  void set_blocks(int index, std::string&& value);
  void set_blocks(int index, const char* value);
  void set_blocks(int index, const void* value, size_t size);
  std::string* add_blocks();
  void add_blocks(const std::string& value);
  void add_blocks(std::string&& value);
  void add_blocks(const char* value);
  void add_blocks(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& blocks() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_blocks();

  // .VeriBlock.GeneralReply result = 1;
  bool has_result() const;
  void clear_result();
  const ::VeriBlock::GeneralReply& result() const;
  ::VeriBlock::GeneralReply* release_result();
  ::VeriBlock::GeneralReply* mutable_result();
  void set_allocated_result(::VeriBlock::GeneralReply* result);

  // @@protoc_insertion_point(class_scope:VeriBlock.GetLastKnownBTCBlocksReply)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> blocks_;
  ::VeriBlock::GeneralReply* result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_integration_2eproto;
};
// -------------------------------------------------------------------

class RoundRatioConfig :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:VeriBlock.RoundRatioConfig) */ {
 public:
  RoundRatioConfig();
  virtual ~RoundRatioConfig();

  RoundRatioConfig(const RoundRatioConfig& from);
  RoundRatioConfig(RoundRatioConfig&& from) noexcept
    : RoundRatioConfig() {
    *this = ::std::move(from);
  }

  inline RoundRatioConfig& operator=(const RoundRatioConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline RoundRatioConfig& operator=(RoundRatioConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RoundRatioConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RoundRatioConfig* internal_default_instance() {
    return reinterpret_cast<const RoundRatioConfig*>(
               &_RoundRatioConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(RoundRatioConfig& a, RoundRatioConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(RoundRatioConfig* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RoundRatioConfig* New() const final {
    return CreateMaybeMessage<RoundRatioConfig>(nullptr);
  }

  RoundRatioConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RoundRatioConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RoundRatioConfig& from);
  void MergeFrom(const RoundRatioConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RoundRatioConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "VeriBlock.RoundRatioConfig";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_integration_2eproto);
    return ::descriptor_table_integration_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoundRatioFieldNumber = 1,
  };
  // repeated string roundRatio = 1;
  int roundratio_size() const;
  void clear_roundratio();
  const std::string& roundratio(int index) const;
  std::string* mutable_roundratio(int index);
  void set_roundratio(int index, const std::string& value);
  void set_roundratio(int index, std::string&& value);
  void set_roundratio(int index, const char* value);
  void set_roundratio(int index, const char* value, size_t size);
  std::string* add_roundratio();
  void add_roundratio(const std::string& value);
  void add_roundratio(std::string&& value);
  void add_roundratio(const char* value);
  void add_roundratio(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& roundratio() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_roundratio();

  // @@protoc_insertion_point(class_scope:VeriBlock.RoundRatioConfig)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> roundratio_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_integration_2eproto;
};
// -------------------------------------------------------------------

class RewardCurveConfig :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:VeriBlock.RewardCurveConfig) */ {
 public:
  RewardCurveConfig();
  virtual ~RewardCurveConfig();

  RewardCurveConfig(const RewardCurveConfig& from);
  RewardCurveConfig(RewardCurveConfig&& from) noexcept
    : RewardCurveConfig() {
    *this = ::std::move(from);
  }

  inline RewardCurveConfig& operator=(const RewardCurveConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline RewardCurveConfig& operator=(RewardCurveConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RewardCurveConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RewardCurveConfig* internal_default_instance() {
    return reinterpret_cast<const RewardCurveConfig*>(
               &_RewardCurveConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(RewardCurveConfig& a, RewardCurveConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(RewardCurveConfig* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RewardCurveConfig* New() const final {
    return CreateMaybeMessage<RewardCurveConfig>(nullptr);
  }

  RewardCurveConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RewardCurveConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RewardCurveConfig& from);
  void MergeFrom(const RewardCurveConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RewardCurveConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "VeriBlock.RewardCurveConfig";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_integration_2eproto);
    return ::descriptor_table_integration_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStartOfDecreasingLineFieldNumber = 1,
    kWidthOfDecreasingLineNormalFieldNumber = 2,
    kWidthOfDecreasingLineKeystoneFieldNumber = 3,
    kAboveIntendedPayoutMultiplierNormalFieldNumber = 4,
    kAboveIntendedPayoutMultiplierKeystoneFieldNumber = 5,
  };
  // string startOfDecreasingLine = 1;
  void clear_startofdecreasingline();
  const std::string& startofdecreasingline() const;
  void set_startofdecreasingline(const std::string& value);
  void set_startofdecreasingline(std::string&& value);
  void set_startofdecreasingline(const char* value);
  void set_startofdecreasingline(const char* value, size_t size);
  std::string* mutable_startofdecreasingline();
  std::string* release_startofdecreasingline();
  void set_allocated_startofdecreasingline(std::string* startofdecreasingline);

  // string widthOfDecreasingLineNormal = 2;
  void clear_widthofdecreasinglinenormal();
  const std::string& widthofdecreasinglinenormal() const;
  void set_widthofdecreasinglinenormal(const std::string& value);
  void set_widthofdecreasinglinenormal(std::string&& value);
  void set_widthofdecreasinglinenormal(const char* value);
  void set_widthofdecreasinglinenormal(const char* value, size_t size);
  std::string* mutable_widthofdecreasinglinenormal();
  std::string* release_widthofdecreasinglinenormal();
  void set_allocated_widthofdecreasinglinenormal(std::string* widthofdecreasinglinenormal);

  // string widthOfDecreasingLineKeystone = 3;
  void clear_widthofdecreasinglinekeystone();
  const std::string& widthofdecreasinglinekeystone() const;
  void set_widthofdecreasinglinekeystone(const std::string& value);
  void set_widthofdecreasinglinekeystone(std::string&& value);
  void set_widthofdecreasinglinekeystone(const char* value);
  void set_widthofdecreasinglinekeystone(const char* value, size_t size);
  std::string* mutable_widthofdecreasinglinekeystone();
  std::string* release_widthofdecreasinglinekeystone();
  void set_allocated_widthofdecreasinglinekeystone(std::string* widthofdecreasinglinekeystone);

  // string aboveIntendedPayoutMultiplierNormal = 4;
  void clear_aboveintendedpayoutmultipliernormal();
  const std::string& aboveintendedpayoutmultipliernormal() const;
  void set_aboveintendedpayoutmultipliernormal(const std::string& value);
  void set_aboveintendedpayoutmultipliernormal(std::string&& value);
  void set_aboveintendedpayoutmultipliernormal(const char* value);
  void set_aboveintendedpayoutmultipliernormal(const char* value, size_t size);
  std::string* mutable_aboveintendedpayoutmultipliernormal();
  std::string* release_aboveintendedpayoutmultipliernormal();
  void set_allocated_aboveintendedpayoutmultipliernormal(std::string* aboveintendedpayoutmultipliernormal);

  // string aboveIntendedPayoutMultiplierKeystone = 5;
  void clear_aboveintendedpayoutmultiplierkeystone();
  const std::string& aboveintendedpayoutmultiplierkeystone() const;
  void set_aboveintendedpayoutmultiplierkeystone(const std::string& value);
  void set_aboveintendedpayoutmultiplierkeystone(std::string&& value);
  void set_aboveintendedpayoutmultiplierkeystone(const char* value);
  void set_aboveintendedpayoutmultiplierkeystone(const char* value, size_t size);
  std::string* mutable_aboveintendedpayoutmultiplierkeystone();
  std::string* release_aboveintendedpayoutmultiplierkeystone();
  void set_allocated_aboveintendedpayoutmultiplierkeystone(std::string* aboveintendedpayoutmultiplierkeystone);

  // @@protoc_insertion_point(class_scope:VeriBlock.RewardCurveConfig)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr startofdecreasingline_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr widthofdecreasinglinenormal_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr widthofdecreasinglinekeystone_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr aboveintendedpayoutmultipliernormal_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr aboveintendedpayoutmultiplierkeystone_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_integration_2eproto;
};
// -------------------------------------------------------------------

class RelativeScoreConfig :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:VeriBlock.RelativeScoreConfig) */ {
 public:
  RelativeScoreConfig();
  virtual ~RelativeScoreConfig();

  RelativeScoreConfig(const RelativeScoreConfig& from);
  RelativeScoreConfig(RelativeScoreConfig&& from) noexcept
    : RelativeScoreConfig() {
    *this = ::std::move(from);
  }

  inline RelativeScoreConfig& operator=(const RelativeScoreConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline RelativeScoreConfig& operator=(RelativeScoreConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RelativeScoreConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RelativeScoreConfig* internal_default_instance() {
    return reinterpret_cast<const RelativeScoreConfig*>(
               &_RelativeScoreConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(RelativeScoreConfig& a, RelativeScoreConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(RelativeScoreConfig* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RelativeScoreConfig* New() const final {
    return CreateMaybeMessage<RelativeScoreConfig>(nullptr);
  }

  RelativeScoreConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RelativeScoreConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RelativeScoreConfig& from);
  void MergeFrom(const RelativeScoreConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RelativeScoreConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "VeriBlock.RelativeScoreConfig";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_integration_2eproto);
    return ::descriptor_table_integration_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kScoreFieldNumber = 1,
  };
  // repeated string score = 1;
  int score_size() const;
  void clear_score();
  const std::string& score(int index) const;
  std::string* mutable_score(int index);
  void set_score(int index, const std::string& value);
  void set_score(int index, std::string&& value);
  void set_score(int index, const char* value);
  void set_score(int index, const char* value, size_t size);
  std::string* add_score();
  void add_score(const std::string& value);
  void add_score(std::string&& value);
  void add_score(const char* value);
  void add_score(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& score() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_score();

  // @@protoc_insertion_point(class_scope:VeriBlock.RelativeScoreConfig)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> score_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_integration_2eproto;
};
// -------------------------------------------------------------------

class FlatScoreRoundConfig :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:VeriBlock.FlatScoreRoundConfig) */ {
 public:
  FlatScoreRoundConfig();
  virtual ~FlatScoreRoundConfig();

  FlatScoreRoundConfig(const FlatScoreRoundConfig& from);
  FlatScoreRoundConfig(FlatScoreRoundConfig&& from) noexcept
    : FlatScoreRoundConfig() {
    *this = ::std::move(from);
  }

  inline FlatScoreRoundConfig& operator=(const FlatScoreRoundConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline FlatScoreRoundConfig& operator=(FlatScoreRoundConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FlatScoreRoundConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FlatScoreRoundConfig* internal_default_instance() {
    return reinterpret_cast<const FlatScoreRoundConfig*>(
               &_FlatScoreRoundConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(FlatScoreRoundConfig& a, FlatScoreRoundConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(FlatScoreRoundConfig* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FlatScoreRoundConfig* New() const final {
    return CreateMaybeMessage<FlatScoreRoundConfig>(nullptr);
  }

  FlatScoreRoundConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FlatScoreRoundConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FlatScoreRoundConfig& from);
  void MergeFrom(const FlatScoreRoundConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FlatScoreRoundConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "VeriBlock.FlatScoreRoundConfig";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_integration_2eproto);
    return ::descriptor_table_integration_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoundFieldNumber = 1,
    kActiveFieldNumber = 2,
  };
  // int32 round = 1;
  void clear_round();
  ::PROTOBUF_NAMESPACE_ID::int32 round() const;
  void set_round(::PROTOBUF_NAMESPACE_ID::int32 value);

  // bool active = 2;
  void clear_active();
  bool active() const;
  void set_active(bool value);

  // @@protoc_insertion_point(class_scope:VeriBlock.FlatScoreRoundConfig)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 round_;
  bool active_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_integration_2eproto;
};
// -------------------------------------------------------------------

class CalculatorConfig :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:VeriBlock.CalculatorConfig) */ {
 public:
  CalculatorConfig();
  virtual ~CalculatorConfig();

  CalculatorConfig(const CalculatorConfig& from);
  CalculatorConfig(CalculatorConfig&& from) noexcept
    : CalculatorConfig() {
    *this = ::std::move(from);
  }

  inline CalculatorConfig& operator=(const CalculatorConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline CalculatorConfig& operator=(CalculatorConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CalculatorConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CalculatorConfig* internal_default_instance() {
    return reinterpret_cast<const CalculatorConfig*>(
               &_CalculatorConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(CalculatorConfig& a, CalculatorConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(CalculatorConfig* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CalculatorConfig* New() const final {
    return CreateMaybeMessage<CalculatorConfig>(nullptr);
  }

  CalculatorConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CalculatorConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CalculatorConfig& from);
  void MergeFrom(const CalculatorConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CalculatorConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "VeriBlock.CalculatorConfig";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_integration_2eproto);
    return ::descriptor_table_integration_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBasicRewardFieldNumber = 1,
    kMaxRewardThresholdNormalFieldNumber = 7,
    kMaxRewardThresholdKeystoneFieldNumber = 8,
    kRoundRatiosFieldNumber = 5,
    kRewardCurveFieldNumber = 6,
    kRelativeScoreLookupTableFieldNumber = 9,
    kFlatScoreRoundFieldNumber = 10,
    kPayoutRoundsFieldNumber = 2,
    kKeystoneRoundFieldNumber = 3,
    kKeystoneIntervalFieldNumber = 4,
  };
  // string basicReward = 1;
  void clear_basicreward();
  const std::string& basicreward() const;
  void set_basicreward(const std::string& value);
  void set_basicreward(std::string&& value);
  void set_basicreward(const char* value);
  void set_basicreward(const char* value, size_t size);
  std::string* mutable_basicreward();
  std::string* release_basicreward();
  void set_allocated_basicreward(std::string* basicreward);

  // string maxRewardThresholdNormal = 7;
  void clear_maxrewardthresholdnormal();
  const std::string& maxrewardthresholdnormal() const;
  void set_maxrewardthresholdnormal(const std::string& value);
  void set_maxrewardthresholdnormal(std::string&& value);
  void set_maxrewardthresholdnormal(const char* value);
  void set_maxrewardthresholdnormal(const char* value, size_t size);
  std::string* mutable_maxrewardthresholdnormal();
  std::string* release_maxrewardthresholdnormal();
  void set_allocated_maxrewardthresholdnormal(std::string* maxrewardthresholdnormal);

  // string maxRewardThresholdKeystone = 8;
  void clear_maxrewardthresholdkeystone();
  const std::string& maxrewardthresholdkeystone() const;
  void set_maxrewardthresholdkeystone(const std::string& value);
  void set_maxrewardthresholdkeystone(std::string&& value);
  void set_maxrewardthresholdkeystone(const char* value);
  void set_maxrewardthresholdkeystone(const char* value, size_t size);
  std::string* mutable_maxrewardthresholdkeystone();
  std::string* release_maxrewardthresholdkeystone();
  void set_allocated_maxrewardthresholdkeystone(std::string* maxrewardthresholdkeystone);

  // .VeriBlock.RoundRatioConfig roundRatios = 5;
  bool has_roundratios() const;
  void clear_roundratios();
  const ::VeriBlock::RoundRatioConfig& roundratios() const;
  ::VeriBlock::RoundRatioConfig* release_roundratios();
  ::VeriBlock::RoundRatioConfig* mutable_roundratios();
  void set_allocated_roundratios(::VeriBlock::RoundRatioConfig* roundratios);

  // .VeriBlock.RewardCurveConfig rewardCurve = 6;
  bool has_rewardcurve() const;
  void clear_rewardcurve();
  const ::VeriBlock::RewardCurveConfig& rewardcurve() const;
  ::VeriBlock::RewardCurveConfig* release_rewardcurve();
  ::VeriBlock::RewardCurveConfig* mutable_rewardcurve();
  void set_allocated_rewardcurve(::VeriBlock::RewardCurveConfig* rewardcurve);

  // .VeriBlock.RelativeScoreConfig relativeScoreLookupTable = 9;
  bool has_relativescorelookuptable() const;
  void clear_relativescorelookuptable();
  const ::VeriBlock::RelativeScoreConfig& relativescorelookuptable() const;
  ::VeriBlock::RelativeScoreConfig* release_relativescorelookuptable();
  ::VeriBlock::RelativeScoreConfig* mutable_relativescorelookuptable();
  void set_allocated_relativescorelookuptable(::VeriBlock::RelativeScoreConfig* relativescorelookuptable);

  // .VeriBlock.FlatScoreRoundConfig flatScoreRound = 10;
  bool has_flatscoreround() const;
  void clear_flatscoreround();
  const ::VeriBlock::FlatScoreRoundConfig& flatscoreround() const;
  ::VeriBlock::FlatScoreRoundConfig* release_flatscoreround();
  ::VeriBlock::FlatScoreRoundConfig* mutable_flatscoreround();
  void set_allocated_flatscoreround(::VeriBlock::FlatScoreRoundConfig* flatscoreround);

  // int32 payoutRounds = 2;
  void clear_payoutrounds();
  ::PROTOBUF_NAMESPACE_ID::int32 payoutrounds() const;
  void set_payoutrounds(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 keystoneRound = 3;
  void clear_keystoneround();
  ::PROTOBUF_NAMESPACE_ID::int32 keystoneround() const;
  void set_keystoneround(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 keystoneInterval = 4;
  void clear_keystoneinterval();
  ::PROTOBUF_NAMESPACE_ID::int32 keystoneinterval() const;
  void set_keystoneinterval(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:VeriBlock.CalculatorConfig)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr basicreward_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr maxrewardthresholdnormal_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr maxrewardthresholdkeystone_;
  ::VeriBlock::RoundRatioConfig* roundratios_;
  ::VeriBlock::RewardCurveConfig* rewardcurve_;
  ::VeriBlock::RelativeScoreConfig* relativescorelookuptable_;
  ::VeriBlock::FlatScoreRoundConfig* flatscoreround_;
  ::PROTOBUF_NAMESPACE_ID::int32 payoutrounds_;
  ::PROTOBUF_NAMESPACE_ID::int32 keystoneround_;
  ::PROTOBUF_NAMESPACE_ID::int32 keystoneinterval_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_integration_2eproto;
};
// -------------------------------------------------------------------

class SetCalculatorRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:VeriBlock.SetCalculatorRequest) */ {
 public:
  SetCalculatorRequest();
  virtual ~SetCalculatorRequest();

  SetCalculatorRequest(const SetCalculatorRequest& from);
  SetCalculatorRequest(SetCalculatorRequest&& from) noexcept
    : SetCalculatorRequest() {
    *this = ::std::move(from);
  }

  inline SetCalculatorRequest& operator=(const SetCalculatorRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetCalculatorRequest& operator=(SetCalculatorRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetCalculatorRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetCalculatorRequest* internal_default_instance() {
    return reinterpret_cast<const SetCalculatorRequest*>(
               &_SetCalculatorRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(SetCalculatorRequest& a, SetCalculatorRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SetCalculatorRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetCalculatorRequest* New() const final {
    return CreateMaybeMessage<SetCalculatorRequest>(nullptr);
  }

  SetCalculatorRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetCalculatorRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetCalculatorRequest& from);
  void MergeFrom(const SetCalculatorRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetCalculatorRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "VeriBlock.SetCalculatorRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_integration_2eproto);
    return ::descriptor_table_integration_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCalculatorFieldNumber = 1,
  };
  // .VeriBlock.CalculatorConfig calculator = 1;
  bool has_calculator() const;
  void clear_calculator();
  const ::VeriBlock::CalculatorConfig& calculator() const;
  ::VeriBlock::CalculatorConfig* release_calculator();
  ::VeriBlock::CalculatorConfig* mutable_calculator();
  void set_allocated_calculator(::VeriBlock::CalculatorConfig* calculator);

  // @@protoc_insertion_point(class_scope:VeriBlock.SetCalculatorRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::VeriBlock::CalculatorConfig* calculator_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_integration_2eproto;
};
// -------------------------------------------------------------------

class GetCalculatorReply :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:VeriBlock.GetCalculatorReply) */ {
 public:
  GetCalculatorReply();
  virtual ~GetCalculatorReply();

  GetCalculatorReply(const GetCalculatorReply& from);
  GetCalculatorReply(GetCalculatorReply&& from) noexcept
    : GetCalculatorReply() {
    *this = ::std::move(from);
  }

  inline GetCalculatorReply& operator=(const GetCalculatorReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetCalculatorReply& operator=(GetCalculatorReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetCalculatorReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetCalculatorReply* internal_default_instance() {
    return reinterpret_cast<const GetCalculatorReply*>(
               &_GetCalculatorReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(GetCalculatorReply& a, GetCalculatorReply& b) {
    a.Swap(&b);
  }
  inline void Swap(GetCalculatorReply* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetCalculatorReply* New() const final {
    return CreateMaybeMessage<GetCalculatorReply>(nullptr);
  }

  GetCalculatorReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetCalculatorReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetCalculatorReply& from);
  void MergeFrom(const GetCalculatorReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetCalculatorReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "VeriBlock.GetCalculatorReply";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_integration_2eproto);
    return ::descriptor_table_integration_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
    kCalculatorFieldNumber = 2,
  };
  // .VeriBlock.GeneralReply result = 1;
  bool has_result() const;
  void clear_result();
  const ::VeriBlock::GeneralReply& result() const;
  ::VeriBlock::GeneralReply* release_result();
  ::VeriBlock::GeneralReply* mutable_result();
  void set_allocated_result(::VeriBlock::GeneralReply* result);

  // .VeriBlock.CalculatorConfig calculator = 2;
  bool has_calculator() const;
  void clear_calculator();
  const ::VeriBlock::CalculatorConfig& calculator() const;
  ::VeriBlock::CalculatorConfig* release_calculator();
  ::VeriBlock::CalculatorConfig* mutable_calculator();
  void set_allocated_calculator(::VeriBlock::CalculatorConfig* calculator);

  // @@protoc_insertion_point(class_scope:VeriBlock.GetCalculatorReply)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::VeriBlock::GeneralReply* result_;
  ::VeriBlock::CalculatorConfig* calculator_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_integration_2eproto;
};
// -------------------------------------------------------------------

class RewardOutput :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:VeriBlock.RewardOutput) */ {
 public:
  RewardOutput();
  virtual ~RewardOutput();

  RewardOutput(const RewardOutput& from);
  RewardOutput(RewardOutput&& from) noexcept
    : RewardOutput() {
    *this = ::std::move(from);
  }

  inline RewardOutput& operator=(const RewardOutput& from) {
    CopyFrom(from);
    return *this;
  }
  inline RewardOutput& operator=(RewardOutput&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RewardOutput& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RewardOutput* internal_default_instance() {
    return reinterpret_cast<const RewardOutput*>(
               &_RewardOutput_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(RewardOutput& a, RewardOutput& b) {
    a.Swap(&b);
  }
  inline void Swap(RewardOutput* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RewardOutput* New() const final {
    return CreateMaybeMessage<RewardOutput>(nullptr);
  }

  RewardOutput* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RewardOutput>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RewardOutput& from);
  void MergeFrom(const RewardOutput& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RewardOutput* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "VeriBlock.RewardOutput";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_integration_2eproto);
    return ::descriptor_table_integration_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAddressFieldNumber = 1,
    kRewardFieldNumber = 2,
  };
  // string address = 1;
  void clear_address();
  const std::string& address() const;
  void set_address(const std::string& value);
  void set_address(std::string&& value);
  void set_address(const char* value);
  void set_address(const char* value, size_t size);
  std::string* mutable_address();
  std::string* release_address();
  void set_allocated_address(std::string* address);

  // string reward = 2;
  void clear_reward();
  const std::string& reward() const;
  void set_reward(const std::string& value);
  void set_reward(std::string&& value);
  void set_reward(const char* value);
  void set_reward(const char* value, size_t size);
  std::string* mutable_reward();
  std::string* release_reward();
  void set_allocated_reward(std::string* reward);

  // @@protoc_insertion_point(class_scope:VeriBlock.RewardOutput)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr address_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reward_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_integration_2eproto;
};
// -------------------------------------------------------------------

class PopEndorsement :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:VeriBlock.PopEndorsement) */ {
 public:
  PopEndorsement();
  virtual ~PopEndorsement();

  PopEndorsement(const PopEndorsement& from);
  PopEndorsement(PopEndorsement&& from) noexcept
    : PopEndorsement() {
    *this = ::std::move(from);
  }

  inline PopEndorsement& operator=(const PopEndorsement& from) {
    CopyFrom(from);
    return *this;
  }
  inline PopEndorsement& operator=(PopEndorsement&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PopEndorsement& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PopEndorsement* internal_default_instance() {
    return reinterpret_cast<const PopEndorsement*>(
               &_PopEndorsement_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  friend void swap(PopEndorsement& a, PopEndorsement& b) {
    a.Swap(&b);
  }
  inline void Swap(PopEndorsement* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PopEndorsement* New() const final {
    return CreateMaybeMessage<PopEndorsement>(nullptr);
  }

  PopEndorsement* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PopEndorsement>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PopEndorsement& from);
  void MergeFrom(const PopEndorsement& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PopEndorsement* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "VeriBlock.PopEndorsement";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_integration_2eproto);
    return ::descriptor_table_integration_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAddressFieldNumber = 1,
    kTxidFieldNumber = 2,
  };
  // string address = 1;
  void clear_address();
  const std::string& address() const;
  void set_address(const std::string& value);
  void set_address(std::string&& value);
  void set_address(const char* value);
  void set_address(const char* value, size_t size);
  std::string* mutable_address();
  std::string* release_address();
  void set_allocated_address(std::string* address);

  // string txid = 2;
  void clear_txid();
  const std::string& txid() const;
  void set_txid(const std::string& value);
  void set_txid(std::string&& value);
  void set_txid(const char* value);
  void set_txid(const char* value, size_t size);
  std::string* mutable_txid();
  std::string* release_txid();
  void set_allocated_txid(std::string* txid);

  // @@protoc_insertion_point(class_scope:VeriBlock.PopEndorsement)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr address_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr txid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_integration_2eproto;
};
// -------------------------------------------------------------------

class RewardEndorsement :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:VeriBlock.RewardEndorsement) */ {
 public:
  RewardEndorsement();
  virtual ~RewardEndorsement();

  RewardEndorsement(const RewardEndorsement& from);
  RewardEndorsement(RewardEndorsement&& from) noexcept
    : RewardEndorsement() {
    *this = ::std::move(from);
  }

  inline RewardEndorsement& operator=(const RewardEndorsement& from) {
    CopyFrom(from);
    return *this;
  }
  inline RewardEndorsement& operator=(RewardEndorsement&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RewardEndorsement& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RewardEndorsement* internal_default_instance() {
    return reinterpret_cast<const RewardEndorsement*>(
               &_RewardEndorsement_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  friend void swap(RewardEndorsement& a, RewardEndorsement& b) {
    a.Swap(&b);
  }
  inline void Swap(RewardEndorsement* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RewardEndorsement* New() const final {
    return CreateMaybeMessage<RewardEndorsement>(nullptr);
  }

  RewardEndorsement* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RewardEndorsement>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RewardEndorsement& from);
  void MergeFrom(const RewardEndorsement& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RewardEndorsement* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "VeriBlock.RewardEndorsement";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_integration_2eproto);
    return ::descriptor_table_integration_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEndorsementsInBlockFieldNumber = 2,
    kBlockVbkHeightFieldNumber = 1,
  };
  // repeated .VeriBlock.PopEndorsement endorsementsInBlock = 2;
  int endorsementsinblock_size() const;
  void clear_endorsementsinblock();
  ::VeriBlock::PopEndorsement* mutable_endorsementsinblock(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::VeriBlock::PopEndorsement >*
      mutable_endorsementsinblock();
  const ::VeriBlock::PopEndorsement& endorsementsinblock(int index) const;
  ::VeriBlock::PopEndorsement* add_endorsementsinblock();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::VeriBlock::PopEndorsement >&
      endorsementsinblock() const;

  // int32 blockVbkHeight = 1;
  void clear_blockvbkheight();
  ::PROTOBUF_NAMESPACE_ID::int32 blockvbkheight() const;
  void set_blockvbkheight(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:VeriBlock.RewardEndorsement)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::VeriBlock::PopEndorsement > endorsementsinblock_;
  ::PROTOBUF_NAMESPACE_ID::int32 blockvbkheight_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_integration_2eproto;
};
// -------------------------------------------------------------------

class RewardsCalculateScoreRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:VeriBlock.RewardsCalculateScoreRequest) */ {
 public:
  RewardsCalculateScoreRequest();
  virtual ~RewardsCalculateScoreRequest();

  RewardsCalculateScoreRequest(const RewardsCalculateScoreRequest& from);
  RewardsCalculateScoreRequest(RewardsCalculateScoreRequest&& from) noexcept
    : RewardsCalculateScoreRequest() {
    *this = ::std::move(from);
  }

  inline RewardsCalculateScoreRequest& operator=(const RewardsCalculateScoreRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RewardsCalculateScoreRequest& operator=(RewardsCalculateScoreRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RewardsCalculateScoreRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RewardsCalculateScoreRequest* internal_default_instance() {
    return reinterpret_cast<const RewardsCalculateScoreRequest*>(
               &_RewardsCalculateScoreRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  friend void swap(RewardsCalculateScoreRequest& a, RewardsCalculateScoreRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(RewardsCalculateScoreRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RewardsCalculateScoreRequest* New() const final {
    return CreateMaybeMessage<RewardsCalculateScoreRequest>(nullptr);
  }

  RewardsCalculateScoreRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RewardsCalculateScoreRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RewardsCalculateScoreRequest& from);
  void MergeFrom(const RewardsCalculateScoreRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RewardsCalculateScoreRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "VeriBlock.RewardsCalculateScoreRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_integration_2eproto);
    return ::descriptor_table_integration_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEndorsementsForBlockFieldNumber = 1,
  };
  // repeated .VeriBlock.RewardEndorsement endorsementsForBlock = 1;
  int endorsementsforblock_size() const;
  void clear_endorsementsforblock();
  ::VeriBlock::RewardEndorsement* mutable_endorsementsforblock(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::VeriBlock::RewardEndorsement >*
      mutable_endorsementsforblock();
  const ::VeriBlock::RewardEndorsement& endorsementsforblock(int index) const;
  ::VeriBlock::RewardEndorsement* add_endorsementsforblock();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::VeriBlock::RewardEndorsement >&
      endorsementsforblock() const;

  // @@protoc_insertion_point(class_scope:VeriBlock.RewardsCalculateScoreRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::VeriBlock::RewardEndorsement > endorsementsforblock_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_integration_2eproto;
};
// -------------------------------------------------------------------

class RewardsCalculateScoreReply :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:VeriBlock.RewardsCalculateScoreReply) */ {
 public:
  RewardsCalculateScoreReply();
  virtual ~RewardsCalculateScoreReply();

  RewardsCalculateScoreReply(const RewardsCalculateScoreReply& from);
  RewardsCalculateScoreReply(RewardsCalculateScoreReply&& from) noexcept
    : RewardsCalculateScoreReply() {
    *this = ::std::move(from);
  }

  inline RewardsCalculateScoreReply& operator=(const RewardsCalculateScoreReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline RewardsCalculateScoreReply& operator=(RewardsCalculateScoreReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RewardsCalculateScoreReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RewardsCalculateScoreReply* internal_default_instance() {
    return reinterpret_cast<const RewardsCalculateScoreReply*>(
               &_RewardsCalculateScoreReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    36;

  friend void swap(RewardsCalculateScoreReply& a, RewardsCalculateScoreReply& b) {
    a.Swap(&b);
  }
  inline void Swap(RewardsCalculateScoreReply* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RewardsCalculateScoreReply* New() const final {
    return CreateMaybeMessage<RewardsCalculateScoreReply>(nullptr);
  }

  RewardsCalculateScoreReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RewardsCalculateScoreReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RewardsCalculateScoreReply& from);
  void MergeFrom(const RewardsCalculateScoreReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RewardsCalculateScoreReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "VeriBlock.RewardsCalculateScoreReply";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_integration_2eproto);
    return ::descriptor_table_integration_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kScoreFieldNumber = 2,
    kResultFieldNumber = 1,
  };
  // string score = 2;
  void clear_score();
  const std::string& score() const;
  void set_score(const std::string& value);
  void set_score(std::string&& value);
  void set_score(const char* value);
  void set_score(const char* value, size_t size);
  std::string* mutable_score();
  std::string* release_score();
  void set_allocated_score(std::string* score);

  // .VeriBlock.GeneralReply result = 1;
  bool has_result() const;
  void clear_result();
  const ::VeriBlock::GeneralReply& result() const;
  ::VeriBlock::GeneralReply* release_result();
  ::VeriBlock::GeneralReply* mutable_result();
  void set_allocated_result(::VeriBlock::GeneralReply* result);

  // @@protoc_insertion_point(class_scope:VeriBlock.RewardsCalculateScoreReply)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr score_;
  ::VeriBlock::GeneralReply* result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_integration_2eproto;
};
// -------------------------------------------------------------------

class RewardsCalculateOutputsRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:VeriBlock.RewardsCalculateOutputsRequest) */ {
 public:
  RewardsCalculateOutputsRequest();
  virtual ~RewardsCalculateOutputsRequest();

  RewardsCalculateOutputsRequest(const RewardsCalculateOutputsRequest& from);
  RewardsCalculateOutputsRequest(RewardsCalculateOutputsRequest&& from) noexcept
    : RewardsCalculateOutputsRequest() {
    *this = ::std::move(from);
  }

  inline RewardsCalculateOutputsRequest& operator=(const RewardsCalculateOutputsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RewardsCalculateOutputsRequest& operator=(RewardsCalculateOutputsRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RewardsCalculateOutputsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RewardsCalculateOutputsRequest* internal_default_instance() {
    return reinterpret_cast<const RewardsCalculateOutputsRequest*>(
               &_RewardsCalculateOutputsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    37;

  friend void swap(RewardsCalculateOutputsRequest& a, RewardsCalculateOutputsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(RewardsCalculateOutputsRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RewardsCalculateOutputsRequest* New() const final {
    return CreateMaybeMessage<RewardsCalculateOutputsRequest>(nullptr);
  }

  RewardsCalculateOutputsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RewardsCalculateOutputsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RewardsCalculateOutputsRequest& from);
  void MergeFrom(const RewardsCalculateOutputsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RewardsCalculateOutputsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "VeriBlock.RewardsCalculateOutputsRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_integration_2eproto);
    return ::descriptor_table_integration_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEndorsementsForBlockFieldNumber = 2,
    kDifficultyFieldNumber = 3,
    kBlockAltHeightFieldNumber = 1,
  };
  // repeated .VeriBlock.RewardEndorsement endorsementsForBlock = 2;
  int endorsementsforblock_size() const;
  void clear_endorsementsforblock();
  ::VeriBlock::RewardEndorsement* mutable_endorsementsforblock(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::VeriBlock::RewardEndorsement >*
      mutable_endorsementsforblock();
  const ::VeriBlock::RewardEndorsement& endorsementsforblock(int index) const;
  ::VeriBlock::RewardEndorsement* add_endorsementsforblock();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::VeriBlock::RewardEndorsement >&
      endorsementsforblock() const;

  // string difficulty = 3;
  void clear_difficulty();
  const std::string& difficulty() const;
  void set_difficulty(const std::string& value);
  void set_difficulty(std::string&& value);
  void set_difficulty(const char* value);
  void set_difficulty(const char* value, size_t size);
  std::string* mutable_difficulty();
  std::string* release_difficulty();
  void set_allocated_difficulty(std::string* difficulty);

  // int32 blockAltHeight = 1;
  void clear_blockaltheight();
  ::PROTOBUF_NAMESPACE_ID::int32 blockaltheight() const;
  void set_blockaltheight(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:VeriBlock.RewardsCalculateOutputsRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::VeriBlock::RewardEndorsement > endorsementsforblock_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr difficulty_;
  ::PROTOBUF_NAMESPACE_ID::int32 blockaltheight_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_integration_2eproto;
};
// -------------------------------------------------------------------

class RewardsCalculateOutputsReply :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:VeriBlock.RewardsCalculateOutputsReply) */ {
 public:
  RewardsCalculateOutputsReply();
  virtual ~RewardsCalculateOutputsReply();

  RewardsCalculateOutputsReply(const RewardsCalculateOutputsReply& from);
  RewardsCalculateOutputsReply(RewardsCalculateOutputsReply&& from) noexcept
    : RewardsCalculateOutputsReply() {
    *this = ::std::move(from);
  }

  inline RewardsCalculateOutputsReply& operator=(const RewardsCalculateOutputsReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline RewardsCalculateOutputsReply& operator=(RewardsCalculateOutputsReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RewardsCalculateOutputsReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RewardsCalculateOutputsReply* internal_default_instance() {
    return reinterpret_cast<const RewardsCalculateOutputsReply*>(
               &_RewardsCalculateOutputsReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    38;

  friend void swap(RewardsCalculateOutputsReply& a, RewardsCalculateOutputsReply& b) {
    a.Swap(&b);
  }
  inline void Swap(RewardsCalculateOutputsReply* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RewardsCalculateOutputsReply* New() const final {
    return CreateMaybeMessage<RewardsCalculateOutputsReply>(nullptr);
  }

  RewardsCalculateOutputsReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RewardsCalculateOutputsReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RewardsCalculateOutputsReply& from);
  void MergeFrom(const RewardsCalculateOutputsReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RewardsCalculateOutputsReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "VeriBlock.RewardsCalculateOutputsReply";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_integration_2eproto);
    return ::descriptor_table_integration_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOutputsFieldNumber = 4,
    kTotalRewardFieldNumber = 2,
    kBlockRewardFieldNumber = 3,
    kResultFieldNumber = 1,
  };
  // repeated .VeriBlock.RewardOutput outputs = 4;
  int outputs_size() const;
  void clear_outputs();
  ::VeriBlock::RewardOutput* mutable_outputs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::VeriBlock::RewardOutput >*
      mutable_outputs();
  const ::VeriBlock::RewardOutput& outputs(int index) const;
  ::VeriBlock::RewardOutput* add_outputs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::VeriBlock::RewardOutput >&
      outputs() const;

  // string totalReward = 2;
  void clear_totalreward();
  const std::string& totalreward() const;
  void set_totalreward(const std::string& value);
  void set_totalreward(std::string&& value);
  void set_totalreward(const char* value);
  void set_totalreward(const char* value, size_t size);
  std::string* mutable_totalreward();
  std::string* release_totalreward();
  void set_allocated_totalreward(std::string* totalreward);

  // string blockReward = 3;
  void clear_blockreward();
  const std::string& blockreward() const;
  void set_blockreward(const std::string& value);
  void set_blockreward(std::string&& value);
  void set_blockreward(const char* value);
  void set_blockreward(const char* value, size_t size);
  std::string* mutable_blockreward();
  std::string* release_blockreward();
  void set_allocated_blockreward(std::string* blockreward);

  // .VeriBlock.GeneralReply result = 1;
  bool has_result() const;
  void clear_result();
  const ::VeriBlock::GeneralReply& result() const;
  ::VeriBlock::GeneralReply* release_result();
  ::VeriBlock::GeneralReply* mutable_result();
  void set_allocated_result(::VeriBlock::GeneralReply* result);

  // @@protoc_insertion_point(class_scope:VeriBlock.RewardsCalculateOutputsReply)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::VeriBlock::RewardOutput > outputs_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr totalreward_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr blockreward_;
  ::VeriBlock::GeneralReply* result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_integration_2eproto;
};
// -------------------------------------------------------------------

class BytesArrayRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:VeriBlock.BytesArrayRequest) */ {
 public:
  BytesArrayRequest();
  virtual ~BytesArrayRequest();

  BytesArrayRequest(const BytesArrayRequest& from);
  BytesArrayRequest(BytesArrayRequest&& from) noexcept
    : BytesArrayRequest() {
    *this = ::std::move(from);
  }

  inline BytesArrayRequest& operator=(const BytesArrayRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline BytesArrayRequest& operator=(BytesArrayRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BytesArrayRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BytesArrayRequest* internal_default_instance() {
    return reinterpret_cast<const BytesArrayRequest*>(
               &_BytesArrayRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    39;

  friend void swap(BytesArrayRequest& a, BytesArrayRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(BytesArrayRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BytesArrayRequest* New() const final {
    return CreateMaybeMessage<BytesArrayRequest>(nullptr);
  }

  BytesArrayRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BytesArrayRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BytesArrayRequest& from);
  void MergeFrom(const BytesArrayRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BytesArrayRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "VeriBlock.BytesArrayRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_integration_2eproto);
    return ::descriptor_table_integration_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
  };
  // bytes data = 1;
  void clear_data();
  const std::string& data() const;
  void set_data(const std::string& value);
  void set_data(std::string&& value);
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  std::string* mutable_data();
  std::string* release_data();
  void set_allocated_data(std::string* data);

  // @@protoc_insertion_point(class_scope:VeriBlock.BytesArrayRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_integration_2eproto;
};
// -------------------------------------------------------------------

class BytesArrayReply :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:VeriBlock.BytesArrayReply) */ {
 public:
  BytesArrayReply();
  virtual ~BytesArrayReply();

  BytesArrayReply(const BytesArrayReply& from);
  BytesArrayReply(BytesArrayReply&& from) noexcept
    : BytesArrayReply() {
    *this = ::std::move(from);
  }

  inline BytesArrayReply& operator=(const BytesArrayReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline BytesArrayReply& operator=(BytesArrayReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BytesArrayReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BytesArrayReply* internal_default_instance() {
    return reinterpret_cast<const BytesArrayReply*>(
               &_BytesArrayReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    40;

  friend void swap(BytesArrayReply& a, BytesArrayReply& b) {
    a.Swap(&b);
  }
  inline void Swap(BytesArrayReply* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BytesArrayReply* New() const final {
    return CreateMaybeMessage<BytesArrayReply>(nullptr);
  }

  BytesArrayReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BytesArrayReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BytesArrayReply& from);
  void MergeFrom(const BytesArrayReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BytesArrayReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "VeriBlock.BytesArrayReply";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_integration_2eproto);
    return ::descriptor_table_integration_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 2,
    kResultFieldNumber = 1,
  };
  // bytes data = 2;
  void clear_data();
  const std::string& data() const;
  void set_data(const std::string& value);
  void set_data(std::string&& value);
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  std::string* mutable_data();
  std::string* release_data();
  void set_allocated_data(std::string* data);

  // .VeriBlock.GeneralReply result = 1;
  bool has_result() const;
  void clear_result();
  const ::VeriBlock::GeneralReply& result() const;
  ::VeriBlock::GeneralReply* release_result();
  ::VeriBlock::GeneralReply* mutable_result();
  void set_allocated_result(::VeriBlock::GeneralReply* result);

  // @@protoc_insertion_point(class_scope:VeriBlock.BytesArrayReply)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  ::VeriBlock::GeneralReply* result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_integration_2eproto;
};
// -------------------------------------------------------------------

class MerklePath :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:VeriBlock.MerklePath) */ {
 public:
  MerklePath();
  virtual ~MerklePath();

  MerklePath(const MerklePath& from);
  MerklePath(MerklePath&& from) noexcept
    : MerklePath() {
    *this = ::std::move(from);
  }

  inline MerklePath& operator=(const MerklePath& from) {
    CopyFrom(from);
    return *this;
  }
  inline MerklePath& operator=(MerklePath&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MerklePath& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MerklePath* internal_default_instance() {
    return reinterpret_cast<const MerklePath*>(
               &_MerklePath_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    41;

  friend void swap(MerklePath& a, MerklePath& b) {
    a.Swap(&b);
  }
  inline void Swap(MerklePath* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MerklePath* New() const final {
    return CreateMaybeMessage<MerklePath>(nullptr);
  }

  MerklePath* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MerklePath>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MerklePath& from);
  void MergeFrom(const MerklePath& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MerklePath* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "VeriBlock.MerklePath";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_integration_2eproto);
    return ::descriptor_table_integration_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMerklePathFieldNumber = 1,
  };
  // string merklePath = 1;
  void clear_merklepath();
  const std::string& merklepath() const;
  void set_merklepath(const std::string& value);
  void set_merklepath(std::string&& value);
  void set_merklepath(const char* value);
  void set_merklepath(const char* value, size_t size);
  std::string* mutable_merklepath();
  std::string* release_merklepath();
  void set_allocated_merklepath(std::string* merklepath);

  // @@protoc_insertion_point(class_scope:VeriBlock.MerklePath)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr merklepath_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_integration_2eproto;
};
// -------------------------------------------------------------------

class MerklePathRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:VeriBlock.MerklePathRequest) */ {
 public:
  MerklePathRequest();
  virtual ~MerklePathRequest();

  MerklePathRequest(const MerklePathRequest& from);
  MerklePathRequest(MerklePathRequest&& from) noexcept
    : MerklePathRequest() {
    *this = ::std::move(from);
  }

  inline MerklePathRequest& operator=(const MerklePathRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline MerklePathRequest& operator=(MerklePathRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MerklePathRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MerklePathRequest* internal_default_instance() {
    return reinterpret_cast<const MerklePathRequest*>(
               &_MerklePathRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    42;

  friend void swap(MerklePathRequest& a, MerklePathRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(MerklePathRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MerklePathRequest* New() const final {
    return CreateMaybeMessage<MerklePathRequest>(nullptr);
  }

  MerklePathRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MerklePathRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MerklePathRequest& from);
  void MergeFrom(const MerklePathRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MerklePathRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "VeriBlock.MerklePathRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_integration_2eproto);
    return ::descriptor_table_integration_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
    kSubjectFieldNumber = 2,
  };
  // bytes data = 1;
  void clear_data();
  const std::string& data() const;
  void set_data(const std::string& value);
  void set_data(std::string&& value);
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  std::string* mutable_data();
  std::string* release_data();
  void set_allocated_data(std::string* data);

  // bytes subject = 2 [(.VeriBlock.hex_encoded) = true];
  void clear_subject();
  const std::string& subject() const;
  void set_subject(const std::string& value);
  void set_subject(std::string&& value);
  void set_subject(const char* value);
  void set_subject(const void* value, size_t size);
  std::string* mutable_subject();
  std::string* release_subject();
  void set_allocated_subject(std::string* subject);

  // @@protoc_insertion_point(class_scope:VeriBlock.MerklePathRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr subject_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_integration_2eproto;
};
// -------------------------------------------------------------------

class VeriBlockMerklePath :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:VeriBlock.VeriBlockMerklePath) */ {
 public:
  VeriBlockMerklePath();
  virtual ~VeriBlockMerklePath();

  VeriBlockMerklePath(const VeriBlockMerklePath& from);
  VeriBlockMerklePath(VeriBlockMerklePath&& from) noexcept
    : VeriBlockMerklePath() {
    *this = ::std::move(from);
  }

  inline VeriBlockMerklePath& operator=(const VeriBlockMerklePath& from) {
    CopyFrom(from);
    return *this;
  }
  inline VeriBlockMerklePath& operator=(VeriBlockMerklePath&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const VeriBlockMerklePath& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VeriBlockMerklePath* internal_default_instance() {
    return reinterpret_cast<const VeriBlockMerklePath*>(
               &_VeriBlockMerklePath_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    43;

  friend void swap(VeriBlockMerklePath& a, VeriBlockMerklePath& b) {
    a.Swap(&b);
  }
  inline void Swap(VeriBlockMerklePath* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VeriBlockMerklePath* New() const final {
    return CreateMaybeMessage<VeriBlockMerklePath>(nullptr);
  }

  VeriBlockMerklePath* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VeriBlockMerklePath>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VeriBlockMerklePath& from);
  void MergeFrom(const VeriBlockMerklePath& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VeriBlockMerklePath* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "VeriBlock.VeriBlockMerklePath";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_integration_2eproto);
    return ::descriptor_table_integration_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMerklePathFieldNumber = 1,
  };
  // string merklePath = 1;
  void clear_merklepath();
  const std::string& merklepath() const;
  void set_merklepath(const std::string& value);
  void set_merklepath(std::string&& value);
  void set_merklepath(const char* value);
  void set_merklepath(const char* value, size_t size);
  std::string* mutable_merklepath();
  std::string* release_merklepath();
  void set_allocated_merklepath(std::string* merklepath);

  // @@protoc_insertion_point(class_scope:VeriBlock.VeriBlockMerklePath)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr merklepath_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_integration_2eproto;
};
// -------------------------------------------------------------------

class AltPublicationReply :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:VeriBlock.AltPublicationReply) */ {
 public:
  AltPublicationReply();
  virtual ~AltPublicationReply();

  AltPublicationReply(const AltPublicationReply& from);
  AltPublicationReply(AltPublicationReply&& from) noexcept
    : AltPublicationReply() {
    *this = ::std::move(from);
  }

  inline AltPublicationReply& operator=(const AltPublicationReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline AltPublicationReply& operator=(AltPublicationReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AltPublicationReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AltPublicationReply* internal_default_instance() {
    return reinterpret_cast<const AltPublicationReply*>(
               &_AltPublicationReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    44;

  friend void swap(AltPublicationReply& a, AltPublicationReply& b) {
    a.Swap(&b);
  }
  inline void Swap(AltPublicationReply* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AltPublicationReply* New() const final {
    return CreateMaybeMessage<AltPublicationReply>(nullptr);
  }

  AltPublicationReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AltPublicationReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AltPublicationReply& from);
  void MergeFrom(const AltPublicationReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AltPublicationReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "VeriBlock.AltPublicationReply";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_integration_2eproto);
    return ::descriptor_table_integration_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
    kPublicationFieldNumber = 2,
  };
  // .VeriBlock.GeneralReply result = 1;
  bool has_result() const;
  void clear_result();
  const ::VeriBlock::GeneralReply& result() const;
  ::VeriBlock::GeneralReply* release_result();
  ::VeriBlock::GeneralReply* mutable_result();
  void set_allocated_result(::VeriBlock::GeneralReply* result);

  // .VeriBlock.AltPublication publication = 2;
  bool has_publication() const;
  void clear_publication();
  const ::VeriBlock::AltPublication& publication() const;
  ::VeriBlock::AltPublication* release_publication();
  ::VeriBlock::AltPublication* mutable_publication();
  void set_allocated_publication(::VeriBlock::AltPublication* publication);

  // @@protoc_insertion_point(class_scope:VeriBlock.AltPublicationReply)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::VeriBlock::GeneralReply* result_;
  ::VeriBlock::AltPublication* publication_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_integration_2eproto;
};
// -------------------------------------------------------------------

class PublicationDataReply :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:VeriBlock.PublicationDataReply) */ {
 public:
  PublicationDataReply();
  virtual ~PublicationDataReply();

  PublicationDataReply(const PublicationDataReply& from);
  PublicationDataReply(PublicationDataReply&& from) noexcept
    : PublicationDataReply() {
    *this = ::std::move(from);
  }

  inline PublicationDataReply& operator=(const PublicationDataReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline PublicationDataReply& operator=(PublicationDataReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PublicationDataReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PublicationDataReply* internal_default_instance() {
    return reinterpret_cast<const PublicationDataReply*>(
               &_PublicationDataReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    45;

  friend void swap(PublicationDataReply& a, PublicationDataReply& b) {
    a.Swap(&b);
  }
  inline void Swap(PublicationDataReply* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PublicationDataReply* New() const final {
    return CreateMaybeMessage<PublicationDataReply>(nullptr);
  }

  PublicationDataReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PublicationDataReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PublicationDataReply& from);
  void MergeFrom(const PublicationDataReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PublicationDataReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "VeriBlock.PublicationDataReply";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_integration_2eproto);
    return ::descriptor_table_integration_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
    kPublicationFieldNumber = 2,
  };
  // .VeriBlock.GeneralReply result = 1;
  bool has_result() const;
  void clear_result();
  const ::VeriBlock::GeneralReply& result() const;
  ::VeriBlock::GeneralReply* release_result();
  ::VeriBlock::GeneralReply* mutable_result();
  void set_allocated_result(::VeriBlock::GeneralReply* result);

  // .VeriBlock.PublicationData publication = 2;
  bool has_publication() const;
  void clear_publication();
  const ::VeriBlock::PublicationData& publication() const;
  ::VeriBlock::PublicationData* release_publication();
  ::VeriBlock::PublicationData* mutable_publication();
  void set_allocated_publication(::VeriBlock::PublicationData* publication);

  // @@protoc_insertion_point(class_scope:VeriBlock.PublicationDataReply)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::VeriBlock::GeneralReply* result_;
  ::VeriBlock::PublicationData* publication_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_integration_2eproto;
};
// -------------------------------------------------------------------

class BitcoinTransactionReply :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:VeriBlock.BitcoinTransactionReply) */ {
 public:
  BitcoinTransactionReply();
  virtual ~BitcoinTransactionReply();

  BitcoinTransactionReply(const BitcoinTransactionReply& from);
  BitcoinTransactionReply(BitcoinTransactionReply&& from) noexcept
    : BitcoinTransactionReply() {
    *this = ::std::move(from);
  }

  inline BitcoinTransactionReply& operator=(const BitcoinTransactionReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline BitcoinTransactionReply& operator=(BitcoinTransactionReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BitcoinTransactionReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BitcoinTransactionReply* internal_default_instance() {
    return reinterpret_cast<const BitcoinTransactionReply*>(
               &_BitcoinTransactionReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    46;

  friend void swap(BitcoinTransactionReply& a, BitcoinTransactionReply& b) {
    a.Swap(&b);
  }
  inline void Swap(BitcoinTransactionReply* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BitcoinTransactionReply* New() const final {
    return CreateMaybeMessage<BitcoinTransactionReply>(nullptr);
  }

  BitcoinTransactionReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BitcoinTransactionReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BitcoinTransactionReply& from);
  void MergeFrom(const BitcoinTransactionReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BitcoinTransactionReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "VeriBlock.BitcoinTransactionReply";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_integration_2eproto);
    return ::descriptor_table_integration_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
    kTransactionFieldNumber = 2,
  };
  // .VeriBlock.GeneralReply result = 1;
  bool has_result() const;
  void clear_result();
  const ::VeriBlock::GeneralReply& result() const;
  ::VeriBlock::GeneralReply* release_result();
  ::VeriBlock::GeneralReply* mutable_result();
  void set_allocated_result(::VeriBlock::GeneralReply* result);

  // .VeriBlock.BitcoinTransaction transaction = 2;
  bool has_transaction() const;
  void clear_transaction();
  const ::VeriBlock::BitcoinTransaction& transaction() const;
  ::VeriBlock::BitcoinTransaction* release_transaction();
  ::VeriBlock::BitcoinTransaction* mutable_transaction();
  void set_allocated_transaction(::VeriBlock::BitcoinTransaction* transaction);

  // @@protoc_insertion_point(class_scope:VeriBlock.BitcoinTransactionReply)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::VeriBlock::GeneralReply* result_;
  ::VeriBlock::BitcoinTransaction* transaction_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_integration_2eproto;
};
// -------------------------------------------------------------------

class VeriBlockBlockReply :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:VeriBlock.VeriBlockBlockReply) */ {
 public:
  VeriBlockBlockReply();
  virtual ~VeriBlockBlockReply();

  VeriBlockBlockReply(const VeriBlockBlockReply& from);
  VeriBlockBlockReply(VeriBlockBlockReply&& from) noexcept
    : VeriBlockBlockReply() {
    *this = ::std::move(from);
  }

  inline VeriBlockBlockReply& operator=(const VeriBlockBlockReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline VeriBlockBlockReply& operator=(VeriBlockBlockReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const VeriBlockBlockReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VeriBlockBlockReply* internal_default_instance() {
    return reinterpret_cast<const VeriBlockBlockReply*>(
               &_VeriBlockBlockReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    47;

  friend void swap(VeriBlockBlockReply& a, VeriBlockBlockReply& b) {
    a.Swap(&b);
  }
  inline void Swap(VeriBlockBlockReply* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VeriBlockBlockReply* New() const final {
    return CreateMaybeMessage<VeriBlockBlockReply>(nullptr);
  }

  VeriBlockBlockReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VeriBlockBlockReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VeriBlockBlockReply& from);
  void MergeFrom(const VeriBlockBlockReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VeriBlockBlockReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "VeriBlock.VeriBlockBlockReply";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_integration_2eproto);
    return ::descriptor_table_integration_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
    kBlockFieldNumber = 2,
  };
  // .VeriBlock.GeneralReply result = 1;
  bool has_result() const;
  void clear_result();
  const ::VeriBlock::GeneralReply& result() const;
  ::VeriBlock::GeneralReply* release_result();
  ::VeriBlock::GeneralReply* mutable_result();
  void set_allocated_result(::VeriBlock::GeneralReply* result);

  // .VeriBlock.VeriBlockBlock block = 2;
  bool has_block() const;
  void clear_block();
  const ::VeriBlock::VeriBlockBlock& block() const;
  ::VeriBlock::VeriBlockBlock* release_block();
  ::VeriBlock::VeriBlockBlock* mutable_block();
  void set_allocated_block(::VeriBlock::VeriBlockBlock* block);

  // @@protoc_insertion_point(class_scope:VeriBlock.VeriBlockBlockReply)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::VeriBlock::GeneralReply* result_;
  ::VeriBlock::VeriBlockBlock* block_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_integration_2eproto;
};
// -------------------------------------------------------------------

class VeriBlockTransactionReply :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:VeriBlock.VeriBlockTransactionReply) */ {
 public:
  VeriBlockTransactionReply();
  virtual ~VeriBlockTransactionReply();

  VeriBlockTransactionReply(const VeriBlockTransactionReply& from);
  VeriBlockTransactionReply(VeriBlockTransactionReply&& from) noexcept
    : VeriBlockTransactionReply() {
    *this = ::std::move(from);
  }

  inline VeriBlockTransactionReply& operator=(const VeriBlockTransactionReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline VeriBlockTransactionReply& operator=(VeriBlockTransactionReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const VeriBlockTransactionReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VeriBlockTransactionReply* internal_default_instance() {
    return reinterpret_cast<const VeriBlockTransactionReply*>(
               &_VeriBlockTransactionReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    48;

  friend void swap(VeriBlockTransactionReply& a, VeriBlockTransactionReply& b) {
    a.Swap(&b);
  }
  inline void Swap(VeriBlockTransactionReply* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VeriBlockTransactionReply* New() const final {
    return CreateMaybeMessage<VeriBlockTransactionReply>(nullptr);
  }

  VeriBlockTransactionReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VeriBlockTransactionReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VeriBlockTransactionReply& from);
  void MergeFrom(const VeriBlockTransactionReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VeriBlockTransactionReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "VeriBlock.VeriBlockTransactionReply";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_integration_2eproto);
    return ::descriptor_table_integration_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
    kTransactionFieldNumber = 2,
  };
  // .VeriBlock.GeneralReply result = 1;
  bool has_result() const;
  void clear_result();
  const ::VeriBlock::GeneralReply& result() const;
  ::VeriBlock::GeneralReply* release_result();
  ::VeriBlock::GeneralReply* mutable_result();
  void set_allocated_result(::VeriBlock::GeneralReply* result);

  // .VeriBlock.VeriBlockTransaction transaction = 2;
  bool has_transaction() const;
  void clear_transaction();
  const ::VeriBlock::VeriBlockTransaction& transaction() const;
  ::VeriBlock::VeriBlockTransaction* release_transaction();
  ::VeriBlock::VeriBlockTransaction* mutable_transaction();
  void set_allocated_transaction(::VeriBlock::VeriBlockTransaction* transaction);

  // @@protoc_insertion_point(class_scope:VeriBlock.VeriBlockTransactionReply)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::VeriBlock::GeneralReply* result_;
  ::VeriBlock::VeriBlockTransaction* transaction_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_integration_2eproto;
};
// -------------------------------------------------------------------

class VeriBlockPublicationReply :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:VeriBlock.VeriBlockPublicationReply) */ {
 public:
  VeriBlockPublicationReply();
  virtual ~VeriBlockPublicationReply();

  VeriBlockPublicationReply(const VeriBlockPublicationReply& from);
  VeriBlockPublicationReply(VeriBlockPublicationReply&& from) noexcept
    : VeriBlockPublicationReply() {
    *this = ::std::move(from);
  }

  inline VeriBlockPublicationReply& operator=(const VeriBlockPublicationReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline VeriBlockPublicationReply& operator=(VeriBlockPublicationReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const VeriBlockPublicationReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VeriBlockPublicationReply* internal_default_instance() {
    return reinterpret_cast<const VeriBlockPublicationReply*>(
               &_VeriBlockPublicationReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    49;

  friend void swap(VeriBlockPublicationReply& a, VeriBlockPublicationReply& b) {
    a.Swap(&b);
  }
  inline void Swap(VeriBlockPublicationReply* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VeriBlockPublicationReply* New() const final {
    return CreateMaybeMessage<VeriBlockPublicationReply>(nullptr);
  }

  VeriBlockPublicationReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VeriBlockPublicationReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VeriBlockPublicationReply& from);
  void MergeFrom(const VeriBlockPublicationReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VeriBlockPublicationReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "VeriBlock.VeriBlockPublicationReply";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_integration_2eproto);
    return ::descriptor_table_integration_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
    kPublicationFieldNumber = 2,
  };
  // .VeriBlock.GeneralReply result = 1;
  bool has_result() const;
  void clear_result();
  const ::VeriBlock::GeneralReply& result() const;
  ::VeriBlock::GeneralReply* release_result();
  ::VeriBlock::GeneralReply* mutable_result();
  void set_allocated_result(::VeriBlock::GeneralReply* result);

  // .VeriBlock.VeriBlockPublication publication = 2;
  bool has_publication() const;
  void clear_publication();
  const ::VeriBlock::VeriBlockPublication& publication() const;
  ::VeriBlock::VeriBlockPublication* release_publication();
  ::VeriBlock::VeriBlockPublication* mutable_publication();
  void set_allocated_publication(::VeriBlock::VeriBlockPublication* publication);

  // @@protoc_insertion_point(class_scope:VeriBlock.VeriBlockPublicationReply)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::VeriBlock::GeneralReply* result_;
  ::VeriBlock::VeriBlockPublication* publication_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_integration_2eproto;
};
// -------------------------------------------------------------------

class VeriBlockPoPTransactionReply :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:VeriBlock.VeriBlockPoPTransactionReply) */ {
 public:
  VeriBlockPoPTransactionReply();
  virtual ~VeriBlockPoPTransactionReply();

  VeriBlockPoPTransactionReply(const VeriBlockPoPTransactionReply& from);
  VeriBlockPoPTransactionReply(VeriBlockPoPTransactionReply&& from) noexcept
    : VeriBlockPoPTransactionReply() {
    *this = ::std::move(from);
  }

  inline VeriBlockPoPTransactionReply& operator=(const VeriBlockPoPTransactionReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline VeriBlockPoPTransactionReply& operator=(VeriBlockPoPTransactionReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const VeriBlockPoPTransactionReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VeriBlockPoPTransactionReply* internal_default_instance() {
    return reinterpret_cast<const VeriBlockPoPTransactionReply*>(
               &_VeriBlockPoPTransactionReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    50;

  friend void swap(VeriBlockPoPTransactionReply& a, VeriBlockPoPTransactionReply& b) {
    a.Swap(&b);
  }
  inline void Swap(VeriBlockPoPTransactionReply* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VeriBlockPoPTransactionReply* New() const final {
    return CreateMaybeMessage<VeriBlockPoPTransactionReply>(nullptr);
  }

  VeriBlockPoPTransactionReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VeriBlockPoPTransactionReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VeriBlockPoPTransactionReply& from);
  void MergeFrom(const VeriBlockPoPTransactionReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VeriBlockPoPTransactionReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "VeriBlock.VeriBlockPoPTransactionReply";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_integration_2eproto);
    return ::descriptor_table_integration_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
    kTransactionFieldNumber = 2,
  };
  // .VeriBlock.GeneralReply result = 1;
  bool has_result() const;
  void clear_result();
  const ::VeriBlock::GeneralReply& result() const;
  ::VeriBlock::GeneralReply* release_result();
  ::VeriBlock::GeneralReply* mutable_result();
  void set_allocated_result(::VeriBlock::GeneralReply* result);

  // .VeriBlock.VeriBlockPoPTransaction transaction = 2;
  bool has_transaction() const;
  void clear_transaction();
  const ::VeriBlock::VeriBlockPoPTransaction& transaction() const;
  ::VeriBlock::VeriBlockPoPTransaction* release_transaction();
  ::VeriBlock::VeriBlockPoPTransaction* mutable_transaction();
  void set_allocated_transaction(::VeriBlock::VeriBlockPoPTransaction* transaction);

  // @@protoc_insertion_point(class_scope:VeriBlock.VeriBlockPoPTransactionReply)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::VeriBlock::GeneralReply* result_;
  ::VeriBlock::VeriBlockPoPTransaction* transaction_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_integration_2eproto;
};
// -------------------------------------------------------------------

class OutputReply :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:VeriBlock.OutputReply) */ {
 public:
  OutputReply();
  virtual ~OutputReply();

  OutputReply(const OutputReply& from);
  OutputReply(OutputReply&& from) noexcept
    : OutputReply() {
    *this = ::std::move(from);
  }

  inline OutputReply& operator=(const OutputReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline OutputReply& operator=(OutputReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OutputReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OutputReply* internal_default_instance() {
    return reinterpret_cast<const OutputReply*>(
               &_OutputReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    51;

  friend void swap(OutputReply& a, OutputReply& b) {
    a.Swap(&b);
  }
  inline void Swap(OutputReply* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OutputReply* New() const final {
    return CreateMaybeMessage<OutputReply>(nullptr);
  }

  OutputReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OutputReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OutputReply& from);
  void MergeFrom(const OutputReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OutputReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "VeriBlock.OutputReply";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_integration_2eproto);
    return ::descriptor_table_integration_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
    kOutputFieldNumber = 2,
  };
  // .VeriBlock.GeneralReply result = 1;
  bool has_result() const;
  void clear_result();
  const ::VeriBlock::GeneralReply& result() const;
  ::VeriBlock::GeneralReply* release_result();
  ::VeriBlock::GeneralReply* mutable_result();
  void set_allocated_result(::VeriBlock::GeneralReply* result);

  // .VeriBlock.Output output = 2;
  bool has_output() const;
  void clear_output();
  const ::VeriBlock::Output& output() const;
  ::VeriBlock::Output* release_output();
  ::VeriBlock::Output* mutable_output();
  void set_allocated_output(::VeriBlock::Output* output);

  // @@protoc_insertion_point(class_scope:VeriBlock.OutputReply)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::VeriBlock::GeneralReply* result_;
  ::VeriBlock::Output* output_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_integration_2eproto;
};
// -------------------------------------------------------------------

class AddressReply :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:VeriBlock.AddressReply) */ {
 public:
  AddressReply();
  virtual ~AddressReply();

  AddressReply(const AddressReply& from);
  AddressReply(AddressReply&& from) noexcept
    : AddressReply() {
    *this = ::std::move(from);
  }

  inline AddressReply& operator=(const AddressReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddressReply& operator=(AddressReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AddressReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AddressReply* internal_default_instance() {
    return reinterpret_cast<const AddressReply*>(
               &_AddressReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    52;

  friend void swap(AddressReply& a, AddressReply& b) {
    a.Swap(&b);
  }
  inline void Swap(AddressReply* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AddressReply* New() const final {
    return CreateMaybeMessage<AddressReply>(nullptr);
  }

  AddressReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AddressReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AddressReply& from);
  void MergeFrom(const AddressReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddressReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "VeriBlock.AddressReply";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_integration_2eproto);
    return ::descriptor_table_integration_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
    kAddressFieldNumber = 2,
  };
  // .VeriBlock.GeneralReply result = 1;
  bool has_result() const;
  void clear_result();
  const ::VeriBlock::GeneralReply& result() const;
  ::VeriBlock::GeneralReply* release_result();
  ::VeriBlock::GeneralReply* mutable_result();
  void set_allocated_result(::VeriBlock::GeneralReply* result);

  // .VeriBlock.Address address = 2;
  bool has_address() const;
  void clear_address();
  const ::VeriBlock::Address& address() const;
  ::VeriBlock::Address* release_address();
  ::VeriBlock::Address* mutable_address();
  void set_allocated_address(::VeriBlock::Address* address);

  // @@protoc_insertion_point(class_scope:VeriBlock.AddressReply)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::VeriBlock::GeneralReply* result_;
  ::VeriBlock::Address* address_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_integration_2eproto;
};
// -------------------------------------------------------------------

class BitcoinBlockReply :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:VeriBlock.BitcoinBlockReply) */ {
 public:
  BitcoinBlockReply();
  virtual ~BitcoinBlockReply();

  BitcoinBlockReply(const BitcoinBlockReply& from);
  BitcoinBlockReply(BitcoinBlockReply&& from) noexcept
    : BitcoinBlockReply() {
    *this = ::std::move(from);
  }

  inline BitcoinBlockReply& operator=(const BitcoinBlockReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline BitcoinBlockReply& operator=(BitcoinBlockReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BitcoinBlockReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BitcoinBlockReply* internal_default_instance() {
    return reinterpret_cast<const BitcoinBlockReply*>(
               &_BitcoinBlockReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    53;

  friend void swap(BitcoinBlockReply& a, BitcoinBlockReply& b) {
    a.Swap(&b);
  }
  inline void Swap(BitcoinBlockReply* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BitcoinBlockReply* New() const final {
    return CreateMaybeMessage<BitcoinBlockReply>(nullptr);
  }

  BitcoinBlockReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BitcoinBlockReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BitcoinBlockReply& from);
  void MergeFrom(const BitcoinBlockReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BitcoinBlockReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "VeriBlock.BitcoinBlockReply";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_integration_2eproto);
    return ::descriptor_table_integration_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
    kBlockFieldNumber = 2,
  };
  // .VeriBlock.GeneralReply result = 1;
  bool has_result() const;
  void clear_result();
  const ::VeriBlock::GeneralReply& result() const;
  ::VeriBlock::GeneralReply* release_result();
  ::VeriBlock::GeneralReply* mutable_result();
  void set_allocated_result(::VeriBlock::GeneralReply* result);

  // .VeriBlock.BitcoinBlock block = 2;
  bool has_block() const;
  void clear_block();
  const ::VeriBlock::BitcoinBlock& block() const;
  ::VeriBlock::BitcoinBlock* release_block();
  ::VeriBlock::BitcoinBlock* mutable_block();
  void set_allocated_block(::VeriBlock::BitcoinBlock* block);

  // @@protoc_insertion_point(class_scope:VeriBlock.BitcoinBlockReply)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::VeriBlock::GeneralReply* result_;
  ::VeriBlock::BitcoinBlock* block_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_integration_2eproto;
};
// -------------------------------------------------------------------

class VeriBlockMerklePathReply :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:VeriBlock.VeriBlockMerklePathReply) */ {
 public:
  VeriBlockMerklePathReply();
  virtual ~VeriBlockMerklePathReply();

  VeriBlockMerklePathReply(const VeriBlockMerklePathReply& from);
  VeriBlockMerklePathReply(VeriBlockMerklePathReply&& from) noexcept
    : VeriBlockMerklePathReply() {
    *this = ::std::move(from);
  }

  inline VeriBlockMerklePathReply& operator=(const VeriBlockMerklePathReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline VeriBlockMerklePathReply& operator=(VeriBlockMerklePathReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const VeriBlockMerklePathReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VeriBlockMerklePathReply* internal_default_instance() {
    return reinterpret_cast<const VeriBlockMerklePathReply*>(
               &_VeriBlockMerklePathReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    54;

  friend void swap(VeriBlockMerklePathReply& a, VeriBlockMerklePathReply& b) {
    a.Swap(&b);
  }
  inline void Swap(VeriBlockMerklePathReply* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VeriBlockMerklePathReply* New() const final {
    return CreateMaybeMessage<VeriBlockMerklePathReply>(nullptr);
  }

  VeriBlockMerklePathReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VeriBlockMerklePathReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VeriBlockMerklePathReply& from);
  void MergeFrom(const VeriBlockMerklePathReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VeriBlockMerklePathReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "VeriBlock.VeriBlockMerklePathReply";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_integration_2eproto);
    return ::descriptor_table_integration_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
    kMerklePathFieldNumber = 2,
  };
  // .VeriBlock.GeneralReply result = 1;
  bool has_result() const;
  void clear_result();
  const ::VeriBlock::GeneralReply& result() const;
  ::VeriBlock::GeneralReply* release_result();
  ::VeriBlock::GeneralReply* mutable_result();
  void set_allocated_result(::VeriBlock::GeneralReply* result);

  // .VeriBlock.VeriBlockMerklePath merklePath = 2;
  bool has_merklepath() const;
  void clear_merklepath();
  const ::VeriBlock::VeriBlockMerklePath& merklepath() const;
  ::VeriBlock::VeriBlockMerklePath* release_merklepath();
  ::VeriBlock::VeriBlockMerklePath* mutable_merklepath();
  void set_allocated_merklepath(::VeriBlock::VeriBlockMerklePath* merklepath);

  // @@protoc_insertion_point(class_scope:VeriBlock.VeriBlockMerklePathReply)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::VeriBlock::GeneralReply* result_;
  ::VeriBlock::VeriBlockMerklePath* merklepath_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_integration_2eproto;
};
// -------------------------------------------------------------------

class MerklePathReply :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:VeriBlock.MerklePathReply) */ {
 public:
  MerklePathReply();
  virtual ~MerklePathReply();

  MerklePathReply(const MerklePathReply& from);
  MerklePathReply(MerklePathReply&& from) noexcept
    : MerklePathReply() {
    *this = ::std::move(from);
  }

  inline MerklePathReply& operator=(const MerklePathReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline MerklePathReply& operator=(MerklePathReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MerklePathReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MerklePathReply* internal_default_instance() {
    return reinterpret_cast<const MerklePathReply*>(
               &_MerklePathReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    55;

  friend void swap(MerklePathReply& a, MerklePathReply& b) {
    a.Swap(&b);
  }
  inline void Swap(MerklePathReply* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MerklePathReply* New() const final {
    return CreateMaybeMessage<MerklePathReply>(nullptr);
  }

  MerklePathReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MerklePathReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MerklePathReply& from);
  void MergeFrom(const MerklePathReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MerklePathReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "VeriBlock.MerklePathReply";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_integration_2eproto);
    return ::descriptor_table_integration_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
    kMerklePathFieldNumber = 2,
  };
  // .VeriBlock.GeneralReply result = 1;
  bool has_result() const;
  void clear_result();
  const ::VeriBlock::GeneralReply& result() const;
  ::VeriBlock::GeneralReply* release_result();
  ::VeriBlock::GeneralReply* mutable_result();
  void set_allocated_result(::VeriBlock::GeneralReply* result);

  // .VeriBlock.MerklePath merklePath = 2;
  bool has_merklepath() const;
  void clear_merklepath();
  const ::VeriBlock::MerklePath& merklepath() const;
  ::VeriBlock::MerklePath* release_merklepath();
  ::VeriBlock::MerklePath* mutable_merklepath();
  void set_allocated_merklepath(::VeriBlock::MerklePath* merklepath);

  // @@protoc_insertion_point(class_scope:VeriBlock.MerklePathReply)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::VeriBlock::GeneralReply* result_;
  ::VeriBlock::MerklePath* merklepath_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_integration_2eproto;
};
// -------------------------------------------------------------------

class AltChainBlock :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:VeriBlock.AltChainBlock) */ {
 public:
  AltChainBlock();
  virtual ~AltChainBlock();

  AltChainBlock(const AltChainBlock& from);
  AltChainBlock(AltChainBlock&& from) noexcept
    : AltChainBlock() {
    *this = ::std::move(from);
  }

  inline AltChainBlock& operator=(const AltChainBlock& from) {
    CopyFrom(from);
    return *this;
  }
  inline AltChainBlock& operator=(AltChainBlock&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AltChainBlock& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AltChainBlock* internal_default_instance() {
    return reinterpret_cast<const AltChainBlock*>(
               &_AltChainBlock_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    56;

  friend void swap(AltChainBlock& a, AltChainBlock& b) {
    a.Swap(&b);
  }
  inline void Swap(AltChainBlock* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AltChainBlock* New() const final {
    return CreateMaybeMessage<AltChainBlock>(nullptr);
  }

  AltChainBlock* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AltChainBlock>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AltChainBlock& from);
  void MergeFrom(const AltChainBlock& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AltChainBlock* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "VeriBlock.AltChainBlock";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_integration_2eproto);
    return ::descriptor_table_integration_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBlockIndexFieldNumber = 1,
    kTimestampFieldNumber = 2,
  };
  // .VeriBlock.BlockIndex blockIndex = 1;
  bool has_blockindex() const;
  void clear_blockindex();
  const ::VeriBlock::BlockIndex& blockindex() const;
  ::VeriBlock::BlockIndex* release_blockindex();
  ::VeriBlock::BlockIndex* mutable_blockindex();
  void set_allocated_blockindex(::VeriBlock::BlockIndex* blockindex);

  // int32 timestamp = 2;
  void clear_timestamp();
  ::PROTOBUF_NAMESPACE_ID::int32 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:VeriBlock.AltChainBlock)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::VeriBlock::BlockIndex* blockindex_;
  ::PROTOBUF_NAMESPACE_ID::int32 timestamp_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_integration_2eproto;
};
// -------------------------------------------------------------------

class TwoBranchesRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:VeriBlock.TwoBranchesRequest) */ {
 public:
  TwoBranchesRequest();
  virtual ~TwoBranchesRequest();

  TwoBranchesRequest(const TwoBranchesRequest& from);
  TwoBranchesRequest(TwoBranchesRequest&& from) noexcept
    : TwoBranchesRequest() {
    *this = ::std::move(from);
  }

  inline TwoBranchesRequest& operator=(const TwoBranchesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline TwoBranchesRequest& operator=(TwoBranchesRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TwoBranchesRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TwoBranchesRequest* internal_default_instance() {
    return reinterpret_cast<const TwoBranchesRequest*>(
               &_TwoBranchesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    57;

  friend void swap(TwoBranchesRequest& a, TwoBranchesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(TwoBranchesRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TwoBranchesRequest* New() const final {
    return CreateMaybeMessage<TwoBranchesRequest>(nullptr);
  }

  TwoBranchesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TwoBranchesRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TwoBranchesRequest& from);
  void MergeFrom(const TwoBranchesRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TwoBranchesRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "VeriBlock.TwoBranchesRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_integration_2eproto);
    return ::descriptor_table_integration_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLeftForkFieldNumber = 1,
    kRightForkFieldNumber = 2,
  };
  // repeated .VeriBlock.AltChainBlock leftFork = 1;
  int leftfork_size() const;
  void clear_leftfork();
  ::VeriBlock::AltChainBlock* mutable_leftfork(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::VeriBlock::AltChainBlock >*
      mutable_leftfork();
  const ::VeriBlock::AltChainBlock& leftfork(int index) const;
  ::VeriBlock::AltChainBlock* add_leftfork();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::VeriBlock::AltChainBlock >&
      leftfork() const;

  // repeated .VeriBlock.AltChainBlock rightFork = 2;
  int rightfork_size() const;
  void clear_rightfork();
  ::VeriBlock::AltChainBlock* mutable_rightfork(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::VeriBlock::AltChainBlock >*
      mutable_rightfork();
  const ::VeriBlock::AltChainBlock& rightfork(int index) const;
  ::VeriBlock::AltChainBlock* add_rightfork();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::VeriBlock::AltChainBlock >&
      rightfork() const;

  // @@protoc_insertion_point(class_scope:VeriBlock.TwoBranchesRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::VeriBlock::AltChainBlock > leftfork_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::VeriBlock::AltChainBlock > rightfork_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_integration_2eproto;
};
// -------------------------------------------------------------------

class CompareReply :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:VeriBlock.CompareReply) */ {
 public:
  CompareReply();
  virtual ~CompareReply();

  CompareReply(const CompareReply& from);
  CompareReply(CompareReply&& from) noexcept
    : CompareReply() {
    *this = ::std::move(from);
  }

  inline CompareReply& operator=(const CompareReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline CompareReply& operator=(CompareReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CompareReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CompareReply* internal_default_instance() {
    return reinterpret_cast<const CompareReply*>(
               &_CompareReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    58;

  friend void swap(CompareReply& a, CompareReply& b) {
    a.Swap(&b);
  }
  inline void Swap(CompareReply* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CompareReply* New() const final {
    return CreateMaybeMessage<CompareReply>(nullptr);
  }

  CompareReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CompareReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CompareReply& from);
  void MergeFrom(const CompareReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CompareReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "VeriBlock.CompareReply";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_integration_2eproto);
    return ::descriptor_table_integration_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
    kComparingsResultFieldNumber = 2,
  };
  // .VeriBlock.GeneralReply result = 1;
  bool has_result() const;
  void clear_result();
  const ::VeriBlock::GeneralReply& result() const;
  ::VeriBlock::GeneralReply* release_result();
  ::VeriBlock::GeneralReply* mutable_result();
  void set_allocated_result(::VeriBlock::GeneralReply* result);

  // int32 comparingsResult = 2;
  void clear_comparingsresult();
  ::PROTOBUF_NAMESPACE_ID::int32 comparingsresult() const;
  void set_comparingsresult(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:VeriBlock.CompareReply)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::VeriBlock::GeneralReply* result_;
  ::PROTOBUF_NAMESPACE_ID::int32 comparingsresult_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_integration_2eproto;
};
// -------------------------------------------------------------------

class ForkresolutionConfigRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:VeriBlock.ForkresolutionConfigRequest) */ {
 public:
  ForkresolutionConfigRequest();
  virtual ~ForkresolutionConfigRequest();

  ForkresolutionConfigRequest(const ForkresolutionConfigRequest& from);
  ForkresolutionConfigRequest(ForkresolutionConfigRequest&& from) noexcept
    : ForkresolutionConfigRequest() {
    *this = ::std::move(from);
  }

  inline ForkresolutionConfigRequest& operator=(const ForkresolutionConfigRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ForkresolutionConfigRequest& operator=(ForkresolutionConfigRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ForkresolutionConfigRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ForkresolutionConfigRequest* internal_default_instance() {
    return reinterpret_cast<const ForkresolutionConfigRequest*>(
               &_ForkresolutionConfigRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    59;

  friend void swap(ForkresolutionConfigRequest& a, ForkresolutionConfigRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ForkresolutionConfigRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ForkresolutionConfigRequest* New() const final {
    return CreateMaybeMessage<ForkresolutionConfigRequest>(nullptr);
  }

  ForkresolutionConfigRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ForkresolutionConfigRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ForkresolutionConfigRequest& from);
  void MergeFrom(const ForkresolutionConfigRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ForkresolutionConfigRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "VeriBlock.ForkresolutionConfigRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_integration_2eproto);
    return ::descriptor_table_integration_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeystoneFinalityDelayFieldNumber = 1,
    kAmnestyPeriodFieldNumber = 2,
  };
  // int32 keystoneFinalityDelay = 1;
  void clear_keystonefinalitydelay();
  ::PROTOBUF_NAMESPACE_ID::int32 keystonefinalitydelay() const;
  void set_keystonefinalitydelay(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 amnestyPeriod = 2;
  void clear_amnestyperiod();
  ::PROTOBUF_NAMESPACE_ID::int32 amnestyperiod() const;
  void set_amnestyperiod(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:VeriBlock.ForkresolutionConfigRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 keystonefinalitydelay_;
  ::PROTOBUF_NAMESPACE_ID::int32 amnestyperiod_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_integration_2eproto;
};
// ===================================================================

static const int kHexEncodedFieldNumber = 50000;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::google::protobuf::FieldOptions,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< bool >, 8, false >
  hex_encoded;
static const int kAddressEncodedFieldNumber = 50001;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::google::protobuf::FieldOptions,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< bool >, 8, false >
  address_encoded;
static const int kAsciiEncodedFieldNumber = 50002;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::google::protobuf::FieldOptions,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< bool >, 8, false >
  ascii_encoded;
static const int kUtf8EncodedFieldNumber = 50003;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::google::protobuf::FieldOptions,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< bool >, 8, false >
  utf8_encoded;

// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PublicationData

// int64 identifier = 1;
inline void PublicationData::clear_identifier() {
  identifier_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PublicationData::identifier() const {
  // @@protoc_insertion_point(field_get:VeriBlock.PublicationData.identifier)
  return identifier_;
}
inline void PublicationData::set_identifier(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  identifier_ = value;
  // @@protoc_insertion_point(field_set:VeriBlock.PublicationData.identifier)
}

// bytes header = 2 [(.VeriBlock.hex_encoded) = true];
inline void PublicationData::clear_header() {
  header_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PublicationData::header() const {
  // @@protoc_insertion_point(field_get:VeriBlock.PublicationData.header)
  return header_.GetNoArena();
}
inline void PublicationData::set_header(const std::string& value) {
  
  header_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:VeriBlock.PublicationData.header)
}
inline void PublicationData::set_header(std::string&& value) {
  
  header_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:VeriBlock.PublicationData.header)
}
inline void PublicationData::set_header(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  header_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:VeriBlock.PublicationData.header)
}
inline void PublicationData::set_header(const void* value, size_t size) {
  
  header_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:VeriBlock.PublicationData.header)
}
inline std::string* PublicationData::mutable_header() {
  
  // @@protoc_insertion_point(field_mutable:VeriBlock.PublicationData.header)
  return header_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PublicationData::release_header() {
  // @@protoc_insertion_point(field_release:VeriBlock.PublicationData.header)
  
  return header_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PublicationData::set_allocated_header(std::string* header) {
  if (header != nullptr) {
    
  } else {
    
  }
  header_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), header);
  // @@protoc_insertion_point(field_set_allocated:VeriBlock.PublicationData.header)
}

// bytes payoutInfo = 3 [(.VeriBlock.hex_encoded) = true];
inline void PublicationData::clear_payoutinfo() {
  payoutinfo_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PublicationData::payoutinfo() const {
  // @@protoc_insertion_point(field_get:VeriBlock.PublicationData.payoutInfo)
  return payoutinfo_.GetNoArena();
}
inline void PublicationData::set_payoutinfo(const std::string& value) {
  
  payoutinfo_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:VeriBlock.PublicationData.payoutInfo)
}
inline void PublicationData::set_payoutinfo(std::string&& value) {
  
  payoutinfo_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:VeriBlock.PublicationData.payoutInfo)
}
inline void PublicationData::set_payoutinfo(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  payoutinfo_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:VeriBlock.PublicationData.payoutInfo)
}
inline void PublicationData::set_payoutinfo(const void* value, size_t size) {
  
  payoutinfo_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:VeriBlock.PublicationData.payoutInfo)
}
inline std::string* PublicationData::mutable_payoutinfo() {
  
  // @@protoc_insertion_point(field_mutable:VeriBlock.PublicationData.payoutInfo)
  return payoutinfo_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PublicationData::release_payoutinfo() {
  // @@protoc_insertion_point(field_release:VeriBlock.PublicationData.payoutInfo)
  
  return payoutinfo_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PublicationData::set_allocated_payoutinfo(std::string* payoutinfo) {
  if (payoutinfo != nullptr) {
    
  } else {
    
  }
  payoutinfo_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), payoutinfo);
  // @@protoc_insertion_point(field_set_allocated:VeriBlock.PublicationData.payoutInfo)
}

// bytes veriblockContext = 4 [(.VeriBlock.hex_encoded) = true];
inline void PublicationData::clear_veriblockcontext() {
  veriblockcontext_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PublicationData::veriblockcontext() const {
  // @@protoc_insertion_point(field_get:VeriBlock.PublicationData.veriblockContext)
  return veriblockcontext_.GetNoArena();
}
inline void PublicationData::set_veriblockcontext(const std::string& value) {
  
  veriblockcontext_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:VeriBlock.PublicationData.veriblockContext)
}
inline void PublicationData::set_veriblockcontext(std::string&& value) {
  
  veriblockcontext_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:VeriBlock.PublicationData.veriblockContext)
}
inline void PublicationData::set_veriblockcontext(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  veriblockcontext_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:VeriBlock.PublicationData.veriblockContext)
}
inline void PublicationData::set_veriblockcontext(const void* value, size_t size) {
  
  veriblockcontext_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:VeriBlock.PublicationData.veriblockContext)
}
inline std::string* PublicationData::mutable_veriblockcontext() {
  
  // @@protoc_insertion_point(field_mutable:VeriBlock.PublicationData.veriblockContext)
  return veriblockcontext_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PublicationData::release_veriblockcontext() {
  // @@protoc_insertion_point(field_release:VeriBlock.PublicationData.veriblockContext)
  
  return veriblockcontext_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PublicationData::set_allocated_veriblockcontext(std::string* veriblockcontext) {
  if (veriblockcontext != nullptr) {
    
  } else {
    
  }
  veriblockcontext_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), veriblockcontext);
  // @@protoc_insertion_point(field_set_allocated:VeriBlock.PublicationData.veriblockContext)
}

// -------------------------------------------------------------------

// BitcoinBlock

// int32 version = 1;
inline void BitcoinBlock::clear_version() {
  version_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BitcoinBlock::version() const {
  // @@protoc_insertion_point(field_get:VeriBlock.BitcoinBlock.version)
  return version_;
}
inline void BitcoinBlock::set_version(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  version_ = value;
  // @@protoc_insertion_point(field_set:VeriBlock.BitcoinBlock.version)
}

// bytes previousBlock = 2 [(.VeriBlock.hex_encoded) = true];
inline void BitcoinBlock::clear_previousblock() {
  previousblock_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& BitcoinBlock::previousblock() const {
  // @@protoc_insertion_point(field_get:VeriBlock.BitcoinBlock.previousBlock)
  return previousblock_.GetNoArena();
}
inline void BitcoinBlock::set_previousblock(const std::string& value) {
  
  previousblock_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:VeriBlock.BitcoinBlock.previousBlock)
}
inline void BitcoinBlock::set_previousblock(std::string&& value) {
  
  previousblock_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:VeriBlock.BitcoinBlock.previousBlock)
}
inline void BitcoinBlock::set_previousblock(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  previousblock_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:VeriBlock.BitcoinBlock.previousBlock)
}
inline void BitcoinBlock::set_previousblock(const void* value, size_t size) {
  
  previousblock_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:VeriBlock.BitcoinBlock.previousBlock)
}
inline std::string* BitcoinBlock::mutable_previousblock() {
  
  // @@protoc_insertion_point(field_mutable:VeriBlock.BitcoinBlock.previousBlock)
  return previousblock_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* BitcoinBlock::release_previousblock() {
  // @@protoc_insertion_point(field_release:VeriBlock.BitcoinBlock.previousBlock)
  
  return previousblock_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void BitcoinBlock::set_allocated_previousblock(std::string* previousblock) {
  if (previousblock != nullptr) {
    
  } else {
    
  }
  previousblock_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), previousblock);
  // @@protoc_insertion_point(field_set_allocated:VeriBlock.BitcoinBlock.previousBlock)
}

// bytes merkleRoot = 3 [(.VeriBlock.hex_encoded) = true];
inline void BitcoinBlock::clear_merkleroot() {
  merkleroot_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& BitcoinBlock::merkleroot() const {
  // @@protoc_insertion_point(field_get:VeriBlock.BitcoinBlock.merkleRoot)
  return merkleroot_.GetNoArena();
}
inline void BitcoinBlock::set_merkleroot(const std::string& value) {
  
  merkleroot_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:VeriBlock.BitcoinBlock.merkleRoot)
}
inline void BitcoinBlock::set_merkleroot(std::string&& value) {
  
  merkleroot_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:VeriBlock.BitcoinBlock.merkleRoot)
}
inline void BitcoinBlock::set_merkleroot(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  merkleroot_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:VeriBlock.BitcoinBlock.merkleRoot)
}
inline void BitcoinBlock::set_merkleroot(const void* value, size_t size) {
  
  merkleroot_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:VeriBlock.BitcoinBlock.merkleRoot)
}
inline std::string* BitcoinBlock::mutable_merkleroot() {
  
  // @@protoc_insertion_point(field_mutable:VeriBlock.BitcoinBlock.merkleRoot)
  return merkleroot_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* BitcoinBlock::release_merkleroot() {
  // @@protoc_insertion_point(field_release:VeriBlock.BitcoinBlock.merkleRoot)
  
  return merkleroot_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void BitcoinBlock::set_allocated_merkleroot(std::string* merkleroot) {
  if (merkleroot != nullptr) {
    
  } else {
    
  }
  merkleroot_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), merkleroot);
  // @@protoc_insertion_point(field_set_allocated:VeriBlock.BitcoinBlock.merkleRoot)
}

// int32 timestamp = 4;
inline void BitcoinBlock::clear_timestamp() {
  timestamp_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BitcoinBlock::timestamp() const {
  // @@protoc_insertion_point(field_get:VeriBlock.BitcoinBlock.timestamp)
  return timestamp_;
}
inline void BitcoinBlock::set_timestamp(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:VeriBlock.BitcoinBlock.timestamp)
}

// int32 bits = 5;
inline void BitcoinBlock::clear_bits() {
  bits_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BitcoinBlock::bits() const {
  // @@protoc_insertion_point(field_get:VeriBlock.BitcoinBlock.bits)
  return bits_;
}
inline void BitcoinBlock::set_bits(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  bits_ = value;
  // @@protoc_insertion_point(field_set:VeriBlock.BitcoinBlock.bits)
}

// int32 nonce = 6;
inline void BitcoinBlock::clear_nonce() {
  nonce_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BitcoinBlock::nonce() const {
  // @@protoc_insertion_point(field_get:VeriBlock.BitcoinBlock.nonce)
  return nonce_;
}
inline void BitcoinBlock::set_nonce(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  nonce_ = value;
  // @@protoc_insertion_point(field_set:VeriBlock.BitcoinBlock.nonce)
}

// -------------------------------------------------------------------

// BitcoinTransaction

// bytes raw = 1;
inline void BitcoinTransaction::clear_raw() {
  raw_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& BitcoinTransaction::raw() const {
  // @@protoc_insertion_point(field_get:VeriBlock.BitcoinTransaction.raw)
  return raw_.GetNoArena();
}
inline void BitcoinTransaction::set_raw(const std::string& value) {
  
  raw_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:VeriBlock.BitcoinTransaction.raw)
}
inline void BitcoinTransaction::set_raw(std::string&& value) {
  
  raw_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:VeriBlock.BitcoinTransaction.raw)
}
inline void BitcoinTransaction::set_raw(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  raw_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:VeriBlock.BitcoinTransaction.raw)
}
inline void BitcoinTransaction::set_raw(const void* value, size_t size) {
  
  raw_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:VeriBlock.BitcoinTransaction.raw)
}
inline std::string* BitcoinTransaction::mutable_raw() {
  
  // @@protoc_insertion_point(field_mutable:VeriBlock.BitcoinTransaction.raw)
  return raw_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* BitcoinTransaction::release_raw() {
  // @@protoc_insertion_point(field_release:VeriBlock.BitcoinTransaction.raw)
  
  return raw_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void BitcoinTransaction::set_allocated_raw(std::string* raw) {
  if (raw != nullptr) {
    
  } else {
    
  }
  raw_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), raw);
  // @@protoc_insertion_point(field_set_allocated:VeriBlock.BitcoinTransaction.raw)
}

// -------------------------------------------------------------------

// VeriBlockBlock

// int32 height = 1;
inline void VeriBlockBlock::clear_height() {
  height_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VeriBlockBlock::height() const {
  // @@protoc_insertion_point(field_get:VeriBlock.VeriBlockBlock.height)
  return height_;
}
inline void VeriBlockBlock::set_height(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  height_ = value;
  // @@protoc_insertion_point(field_set:VeriBlock.VeriBlockBlock.height)
}

// int32 version = 2;
inline void VeriBlockBlock::clear_version() {
  version_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VeriBlockBlock::version() const {
  // @@protoc_insertion_point(field_get:VeriBlock.VeriBlockBlock.version)
  return version_;
}
inline void VeriBlockBlock::set_version(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  version_ = value;
  // @@protoc_insertion_point(field_set:VeriBlock.VeriBlockBlock.version)
}

// bytes previousBlock = 3 [(.VeriBlock.hex_encoded) = true];
inline void VeriBlockBlock::clear_previousblock() {
  previousblock_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& VeriBlockBlock::previousblock() const {
  // @@protoc_insertion_point(field_get:VeriBlock.VeriBlockBlock.previousBlock)
  return previousblock_.GetNoArena();
}
inline void VeriBlockBlock::set_previousblock(const std::string& value) {
  
  previousblock_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:VeriBlock.VeriBlockBlock.previousBlock)
}
inline void VeriBlockBlock::set_previousblock(std::string&& value) {
  
  previousblock_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:VeriBlock.VeriBlockBlock.previousBlock)
}
inline void VeriBlockBlock::set_previousblock(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  previousblock_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:VeriBlock.VeriBlockBlock.previousBlock)
}
inline void VeriBlockBlock::set_previousblock(const void* value, size_t size) {
  
  previousblock_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:VeriBlock.VeriBlockBlock.previousBlock)
}
inline std::string* VeriBlockBlock::mutable_previousblock() {
  
  // @@protoc_insertion_point(field_mutable:VeriBlock.VeriBlockBlock.previousBlock)
  return previousblock_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* VeriBlockBlock::release_previousblock() {
  // @@protoc_insertion_point(field_release:VeriBlock.VeriBlockBlock.previousBlock)
  
  return previousblock_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void VeriBlockBlock::set_allocated_previousblock(std::string* previousblock) {
  if (previousblock != nullptr) {
    
  } else {
    
  }
  previousblock_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), previousblock);
  // @@protoc_insertion_point(field_set_allocated:VeriBlock.VeriBlockBlock.previousBlock)
}

// bytes previousKeystone = 4 [(.VeriBlock.hex_encoded) = true];
inline void VeriBlockBlock::clear_previouskeystone() {
  previouskeystone_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& VeriBlockBlock::previouskeystone() const {
  // @@protoc_insertion_point(field_get:VeriBlock.VeriBlockBlock.previousKeystone)
  return previouskeystone_.GetNoArena();
}
inline void VeriBlockBlock::set_previouskeystone(const std::string& value) {
  
  previouskeystone_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:VeriBlock.VeriBlockBlock.previousKeystone)
}
inline void VeriBlockBlock::set_previouskeystone(std::string&& value) {
  
  previouskeystone_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:VeriBlock.VeriBlockBlock.previousKeystone)
}
inline void VeriBlockBlock::set_previouskeystone(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  previouskeystone_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:VeriBlock.VeriBlockBlock.previousKeystone)
}
inline void VeriBlockBlock::set_previouskeystone(const void* value, size_t size) {
  
  previouskeystone_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:VeriBlock.VeriBlockBlock.previousKeystone)
}
inline std::string* VeriBlockBlock::mutable_previouskeystone() {
  
  // @@protoc_insertion_point(field_mutable:VeriBlock.VeriBlockBlock.previousKeystone)
  return previouskeystone_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* VeriBlockBlock::release_previouskeystone() {
  // @@protoc_insertion_point(field_release:VeriBlock.VeriBlockBlock.previousKeystone)
  
  return previouskeystone_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void VeriBlockBlock::set_allocated_previouskeystone(std::string* previouskeystone) {
  if (previouskeystone != nullptr) {
    
  } else {
    
  }
  previouskeystone_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), previouskeystone);
  // @@protoc_insertion_point(field_set_allocated:VeriBlock.VeriBlockBlock.previousKeystone)
}

// bytes secondPreviousKeystone = 5 [(.VeriBlock.hex_encoded) = true];
inline void VeriBlockBlock::clear_secondpreviouskeystone() {
  secondpreviouskeystone_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& VeriBlockBlock::secondpreviouskeystone() const {
  // @@protoc_insertion_point(field_get:VeriBlock.VeriBlockBlock.secondPreviousKeystone)
  return secondpreviouskeystone_.GetNoArena();
}
inline void VeriBlockBlock::set_secondpreviouskeystone(const std::string& value) {
  
  secondpreviouskeystone_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:VeriBlock.VeriBlockBlock.secondPreviousKeystone)
}
inline void VeriBlockBlock::set_secondpreviouskeystone(std::string&& value) {
  
  secondpreviouskeystone_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:VeriBlock.VeriBlockBlock.secondPreviousKeystone)
}
inline void VeriBlockBlock::set_secondpreviouskeystone(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  secondpreviouskeystone_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:VeriBlock.VeriBlockBlock.secondPreviousKeystone)
}
inline void VeriBlockBlock::set_secondpreviouskeystone(const void* value, size_t size) {
  
  secondpreviouskeystone_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:VeriBlock.VeriBlockBlock.secondPreviousKeystone)
}
inline std::string* VeriBlockBlock::mutable_secondpreviouskeystone() {
  
  // @@protoc_insertion_point(field_mutable:VeriBlock.VeriBlockBlock.secondPreviousKeystone)
  return secondpreviouskeystone_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* VeriBlockBlock::release_secondpreviouskeystone() {
  // @@protoc_insertion_point(field_release:VeriBlock.VeriBlockBlock.secondPreviousKeystone)
  
  return secondpreviouskeystone_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void VeriBlockBlock::set_allocated_secondpreviouskeystone(std::string* secondpreviouskeystone) {
  if (secondpreviouskeystone != nullptr) {
    
  } else {
    
  }
  secondpreviouskeystone_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), secondpreviouskeystone);
  // @@protoc_insertion_point(field_set_allocated:VeriBlock.VeriBlockBlock.secondPreviousKeystone)
}

// bytes merkleRoot = 6 [(.VeriBlock.hex_encoded) = true];
inline void VeriBlockBlock::clear_merkleroot() {
  merkleroot_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& VeriBlockBlock::merkleroot() const {
  // @@protoc_insertion_point(field_get:VeriBlock.VeriBlockBlock.merkleRoot)
  return merkleroot_.GetNoArena();
}
inline void VeriBlockBlock::set_merkleroot(const std::string& value) {
  
  merkleroot_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:VeriBlock.VeriBlockBlock.merkleRoot)
}
inline void VeriBlockBlock::set_merkleroot(std::string&& value) {
  
  merkleroot_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:VeriBlock.VeriBlockBlock.merkleRoot)
}
inline void VeriBlockBlock::set_merkleroot(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  merkleroot_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:VeriBlock.VeriBlockBlock.merkleRoot)
}
inline void VeriBlockBlock::set_merkleroot(const void* value, size_t size) {
  
  merkleroot_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:VeriBlock.VeriBlockBlock.merkleRoot)
}
inline std::string* VeriBlockBlock::mutable_merkleroot() {
  
  // @@protoc_insertion_point(field_mutable:VeriBlock.VeriBlockBlock.merkleRoot)
  return merkleroot_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* VeriBlockBlock::release_merkleroot() {
  // @@protoc_insertion_point(field_release:VeriBlock.VeriBlockBlock.merkleRoot)
  
  return merkleroot_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void VeriBlockBlock::set_allocated_merkleroot(std::string* merkleroot) {
  if (merkleroot != nullptr) {
    
  } else {
    
  }
  merkleroot_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), merkleroot);
  // @@protoc_insertion_point(field_set_allocated:VeriBlock.VeriBlockBlock.merkleRoot)
}

// int32 timestamp = 7;
inline void VeriBlockBlock::clear_timestamp() {
  timestamp_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VeriBlockBlock::timestamp() const {
  // @@protoc_insertion_point(field_get:VeriBlock.VeriBlockBlock.timestamp)
  return timestamp_;
}
inline void VeriBlockBlock::set_timestamp(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:VeriBlock.VeriBlockBlock.timestamp)
}

// int32 difficulty = 8;
inline void VeriBlockBlock::clear_difficulty() {
  difficulty_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VeriBlockBlock::difficulty() const {
  // @@protoc_insertion_point(field_get:VeriBlock.VeriBlockBlock.difficulty)
  return difficulty_;
}
inline void VeriBlockBlock::set_difficulty(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  difficulty_ = value;
  // @@protoc_insertion_point(field_set:VeriBlock.VeriBlockBlock.difficulty)
}

// int32 nonce = 9;
inline void VeriBlockBlock::clear_nonce() {
  nonce_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VeriBlockBlock::nonce() const {
  // @@protoc_insertion_point(field_get:VeriBlock.VeriBlockBlock.nonce)
  return nonce_;
}
inline void VeriBlockBlock::set_nonce(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  nonce_ = value;
  // @@protoc_insertion_point(field_set:VeriBlock.VeriBlockBlock.nonce)
}

// -------------------------------------------------------------------

// NetworkByte

// bool byteExists = 1;
inline void NetworkByte::clear_byteexists() {
  byteexists_ = false;
}
inline bool NetworkByte::byteexists() const {
  // @@protoc_insertion_point(field_get:VeriBlock.NetworkByte.byteExists)
  return byteexists_;
}
inline void NetworkByte::set_byteexists(bool value) {
  
  byteexists_ = value;
  // @@protoc_insertion_point(field_set:VeriBlock.NetworkByte.byteExists)
}

// int32 networkByte = 2;
inline void NetworkByte::clear_networkbyte() {
  networkbyte_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NetworkByte::networkbyte() const {
  // @@protoc_insertion_point(field_get:VeriBlock.NetworkByte.networkByte)
  return networkbyte_;
}
inline void NetworkByte::set_networkbyte(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  networkbyte_ = value;
  // @@protoc_insertion_point(field_set:VeriBlock.NetworkByte.networkByte)
}

// -------------------------------------------------------------------

// VeriBlockTransaction

// bytes id = 1 [(.VeriBlock.hex_encoded) = true];
inline void VeriBlockTransaction::clear_id() {
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& VeriBlockTransaction::id() const {
  // @@protoc_insertion_point(field_get:VeriBlock.VeriBlockTransaction.id)
  return id_.GetNoArena();
}
inline void VeriBlockTransaction::set_id(const std::string& value) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:VeriBlock.VeriBlockTransaction.id)
}
inline void VeriBlockTransaction::set_id(std::string&& value) {
  
  id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:VeriBlock.VeriBlockTransaction.id)
}
inline void VeriBlockTransaction::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:VeriBlock.VeriBlockTransaction.id)
}
inline void VeriBlockTransaction::set_id(const void* value, size_t size) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:VeriBlock.VeriBlockTransaction.id)
}
inline std::string* VeriBlockTransaction::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:VeriBlock.VeriBlockTransaction.id)
  return id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* VeriBlockTransaction::release_id() {
  // @@protoc_insertion_point(field_release:VeriBlock.VeriBlockTransaction.id)
  
  return id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void VeriBlockTransaction::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:VeriBlock.VeriBlockTransaction.id)
}

// int32 type = 2;
inline void VeriBlockTransaction::clear_type() {
  type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VeriBlockTransaction::type() const {
  // @@protoc_insertion_point(field_get:VeriBlock.VeriBlockTransaction.type)
  return type_;
}
inline void VeriBlockTransaction::set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:VeriBlock.VeriBlockTransaction.type)
}

// .VeriBlock.Address sourceAddress = 3;
inline bool VeriBlockTransaction::has_sourceaddress() const {
  return this != internal_default_instance() && sourceaddress_ != nullptr;
}
inline void VeriBlockTransaction::clear_sourceaddress() {
  if (GetArenaNoVirtual() == nullptr && sourceaddress_ != nullptr) {
    delete sourceaddress_;
  }
  sourceaddress_ = nullptr;
}
inline const ::VeriBlock::Address& VeriBlockTransaction::sourceaddress() const {
  const ::VeriBlock::Address* p = sourceaddress_;
  // @@protoc_insertion_point(field_get:VeriBlock.VeriBlockTransaction.sourceAddress)
  return p != nullptr ? *p : *reinterpret_cast<const ::VeriBlock::Address*>(
      &::VeriBlock::_Address_default_instance_);
}
inline ::VeriBlock::Address* VeriBlockTransaction::release_sourceaddress() {
  // @@protoc_insertion_point(field_release:VeriBlock.VeriBlockTransaction.sourceAddress)
  
  ::VeriBlock::Address* temp = sourceaddress_;
  sourceaddress_ = nullptr;
  return temp;
}
inline ::VeriBlock::Address* VeriBlockTransaction::mutable_sourceaddress() {
  
  if (sourceaddress_ == nullptr) {
    auto* p = CreateMaybeMessage<::VeriBlock::Address>(GetArenaNoVirtual());
    sourceaddress_ = p;
  }
  // @@protoc_insertion_point(field_mutable:VeriBlock.VeriBlockTransaction.sourceAddress)
  return sourceaddress_;
}
inline void VeriBlockTransaction::set_allocated_sourceaddress(::VeriBlock::Address* sourceaddress) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete sourceaddress_;
  }
  if (sourceaddress) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      sourceaddress = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sourceaddress, submessage_arena);
    }
    
  } else {
    
  }
  sourceaddress_ = sourceaddress;
  // @@protoc_insertion_point(field_set_allocated:VeriBlock.VeriBlockTransaction.sourceAddress)
}

// .VeriBlock.Coin sourceAmount = 4;
inline bool VeriBlockTransaction::has_sourceamount() const {
  return this != internal_default_instance() && sourceamount_ != nullptr;
}
inline void VeriBlockTransaction::clear_sourceamount() {
  if (GetArenaNoVirtual() == nullptr && sourceamount_ != nullptr) {
    delete sourceamount_;
  }
  sourceamount_ = nullptr;
}
inline const ::VeriBlock::Coin& VeriBlockTransaction::sourceamount() const {
  const ::VeriBlock::Coin* p = sourceamount_;
  // @@protoc_insertion_point(field_get:VeriBlock.VeriBlockTransaction.sourceAmount)
  return p != nullptr ? *p : *reinterpret_cast<const ::VeriBlock::Coin*>(
      &::VeriBlock::_Coin_default_instance_);
}
inline ::VeriBlock::Coin* VeriBlockTransaction::release_sourceamount() {
  // @@protoc_insertion_point(field_release:VeriBlock.VeriBlockTransaction.sourceAmount)
  
  ::VeriBlock::Coin* temp = sourceamount_;
  sourceamount_ = nullptr;
  return temp;
}
inline ::VeriBlock::Coin* VeriBlockTransaction::mutable_sourceamount() {
  
  if (sourceamount_ == nullptr) {
    auto* p = CreateMaybeMessage<::VeriBlock::Coin>(GetArenaNoVirtual());
    sourceamount_ = p;
  }
  // @@protoc_insertion_point(field_mutable:VeriBlock.VeriBlockTransaction.sourceAmount)
  return sourceamount_;
}
inline void VeriBlockTransaction::set_allocated_sourceamount(::VeriBlock::Coin* sourceamount) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete sourceamount_;
  }
  if (sourceamount) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      sourceamount = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sourceamount, submessage_arena);
    }
    
  } else {
    
  }
  sourceamount_ = sourceamount;
  // @@protoc_insertion_point(field_set_allocated:VeriBlock.VeriBlockTransaction.sourceAmount)
}

// repeated .VeriBlock.Output outputs = 5;
inline int VeriBlockTransaction::outputs_size() const {
  return outputs_.size();
}
inline void VeriBlockTransaction::clear_outputs() {
  outputs_.Clear();
}
inline ::VeriBlock::Output* VeriBlockTransaction::mutable_outputs(int index) {
  // @@protoc_insertion_point(field_mutable:VeriBlock.VeriBlockTransaction.outputs)
  return outputs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::VeriBlock::Output >*
VeriBlockTransaction::mutable_outputs() {
  // @@protoc_insertion_point(field_mutable_list:VeriBlock.VeriBlockTransaction.outputs)
  return &outputs_;
}
inline const ::VeriBlock::Output& VeriBlockTransaction::outputs(int index) const {
  // @@protoc_insertion_point(field_get:VeriBlock.VeriBlockTransaction.outputs)
  return outputs_.Get(index);
}
inline ::VeriBlock::Output* VeriBlockTransaction::add_outputs() {
  // @@protoc_insertion_point(field_add:VeriBlock.VeriBlockTransaction.outputs)
  return outputs_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::VeriBlock::Output >&
VeriBlockTransaction::outputs() const {
  // @@protoc_insertion_point(field_list:VeriBlock.VeriBlockTransaction.outputs)
  return outputs_;
}

// int64 signatureIndex = 6;
inline void VeriBlockTransaction::clear_signatureindex() {
  signatureindex_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 VeriBlockTransaction::signatureindex() const {
  // @@protoc_insertion_point(field_get:VeriBlock.VeriBlockTransaction.signatureIndex)
  return signatureindex_;
}
inline void VeriBlockTransaction::set_signatureindex(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  signatureindex_ = value;
  // @@protoc_insertion_point(field_set:VeriBlock.VeriBlockTransaction.signatureIndex)
}

// bytes data = 7 [(.VeriBlock.hex_encoded) = true];
inline void VeriBlockTransaction::clear_data() {
  data_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& VeriBlockTransaction::data() const {
  // @@protoc_insertion_point(field_get:VeriBlock.VeriBlockTransaction.data)
  return data_.GetNoArena();
}
inline void VeriBlockTransaction::set_data(const std::string& value) {
  
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:VeriBlock.VeriBlockTransaction.data)
}
inline void VeriBlockTransaction::set_data(std::string&& value) {
  
  data_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:VeriBlock.VeriBlockTransaction.data)
}
inline void VeriBlockTransaction::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:VeriBlock.VeriBlockTransaction.data)
}
inline void VeriBlockTransaction::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:VeriBlock.VeriBlockTransaction.data)
}
inline std::string* VeriBlockTransaction::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:VeriBlock.VeriBlockTransaction.data)
  return data_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* VeriBlockTransaction::release_data() {
  // @@protoc_insertion_point(field_release:VeriBlock.VeriBlockTransaction.data)
  
  return data_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void VeriBlockTransaction::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:VeriBlock.VeriBlockTransaction.data)
}

// .VeriBlock.PublicationData publicationData = 8;
inline bool VeriBlockTransaction::has_publicationdata() const {
  return this != internal_default_instance() && publicationdata_ != nullptr;
}
inline void VeriBlockTransaction::clear_publicationdata() {
  if (GetArenaNoVirtual() == nullptr && publicationdata_ != nullptr) {
    delete publicationdata_;
  }
  publicationdata_ = nullptr;
}
inline const ::VeriBlock::PublicationData& VeriBlockTransaction::publicationdata() const {
  const ::VeriBlock::PublicationData* p = publicationdata_;
  // @@protoc_insertion_point(field_get:VeriBlock.VeriBlockTransaction.publicationData)
  return p != nullptr ? *p : *reinterpret_cast<const ::VeriBlock::PublicationData*>(
      &::VeriBlock::_PublicationData_default_instance_);
}
inline ::VeriBlock::PublicationData* VeriBlockTransaction::release_publicationdata() {
  // @@protoc_insertion_point(field_release:VeriBlock.VeriBlockTransaction.publicationData)
  
  ::VeriBlock::PublicationData* temp = publicationdata_;
  publicationdata_ = nullptr;
  return temp;
}
inline ::VeriBlock::PublicationData* VeriBlockTransaction::mutable_publicationdata() {
  
  if (publicationdata_ == nullptr) {
    auto* p = CreateMaybeMessage<::VeriBlock::PublicationData>(GetArenaNoVirtual());
    publicationdata_ = p;
  }
  // @@protoc_insertion_point(field_mutable:VeriBlock.VeriBlockTransaction.publicationData)
  return publicationdata_;
}
inline void VeriBlockTransaction::set_allocated_publicationdata(::VeriBlock::PublicationData* publicationdata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete publicationdata_;
  }
  if (publicationdata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      publicationdata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, publicationdata, submessage_arena);
    }
    
  } else {
    
  }
  publicationdata_ = publicationdata;
  // @@protoc_insertion_point(field_set_allocated:VeriBlock.VeriBlockTransaction.publicationData)
}

// bytes signature = 9 [(.VeriBlock.hex_encoded) = true];
inline void VeriBlockTransaction::clear_signature() {
  signature_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& VeriBlockTransaction::signature() const {
  // @@protoc_insertion_point(field_get:VeriBlock.VeriBlockTransaction.signature)
  return signature_.GetNoArena();
}
inline void VeriBlockTransaction::set_signature(const std::string& value) {
  
  signature_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:VeriBlock.VeriBlockTransaction.signature)
}
inline void VeriBlockTransaction::set_signature(std::string&& value) {
  
  signature_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:VeriBlock.VeriBlockTransaction.signature)
}
inline void VeriBlockTransaction::set_signature(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  signature_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:VeriBlock.VeriBlockTransaction.signature)
}
inline void VeriBlockTransaction::set_signature(const void* value, size_t size) {
  
  signature_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:VeriBlock.VeriBlockTransaction.signature)
}
inline std::string* VeriBlockTransaction::mutable_signature() {
  
  // @@protoc_insertion_point(field_mutable:VeriBlock.VeriBlockTransaction.signature)
  return signature_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* VeriBlockTransaction::release_signature() {
  // @@protoc_insertion_point(field_release:VeriBlock.VeriBlockTransaction.signature)
  
  return signature_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void VeriBlockTransaction::set_allocated_signature(std::string* signature) {
  if (signature != nullptr) {
    
  } else {
    
  }
  signature_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), signature);
  // @@protoc_insertion_point(field_set_allocated:VeriBlock.VeriBlockTransaction.signature)
}

// bytes publicKey = 10 [(.VeriBlock.hex_encoded) = true];
inline void VeriBlockTransaction::clear_publickey() {
  publickey_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& VeriBlockTransaction::publickey() const {
  // @@protoc_insertion_point(field_get:VeriBlock.VeriBlockTransaction.publicKey)
  return publickey_.GetNoArena();
}
inline void VeriBlockTransaction::set_publickey(const std::string& value) {
  
  publickey_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:VeriBlock.VeriBlockTransaction.publicKey)
}
inline void VeriBlockTransaction::set_publickey(std::string&& value) {
  
  publickey_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:VeriBlock.VeriBlockTransaction.publicKey)
}
inline void VeriBlockTransaction::set_publickey(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  publickey_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:VeriBlock.VeriBlockTransaction.publicKey)
}
inline void VeriBlockTransaction::set_publickey(const void* value, size_t size) {
  
  publickey_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:VeriBlock.VeriBlockTransaction.publicKey)
}
inline std::string* VeriBlockTransaction::mutable_publickey() {
  
  // @@protoc_insertion_point(field_mutable:VeriBlock.VeriBlockTransaction.publicKey)
  return publickey_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* VeriBlockTransaction::release_publickey() {
  // @@protoc_insertion_point(field_release:VeriBlock.VeriBlockTransaction.publicKey)
  
  return publickey_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void VeriBlockTransaction::set_allocated_publickey(std::string* publickey) {
  if (publickey != nullptr) {
    
  } else {
    
  }
  publickey_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), publickey);
  // @@protoc_insertion_point(field_set_allocated:VeriBlock.VeriBlockTransaction.publicKey)
}

// .VeriBlock.NetworkByte networkByte = 11;
inline bool VeriBlockTransaction::has_networkbyte() const {
  return this != internal_default_instance() && networkbyte_ != nullptr;
}
inline void VeriBlockTransaction::clear_networkbyte() {
  if (GetArenaNoVirtual() == nullptr && networkbyte_ != nullptr) {
    delete networkbyte_;
  }
  networkbyte_ = nullptr;
}
inline const ::VeriBlock::NetworkByte& VeriBlockTransaction::networkbyte() const {
  const ::VeriBlock::NetworkByte* p = networkbyte_;
  // @@protoc_insertion_point(field_get:VeriBlock.VeriBlockTransaction.networkByte)
  return p != nullptr ? *p : *reinterpret_cast<const ::VeriBlock::NetworkByte*>(
      &::VeriBlock::_NetworkByte_default_instance_);
}
inline ::VeriBlock::NetworkByte* VeriBlockTransaction::release_networkbyte() {
  // @@protoc_insertion_point(field_release:VeriBlock.VeriBlockTransaction.networkByte)
  
  ::VeriBlock::NetworkByte* temp = networkbyte_;
  networkbyte_ = nullptr;
  return temp;
}
inline ::VeriBlock::NetworkByte* VeriBlockTransaction::mutable_networkbyte() {
  
  if (networkbyte_ == nullptr) {
    auto* p = CreateMaybeMessage<::VeriBlock::NetworkByte>(GetArenaNoVirtual());
    networkbyte_ = p;
  }
  // @@protoc_insertion_point(field_mutable:VeriBlock.VeriBlockTransaction.networkByte)
  return networkbyte_;
}
inline void VeriBlockTransaction::set_allocated_networkbyte(::VeriBlock::NetworkByte* networkbyte) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete networkbyte_;
  }
  if (networkbyte) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      networkbyte = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, networkbyte, submessage_arena);
    }
    
  } else {
    
  }
  networkbyte_ = networkbyte;
  // @@protoc_insertion_point(field_set_allocated:VeriBlock.VeriBlockTransaction.networkByte)
}

// -------------------------------------------------------------------

// Address

// string address = 1;
inline void Address::clear_address() {
  address_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Address::address() const {
  // @@protoc_insertion_point(field_get:VeriBlock.Address.address)
  return address_.GetNoArena();
}
inline void Address::set_address(const std::string& value) {
  
  address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:VeriBlock.Address.address)
}
inline void Address::set_address(std::string&& value) {
  
  address_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:VeriBlock.Address.address)
}
inline void Address::set_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:VeriBlock.Address.address)
}
inline void Address::set_address(const char* value, size_t size) {
  
  address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:VeriBlock.Address.address)
}
inline std::string* Address::mutable_address() {
  
  // @@protoc_insertion_point(field_mutable:VeriBlock.Address.address)
  return address_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Address::release_address() {
  // @@protoc_insertion_point(field_release:VeriBlock.Address.address)
  
  return address_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Address::set_allocated_address(std::string* address) {
  if (address != nullptr) {
    
  } else {
    
  }
  address_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), address);
  // @@protoc_insertion_point(field_set_allocated:VeriBlock.Address.address)
}

// -------------------------------------------------------------------

// Coin

// int64 atomicUnits = 1;
inline void Coin::clear_atomicunits() {
  atomicunits_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Coin::atomicunits() const {
  // @@protoc_insertion_point(field_get:VeriBlock.Coin.atomicUnits)
  return atomicunits_;
}
inline void Coin::set_atomicunits(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  atomicunits_ = value;
  // @@protoc_insertion_point(field_set:VeriBlock.Coin.atomicUnits)
}

// -------------------------------------------------------------------

// Output

// .VeriBlock.Address address = 1;
inline bool Output::has_address() const {
  return this != internal_default_instance() && address_ != nullptr;
}
inline void Output::clear_address() {
  if (GetArenaNoVirtual() == nullptr && address_ != nullptr) {
    delete address_;
  }
  address_ = nullptr;
}
inline const ::VeriBlock::Address& Output::address() const {
  const ::VeriBlock::Address* p = address_;
  // @@protoc_insertion_point(field_get:VeriBlock.Output.address)
  return p != nullptr ? *p : *reinterpret_cast<const ::VeriBlock::Address*>(
      &::VeriBlock::_Address_default_instance_);
}
inline ::VeriBlock::Address* Output::release_address() {
  // @@protoc_insertion_point(field_release:VeriBlock.Output.address)
  
  ::VeriBlock::Address* temp = address_;
  address_ = nullptr;
  return temp;
}
inline ::VeriBlock::Address* Output::mutable_address() {
  
  if (address_ == nullptr) {
    auto* p = CreateMaybeMessage<::VeriBlock::Address>(GetArenaNoVirtual());
    address_ = p;
  }
  // @@protoc_insertion_point(field_mutable:VeriBlock.Output.address)
  return address_;
}
inline void Output::set_allocated_address(::VeriBlock::Address* address) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete address_;
  }
  if (address) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      address = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, address, submessage_arena);
    }
    
  } else {
    
  }
  address_ = address;
  // @@protoc_insertion_point(field_set_allocated:VeriBlock.Output.address)
}

// .VeriBlock.Coin amount = 2;
inline bool Output::has_amount() const {
  return this != internal_default_instance() && amount_ != nullptr;
}
inline void Output::clear_amount() {
  if (GetArenaNoVirtual() == nullptr && amount_ != nullptr) {
    delete amount_;
  }
  amount_ = nullptr;
}
inline const ::VeriBlock::Coin& Output::amount() const {
  const ::VeriBlock::Coin* p = amount_;
  // @@protoc_insertion_point(field_get:VeriBlock.Output.amount)
  return p != nullptr ? *p : *reinterpret_cast<const ::VeriBlock::Coin*>(
      &::VeriBlock::_Coin_default_instance_);
}
inline ::VeriBlock::Coin* Output::release_amount() {
  // @@protoc_insertion_point(field_release:VeriBlock.Output.amount)
  
  ::VeriBlock::Coin* temp = amount_;
  amount_ = nullptr;
  return temp;
}
inline ::VeriBlock::Coin* Output::mutable_amount() {
  
  if (amount_ == nullptr) {
    auto* p = CreateMaybeMessage<::VeriBlock::Coin>(GetArenaNoVirtual());
    amount_ = p;
  }
  // @@protoc_insertion_point(field_mutable:VeriBlock.Output.amount)
  return amount_;
}
inline void Output::set_allocated_amount(::VeriBlock::Coin* amount) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete amount_;
  }
  if (amount) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      amount = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, amount, submessage_arena);
    }
    
  } else {
    
  }
  amount_ = amount;
  // @@protoc_insertion_point(field_set_allocated:VeriBlock.Output.amount)
}

// -------------------------------------------------------------------

// AltPublication

// .VeriBlock.VeriBlockTransaction transaction = 1;
inline bool AltPublication::has_transaction() const {
  return this != internal_default_instance() && transaction_ != nullptr;
}
inline void AltPublication::clear_transaction() {
  if (GetArenaNoVirtual() == nullptr && transaction_ != nullptr) {
    delete transaction_;
  }
  transaction_ = nullptr;
}
inline const ::VeriBlock::VeriBlockTransaction& AltPublication::transaction() const {
  const ::VeriBlock::VeriBlockTransaction* p = transaction_;
  // @@protoc_insertion_point(field_get:VeriBlock.AltPublication.transaction)
  return p != nullptr ? *p : *reinterpret_cast<const ::VeriBlock::VeriBlockTransaction*>(
      &::VeriBlock::_VeriBlockTransaction_default_instance_);
}
inline ::VeriBlock::VeriBlockTransaction* AltPublication::release_transaction() {
  // @@protoc_insertion_point(field_release:VeriBlock.AltPublication.transaction)
  
  ::VeriBlock::VeriBlockTransaction* temp = transaction_;
  transaction_ = nullptr;
  return temp;
}
inline ::VeriBlock::VeriBlockTransaction* AltPublication::mutable_transaction() {
  
  if (transaction_ == nullptr) {
    auto* p = CreateMaybeMessage<::VeriBlock::VeriBlockTransaction>(GetArenaNoVirtual());
    transaction_ = p;
  }
  // @@protoc_insertion_point(field_mutable:VeriBlock.AltPublication.transaction)
  return transaction_;
}
inline void AltPublication::set_allocated_transaction(::VeriBlock::VeriBlockTransaction* transaction) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete transaction_;
  }
  if (transaction) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      transaction = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, transaction, submessage_arena);
    }
    
  } else {
    
  }
  transaction_ = transaction;
  // @@protoc_insertion_point(field_set_allocated:VeriBlock.AltPublication.transaction)
}

// string merklePath = 2;
inline void AltPublication::clear_merklepath() {
  merklepath_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& AltPublication::merklepath() const {
  // @@protoc_insertion_point(field_get:VeriBlock.AltPublication.merklePath)
  return merklepath_.GetNoArena();
}
inline void AltPublication::set_merklepath(const std::string& value) {
  
  merklepath_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:VeriBlock.AltPublication.merklePath)
}
inline void AltPublication::set_merklepath(std::string&& value) {
  
  merklepath_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:VeriBlock.AltPublication.merklePath)
}
inline void AltPublication::set_merklepath(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  merklepath_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:VeriBlock.AltPublication.merklePath)
}
inline void AltPublication::set_merklepath(const char* value, size_t size) {
  
  merklepath_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:VeriBlock.AltPublication.merklePath)
}
inline std::string* AltPublication::mutable_merklepath() {
  
  // @@protoc_insertion_point(field_mutable:VeriBlock.AltPublication.merklePath)
  return merklepath_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AltPublication::release_merklepath() {
  // @@protoc_insertion_point(field_release:VeriBlock.AltPublication.merklePath)
  
  return merklepath_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AltPublication::set_allocated_merklepath(std::string* merklepath) {
  if (merklepath != nullptr) {
    
  } else {
    
  }
  merklepath_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), merklepath);
  // @@protoc_insertion_point(field_set_allocated:VeriBlock.AltPublication.merklePath)
}

// .VeriBlock.VeriBlockBlock containingBlock = 3;
inline bool AltPublication::has_containingblock() const {
  return this != internal_default_instance() && containingblock_ != nullptr;
}
inline void AltPublication::clear_containingblock() {
  if (GetArenaNoVirtual() == nullptr && containingblock_ != nullptr) {
    delete containingblock_;
  }
  containingblock_ = nullptr;
}
inline const ::VeriBlock::VeriBlockBlock& AltPublication::containingblock() const {
  const ::VeriBlock::VeriBlockBlock* p = containingblock_;
  // @@protoc_insertion_point(field_get:VeriBlock.AltPublication.containingBlock)
  return p != nullptr ? *p : *reinterpret_cast<const ::VeriBlock::VeriBlockBlock*>(
      &::VeriBlock::_VeriBlockBlock_default_instance_);
}
inline ::VeriBlock::VeriBlockBlock* AltPublication::release_containingblock() {
  // @@protoc_insertion_point(field_release:VeriBlock.AltPublication.containingBlock)
  
  ::VeriBlock::VeriBlockBlock* temp = containingblock_;
  containingblock_ = nullptr;
  return temp;
}
inline ::VeriBlock::VeriBlockBlock* AltPublication::mutable_containingblock() {
  
  if (containingblock_ == nullptr) {
    auto* p = CreateMaybeMessage<::VeriBlock::VeriBlockBlock>(GetArenaNoVirtual());
    containingblock_ = p;
  }
  // @@protoc_insertion_point(field_mutable:VeriBlock.AltPublication.containingBlock)
  return containingblock_;
}
inline void AltPublication::set_allocated_containingblock(::VeriBlock::VeriBlockBlock* containingblock) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete containingblock_;
  }
  if (containingblock) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      containingblock = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, containingblock, submessage_arena);
    }
    
  } else {
    
  }
  containingblock_ = containingblock;
  // @@protoc_insertion_point(field_set_allocated:VeriBlock.AltPublication.containingBlock)
}

// repeated .VeriBlock.VeriBlockBlock context = 4;
inline int AltPublication::context_size() const {
  return context_.size();
}
inline void AltPublication::clear_context() {
  context_.Clear();
}
inline ::VeriBlock::VeriBlockBlock* AltPublication::mutable_context(int index) {
  // @@protoc_insertion_point(field_mutable:VeriBlock.AltPublication.context)
  return context_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::VeriBlock::VeriBlockBlock >*
AltPublication::mutable_context() {
  // @@protoc_insertion_point(field_mutable_list:VeriBlock.AltPublication.context)
  return &context_;
}
inline const ::VeriBlock::VeriBlockBlock& AltPublication::context(int index) const {
  // @@protoc_insertion_point(field_get:VeriBlock.AltPublication.context)
  return context_.Get(index);
}
inline ::VeriBlock::VeriBlockBlock* AltPublication::add_context() {
  // @@protoc_insertion_point(field_add:VeriBlock.AltPublication.context)
  return context_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::VeriBlock::VeriBlockBlock >&
AltPublication::context() const {
  // @@protoc_insertion_point(field_list:VeriBlock.AltPublication.context)
  return context_;
}

// -------------------------------------------------------------------

// VeriBlockPoPTransaction

// bytes id = 1 [(.VeriBlock.hex_encoded) = true];
inline void VeriBlockPoPTransaction::clear_id() {
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& VeriBlockPoPTransaction::id() const {
  // @@protoc_insertion_point(field_get:VeriBlock.VeriBlockPoPTransaction.id)
  return id_.GetNoArena();
}
inline void VeriBlockPoPTransaction::set_id(const std::string& value) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:VeriBlock.VeriBlockPoPTransaction.id)
}
inline void VeriBlockPoPTransaction::set_id(std::string&& value) {
  
  id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:VeriBlock.VeriBlockPoPTransaction.id)
}
inline void VeriBlockPoPTransaction::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:VeriBlock.VeriBlockPoPTransaction.id)
}
inline void VeriBlockPoPTransaction::set_id(const void* value, size_t size) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:VeriBlock.VeriBlockPoPTransaction.id)
}
inline std::string* VeriBlockPoPTransaction::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:VeriBlock.VeriBlockPoPTransaction.id)
  return id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* VeriBlockPoPTransaction::release_id() {
  // @@protoc_insertion_point(field_release:VeriBlock.VeriBlockPoPTransaction.id)
  
  return id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void VeriBlockPoPTransaction::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:VeriBlock.VeriBlockPoPTransaction.id)
}

// .VeriBlock.Address address = 2;
inline bool VeriBlockPoPTransaction::has_address() const {
  return this != internal_default_instance() && address_ != nullptr;
}
inline void VeriBlockPoPTransaction::clear_address() {
  if (GetArenaNoVirtual() == nullptr && address_ != nullptr) {
    delete address_;
  }
  address_ = nullptr;
}
inline const ::VeriBlock::Address& VeriBlockPoPTransaction::address() const {
  const ::VeriBlock::Address* p = address_;
  // @@protoc_insertion_point(field_get:VeriBlock.VeriBlockPoPTransaction.address)
  return p != nullptr ? *p : *reinterpret_cast<const ::VeriBlock::Address*>(
      &::VeriBlock::_Address_default_instance_);
}
inline ::VeriBlock::Address* VeriBlockPoPTransaction::release_address() {
  // @@protoc_insertion_point(field_release:VeriBlock.VeriBlockPoPTransaction.address)
  
  ::VeriBlock::Address* temp = address_;
  address_ = nullptr;
  return temp;
}
inline ::VeriBlock::Address* VeriBlockPoPTransaction::mutable_address() {
  
  if (address_ == nullptr) {
    auto* p = CreateMaybeMessage<::VeriBlock::Address>(GetArenaNoVirtual());
    address_ = p;
  }
  // @@protoc_insertion_point(field_mutable:VeriBlock.VeriBlockPoPTransaction.address)
  return address_;
}
inline void VeriBlockPoPTransaction::set_allocated_address(::VeriBlock::Address* address) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete address_;
  }
  if (address) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      address = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, address, submessage_arena);
    }
    
  } else {
    
  }
  address_ = address;
  // @@protoc_insertion_point(field_set_allocated:VeriBlock.VeriBlockPoPTransaction.address)
}

// .VeriBlock.VeriBlockBlock publishedBlock = 3;
inline bool VeriBlockPoPTransaction::has_publishedblock() const {
  return this != internal_default_instance() && publishedblock_ != nullptr;
}
inline void VeriBlockPoPTransaction::clear_publishedblock() {
  if (GetArenaNoVirtual() == nullptr && publishedblock_ != nullptr) {
    delete publishedblock_;
  }
  publishedblock_ = nullptr;
}
inline const ::VeriBlock::VeriBlockBlock& VeriBlockPoPTransaction::publishedblock() const {
  const ::VeriBlock::VeriBlockBlock* p = publishedblock_;
  // @@protoc_insertion_point(field_get:VeriBlock.VeriBlockPoPTransaction.publishedBlock)
  return p != nullptr ? *p : *reinterpret_cast<const ::VeriBlock::VeriBlockBlock*>(
      &::VeriBlock::_VeriBlockBlock_default_instance_);
}
inline ::VeriBlock::VeriBlockBlock* VeriBlockPoPTransaction::release_publishedblock() {
  // @@protoc_insertion_point(field_release:VeriBlock.VeriBlockPoPTransaction.publishedBlock)
  
  ::VeriBlock::VeriBlockBlock* temp = publishedblock_;
  publishedblock_ = nullptr;
  return temp;
}
inline ::VeriBlock::VeriBlockBlock* VeriBlockPoPTransaction::mutable_publishedblock() {
  
  if (publishedblock_ == nullptr) {
    auto* p = CreateMaybeMessage<::VeriBlock::VeriBlockBlock>(GetArenaNoVirtual());
    publishedblock_ = p;
  }
  // @@protoc_insertion_point(field_mutable:VeriBlock.VeriBlockPoPTransaction.publishedBlock)
  return publishedblock_;
}
inline void VeriBlockPoPTransaction::set_allocated_publishedblock(::VeriBlock::VeriBlockBlock* publishedblock) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete publishedblock_;
  }
  if (publishedblock) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      publishedblock = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, publishedblock, submessage_arena);
    }
    
  } else {
    
  }
  publishedblock_ = publishedblock;
  // @@protoc_insertion_point(field_set_allocated:VeriBlock.VeriBlockPoPTransaction.publishedBlock)
}

// .VeriBlock.BitcoinTransaction bitcoinTransaction = 4;
inline bool VeriBlockPoPTransaction::has_bitcointransaction() const {
  return this != internal_default_instance() && bitcointransaction_ != nullptr;
}
inline void VeriBlockPoPTransaction::clear_bitcointransaction() {
  if (GetArenaNoVirtual() == nullptr && bitcointransaction_ != nullptr) {
    delete bitcointransaction_;
  }
  bitcointransaction_ = nullptr;
}
inline const ::VeriBlock::BitcoinTransaction& VeriBlockPoPTransaction::bitcointransaction() const {
  const ::VeriBlock::BitcoinTransaction* p = bitcointransaction_;
  // @@protoc_insertion_point(field_get:VeriBlock.VeriBlockPoPTransaction.bitcoinTransaction)
  return p != nullptr ? *p : *reinterpret_cast<const ::VeriBlock::BitcoinTransaction*>(
      &::VeriBlock::_BitcoinTransaction_default_instance_);
}
inline ::VeriBlock::BitcoinTransaction* VeriBlockPoPTransaction::release_bitcointransaction() {
  // @@protoc_insertion_point(field_release:VeriBlock.VeriBlockPoPTransaction.bitcoinTransaction)
  
  ::VeriBlock::BitcoinTransaction* temp = bitcointransaction_;
  bitcointransaction_ = nullptr;
  return temp;
}
inline ::VeriBlock::BitcoinTransaction* VeriBlockPoPTransaction::mutable_bitcointransaction() {
  
  if (bitcointransaction_ == nullptr) {
    auto* p = CreateMaybeMessage<::VeriBlock::BitcoinTransaction>(GetArenaNoVirtual());
    bitcointransaction_ = p;
  }
  // @@protoc_insertion_point(field_mutable:VeriBlock.VeriBlockPoPTransaction.bitcoinTransaction)
  return bitcointransaction_;
}
inline void VeriBlockPoPTransaction::set_allocated_bitcointransaction(::VeriBlock::BitcoinTransaction* bitcointransaction) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete bitcointransaction_;
  }
  if (bitcointransaction) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      bitcointransaction = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bitcointransaction, submessage_arena);
    }
    
  } else {
    
  }
  bitcointransaction_ = bitcointransaction;
  // @@protoc_insertion_point(field_set_allocated:VeriBlock.VeriBlockPoPTransaction.bitcoinTransaction)
}

// string merklePath = 5;
inline void VeriBlockPoPTransaction::clear_merklepath() {
  merklepath_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& VeriBlockPoPTransaction::merklepath() const {
  // @@protoc_insertion_point(field_get:VeriBlock.VeriBlockPoPTransaction.merklePath)
  return merklepath_.GetNoArena();
}
inline void VeriBlockPoPTransaction::set_merklepath(const std::string& value) {
  
  merklepath_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:VeriBlock.VeriBlockPoPTransaction.merklePath)
}
inline void VeriBlockPoPTransaction::set_merklepath(std::string&& value) {
  
  merklepath_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:VeriBlock.VeriBlockPoPTransaction.merklePath)
}
inline void VeriBlockPoPTransaction::set_merklepath(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  merklepath_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:VeriBlock.VeriBlockPoPTransaction.merklePath)
}
inline void VeriBlockPoPTransaction::set_merklepath(const char* value, size_t size) {
  
  merklepath_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:VeriBlock.VeriBlockPoPTransaction.merklePath)
}
inline std::string* VeriBlockPoPTransaction::mutable_merklepath() {
  
  // @@protoc_insertion_point(field_mutable:VeriBlock.VeriBlockPoPTransaction.merklePath)
  return merklepath_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* VeriBlockPoPTransaction::release_merklepath() {
  // @@protoc_insertion_point(field_release:VeriBlock.VeriBlockPoPTransaction.merklePath)
  
  return merklepath_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void VeriBlockPoPTransaction::set_allocated_merklepath(std::string* merklepath) {
  if (merklepath != nullptr) {
    
  } else {
    
  }
  merklepath_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), merklepath);
  // @@protoc_insertion_point(field_set_allocated:VeriBlock.VeriBlockPoPTransaction.merklePath)
}

// .VeriBlock.BitcoinBlock blockOfProof = 6;
inline bool VeriBlockPoPTransaction::has_blockofproof() const {
  return this != internal_default_instance() && blockofproof_ != nullptr;
}
inline void VeriBlockPoPTransaction::clear_blockofproof() {
  if (GetArenaNoVirtual() == nullptr && blockofproof_ != nullptr) {
    delete blockofproof_;
  }
  blockofproof_ = nullptr;
}
inline const ::VeriBlock::BitcoinBlock& VeriBlockPoPTransaction::blockofproof() const {
  const ::VeriBlock::BitcoinBlock* p = blockofproof_;
  // @@protoc_insertion_point(field_get:VeriBlock.VeriBlockPoPTransaction.blockOfProof)
  return p != nullptr ? *p : *reinterpret_cast<const ::VeriBlock::BitcoinBlock*>(
      &::VeriBlock::_BitcoinBlock_default_instance_);
}
inline ::VeriBlock::BitcoinBlock* VeriBlockPoPTransaction::release_blockofproof() {
  // @@protoc_insertion_point(field_release:VeriBlock.VeriBlockPoPTransaction.blockOfProof)
  
  ::VeriBlock::BitcoinBlock* temp = blockofproof_;
  blockofproof_ = nullptr;
  return temp;
}
inline ::VeriBlock::BitcoinBlock* VeriBlockPoPTransaction::mutable_blockofproof() {
  
  if (blockofproof_ == nullptr) {
    auto* p = CreateMaybeMessage<::VeriBlock::BitcoinBlock>(GetArenaNoVirtual());
    blockofproof_ = p;
  }
  // @@protoc_insertion_point(field_mutable:VeriBlock.VeriBlockPoPTransaction.blockOfProof)
  return blockofproof_;
}
inline void VeriBlockPoPTransaction::set_allocated_blockofproof(::VeriBlock::BitcoinBlock* blockofproof) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete blockofproof_;
  }
  if (blockofproof) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      blockofproof = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, blockofproof, submessage_arena);
    }
    
  } else {
    
  }
  blockofproof_ = blockofproof;
  // @@protoc_insertion_point(field_set_allocated:VeriBlock.VeriBlockPoPTransaction.blockOfProof)
}

// repeated .VeriBlock.BitcoinBlock blockOfProofContext = 7;
inline int VeriBlockPoPTransaction::blockofproofcontext_size() const {
  return blockofproofcontext_.size();
}
inline void VeriBlockPoPTransaction::clear_blockofproofcontext() {
  blockofproofcontext_.Clear();
}
inline ::VeriBlock::BitcoinBlock* VeriBlockPoPTransaction::mutable_blockofproofcontext(int index) {
  // @@protoc_insertion_point(field_mutable:VeriBlock.VeriBlockPoPTransaction.blockOfProofContext)
  return blockofproofcontext_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::VeriBlock::BitcoinBlock >*
VeriBlockPoPTransaction::mutable_blockofproofcontext() {
  // @@protoc_insertion_point(field_mutable_list:VeriBlock.VeriBlockPoPTransaction.blockOfProofContext)
  return &blockofproofcontext_;
}
inline const ::VeriBlock::BitcoinBlock& VeriBlockPoPTransaction::blockofproofcontext(int index) const {
  // @@protoc_insertion_point(field_get:VeriBlock.VeriBlockPoPTransaction.blockOfProofContext)
  return blockofproofcontext_.Get(index);
}
inline ::VeriBlock::BitcoinBlock* VeriBlockPoPTransaction::add_blockofproofcontext() {
  // @@protoc_insertion_point(field_add:VeriBlock.VeriBlockPoPTransaction.blockOfProofContext)
  return blockofproofcontext_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::VeriBlock::BitcoinBlock >&
VeriBlockPoPTransaction::blockofproofcontext() const {
  // @@protoc_insertion_point(field_list:VeriBlock.VeriBlockPoPTransaction.blockOfProofContext)
  return blockofproofcontext_;
}

// bytes signature = 8 [(.VeriBlock.hex_encoded) = true];
inline void VeriBlockPoPTransaction::clear_signature() {
  signature_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& VeriBlockPoPTransaction::signature() const {
  // @@protoc_insertion_point(field_get:VeriBlock.VeriBlockPoPTransaction.signature)
  return signature_.GetNoArena();
}
inline void VeriBlockPoPTransaction::set_signature(const std::string& value) {
  
  signature_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:VeriBlock.VeriBlockPoPTransaction.signature)
}
inline void VeriBlockPoPTransaction::set_signature(std::string&& value) {
  
  signature_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:VeriBlock.VeriBlockPoPTransaction.signature)
}
inline void VeriBlockPoPTransaction::set_signature(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  signature_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:VeriBlock.VeriBlockPoPTransaction.signature)
}
inline void VeriBlockPoPTransaction::set_signature(const void* value, size_t size) {
  
  signature_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:VeriBlock.VeriBlockPoPTransaction.signature)
}
inline std::string* VeriBlockPoPTransaction::mutable_signature() {
  
  // @@protoc_insertion_point(field_mutable:VeriBlock.VeriBlockPoPTransaction.signature)
  return signature_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* VeriBlockPoPTransaction::release_signature() {
  // @@protoc_insertion_point(field_release:VeriBlock.VeriBlockPoPTransaction.signature)
  
  return signature_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void VeriBlockPoPTransaction::set_allocated_signature(std::string* signature) {
  if (signature != nullptr) {
    
  } else {
    
  }
  signature_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), signature);
  // @@protoc_insertion_point(field_set_allocated:VeriBlock.VeriBlockPoPTransaction.signature)
}

// bytes publicKey = 9 [(.VeriBlock.hex_encoded) = true];
inline void VeriBlockPoPTransaction::clear_publickey() {
  publickey_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& VeriBlockPoPTransaction::publickey() const {
  // @@protoc_insertion_point(field_get:VeriBlock.VeriBlockPoPTransaction.publicKey)
  return publickey_.GetNoArena();
}
inline void VeriBlockPoPTransaction::set_publickey(const std::string& value) {
  
  publickey_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:VeriBlock.VeriBlockPoPTransaction.publicKey)
}
inline void VeriBlockPoPTransaction::set_publickey(std::string&& value) {
  
  publickey_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:VeriBlock.VeriBlockPoPTransaction.publicKey)
}
inline void VeriBlockPoPTransaction::set_publickey(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  publickey_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:VeriBlock.VeriBlockPoPTransaction.publicKey)
}
inline void VeriBlockPoPTransaction::set_publickey(const void* value, size_t size) {
  
  publickey_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:VeriBlock.VeriBlockPoPTransaction.publicKey)
}
inline std::string* VeriBlockPoPTransaction::mutable_publickey() {
  
  // @@protoc_insertion_point(field_mutable:VeriBlock.VeriBlockPoPTransaction.publicKey)
  return publickey_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* VeriBlockPoPTransaction::release_publickey() {
  // @@protoc_insertion_point(field_release:VeriBlock.VeriBlockPoPTransaction.publicKey)
  
  return publickey_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void VeriBlockPoPTransaction::set_allocated_publickey(std::string* publickey) {
  if (publickey != nullptr) {
    
  } else {
    
  }
  publickey_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), publickey);
  // @@protoc_insertion_point(field_set_allocated:VeriBlock.VeriBlockPoPTransaction.publicKey)
}

// .VeriBlock.NetworkByte networkByte = 10;
inline bool VeriBlockPoPTransaction::has_networkbyte() const {
  return this != internal_default_instance() && networkbyte_ != nullptr;
}
inline void VeriBlockPoPTransaction::clear_networkbyte() {
  if (GetArenaNoVirtual() == nullptr && networkbyte_ != nullptr) {
    delete networkbyte_;
  }
  networkbyte_ = nullptr;
}
inline const ::VeriBlock::NetworkByte& VeriBlockPoPTransaction::networkbyte() const {
  const ::VeriBlock::NetworkByte* p = networkbyte_;
  // @@protoc_insertion_point(field_get:VeriBlock.VeriBlockPoPTransaction.networkByte)
  return p != nullptr ? *p : *reinterpret_cast<const ::VeriBlock::NetworkByte*>(
      &::VeriBlock::_NetworkByte_default_instance_);
}
inline ::VeriBlock::NetworkByte* VeriBlockPoPTransaction::release_networkbyte() {
  // @@protoc_insertion_point(field_release:VeriBlock.VeriBlockPoPTransaction.networkByte)
  
  ::VeriBlock::NetworkByte* temp = networkbyte_;
  networkbyte_ = nullptr;
  return temp;
}
inline ::VeriBlock::NetworkByte* VeriBlockPoPTransaction::mutable_networkbyte() {
  
  if (networkbyte_ == nullptr) {
    auto* p = CreateMaybeMessage<::VeriBlock::NetworkByte>(GetArenaNoVirtual());
    networkbyte_ = p;
  }
  // @@protoc_insertion_point(field_mutable:VeriBlock.VeriBlockPoPTransaction.networkByte)
  return networkbyte_;
}
inline void VeriBlockPoPTransaction::set_allocated_networkbyte(::VeriBlock::NetworkByte* networkbyte) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete networkbyte_;
  }
  if (networkbyte) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      networkbyte = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, networkbyte, submessage_arena);
    }
    
  } else {
    
  }
  networkbyte_ = networkbyte;
  // @@protoc_insertion_point(field_set_allocated:VeriBlock.VeriBlockPoPTransaction.networkByte)
}

// -------------------------------------------------------------------

// VeriBlockPublication

// .VeriBlock.VeriBlockPoPTransaction transaction = 1;
inline bool VeriBlockPublication::has_transaction() const {
  return this != internal_default_instance() && transaction_ != nullptr;
}
inline void VeriBlockPublication::clear_transaction() {
  if (GetArenaNoVirtual() == nullptr && transaction_ != nullptr) {
    delete transaction_;
  }
  transaction_ = nullptr;
}
inline const ::VeriBlock::VeriBlockPoPTransaction& VeriBlockPublication::transaction() const {
  const ::VeriBlock::VeriBlockPoPTransaction* p = transaction_;
  // @@protoc_insertion_point(field_get:VeriBlock.VeriBlockPublication.transaction)
  return p != nullptr ? *p : *reinterpret_cast<const ::VeriBlock::VeriBlockPoPTransaction*>(
      &::VeriBlock::_VeriBlockPoPTransaction_default_instance_);
}
inline ::VeriBlock::VeriBlockPoPTransaction* VeriBlockPublication::release_transaction() {
  // @@protoc_insertion_point(field_release:VeriBlock.VeriBlockPublication.transaction)
  
  ::VeriBlock::VeriBlockPoPTransaction* temp = transaction_;
  transaction_ = nullptr;
  return temp;
}
inline ::VeriBlock::VeriBlockPoPTransaction* VeriBlockPublication::mutable_transaction() {
  
  if (transaction_ == nullptr) {
    auto* p = CreateMaybeMessage<::VeriBlock::VeriBlockPoPTransaction>(GetArenaNoVirtual());
    transaction_ = p;
  }
  // @@protoc_insertion_point(field_mutable:VeriBlock.VeriBlockPublication.transaction)
  return transaction_;
}
inline void VeriBlockPublication::set_allocated_transaction(::VeriBlock::VeriBlockPoPTransaction* transaction) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete transaction_;
  }
  if (transaction) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      transaction = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, transaction, submessage_arena);
    }
    
  } else {
    
  }
  transaction_ = transaction;
  // @@protoc_insertion_point(field_set_allocated:VeriBlock.VeriBlockPublication.transaction)
}

// string merklePath = 2;
inline void VeriBlockPublication::clear_merklepath() {
  merklepath_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& VeriBlockPublication::merklepath() const {
  // @@protoc_insertion_point(field_get:VeriBlock.VeriBlockPublication.merklePath)
  return merklepath_.GetNoArena();
}
inline void VeriBlockPublication::set_merklepath(const std::string& value) {
  
  merklepath_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:VeriBlock.VeriBlockPublication.merklePath)
}
inline void VeriBlockPublication::set_merklepath(std::string&& value) {
  
  merklepath_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:VeriBlock.VeriBlockPublication.merklePath)
}
inline void VeriBlockPublication::set_merklepath(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  merklepath_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:VeriBlock.VeriBlockPublication.merklePath)
}
inline void VeriBlockPublication::set_merklepath(const char* value, size_t size) {
  
  merklepath_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:VeriBlock.VeriBlockPublication.merklePath)
}
inline std::string* VeriBlockPublication::mutable_merklepath() {
  
  // @@protoc_insertion_point(field_mutable:VeriBlock.VeriBlockPublication.merklePath)
  return merklepath_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* VeriBlockPublication::release_merklepath() {
  // @@protoc_insertion_point(field_release:VeriBlock.VeriBlockPublication.merklePath)
  
  return merklepath_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void VeriBlockPublication::set_allocated_merklepath(std::string* merklepath) {
  if (merklepath != nullptr) {
    
  } else {
    
  }
  merklepath_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), merklepath);
  // @@protoc_insertion_point(field_set_allocated:VeriBlock.VeriBlockPublication.merklePath)
}

// .VeriBlock.VeriBlockBlock containingBlock = 3;
inline bool VeriBlockPublication::has_containingblock() const {
  return this != internal_default_instance() && containingblock_ != nullptr;
}
inline void VeriBlockPublication::clear_containingblock() {
  if (GetArenaNoVirtual() == nullptr && containingblock_ != nullptr) {
    delete containingblock_;
  }
  containingblock_ = nullptr;
}
inline const ::VeriBlock::VeriBlockBlock& VeriBlockPublication::containingblock() const {
  const ::VeriBlock::VeriBlockBlock* p = containingblock_;
  // @@protoc_insertion_point(field_get:VeriBlock.VeriBlockPublication.containingBlock)
  return p != nullptr ? *p : *reinterpret_cast<const ::VeriBlock::VeriBlockBlock*>(
      &::VeriBlock::_VeriBlockBlock_default_instance_);
}
inline ::VeriBlock::VeriBlockBlock* VeriBlockPublication::release_containingblock() {
  // @@protoc_insertion_point(field_release:VeriBlock.VeriBlockPublication.containingBlock)
  
  ::VeriBlock::VeriBlockBlock* temp = containingblock_;
  containingblock_ = nullptr;
  return temp;
}
inline ::VeriBlock::VeriBlockBlock* VeriBlockPublication::mutable_containingblock() {
  
  if (containingblock_ == nullptr) {
    auto* p = CreateMaybeMessage<::VeriBlock::VeriBlockBlock>(GetArenaNoVirtual());
    containingblock_ = p;
  }
  // @@protoc_insertion_point(field_mutable:VeriBlock.VeriBlockPublication.containingBlock)
  return containingblock_;
}
inline void VeriBlockPublication::set_allocated_containingblock(::VeriBlock::VeriBlockBlock* containingblock) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete containingblock_;
  }
  if (containingblock) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      containingblock = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, containingblock, submessage_arena);
    }
    
  } else {
    
  }
  containingblock_ = containingblock;
  // @@protoc_insertion_point(field_set_allocated:VeriBlock.VeriBlockPublication.containingBlock)
}

// repeated .VeriBlock.VeriBlockBlock context = 4;
inline int VeriBlockPublication::context_size() const {
  return context_.size();
}
inline void VeriBlockPublication::clear_context() {
  context_.Clear();
}
inline ::VeriBlock::VeriBlockBlock* VeriBlockPublication::mutable_context(int index) {
  // @@protoc_insertion_point(field_mutable:VeriBlock.VeriBlockPublication.context)
  return context_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::VeriBlock::VeriBlockBlock >*
VeriBlockPublication::mutable_context() {
  // @@protoc_insertion_point(field_mutable_list:VeriBlock.VeriBlockPublication.context)
  return &context_;
}
inline const ::VeriBlock::VeriBlockBlock& VeriBlockPublication::context(int index) const {
  // @@protoc_insertion_point(field_get:VeriBlock.VeriBlockPublication.context)
  return context_.Get(index);
}
inline ::VeriBlock::VeriBlockBlock* VeriBlockPublication::add_context() {
  // @@protoc_insertion_point(field_add:VeriBlock.VeriBlockPublication.context)
  return context_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::VeriBlock::VeriBlockBlock >&
VeriBlockPublication::context() const {
  // @@protoc_insertion_point(field_list:VeriBlock.VeriBlockPublication.context)
  return context_;
}

// -------------------------------------------------------------------

// EmptyRequest

// -------------------------------------------------------------------

// GeneralReply

// bool result = 1;
inline void GeneralReply::clear_result() {
  result_ = false;
}
inline bool GeneralReply::result() const {
  // @@protoc_insertion_point(field_get:VeriBlock.GeneralReply.result)
  return result_;
}
inline void GeneralReply::set_result(bool value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:VeriBlock.GeneralReply.result)
}

// string resultMessage = 2;
inline void GeneralReply::clear_resultmessage() {
  resultmessage_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GeneralReply::resultmessage() const {
  // @@protoc_insertion_point(field_get:VeriBlock.GeneralReply.resultMessage)
  return resultmessage_.GetNoArena();
}
inline void GeneralReply::set_resultmessage(const std::string& value) {
  
  resultmessage_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:VeriBlock.GeneralReply.resultMessage)
}
inline void GeneralReply::set_resultmessage(std::string&& value) {
  
  resultmessage_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:VeriBlock.GeneralReply.resultMessage)
}
inline void GeneralReply::set_resultmessage(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  resultmessage_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:VeriBlock.GeneralReply.resultMessage)
}
inline void GeneralReply::set_resultmessage(const char* value, size_t size) {
  
  resultmessage_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:VeriBlock.GeneralReply.resultMessage)
}
inline std::string* GeneralReply::mutable_resultmessage() {
  
  // @@protoc_insertion_point(field_mutable:VeriBlock.GeneralReply.resultMessage)
  return resultmessage_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GeneralReply::release_resultmessage() {
  // @@protoc_insertion_point(field_release:VeriBlock.GeneralReply.resultMessage)
  
  return resultmessage_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GeneralReply::set_allocated_resultmessage(std::string* resultmessage) {
  if (resultmessage != nullptr) {
    
  } else {
    
  }
  resultmessage_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), resultmessage);
  // @@protoc_insertion_point(field_set_allocated:VeriBlock.GeneralReply.resultMessage)
}

// -------------------------------------------------------------------

// BlockIndex

// int64 height = 1;
inline void BlockIndex::clear_height() {
  height_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 BlockIndex::height() const {
  // @@protoc_insertion_point(field_get:VeriBlock.BlockIndex.height)
  return height_;
}
inline void BlockIndex::set_height(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  height_ = value;
  // @@protoc_insertion_point(field_set:VeriBlock.BlockIndex.height)
}

// string hash = 2;
inline void BlockIndex::clear_hash() {
  hash_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& BlockIndex::hash() const {
  // @@protoc_insertion_point(field_get:VeriBlock.BlockIndex.hash)
  return hash_.GetNoArena();
}
inline void BlockIndex::set_hash(const std::string& value) {
  
  hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:VeriBlock.BlockIndex.hash)
}
inline void BlockIndex::set_hash(std::string&& value) {
  
  hash_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:VeriBlock.BlockIndex.hash)
}
inline void BlockIndex::set_hash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:VeriBlock.BlockIndex.hash)
}
inline void BlockIndex::set_hash(const char* value, size_t size) {
  
  hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:VeriBlock.BlockIndex.hash)
}
inline std::string* BlockIndex::mutable_hash() {
  
  // @@protoc_insertion_point(field_mutable:VeriBlock.BlockIndex.hash)
  return hash_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* BlockIndex::release_hash() {
  // @@protoc_insertion_point(field_release:VeriBlock.BlockIndex.hash)
  
  return hash_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void BlockIndex::set_allocated_hash(std::string* hash) {
  if (hash != nullptr) {
    
  } else {
    
  }
  hash_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), hash);
  // @@protoc_insertion_point(field_set_allocated:VeriBlock.BlockIndex.hash)
}

// -------------------------------------------------------------------

// AddPayloadsRequest

// .VeriBlock.BlockIndex blockIndex = 1;
inline bool AddPayloadsRequest::has_blockindex() const {
  return this != internal_default_instance() && blockindex_ != nullptr;
}
inline void AddPayloadsRequest::clear_blockindex() {
  if (GetArenaNoVirtual() == nullptr && blockindex_ != nullptr) {
    delete blockindex_;
  }
  blockindex_ = nullptr;
}
inline const ::VeriBlock::BlockIndex& AddPayloadsRequest::blockindex() const {
  const ::VeriBlock::BlockIndex* p = blockindex_;
  // @@protoc_insertion_point(field_get:VeriBlock.AddPayloadsRequest.blockIndex)
  return p != nullptr ? *p : *reinterpret_cast<const ::VeriBlock::BlockIndex*>(
      &::VeriBlock::_BlockIndex_default_instance_);
}
inline ::VeriBlock::BlockIndex* AddPayloadsRequest::release_blockindex() {
  // @@protoc_insertion_point(field_release:VeriBlock.AddPayloadsRequest.blockIndex)
  
  ::VeriBlock::BlockIndex* temp = blockindex_;
  blockindex_ = nullptr;
  return temp;
}
inline ::VeriBlock::BlockIndex* AddPayloadsRequest::mutable_blockindex() {
  
  if (blockindex_ == nullptr) {
    auto* p = CreateMaybeMessage<::VeriBlock::BlockIndex>(GetArenaNoVirtual());
    blockindex_ = p;
  }
  // @@protoc_insertion_point(field_mutable:VeriBlock.AddPayloadsRequest.blockIndex)
  return blockindex_;
}
inline void AddPayloadsRequest::set_allocated_blockindex(::VeriBlock::BlockIndex* blockindex) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete blockindex_;
  }
  if (blockindex) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      blockindex = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, blockindex, submessage_arena);
    }
    
  } else {
    
  }
  blockindex_ = blockindex;
  // @@protoc_insertion_point(field_set_allocated:VeriBlock.AddPayloadsRequest.blockIndex)
}

// repeated .VeriBlock.VeriBlockPublication veriblockPublications = 2;
inline int AddPayloadsRequest::veriblockpublications_size() const {
  return veriblockpublications_.size();
}
inline void AddPayloadsRequest::clear_veriblockpublications() {
  veriblockpublications_.Clear();
}
inline ::VeriBlock::VeriBlockPublication* AddPayloadsRequest::mutable_veriblockpublications(int index) {
  // @@protoc_insertion_point(field_mutable:VeriBlock.AddPayloadsRequest.veriblockPublications)
  return veriblockpublications_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::VeriBlock::VeriBlockPublication >*
AddPayloadsRequest::mutable_veriblockpublications() {
  // @@protoc_insertion_point(field_mutable_list:VeriBlock.AddPayloadsRequest.veriblockPublications)
  return &veriblockpublications_;
}
inline const ::VeriBlock::VeriBlockPublication& AddPayloadsRequest::veriblockpublications(int index) const {
  // @@protoc_insertion_point(field_get:VeriBlock.AddPayloadsRequest.veriblockPublications)
  return veriblockpublications_.Get(index);
}
inline ::VeriBlock::VeriBlockPublication* AddPayloadsRequest::add_veriblockpublications() {
  // @@protoc_insertion_point(field_add:VeriBlock.AddPayloadsRequest.veriblockPublications)
  return veriblockpublications_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::VeriBlock::VeriBlockPublication >&
AddPayloadsRequest::veriblockpublications() const {
  // @@protoc_insertion_point(field_list:VeriBlock.AddPayloadsRequest.veriblockPublications)
  return veriblockpublications_;
}

// repeated .VeriBlock.AltPublication altPublications = 3;
inline int AddPayloadsRequest::altpublications_size() const {
  return altpublications_.size();
}
inline void AddPayloadsRequest::clear_altpublications() {
  altpublications_.Clear();
}
inline ::VeriBlock::AltPublication* AddPayloadsRequest::mutable_altpublications(int index) {
  // @@protoc_insertion_point(field_mutable:VeriBlock.AddPayloadsRequest.altPublications)
  return altpublications_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::VeriBlock::AltPublication >*
AddPayloadsRequest::mutable_altpublications() {
  // @@protoc_insertion_point(field_mutable_list:VeriBlock.AddPayloadsRequest.altPublications)
  return &altpublications_;
}
inline const ::VeriBlock::AltPublication& AddPayloadsRequest::altpublications(int index) const {
  // @@protoc_insertion_point(field_get:VeriBlock.AddPayloadsRequest.altPublications)
  return altpublications_.Get(index);
}
inline ::VeriBlock::AltPublication* AddPayloadsRequest::add_altpublications() {
  // @@protoc_insertion_point(field_add:VeriBlock.AddPayloadsRequest.altPublications)
  return altpublications_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::VeriBlock::AltPublication >&
AddPayloadsRequest::altpublications() const {
  // @@protoc_insertion_point(field_list:VeriBlock.AddPayloadsRequest.altPublications)
  return altpublications_;
}

// -------------------------------------------------------------------

// AddTemporaryPayloadsRequest

// repeated .VeriBlock.VeriBlockPublication veriblockPublications = 1;
inline int AddTemporaryPayloadsRequest::veriblockpublications_size() const {
  return veriblockpublications_.size();
}
inline void AddTemporaryPayloadsRequest::clear_veriblockpublications() {
  veriblockpublications_.Clear();
}
inline ::VeriBlock::VeriBlockPublication* AddTemporaryPayloadsRequest::mutable_veriblockpublications(int index) {
  // @@protoc_insertion_point(field_mutable:VeriBlock.AddTemporaryPayloadsRequest.veriblockPublications)
  return veriblockpublications_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::VeriBlock::VeriBlockPublication >*
AddTemporaryPayloadsRequest::mutable_veriblockpublications() {
  // @@protoc_insertion_point(field_mutable_list:VeriBlock.AddTemporaryPayloadsRequest.veriblockPublications)
  return &veriblockpublications_;
}
inline const ::VeriBlock::VeriBlockPublication& AddTemporaryPayloadsRequest::veriblockpublications(int index) const {
  // @@protoc_insertion_point(field_get:VeriBlock.AddTemporaryPayloadsRequest.veriblockPublications)
  return veriblockpublications_.Get(index);
}
inline ::VeriBlock::VeriBlockPublication* AddTemporaryPayloadsRequest::add_veriblockpublications() {
  // @@protoc_insertion_point(field_add:VeriBlock.AddTemporaryPayloadsRequest.veriblockPublications)
  return veriblockpublications_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::VeriBlock::VeriBlockPublication >&
AddTemporaryPayloadsRequest::veriblockpublications() const {
  // @@protoc_insertion_point(field_list:VeriBlock.AddTemporaryPayloadsRequest.veriblockPublications)
  return veriblockpublications_;
}

// repeated .VeriBlock.AltPublication altPublications = 2;
inline int AddTemporaryPayloadsRequest::altpublications_size() const {
  return altpublications_.size();
}
inline void AddTemporaryPayloadsRequest::clear_altpublications() {
  altpublications_.Clear();
}
inline ::VeriBlock::AltPublication* AddTemporaryPayloadsRequest::mutable_altpublications(int index) {
  // @@protoc_insertion_point(field_mutable:VeriBlock.AddTemporaryPayloadsRequest.altPublications)
  return altpublications_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::VeriBlock::AltPublication >*
AddTemporaryPayloadsRequest::mutable_altpublications() {
  // @@protoc_insertion_point(field_mutable_list:VeriBlock.AddTemporaryPayloadsRequest.altPublications)
  return &altpublications_;
}
inline const ::VeriBlock::AltPublication& AddTemporaryPayloadsRequest::altpublications(int index) const {
  // @@protoc_insertion_point(field_get:VeriBlock.AddTemporaryPayloadsRequest.altPublications)
  return altpublications_.Get(index);
}
inline ::VeriBlock::AltPublication* AddTemporaryPayloadsRequest::add_altpublications() {
  // @@protoc_insertion_point(field_add:VeriBlock.AddTemporaryPayloadsRequest.altPublications)
  return altpublications_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::VeriBlock::AltPublication >&
AddTemporaryPayloadsRequest::altpublications() const {
  // @@protoc_insertion_point(field_list:VeriBlock.AddTemporaryPayloadsRequest.altPublications)
  return altpublications_;
}

// -------------------------------------------------------------------

// SimplifyVTBsRequest

// repeated .VeriBlock.VeriBlockPublication veriblockPublications = 1;
inline int SimplifyVTBsRequest::veriblockpublications_size() const {
  return veriblockpublications_.size();
}
inline void SimplifyVTBsRequest::clear_veriblockpublications() {
  veriblockpublications_.Clear();
}
inline ::VeriBlock::VeriBlockPublication* SimplifyVTBsRequest::mutable_veriblockpublications(int index) {
  // @@protoc_insertion_point(field_mutable:VeriBlock.SimplifyVTBsRequest.veriblockPublications)
  return veriblockpublications_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::VeriBlock::VeriBlockPublication >*
SimplifyVTBsRequest::mutable_veriblockpublications() {
  // @@protoc_insertion_point(field_mutable_list:VeriBlock.SimplifyVTBsRequest.veriblockPublications)
  return &veriblockpublications_;
}
inline const ::VeriBlock::VeriBlockPublication& SimplifyVTBsRequest::veriblockpublications(int index) const {
  // @@protoc_insertion_point(field_get:VeriBlock.SimplifyVTBsRequest.veriblockPublications)
  return veriblockpublications_.Get(index);
}
inline ::VeriBlock::VeriBlockPublication* SimplifyVTBsRequest::add_veriblockpublications() {
  // @@protoc_insertion_point(field_add:VeriBlock.SimplifyVTBsRequest.veriblockPublications)
  return veriblockpublications_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::VeriBlock::VeriBlockPublication >&
SimplifyVTBsRequest::veriblockpublications() const {
  // @@protoc_insertion_point(field_list:VeriBlock.SimplifyVTBsRequest.veriblockPublications)
  return veriblockpublications_;
}

// -------------------------------------------------------------------

// SimplifyVTBsReply

// .VeriBlock.GeneralReply result = 1;
inline bool SimplifyVTBsReply::has_result() const {
  return this != internal_default_instance() && result_ != nullptr;
}
inline void SimplifyVTBsReply::clear_result() {
  if (GetArenaNoVirtual() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
}
inline const ::VeriBlock::GeneralReply& SimplifyVTBsReply::result() const {
  const ::VeriBlock::GeneralReply* p = result_;
  // @@protoc_insertion_point(field_get:VeriBlock.SimplifyVTBsReply.result)
  return p != nullptr ? *p : *reinterpret_cast<const ::VeriBlock::GeneralReply*>(
      &::VeriBlock::_GeneralReply_default_instance_);
}
inline ::VeriBlock::GeneralReply* SimplifyVTBsReply::release_result() {
  // @@protoc_insertion_point(field_release:VeriBlock.SimplifyVTBsReply.result)
  
  ::VeriBlock::GeneralReply* temp = result_;
  result_ = nullptr;
  return temp;
}
inline ::VeriBlock::GeneralReply* SimplifyVTBsReply::mutable_result() {
  
  if (result_ == nullptr) {
    auto* p = CreateMaybeMessage<::VeriBlock::GeneralReply>(GetArenaNoVirtual());
    result_ = p;
  }
  // @@protoc_insertion_point(field_mutable:VeriBlock.SimplifyVTBsReply.result)
  return result_;
}
inline void SimplifyVTBsReply::set_allocated_result(::VeriBlock::GeneralReply* result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete result_;
  }
  if (result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result, submessage_arena);
    }
    
  } else {
    
  }
  result_ = result;
  // @@protoc_insertion_point(field_set_allocated:VeriBlock.SimplifyVTBsReply.result)
}

// repeated .VeriBlock.VeriBlockPublication veriblockPublications = 2;
inline int SimplifyVTBsReply::veriblockpublications_size() const {
  return veriblockpublications_.size();
}
inline void SimplifyVTBsReply::clear_veriblockpublications() {
  veriblockpublications_.Clear();
}
inline ::VeriBlock::VeriBlockPublication* SimplifyVTBsReply::mutable_veriblockpublications(int index) {
  // @@protoc_insertion_point(field_mutable:VeriBlock.SimplifyVTBsReply.veriblockPublications)
  return veriblockpublications_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::VeriBlock::VeriBlockPublication >*
SimplifyVTBsReply::mutable_veriblockpublications() {
  // @@protoc_insertion_point(field_mutable_list:VeriBlock.SimplifyVTBsReply.veriblockPublications)
  return &veriblockpublications_;
}
inline const ::VeriBlock::VeriBlockPublication& SimplifyVTBsReply::veriblockpublications(int index) const {
  // @@protoc_insertion_point(field_get:VeriBlock.SimplifyVTBsReply.veriblockPublications)
  return veriblockpublications_.Get(index);
}
inline ::VeriBlock::VeriBlockPublication* SimplifyVTBsReply::add_veriblockpublications() {
  // @@protoc_insertion_point(field_add:VeriBlock.SimplifyVTBsReply.veriblockPublications)
  return veriblockpublications_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::VeriBlock::VeriBlockPublication >&
SimplifyVTBsReply::veriblockpublications() const {
  // @@protoc_insertion_point(field_list:VeriBlock.SimplifyVTBsReply.veriblockPublications)
  return veriblockpublications_;
}

// -------------------------------------------------------------------

// GetMainVBKHeightOfATVReply

// .VeriBlock.GeneralReply result = 1;
inline bool GetMainVBKHeightOfATVReply::has_result() const {
  return this != internal_default_instance() && result_ != nullptr;
}
inline void GetMainVBKHeightOfATVReply::clear_result() {
  if (GetArenaNoVirtual() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
}
inline const ::VeriBlock::GeneralReply& GetMainVBKHeightOfATVReply::result() const {
  const ::VeriBlock::GeneralReply* p = result_;
  // @@protoc_insertion_point(field_get:VeriBlock.GetMainVBKHeightOfATVReply.result)
  return p != nullptr ? *p : *reinterpret_cast<const ::VeriBlock::GeneralReply*>(
      &::VeriBlock::_GeneralReply_default_instance_);
}
inline ::VeriBlock::GeneralReply* GetMainVBKHeightOfATVReply::release_result() {
  // @@protoc_insertion_point(field_release:VeriBlock.GetMainVBKHeightOfATVReply.result)
  
  ::VeriBlock::GeneralReply* temp = result_;
  result_ = nullptr;
  return temp;
}
inline ::VeriBlock::GeneralReply* GetMainVBKHeightOfATVReply::mutable_result() {
  
  if (result_ == nullptr) {
    auto* p = CreateMaybeMessage<::VeriBlock::GeneralReply>(GetArenaNoVirtual());
    result_ = p;
  }
  // @@protoc_insertion_point(field_mutable:VeriBlock.GetMainVBKHeightOfATVReply.result)
  return result_;
}
inline void GetMainVBKHeightOfATVReply::set_allocated_result(::VeriBlock::GeneralReply* result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete result_;
  }
  if (result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result, submessage_arena);
    }
    
  } else {
    
  }
  result_ = result;
  // @@protoc_insertion_point(field_set_allocated:VeriBlock.GetMainVBKHeightOfATVReply.result)
}

// int32 height = 2;
inline void GetMainVBKHeightOfATVReply::clear_height() {
  height_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetMainVBKHeightOfATVReply::height() const {
  // @@protoc_insertion_point(field_get:VeriBlock.GetMainVBKHeightOfATVReply.height)
  return height_;
}
inline void GetMainVBKHeightOfATVReply::set_height(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  height_ = value;
  // @@protoc_insertion_point(field_set:VeriBlock.GetMainVBKHeightOfATVReply.height)
}

// -------------------------------------------------------------------

// RemovePayloadsRequest

// .VeriBlock.BlockIndex blockIndex = 1;
inline bool RemovePayloadsRequest::has_blockindex() const {
  return this != internal_default_instance() && blockindex_ != nullptr;
}
inline void RemovePayloadsRequest::clear_blockindex() {
  if (GetArenaNoVirtual() == nullptr && blockindex_ != nullptr) {
    delete blockindex_;
  }
  blockindex_ = nullptr;
}
inline const ::VeriBlock::BlockIndex& RemovePayloadsRequest::blockindex() const {
  const ::VeriBlock::BlockIndex* p = blockindex_;
  // @@protoc_insertion_point(field_get:VeriBlock.RemovePayloadsRequest.blockIndex)
  return p != nullptr ? *p : *reinterpret_cast<const ::VeriBlock::BlockIndex*>(
      &::VeriBlock::_BlockIndex_default_instance_);
}
inline ::VeriBlock::BlockIndex* RemovePayloadsRequest::release_blockindex() {
  // @@protoc_insertion_point(field_release:VeriBlock.RemovePayloadsRequest.blockIndex)
  
  ::VeriBlock::BlockIndex* temp = blockindex_;
  blockindex_ = nullptr;
  return temp;
}
inline ::VeriBlock::BlockIndex* RemovePayloadsRequest::mutable_blockindex() {
  
  if (blockindex_ == nullptr) {
    auto* p = CreateMaybeMessage<::VeriBlock::BlockIndex>(GetArenaNoVirtual());
    blockindex_ = p;
  }
  // @@protoc_insertion_point(field_mutable:VeriBlock.RemovePayloadsRequest.blockIndex)
  return blockindex_;
}
inline void RemovePayloadsRequest::set_allocated_blockindex(::VeriBlock::BlockIndex* blockindex) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete blockindex_;
  }
  if (blockindex) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      blockindex = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, blockindex, submessage_arena);
    }
    
  } else {
    
  }
  blockindex_ = blockindex;
  // @@protoc_insertion_point(field_set_allocated:VeriBlock.RemovePayloadsRequest.blockIndex)
}

// -------------------------------------------------------------------

// AltChainConfigRequest

// int32 keystoneInterval = 1;
inline void AltChainConfigRequest::clear_keystoneinterval() {
  keystoneinterval_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AltChainConfigRequest::keystoneinterval() const {
  // @@protoc_insertion_point(field_get:VeriBlock.AltChainConfigRequest.keystoneInterval)
  return keystoneinterval_;
}
inline void AltChainConfigRequest::set_keystoneinterval(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  keystoneinterval_ = value;
  // @@protoc_insertion_point(field_set:VeriBlock.AltChainConfigRequest.keystoneInterval)
}

// -------------------------------------------------------------------

// GetLastKnownBlocksRequest

// int32 maxBlockCount = 1;
inline void GetLastKnownBlocksRequest::clear_maxblockcount() {
  maxblockcount_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetLastKnownBlocksRequest::maxblockcount() const {
  // @@protoc_insertion_point(field_get:VeriBlock.GetLastKnownBlocksRequest.maxBlockCount)
  return maxblockcount_;
}
inline void GetLastKnownBlocksRequest::set_maxblockcount(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  maxblockcount_ = value;
  // @@protoc_insertion_point(field_set:VeriBlock.GetLastKnownBlocksRequest.maxBlockCount)
}

// -------------------------------------------------------------------

// GetLastKnownVBKBlocksReply

// .VeriBlock.GeneralReply result = 1;
inline bool GetLastKnownVBKBlocksReply::has_result() const {
  return this != internal_default_instance() && result_ != nullptr;
}
inline void GetLastKnownVBKBlocksReply::clear_result() {
  if (GetArenaNoVirtual() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
}
inline const ::VeriBlock::GeneralReply& GetLastKnownVBKBlocksReply::result() const {
  const ::VeriBlock::GeneralReply* p = result_;
  // @@protoc_insertion_point(field_get:VeriBlock.GetLastKnownVBKBlocksReply.result)
  return p != nullptr ? *p : *reinterpret_cast<const ::VeriBlock::GeneralReply*>(
      &::VeriBlock::_GeneralReply_default_instance_);
}
inline ::VeriBlock::GeneralReply* GetLastKnownVBKBlocksReply::release_result() {
  // @@protoc_insertion_point(field_release:VeriBlock.GetLastKnownVBKBlocksReply.result)
  
  ::VeriBlock::GeneralReply* temp = result_;
  result_ = nullptr;
  return temp;
}
inline ::VeriBlock::GeneralReply* GetLastKnownVBKBlocksReply::mutable_result() {
  
  if (result_ == nullptr) {
    auto* p = CreateMaybeMessage<::VeriBlock::GeneralReply>(GetArenaNoVirtual());
    result_ = p;
  }
  // @@protoc_insertion_point(field_mutable:VeriBlock.GetLastKnownVBKBlocksReply.result)
  return result_;
}
inline void GetLastKnownVBKBlocksReply::set_allocated_result(::VeriBlock::GeneralReply* result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete result_;
  }
  if (result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result, submessage_arena);
    }
    
  } else {
    
  }
  result_ = result;
  // @@protoc_insertion_point(field_set_allocated:VeriBlock.GetLastKnownVBKBlocksReply.result)
}

// repeated bytes blocks = 2 [(.VeriBlock.hex_encoded) = true];
inline int GetLastKnownVBKBlocksReply::blocks_size() const {
  return blocks_.size();
}
inline void GetLastKnownVBKBlocksReply::clear_blocks() {
  blocks_.Clear();
}
inline const std::string& GetLastKnownVBKBlocksReply::blocks(int index) const {
  // @@protoc_insertion_point(field_get:VeriBlock.GetLastKnownVBKBlocksReply.blocks)
  return blocks_.Get(index);
}
inline std::string* GetLastKnownVBKBlocksReply::mutable_blocks(int index) {
  // @@protoc_insertion_point(field_mutable:VeriBlock.GetLastKnownVBKBlocksReply.blocks)
  return blocks_.Mutable(index);
}
inline void GetLastKnownVBKBlocksReply::set_blocks(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:VeriBlock.GetLastKnownVBKBlocksReply.blocks)
  blocks_.Mutable(index)->assign(value);
}
inline void GetLastKnownVBKBlocksReply::set_blocks(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:VeriBlock.GetLastKnownVBKBlocksReply.blocks)
  blocks_.Mutable(index)->assign(std::move(value));
}
inline void GetLastKnownVBKBlocksReply::set_blocks(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  blocks_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:VeriBlock.GetLastKnownVBKBlocksReply.blocks)
}
inline void GetLastKnownVBKBlocksReply::set_blocks(int index, const void* value, size_t size) {
  blocks_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:VeriBlock.GetLastKnownVBKBlocksReply.blocks)
}
inline std::string* GetLastKnownVBKBlocksReply::add_blocks() {
  // @@protoc_insertion_point(field_add_mutable:VeriBlock.GetLastKnownVBKBlocksReply.blocks)
  return blocks_.Add();
}
inline void GetLastKnownVBKBlocksReply::add_blocks(const std::string& value) {
  blocks_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:VeriBlock.GetLastKnownVBKBlocksReply.blocks)
}
inline void GetLastKnownVBKBlocksReply::add_blocks(std::string&& value) {
  blocks_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:VeriBlock.GetLastKnownVBKBlocksReply.blocks)
}
inline void GetLastKnownVBKBlocksReply::add_blocks(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  blocks_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:VeriBlock.GetLastKnownVBKBlocksReply.blocks)
}
inline void GetLastKnownVBKBlocksReply::add_blocks(const void* value, size_t size) {
  blocks_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:VeriBlock.GetLastKnownVBKBlocksReply.blocks)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
GetLastKnownVBKBlocksReply::blocks() const {
  // @@protoc_insertion_point(field_list:VeriBlock.GetLastKnownVBKBlocksReply.blocks)
  return blocks_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
GetLastKnownVBKBlocksReply::mutable_blocks() {
  // @@protoc_insertion_point(field_mutable_list:VeriBlock.GetLastKnownVBKBlocksReply.blocks)
  return &blocks_;
}

// -------------------------------------------------------------------

// GetLastKnownBTCBlocksReply

// .VeriBlock.GeneralReply result = 1;
inline bool GetLastKnownBTCBlocksReply::has_result() const {
  return this != internal_default_instance() && result_ != nullptr;
}
inline void GetLastKnownBTCBlocksReply::clear_result() {
  if (GetArenaNoVirtual() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
}
inline const ::VeriBlock::GeneralReply& GetLastKnownBTCBlocksReply::result() const {
  const ::VeriBlock::GeneralReply* p = result_;
  // @@protoc_insertion_point(field_get:VeriBlock.GetLastKnownBTCBlocksReply.result)
  return p != nullptr ? *p : *reinterpret_cast<const ::VeriBlock::GeneralReply*>(
      &::VeriBlock::_GeneralReply_default_instance_);
}
inline ::VeriBlock::GeneralReply* GetLastKnownBTCBlocksReply::release_result() {
  // @@protoc_insertion_point(field_release:VeriBlock.GetLastKnownBTCBlocksReply.result)
  
  ::VeriBlock::GeneralReply* temp = result_;
  result_ = nullptr;
  return temp;
}
inline ::VeriBlock::GeneralReply* GetLastKnownBTCBlocksReply::mutable_result() {
  
  if (result_ == nullptr) {
    auto* p = CreateMaybeMessage<::VeriBlock::GeneralReply>(GetArenaNoVirtual());
    result_ = p;
  }
  // @@protoc_insertion_point(field_mutable:VeriBlock.GetLastKnownBTCBlocksReply.result)
  return result_;
}
inline void GetLastKnownBTCBlocksReply::set_allocated_result(::VeriBlock::GeneralReply* result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete result_;
  }
  if (result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result, submessage_arena);
    }
    
  } else {
    
  }
  result_ = result;
  // @@protoc_insertion_point(field_set_allocated:VeriBlock.GetLastKnownBTCBlocksReply.result)
}

// repeated bytes blocks = 2 [(.VeriBlock.hex_encoded) = true];
inline int GetLastKnownBTCBlocksReply::blocks_size() const {
  return blocks_.size();
}
inline void GetLastKnownBTCBlocksReply::clear_blocks() {
  blocks_.Clear();
}
inline const std::string& GetLastKnownBTCBlocksReply::blocks(int index) const {
  // @@protoc_insertion_point(field_get:VeriBlock.GetLastKnownBTCBlocksReply.blocks)
  return blocks_.Get(index);
}
inline std::string* GetLastKnownBTCBlocksReply::mutable_blocks(int index) {
  // @@protoc_insertion_point(field_mutable:VeriBlock.GetLastKnownBTCBlocksReply.blocks)
  return blocks_.Mutable(index);
}
inline void GetLastKnownBTCBlocksReply::set_blocks(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:VeriBlock.GetLastKnownBTCBlocksReply.blocks)
  blocks_.Mutable(index)->assign(value);
}
inline void GetLastKnownBTCBlocksReply::set_blocks(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:VeriBlock.GetLastKnownBTCBlocksReply.blocks)
  blocks_.Mutable(index)->assign(std::move(value));
}
inline void GetLastKnownBTCBlocksReply::set_blocks(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  blocks_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:VeriBlock.GetLastKnownBTCBlocksReply.blocks)
}
inline void GetLastKnownBTCBlocksReply::set_blocks(int index, const void* value, size_t size) {
  blocks_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:VeriBlock.GetLastKnownBTCBlocksReply.blocks)
}
inline std::string* GetLastKnownBTCBlocksReply::add_blocks() {
  // @@protoc_insertion_point(field_add_mutable:VeriBlock.GetLastKnownBTCBlocksReply.blocks)
  return blocks_.Add();
}
inline void GetLastKnownBTCBlocksReply::add_blocks(const std::string& value) {
  blocks_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:VeriBlock.GetLastKnownBTCBlocksReply.blocks)
}
inline void GetLastKnownBTCBlocksReply::add_blocks(std::string&& value) {
  blocks_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:VeriBlock.GetLastKnownBTCBlocksReply.blocks)
}
inline void GetLastKnownBTCBlocksReply::add_blocks(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  blocks_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:VeriBlock.GetLastKnownBTCBlocksReply.blocks)
}
inline void GetLastKnownBTCBlocksReply::add_blocks(const void* value, size_t size) {
  blocks_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:VeriBlock.GetLastKnownBTCBlocksReply.blocks)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
GetLastKnownBTCBlocksReply::blocks() const {
  // @@protoc_insertion_point(field_list:VeriBlock.GetLastKnownBTCBlocksReply.blocks)
  return blocks_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
GetLastKnownBTCBlocksReply::mutable_blocks() {
  // @@protoc_insertion_point(field_mutable_list:VeriBlock.GetLastKnownBTCBlocksReply.blocks)
  return &blocks_;
}

// -------------------------------------------------------------------

// RoundRatioConfig

// repeated string roundRatio = 1;
inline int RoundRatioConfig::roundratio_size() const {
  return roundratio_.size();
}
inline void RoundRatioConfig::clear_roundratio() {
  roundratio_.Clear();
}
inline const std::string& RoundRatioConfig::roundratio(int index) const {
  // @@protoc_insertion_point(field_get:VeriBlock.RoundRatioConfig.roundRatio)
  return roundratio_.Get(index);
}
inline std::string* RoundRatioConfig::mutable_roundratio(int index) {
  // @@protoc_insertion_point(field_mutable:VeriBlock.RoundRatioConfig.roundRatio)
  return roundratio_.Mutable(index);
}
inline void RoundRatioConfig::set_roundratio(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:VeriBlock.RoundRatioConfig.roundRatio)
  roundratio_.Mutable(index)->assign(value);
}
inline void RoundRatioConfig::set_roundratio(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:VeriBlock.RoundRatioConfig.roundRatio)
  roundratio_.Mutable(index)->assign(std::move(value));
}
inline void RoundRatioConfig::set_roundratio(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  roundratio_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:VeriBlock.RoundRatioConfig.roundRatio)
}
inline void RoundRatioConfig::set_roundratio(int index, const char* value, size_t size) {
  roundratio_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:VeriBlock.RoundRatioConfig.roundRatio)
}
inline std::string* RoundRatioConfig::add_roundratio() {
  // @@protoc_insertion_point(field_add_mutable:VeriBlock.RoundRatioConfig.roundRatio)
  return roundratio_.Add();
}
inline void RoundRatioConfig::add_roundratio(const std::string& value) {
  roundratio_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:VeriBlock.RoundRatioConfig.roundRatio)
}
inline void RoundRatioConfig::add_roundratio(std::string&& value) {
  roundratio_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:VeriBlock.RoundRatioConfig.roundRatio)
}
inline void RoundRatioConfig::add_roundratio(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  roundratio_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:VeriBlock.RoundRatioConfig.roundRatio)
}
inline void RoundRatioConfig::add_roundratio(const char* value, size_t size) {
  roundratio_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:VeriBlock.RoundRatioConfig.roundRatio)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
RoundRatioConfig::roundratio() const {
  // @@protoc_insertion_point(field_list:VeriBlock.RoundRatioConfig.roundRatio)
  return roundratio_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
RoundRatioConfig::mutable_roundratio() {
  // @@protoc_insertion_point(field_mutable_list:VeriBlock.RoundRatioConfig.roundRatio)
  return &roundratio_;
}

// -------------------------------------------------------------------

// RewardCurveConfig

// string startOfDecreasingLine = 1;
inline void RewardCurveConfig::clear_startofdecreasingline() {
  startofdecreasingline_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RewardCurveConfig::startofdecreasingline() const {
  // @@protoc_insertion_point(field_get:VeriBlock.RewardCurveConfig.startOfDecreasingLine)
  return startofdecreasingline_.GetNoArena();
}
inline void RewardCurveConfig::set_startofdecreasingline(const std::string& value) {
  
  startofdecreasingline_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:VeriBlock.RewardCurveConfig.startOfDecreasingLine)
}
inline void RewardCurveConfig::set_startofdecreasingline(std::string&& value) {
  
  startofdecreasingline_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:VeriBlock.RewardCurveConfig.startOfDecreasingLine)
}
inline void RewardCurveConfig::set_startofdecreasingline(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  startofdecreasingline_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:VeriBlock.RewardCurveConfig.startOfDecreasingLine)
}
inline void RewardCurveConfig::set_startofdecreasingline(const char* value, size_t size) {
  
  startofdecreasingline_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:VeriBlock.RewardCurveConfig.startOfDecreasingLine)
}
inline std::string* RewardCurveConfig::mutable_startofdecreasingline() {
  
  // @@protoc_insertion_point(field_mutable:VeriBlock.RewardCurveConfig.startOfDecreasingLine)
  return startofdecreasingline_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RewardCurveConfig::release_startofdecreasingline() {
  // @@protoc_insertion_point(field_release:VeriBlock.RewardCurveConfig.startOfDecreasingLine)
  
  return startofdecreasingline_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RewardCurveConfig::set_allocated_startofdecreasingline(std::string* startofdecreasingline) {
  if (startofdecreasingline != nullptr) {
    
  } else {
    
  }
  startofdecreasingline_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), startofdecreasingline);
  // @@protoc_insertion_point(field_set_allocated:VeriBlock.RewardCurveConfig.startOfDecreasingLine)
}

// string widthOfDecreasingLineNormal = 2;
inline void RewardCurveConfig::clear_widthofdecreasinglinenormal() {
  widthofdecreasinglinenormal_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RewardCurveConfig::widthofdecreasinglinenormal() const {
  // @@protoc_insertion_point(field_get:VeriBlock.RewardCurveConfig.widthOfDecreasingLineNormal)
  return widthofdecreasinglinenormal_.GetNoArena();
}
inline void RewardCurveConfig::set_widthofdecreasinglinenormal(const std::string& value) {
  
  widthofdecreasinglinenormal_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:VeriBlock.RewardCurveConfig.widthOfDecreasingLineNormal)
}
inline void RewardCurveConfig::set_widthofdecreasinglinenormal(std::string&& value) {
  
  widthofdecreasinglinenormal_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:VeriBlock.RewardCurveConfig.widthOfDecreasingLineNormal)
}
inline void RewardCurveConfig::set_widthofdecreasinglinenormal(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  widthofdecreasinglinenormal_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:VeriBlock.RewardCurveConfig.widthOfDecreasingLineNormal)
}
inline void RewardCurveConfig::set_widthofdecreasinglinenormal(const char* value, size_t size) {
  
  widthofdecreasinglinenormal_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:VeriBlock.RewardCurveConfig.widthOfDecreasingLineNormal)
}
inline std::string* RewardCurveConfig::mutable_widthofdecreasinglinenormal() {
  
  // @@protoc_insertion_point(field_mutable:VeriBlock.RewardCurveConfig.widthOfDecreasingLineNormal)
  return widthofdecreasinglinenormal_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RewardCurveConfig::release_widthofdecreasinglinenormal() {
  // @@protoc_insertion_point(field_release:VeriBlock.RewardCurveConfig.widthOfDecreasingLineNormal)
  
  return widthofdecreasinglinenormal_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RewardCurveConfig::set_allocated_widthofdecreasinglinenormal(std::string* widthofdecreasinglinenormal) {
  if (widthofdecreasinglinenormal != nullptr) {
    
  } else {
    
  }
  widthofdecreasinglinenormal_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), widthofdecreasinglinenormal);
  // @@protoc_insertion_point(field_set_allocated:VeriBlock.RewardCurveConfig.widthOfDecreasingLineNormal)
}

// string widthOfDecreasingLineKeystone = 3;
inline void RewardCurveConfig::clear_widthofdecreasinglinekeystone() {
  widthofdecreasinglinekeystone_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RewardCurveConfig::widthofdecreasinglinekeystone() const {
  // @@protoc_insertion_point(field_get:VeriBlock.RewardCurveConfig.widthOfDecreasingLineKeystone)
  return widthofdecreasinglinekeystone_.GetNoArena();
}
inline void RewardCurveConfig::set_widthofdecreasinglinekeystone(const std::string& value) {
  
  widthofdecreasinglinekeystone_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:VeriBlock.RewardCurveConfig.widthOfDecreasingLineKeystone)
}
inline void RewardCurveConfig::set_widthofdecreasinglinekeystone(std::string&& value) {
  
  widthofdecreasinglinekeystone_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:VeriBlock.RewardCurveConfig.widthOfDecreasingLineKeystone)
}
inline void RewardCurveConfig::set_widthofdecreasinglinekeystone(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  widthofdecreasinglinekeystone_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:VeriBlock.RewardCurveConfig.widthOfDecreasingLineKeystone)
}
inline void RewardCurveConfig::set_widthofdecreasinglinekeystone(const char* value, size_t size) {
  
  widthofdecreasinglinekeystone_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:VeriBlock.RewardCurveConfig.widthOfDecreasingLineKeystone)
}
inline std::string* RewardCurveConfig::mutable_widthofdecreasinglinekeystone() {
  
  // @@protoc_insertion_point(field_mutable:VeriBlock.RewardCurveConfig.widthOfDecreasingLineKeystone)
  return widthofdecreasinglinekeystone_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RewardCurveConfig::release_widthofdecreasinglinekeystone() {
  // @@protoc_insertion_point(field_release:VeriBlock.RewardCurveConfig.widthOfDecreasingLineKeystone)
  
  return widthofdecreasinglinekeystone_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RewardCurveConfig::set_allocated_widthofdecreasinglinekeystone(std::string* widthofdecreasinglinekeystone) {
  if (widthofdecreasinglinekeystone != nullptr) {
    
  } else {
    
  }
  widthofdecreasinglinekeystone_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), widthofdecreasinglinekeystone);
  // @@protoc_insertion_point(field_set_allocated:VeriBlock.RewardCurveConfig.widthOfDecreasingLineKeystone)
}

// string aboveIntendedPayoutMultiplierNormal = 4;
inline void RewardCurveConfig::clear_aboveintendedpayoutmultipliernormal() {
  aboveintendedpayoutmultipliernormal_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RewardCurveConfig::aboveintendedpayoutmultipliernormal() const {
  // @@protoc_insertion_point(field_get:VeriBlock.RewardCurveConfig.aboveIntendedPayoutMultiplierNormal)
  return aboveintendedpayoutmultipliernormal_.GetNoArena();
}
inline void RewardCurveConfig::set_aboveintendedpayoutmultipliernormal(const std::string& value) {
  
  aboveintendedpayoutmultipliernormal_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:VeriBlock.RewardCurveConfig.aboveIntendedPayoutMultiplierNormal)
}
inline void RewardCurveConfig::set_aboveintendedpayoutmultipliernormal(std::string&& value) {
  
  aboveintendedpayoutmultipliernormal_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:VeriBlock.RewardCurveConfig.aboveIntendedPayoutMultiplierNormal)
}
inline void RewardCurveConfig::set_aboveintendedpayoutmultipliernormal(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  aboveintendedpayoutmultipliernormal_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:VeriBlock.RewardCurveConfig.aboveIntendedPayoutMultiplierNormal)
}
inline void RewardCurveConfig::set_aboveintendedpayoutmultipliernormal(const char* value, size_t size) {
  
  aboveintendedpayoutmultipliernormal_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:VeriBlock.RewardCurveConfig.aboveIntendedPayoutMultiplierNormal)
}
inline std::string* RewardCurveConfig::mutable_aboveintendedpayoutmultipliernormal() {
  
  // @@protoc_insertion_point(field_mutable:VeriBlock.RewardCurveConfig.aboveIntendedPayoutMultiplierNormal)
  return aboveintendedpayoutmultipliernormal_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RewardCurveConfig::release_aboveintendedpayoutmultipliernormal() {
  // @@protoc_insertion_point(field_release:VeriBlock.RewardCurveConfig.aboveIntendedPayoutMultiplierNormal)
  
  return aboveintendedpayoutmultipliernormal_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RewardCurveConfig::set_allocated_aboveintendedpayoutmultipliernormal(std::string* aboveintendedpayoutmultipliernormal) {
  if (aboveintendedpayoutmultipliernormal != nullptr) {
    
  } else {
    
  }
  aboveintendedpayoutmultipliernormal_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), aboveintendedpayoutmultipliernormal);
  // @@protoc_insertion_point(field_set_allocated:VeriBlock.RewardCurveConfig.aboveIntendedPayoutMultiplierNormal)
}

// string aboveIntendedPayoutMultiplierKeystone = 5;
inline void RewardCurveConfig::clear_aboveintendedpayoutmultiplierkeystone() {
  aboveintendedpayoutmultiplierkeystone_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RewardCurveConfig::aboveintendedpayoutmultiplierkeystone() const {
  // @@protoc_insertion_point(field_get:VeriBlock.RewardCurveConfig.aboveIntendedPayoutMultiplierKeystone)
  return aboveintendedpayoutmultiplierkeystone_.GetNoArena();
}
inline void RewardCurveConfig::set_aboveintendedpayoutmultiplierkeystone(const std::string& value) {
  
  aboveintendedpayoutmultiplierkeystone_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:VeriBlock.RewardCurveConfig.aboveIntendedPayoutMultiplierKeystone)
}
inline void RewardCurveConfig::set_aboveintendedpayoutmultiplierkeystone(std::string&& value) {
  
  aboveintendedpayoutmultiplierkeystone_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:VeriBlock.RewardCurveConfig.aboveIntendedPayoutMultiplierKeystone)
}
inline void RewardCurveConfig::set_aboveintendedpayoutmultiplierkeystone(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  aboveintendedpayoutmultiplierkeystone_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:VeriBlock.RewardCurveConfig.aboveIntendedPayoutMultiplierKeystone)
}
inline void RewardCurveConfig::set_aboveintendedpayoutmultiplierkeystone(const char* value, size_t size) {
  
  aboveintendedpayoutmultiplierkeystone_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:VeriBlock.RewardCurveConfig.aboveIntendedPayoutMultiplierKeystone)
}
inline std::string* RewardCurveConfig::mutable_aboveintendedpayoutmultiplierkeystone() {
  
  // @@protoc_insertion_point(field_mutable:VeriBlock.RewardCurveConfig.aboveIntendedPayoutMultiplierKeystone)
  return aboveintendedpayoutmultiplierkeystone_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RewardCurveConfig::release_aboveintendedpayoutmultiplierkeystone() {
  // @@protoc_insertion_point(field_release:VeriBlock.RewardCurveConfig.aboveIntendedPayoutMultiplierKeystone)
  
  return aboveintendedpayoutmultiplierkeystone_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RewardCurveConfig::set_allocated_aboveintendedpayoutmultiplierkeystone(std::string* aboveintendedpayoutmultiplierkeystone) {
  if (aboveintendedpayoutmultiplierkeystone != nullptr) {
    
  } else {
    
  }
  aboveintendedpayoutmultiplierkeystone_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), aboveintendedpayoutmultiplierkeystone);
  // @@protoc_insertion_point(field_set_allocated:VeriBlock.RewardCurveConfig.aboveIntendedPayoutMultiplierKeystone)
}

// -------------------------------------------------------------------

// RelativeScoreConfig

// repeated string score = 1;
inline int RelativeScoreConfig::score_size() const {
  return score_.size();
}
inline void RelativeScoreConfig::clear_score() {
  score_.Clear();
}
inline const std::string& RelativeScoreConfig::score(int index) const {
  // @@protoc_insertion_point(field_get:VeriBlock.RelativeScoreConfig.score)
  return score_.Get(index);
}
inline std::string* RelativeScoreConfig::mutable_score(int index) {
  // @@protoc_insertion_point(field_mutable:VeriBlock.RelativeScoreConfig.score)
  return score_.Mutable(index);
}
inline void RelativeScoreConfig::set_score(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:VeriBlock.RelativeScoreConfig.score)
  score_.Mutable(index)->assign(value);
}
inline void RelativeScoreConfig::set_score(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:VeriBlock.RelativeScoreConfig.score)
  score_.Mutable(index)->assign(std::move(value));
}
inline void RelativeScoreConfig::set_score(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  score_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:VeriBlock.RelativeScoreConfig.score)
}
inline void RelativeScoreConfig::set_score(int index, const char* value, size_t size) {
  score_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:VeriBlock.RelativeScoreConfig.score)
}
inline std::string* RelativeScoreConfig::add_score() {
  // @@protoc_insertion_point(field_add_mutable:VeriBlock.RelativeScoreConfig.score)
  return score_.Add();
}
inline void RelativeScoreConfig::add_score(const std::string& value) {
  score_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:VeriBlock.RelativeScoreConfig.score)
}
inline void RelativeScoreConfig::add_score(std::string&& value) {
  score_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:VeriBlock.RelativeScoreConfig.score)
}
inline void RelativeScoreConfig::add_score(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  score_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:VeriBlock.RelativeScoreConfig.score)
}
inline void RelativeScoreConfig::add_score(const char* value, size_t size) {
  score_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:VeriBlock.RelativeScoreConfig.score)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
RelativeScoreConfig::score() const {
  // @@protoc_insertion_point(field_list:VeriBlock.RelativeScoreConfig.score)
  return score_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
RelativeScoreConfig::mutable_score() {
  // @@protoc_insertion_point(field_mutable_list:VeriBlock.RelativeScoreConfig.score)
  return &score_;
}

// -------------------------------------------------------------------

// FlatScoreRoundConfig

// int32 round = 1;
inline void FlatScoreRoundConfig::clear_round() {
  round_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FlatScoreRoundConfig::round() const {
  // @@protoc_insertion_point(field_get:VeriBlock.FlatScoreRoundConfig.round)
  return round_;
}
inline void FlatScoreRoundConfig::set_round(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  round_ = value;
  // @@protoc_insertion_point(field_set:VeriBlock.FlatScoreRoundConfig.round)
}

// bool active = 2;
inline void FlatScoreRoundConfig::clear_active() {
  active_ = false;
}
inline bool FlatScoreRoundConfig::active() const {
  // @@protoc_insertion_point(field_get:VeriBlock.FlatScoreRoundConfig.active)
  return active_;
}
inline void FlatScoreRoundConfig::set_active(bool value) {
  
  active_ = value;
  // @@protoc_insertion_point(field_set:VeriBlock.FlatScoreRoundConfig.active)
}

// -------------------------------------------------------------------

// CalculatorConfig

// string basicReward = 1;
inline void CalculatorConfig::clear_basicreward() {
  basicreward_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CalculatorConfig::basicreward() const {
  // @@protoc_insertion_point(field_get:VeriBlock.CalculatorConfig.basicReward)
  return basicreward_.GetNoArena();
}
inline void CalculatorConfig::set_basicreward(const std::string& value) {
  
  basicreward_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:VeriBlock.CalculatorConfig.basicReward)
}
inline void CalculatorConfig::set_basicreward(std::string&& value) {
  
  basicreward_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:VeriBlock.CalculatorConfig.basicReward)
}
inline void CalculatorConfig::set_basicreward(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  basicreward_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:VeriBlock.CalculatorConfig.basicReward)
}
inline void CalculatorConfig::set_basicreward(const char* value, size_t size) {
  
  basicreward_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:VeriBlock.CalculatorConfig.basicReward)
}
inline std::string* CalculatorConfig::mutable_basicreward() {
  
  // @@protoc_insertion_point(field_mutable:VeriBlock.CalculatorConfig.basicReward)
  return basicreward_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CalculatorConfig::release_basicreward() {
  // @@protoc_insertion_point(field_release:VeriBlock.CalculatorConfig.basicReward)
  
  return basicreward_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CalculatorConfig::set_allocated_basicreward(std::string* basicreward) {
  if (basicreward != nullptr) {
    
  } else {
    
  }
  basicreward_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), basicreward);
  // @@protoc_insertion_point(field_set_allocated:VeriBlock.CalculatorConfig.basicReward)
}

// int32 payoutRounds = 2;
inline void CalculatorConfig::clear_payoutrounds() {
  payoutrounds_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CalculatorConfig::payoutrounds() const {
  // @@protoc_insertion_point(field_get:VeriBlock.CalculatorConfig.payoutRounds)
  return payoutrounds_;
}
inline void CalculatorConfig::set_payoutrounds(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  payoutrounds_ = value;
  // @@protoc_insertion_point(field_set:VeriBlock.CalculatorConfig.payoutRounds)
}

// int32 keystoneRound = 3;
inline void CalculatorConfig::clear_keystoneround() {
  keystoneround_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CalculatorConfig::keystoneround() const {
  // @@protoc_insertion_point(field_get:VeriBlock.CalculatorConfig.keystoneRound)
  return keystoneround_;
}
inline void CalculatorConfig::set_keystoneround(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  keystoneround_ = value;
  // @@protoc_insertion_point(field_set:VeriBlock.CalculatorConfig.keystoneRound)
}

// int32 keystoneInterval = 4;
inline void CalculatorConfig::clear_keystoneinterval() {
  keystoneinterval_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CalculatorConfig::keystoneinterval() const {
  // @@protoc_insertion_point(field_get:VeriBlock.CalculatorConfig.keystoneInterval)
  return keystoneinterval_;
}
inline void CalculatorConfig::set_keystoneinterval(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  keystoneinterval_ = value;
  // @@protoc_insertion_point(field_set:VeriBlock.CalculatorConfig.keystoneInterval)
}

// .VeriBlock.RoundRatioConfig roundRatios = 5;
inline bool CalculatorConfig::has_roundratios() const {
  return this != internal_default_instance() && roundratios_ != nullptr;
}
inline void CalculatorConfig::clear_roundratios() {
  if (GetArenaNoVirtual() == nullptr && roundratios_ != nullptr) {
    delete roundratios_;
  }
  roundratios_ = nullptr;
}
inline const ::VeriBlock::RoundRatioConfig& CalculatorConfig::roundratios() const {
  const ::VeriBlock::RoundRatioConfig* p = roundratios_;
  // @@protoc_insertion_point(field_get:VeriBlock.CalculatorConfig.roundRatios)
  return p != nullptr ? *p : *reinterpret_cast<const ::VeriBlock::RoundRatioConfig*>(
      &::VeriBlock::_RoundRatioConfig_default_instance_);
}
inline ::VeriBlock::RoundRatioConfig* CalculatorConfig::release_roundratios() {
  // @@protoc_insertion_point(field_release:VeriBlock.CalculatorConfig.roundRatios)
  
  ::VeriBlock::RoundRatioConfig* temp = roundratios_;
  roundratios_ = nullptr;
  return temp;
}
inline ::VeriBlock::RoundRatioConfig* CalculatorConfig::mutable_roundratios() {
  
  if (roundratios_ == nullptr) {
    auto* p = CreateMaybeMessage<::VeriBlock::RoundRatioConfig>(GetArenaNoVirtual());
    roundratios_ = p;
  }
  // @@protoc_insertion_point(field_mutable:VeriBlock.CalculatorConfig.roundRatios)
  return roundratios_;
}
inline void CalculatorConfig::set_allocated_roundratios(::VeriBlock::RoundRatioConfig* roundratios) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete roundratios_;
  }
  if (roundratios) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      roundratios = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, roundratios, submessage_arena);
    }
    
  } else {
    
  }
  roundratios_ = roundratios;
  // @@protoc_insertion_point(field_set_allocated:VeriBlock.CalculatorConfig.roundRatios)
}

// .VeriBlock.RewardCurveConfig rewardCurve = 6;
inline bool CalculatorConfig::has_rewardcurve() const {
  return this != internal_default_instance() && rewardcurve_ != nullptr;
}
inline void CalculatorConfig::clear_rewardcurve() {
  if (GetArenaNoVirtual() == nullptr && rewardcurve_ != nullptr) {
    delete rewardcurve_;
  }
  rewardcurve_ = nullptr;
}
inline const ::VeriBlock::RewardCurveConfig& CalculatorConfig::rewardcurve() const {
  const ::VeriBlock::RewardCurveConfig* p = rewardcurve_;
  // @@protoc_insertion_point(field_get:VeriBlock.CalculatorConfig.rewardCurve)
  return p != nullptr ? *p : *reinterpret_cast<const ::VeriBlock::RewardCurveConfig*>(
      &::VeriBlock::_RewardCurveConfig_default_instance_);
}
inline ::VeriBlock::RewardCurveConfig* CalculatorConfig::release_rewardcurve() {
  // @@protoc_insertion_point(field_release:VeriBlock.CalculatorConfig.rewardCurve)
  
  ::VeriBlock::RewardCurveConfig* temp = rewardcurve_;
  rewardcurve_ = nullptr;
  return temp;
}
inline ::VeriBlock::RewardCurveConfig* CalculatorConfig::mutable_rewardcurve() {
  
  if (rewardcurve_ == nullptr) {
    auto* p = CreateMaybeMessage<::VeriBlock::RewardCurveConfig>(GetArenaNoVirtual());
    rewardcurve_ = p;
  }
  // @@protoc_insertion_point(field_mutable:VeriBlock.CalculatorConfig.rewardCurve)
  return rewardcurve_;
}
inline void CalculatorConfig::set_allocated_rewardcurve(::VeriBlock::RewardCurveConfig* rewardcurve) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete rewardcurve_;
  }
  if (rewardcurve) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      rewardcurve = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rewardcurve, submessage_arena);
    }
    
  } else {
    
  }
  rewardcurve_ = rewardcurve;
  // @@protoc_insertion_point(field_set_allocated:VeriBlock.CalculatorConfig.rewardCurve)
}

// string maxRewardThresholdNormal = 7;
inline void CalculatorConfig::clear_maxrewardthresholdnormal() {
  maxrewardthresholdnormal_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CalculatorConfig::maxrewardthresholdnormal() const {
  // @@protoc_insertion_point(field_get:VeriBlock.CalculatorConfig.maxRewardThresholdNormal)
  return maxrewardthresholdnormal_.GetNoArena();
}
inline void CalculatorConfig::set_maxrewardthresholdnormal(const std::string& value) {
  
  maxrewardthresholdnormal_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:VeriBlock.CalculatorConfig.maxRewardThresholdNormal)
}
inline void CalculatorConfig::set_maxrewardthresholdnormal(std::string&& value) {
  
  maxrewardthresholdnormal_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:VeriBlock.CalculatorConfig.maxRewardThresholdNormal)
}
inline void CalculatorConfig::set_maxrewardthresholdnormal(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  maxrewardthresholdnormal_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:VeriBlock.CalculatorConfig.maxRewardThresholdNormal)
}
inline void CalculatorConfig::set_maxrewardthresholdnormal(const char* value, size_t size) {
  
  maxrewardthresholdnormal_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:VeriBlock.CalculatorConfig.maxRewardThresholdNormal)
}
inline std::string* CalculatorConfig::mutable_maxrewardthresholdnormal() {
  
  // @@protoc_insertion_point(field_mutable:VeriBlock.CalculatorConfig.maxRewardThresholdNormal)
  return maxrewardthresholdnormal_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CalculatorConfig::release_maxrewardthresholdnormal() {
  // @@protoc_insertion_point(field_release:VeriBlock.CalculatorConfig.maxRewardThresholdNormal)
  
  return maxrewardthresholdnormal_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CalculatorConfig::set_allocated_maxrewardthresholdnormal(std::string* maxrewardthresholdnormal) {
  if (maxrewardthresholdnormal != nullptr) {
    
  } else {
    
  }
  maxrewardthresholdnormal_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), maxrewardthresholdnormal);
  // @@protoc_insertion_point(field_set_allocated:VeriBlock.CalculatorConfig.maxRewardThresholdNormal)
}

// string maxRewardThresholdKeystone = 8;
inline void CalculatorConfig::clear_maxrewardthresholdkeystone() {
  maxrewardthresholdkeystone_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CalculatorConfig::maxrewardthresholdkeystone() const {
  // @@protoc_insertion_point(field_get:VeriBlock.CalculatorConfig.maxRewardThresholdKeystone)
  return maxrewardthresholdkeystone_.GetNoArena();
}
inline void CalculatorConfig::set_maxrewardthresholdkeystone(const std::string& value) {
  
  maxrewardthresholdkeystone_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:VeriBlock.CalculatorConfig.maxRewardThresholdKeystone)
}
inline void CalculatorConfig::set_maxrewardthresholdkeystone(std::string&& value) {
  
  maxrewardthresholdkeystone_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:VeriBlock.CalculatorConfig.maxRewardThresholdKeystone)
}
inline void CalculatorConfig::set_maxrewardthresholdkeystone(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  maxrewardthresholdkeystone_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:VeriBlock.CalculatorConfig.maxRewardThresholdKeystone)
}
inline void CalculatorConfig::set_maxrewardthresholdkeystone(const char* value, size_t size) {
  
  maxrewardthresholdkeystone_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:VeriBlock.CalculatorConfig.maxRewardThresholdKeystone)
}
inline std::string* CalculatorConfig::mutable_maxrewardthresholdkeystone() {
  
  // @@protoc_insertion_point(field_mutable:VeriBlock.CalculatorConfig.maxRewardThresholdKeystone)
  return maxrewardthresholdkeystone_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CalculatorConfig::release_maxrewardthresholdkeystone() {
  // @@protoc_insertion_point(field_release:VeriBlock.CalculatorConfig.maxRewardThresholdKeystone)
  
  return maxrewardthresholdkeystone_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CalculatorConfig::set_allocated_maxrewardthresholdkeystone(std::string* maxrewardthresholdkeystone) {
  if (maxrewardthresholdkeystone != nullptr) {
    
  } else {
    
  }
  maxrewardthresholdkeystone_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), maxrewardthresholdkeystone);
  // @@protoc_insertion_point(field_set_allocated:VeriBlock.CalculatorConfig.maxRewardThresholdKeystone)
}

// .VeriBlock.RelativeScoreConfig relativeScoreLookupTable = 9;
inline bool CalculatorConfig::has_relativescorelookuptable() const {
  return this != internal_default_instance() && relativescorelookuptable_ != nullptr;
}
inline void CalculatorConfig::clear_relativescorelookuptable() {
  if (GetArenaNoVirtual() == nullptr && relativescorelookuptable_ != nullptr) {
    delete relativescorelookuptable_;
  }
  relativescorelookuptable_ = nullptr;
}
inline const ::VeriBlock::RelativeScoreConfig& CalculatorConfig::relativescorelookuptable() const {
  const ::VeriBlock::RelativeScoreConfig* p = relativescorelookuptable_;
  // @@protoc_insertion_point(field_get:VeriBlock.CalculatorConfig.relativeScoreLookupTable)
  return p != nullptr ? *p : *reinterpret_cast<const ::VeriBlock::RelativeScoreConfig*>(
      &::VeriBlock::_RelativeScoreConfig_default_instance_);
}
inline ::VeriBlock::RelativeScoreConfig* CalculatorConfig::release_relativescorelookuptable() {
  // @@protoc_insertion_point(field_release:VeriBlock.CalculatorConfig.relativeScoreLookupTable)
  
  ::VeriBlock::RelativeScoreConfig* temp = relativescorelookuptable_;
  relativescorelookuptable_ = nullptr;
  return temp;
}
inline ::VeriBlock::RelativeScoreConfig* CalculatorConfig::mutable_relativescorelookuptable() {
  
  if (relativescorelookuptable_ == nullptr) {
    auto* p = CreateMaybeMessage<::VeriBlock::RelativeScoreConfig>(GetArenaNoVirtual());
    relativescorelookuptable_ = p;
  }
  // @@protoc_insertion_point(field_mutable:VeriBlock.CalculatorConfig.relativeScoreLookupTable)
  return relativescorelookuptable_;
}
inline void CalculatorConfig::set_allocated_relativescorelookuptable(::VeriBlock::RelativeScoreConfig* relativescorelookuptable) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete relativescorelookuptable_;
  }
  if (relativescorelookuptable) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      relativescorelookuptable = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, relativescorelookuptable, submessage_arena);
    }
    
  } else {
    
  }
  relativescorelookuptable_ = relativescorelookuptable;
  // @@protoc_insertion_point(field_set_allocated:VeriBlock.CalculatorConfig.relativeScoreLookupTable)
}

// .VeriBlock.FlatScoreRoundConfig flatScoreRound = 10;
inline bool CalculatorConfig::has_flatscoreround() const {
  return this != internal_default_instance() && flatscoreround_ != nullptr;
}
inline void CalculatorConfig::clear_flatscoreround() {
  if (GetArenaNoVirtual() == nullptr && flatscoreround_ != nullptr) {
    delete flatscoreround_;
  }
  flatscoreround_ = nullptr;
}
inline const ::VeriBlock::FlatScoreRoundConfig& CalculatorConfig::flatscoreround() const {
  const ::VeriBlock::FlatScoreRoundConfig* p = flatscoreround_;
  // @@protoc_insertion_point(field_get:VeriBlock.CalculatorConfig.flatScoreRound)
  return p != nullptr ? *p : *reinterpret_cast<const ::VeriBlock::FlatScoreRoundConfig*>(
      &::VeriBlock::_FlatScoreRoundConfig_default_instance_);
}
inline ::VeriBlock::FlatScoreRoundConfig* CalculatorConfig::release_flatscoreround() {
  // @@protoc_insertion_point(field_release:VeriBlock.CalculatorConfig.flatScoreRound)
  
  ::VeriBlock::FlatScoreRoundConfig* temp = flatscoreround_;
  flatscoreround_ = nullptr;
  return temp;
}
inline ::VeriBlock::FlatScoreRoundConfig* CalculatorConfig::mutable_flatscoreround() {
  
  if (flatscoreround_ == nullptr) {
    auto* p = CreateMaybeMessage<::VeriBlock::FlatScoreRoundConfig>(GetArenaNoVirtual());
    flatscoreround_ = p;
  }
  // @@protoc_insertion_point(field_mutable:VeriBlock.CalculatorConfig.flatScoreRound)
  return flatscoreround_;
}
inline void CalculatorConfig::set_allocated_flatscoreround(::VeriBlock::FlatScoreRoundConfig* flatscoreround) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete flatscoreround_;
  }
  if (flatscoreround) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      flatscoreround = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, flatscoreround, submessage_arena);
    }
    
  } else {
    
  }
  flatscoreround_ = flatscoreround;
  // @@protoc_insertion_point(field_set_allocated:VeriBlock.CalculatorConfig.flatScoreRound)
}

// -------------------------------------------------------------------

// SetCalculatorRequest

// .VeriBlock.CalculatorConfig calculator = 1;
inline bool SetCalculatorRequest::has_calculator() const {
  return this != internal_default_instance() && calculator_ != nullptr;
}
inline void SetCalculatorRequest::clear_calculator() {
  if (GetArenaNoVirtual() == nullptr && calculator_ != nullptr) {
    delete calculator_;
  }
  calculator_ = nullptr;
}
inline const ::VeriBlock::CalculatorConfig& SetCalculatorRequest::calculator() const {
  const ::VeriBlock::CalculatorConfig* p = calculator_;
  // @@protoc_insertion_point(field_get:VeriBlock.SetCalculatorRequest.calculator)
  return p != nullptr ? *p : *reinterpret_cast<const ::VeriBlock::CalculatorConfig*>(
      &::VeriBlock::_CalculatorConfig_default_instance_);
}
inline ::VeriBlock::CalculatorConfig* SetCalculatorRequest::release_calculator() {
  // @@protoc_insertion_point(field_release:VeriBlock.SetCalculatorRequest.calculator)
  
  ::VeriBlock::CalculatorConfig* temp = calculator_;
  calculator_ = nullptr;
  return temp;
}
inline ::VeriBlock::CalculatorConfig* SetCalculatorRequest::mutable_calculator() {
  
  if (calculator_ == nullptr) {
    auto* p = CreateMaybeMessage<::VeriBlock::CalculatorConfig>(GetArenaNoVirtual());
    calculator_ = p;
  }
  // @@protoc_insertion_point(field_mutable:VeriBlock.SetCalculatorRequest.calculator)
  return calculator_;
}
inline void SetCalculatorRequest::set_allocated_calculator(::VeriBlock::CalculatorConfig* calculator) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete calculator_;
  }
  if (calculator) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      calculator = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, calculator, submessage_arena);
    }
    
  } else {
    
  }
  calculator_ = calculator;
  // @@protoc_insertion_point(field_set_allocated:VeriBlock.SetCalculatorRequest.calculator)
}

// -------------------------------------------------------------------

// GetCalculatorReply

// .VeriBlock.GeneralReply result = 1;
inline bool GetCalculatorReply::has_result() const {
  return this != internal_default_instance() && result_ != nullptr;
}
inline void GetCalculatorReply::clear_result() {
  if (GetArenaNoVirtual() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
}
inline const ::VeriBlock::GeneralReply& GetCalculatorReply::result() const {
  const ::VeriBlock::GeneralReply* p = result_;
  // @@protoc_insertion_point(field_get:VeriBlock.GetCalculatorReply.result)
  return p != nullptr ? *p : *reinterpret_cast<const ::VeriBlock::GeneralReply*>(
      &::VeriBlock::_GeneralReply_default_instance_);
}
inline ::VeriBlock::GeneralReply* GetCalculatorReply::release_result() {
  // @@protoc_insertion_point(field_release:VeriBlock.GetCalculatorReply.result)
  
  ::VeriBlock::GeneralReply* temp = result_;
  result_ = nullptr;
  return temp;
}
inline ::VeriBlock::GeneralReply* GetCalculatorReply::mutable_result() {
  
  if (result_ == nullptr) {
    auto* p = CreateMaybeMessage<::VeriBlock::GeneralReply>(GetArenaNoVirtual());
    result_ = p;
  }
  // @@protoc_insertion_point(field_mutable:VeriBlock.GetCalculatorReply.result)
  return result_;
}
inline void GetCalculatorReply::set_allocated_result(::VeriBlock::GeneralReply* result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete result_;
  }
  if (result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result, submessage_arena);
    }
    
  } else {
    
  }
  result_ = result;
  // @@protoc_insertion_point(field_set_allocated:VeriBlock.GetCalculatorReply.result)
}

// .VeriBlock.CalculatorConfig calculator = 2;
inline bool GetCalculatorReply::has_calculator() const {
  return this != internal_default_instance() && calculator_ != nullptr;
}
inline void GetCalculatorReply::clear_calculator() {
  if (GetArenaNoVirtual() == nullptr && calculator_ != nullptr) {
    delete calculator_;
  }
  calculator_ = nullptr;
}
inline const ::VeriBlock::CalculatorConfig& GetCalculatorReply::calculator() const {
  const ::VeriBlock::CalculatorConfig* p = calculator_;
  // @@protoc_insertion_point(field_get:VeriBlock.GetCalculatorReply.calculator)
  return p != nullptr ? *p : *reinterpret_cast<const ::VeriBlock::CalculatorConfig*>(
      &::VeriBlock::_CalculatorConfig_default_instance_);
}
inline ::VeriBlock::CalculatorConfig* GetCalculatorReply::release_calculator() {
  // @@protoc_insertion_point(field_release:VeriBlock.GetCalculatorReply.calculator)
  
  ::VeriBlock::CalculatorConfig* temp = calculator_;
  calculator_ = nullptr;
  return temp;
}
inline ::VeriBlock::CalculatorConfig* GetCalculatorReply::mutable_calculator() {
  
  if (calculator_ == nullptr) {
    auto* p = CreateMaybeMessage<::VeriBlock::CalculatorConfig>(GetArenaNoVirtual());
    calculator_ = p;
  }
  // @@protoc_insertion_point(field_mutable:VeriBlock.GetCalculatorReply.calculator)
  return calculator_;
}
inline void GetCalculatorReply::set_allocated_calculator(::VeriBlock::CalculatorConfig* calculator) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete calculator_;
  }
  if (calculator) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      calculator = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, calculator, submessage_arena);
    }
    
  } else {
    
  }
  calculator_ = calculator;
  // @@protoc_insertion_point(field_set_allocated:VeriBlock.GetCalculatorReply.calculator)
}

// -------------------------------------------------------------------

// RewardOutput

// string address = 1;
inline void RewardOutput::clear_address() {
  address_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RewardOutput::address() const {
  // @@protoc_insertion_point(field_get:VeriBlock.RewardOutput.address)
  return address_.GetNoArena();
}
inline void RewardOutput::set_address(const std::string& value) {
  
  address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:VeriBlock.RewardOutput.address)
}
inline void RewardOutput::set_address(std::string&& value) {
  
  address_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:VeriBlock.RewardOutput.address)
}
inline void RewardOutput::set_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:VeriBlock.RewardOutput.address)
}
inline void RewardOutput::set_address(const char* value, size_t size) {
  
  address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:VeriBlock.RewardOutput.address)
}
inline std::string* RewardOutput::mutable_address() {
  
  // @@protoc_insertion_point(field_mutable:VeriBlock.RewardOutput.address)
  return address_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RewardOutput::release_address() {
  // @@protoc_insertion_point(field_release:VeriBlock.RewardOutput.address)
  
  return address_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RewardOutput::set_allocated_address(std::string* address) {
  if (address != nullptr) {
    
  } else {
    
  }
  address_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), address);
  // @@protoc_insertion_point(field_set_allocated:VeriBlock.RewardOutput.address)
}

// string reward = 2;
inline void RewardOutput::clear_reward() {
  reward_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RewardOutput::reward() const {
  // @@protoc_insertion_point(field_get:VeriBlock.RewardOutput.reward)
  return reward_.GetNoArena();
}
inline void RewardOutput::set_reward(const std::string& value) {
  
  reward_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:VeriBlock.RewardOutput.reward)
}
inline void RewardOutput::set_reward(std::string&& value) {
  
  reward_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:VeriBlock.RewardOutput.reward)
}
inline void RewardOutput::set_reward(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  reward_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:VeriBlock.RewardOutput.reward)
}
inline void RewardOutput::set_reward(const char* value, size_t size) {
  
  reward_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:VeriBlock.RewardOutput.reward)
}
inline std::string* RewardOutput::mutable_reward() {
  
  // @@protoc_insertion_point(field_mutable:VeriBlock.RewardOutput.reward)
  return reward_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RewardOutput::release_reward() {
  // @@protoc_insertion_point(field_release:VeriBlock.RewardOutput.reward)
  
  return reward_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RewardOutput::set_allocated_reward(std::string* reward) {
  if (reward != nullptr) {
    
  } else {
    
  }
  reward_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), reward);
  // @@protoc_insertion_point(field_set_allocated:VeriBlock.RewardOutput.reward)
}

// -------------------------------------------------------------------

// PopEndorsement

// string address = 1;
inline void PopEndorsement::clear_address() {
  address_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PopEndorsement::address() const {
  // @@protoc_insertion_point(field_get:VeriBlock.PopEndorsement.address)
  return address_.GetNoArena();
}
inline void PopEndorsement::set_address(const std::string& value) {
  
  address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:VeriBlock.PopEndorsement.address)
}
inline void PopEndorsement::set_address(std::string&& value) {
  
  address_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:VeriBlock.PopEndorsement.address)
}
inline void PopEndorsement::set_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:VeriBlock.PopEndorsement.address)
}
inline void PopEndorsement::set_address(const char* value, size_t size) {
  
  address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:VeriBlock.PopEndorsement.address)
}
inline std::string* PopEndorsement::mutable_address() {
  
  // @@protoc_insertion_point(field_mutable:VeriBlock.PopEndorsement.address)
  return address_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PopEndorsement::release_address() {
  // @@protoc_insertion_point(field_release:VeriBlock.PopEndorsement.address)
  
  return address_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PopEndorsement::set_allocated_address(std::string* address) {
  if (address != nullptr) {
    
  } else {
    
  }
  address_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), address);
  // @@protoc_insertion_point(field_set_allocated:VeriBlock.PopEndorsement.address)
}

// string txid = 2;
inline void PopEndorsement::clear_txid() {
  txid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PopEndorsement::txid() const {
  // @@protoc_insertion_point(field_get:VeriBlock.PopEndorsement.txid)
  return txid_.GetNoArena();
}
inline void PopEndorsement::set_txid(const std::string& value) {
  
  txid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:VeriBlock.PopEndorsement.txid)
}
inline void PopEndorsement::set_txid(std::string&& value) {
  
  txid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:VeriBlock.PopEndorsement.txid)
}
inline void PopEndorsement::set_txid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  txid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:VeriBlock.PopEndorsement.txid)
}
inline void PopEndorsement::set_txid(const char* value, size_t size) {
  
  txid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:VeriBlock.PopEndorsement.txid)
}
inline std::string* PopEndorsement::mutable_txid() {
  
  // @@protoc_insertion_point(field_mutable:VeriBlock.PopEndorsement.txid)
  return txid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PopEndorsement::release_txid() {
  // @@protoc_insertion_point(field_release:VeriBlock.PopEndorsement.txid)
  
  return txid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PopEndorsement::set_allocated_txid(std::string* txid) {
  if (txid != nullptr) {
    
  } else {
    
  }
  txid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), txid);
  // @@protoc_insertion_point(field_set_allocated:VeriBlock.PopEndorsement.txid)
}

// -------------------------------------------------------------------

// RewardEndorsement

// int32 blockVbkHeight = 1;
inline void RewardEndorsement::clear_blockvbkheight() {
  blockvbkheight_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RewardEndorsement::blockvbkheight() const {
  // @@protoc_insertion_point(field_get:VeriBlock.RewardEndorsement.blockVbkHeight)
  return blockvbkheight_;
}
inline void RewardEndorsement::set_blockvbkheight(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  blockvbkheight_ = value;
  // @@protoc_insertion_point(field_set:VeriBlock.RewardEndorsement.blockVbkHeight)
}

// repeated .VeriBlock.PopEndorsement endorsementsInBlock = 2;
inline int RewardEndorsement::endorsementsinblock_size() const {
  return endorsementsinblock_.size();
}
inline void RewardEndorsement::clear_endorsementsinblock() {
  endorsementsinblock_.Clear();
}
inline ::VeriBlock::PopEndorsement* RewardEndorsement::mutable_endorsementsinblock(int index) {
  // @@protoc_insertion_point(field_mutable:VeriBlock.RewardEndorsement.endorsementsInBlock)
  return endorsementsinblock_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::VeriBlock::PopEndorsement >*
RewardEndorsement::mutable_endorsementsinblock() {
  // @@protoc_insertion_point(field_mutable_list:VeriBlock.RewardEndorsement.endorsementsInBlock)
  return &endorsementsinblock_;
}
inline const ::VeriBlock::PopEndorsement& RewardEndorsement::endorsementsinblock(int index) const {
  // @@protoc_insertion_point(field_get:VeriBlock.RewardEndorsement.endorsementsInBlock)
  return endorsementsinblock_.Get(index);
}
inline ::VeriBlock::PopEndorsement* RewardEndorsement::add_endorsementsinblock() {
  // @@protoc_insertion_point(field_add:VeriBlock.RewardEndorsement.endorsementsInBlock)
  return endorsementsinblock_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::VeriBlock::PopEndorsement >&
RewardEndorsement::endorsementsinblock() const {
  // @@protoc_insertion_point(field_list:VeriBlock.RewardEndorsement.endorsementsInBlock)
  return endorsementsinblock_;
}

// -------------------------------------------------------------------

// RewardsCalculateScoreRequest

// repeated .VeriBlock.RewardEndorsement endorsementsForBlock = 1;
inline int RewardsCalculateScoreRequest::endorsementsforblock_size() const {
  return endorsementsforblock_.size();
}
inline void RewardsCalculateScoreRequest::clear_endorsementsforblock() {
  endorsementsforblock_.Clear();
}
inline ::VeriBlock::RewardEndorsement* RewardsCalculateScoreRequest::mutable_endorsementsforblock(int index) {
  // @@protoc_insertion_point(field_mutable:VeriBlock.RewardsCalculateScoreRequest.endorsementsForBlock)
  return endorsementsforblock_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::VeriBlock::RewardEndorsement >*
RewardsCalculateScoreRequest::mutable_endorsementsforblock() {
  // @@protoc_insertion_point(field_mutable_list:VeriBlock.RewardsCalculateScoreRequest.endorsementsForBlock)
  return &endorsementsforblock_;
}
inline const ::VeriBlock::RewardEndorsement& RewardsCalculateScoreRequest::endorsementsforblock(int index) const {
  // @@protoc_insertion_point(field_get:VeriBlock.RewardsCalculateScoreRequest.endorsementsForBlock)
  return endorsementsforblock_.Get(index);
}
inline ::VeriBlock::RewardEndorsement* RewardsCalculateScoreRequest::add_endorsementsforblock() {
  // @@protoc_insertion_point(field_add:VeriBlock.RewardsCalculateScoreRequest.endorsementsForBlock)
  return endorsementsforblock_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::VeriBlock::RewardEndorsement >&
RewardsCalculateScoreRequest::endorsementsforblock() const {
  // @@protoc_insertion_point(field_list:VeriBlock.RewardsCalculateScoreRequest.endorsementsForBlock)
  return endorsementsforblock_;
}

// -------------------------------------------------------------------

// RewardsCalculateScoreReply

// .VeriBlock.GeneralReply result = 1;
inline bool RewardsCalculateScoreReply::has_result() const {
  return this != internal_default_instance() && result_ != nullptr;
}
inline void RewardsCalculateScoreReply::clear_result() {
  if (GetArenaNoVirtual() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
}
inline const ::VeriBlock::GeneralReply& RewardsCalculateScoreReply::result() const {
  const ::VeriBlock::GeneralReply* p = result_;
  // @@protoc_insertion_point(field_get:VeriBlock.RewardsCalculateScoreReply.result)
  return p != nullptr ? *p : *reinterpret_cast<const ::VeriBlock::GeneralReply*>(
      &::VeriBlock::_GeneralReply_default_instance_);
}
inline ::VeriBlock::GeneralReply* RewardsCalculateScoreReply::release_result() {
  // @@protoc_insertion_point(field_release:VeriBlock.RewardsCalculateScoreReply.result)
  
  ::VeriBlock::GeneralReply* temp = result_;
  result_ = nullptr;
  return temp;
}
inline ::VeriBlock::GeneralReply* RewardsCalculateScoreReply::mutable_result() {
  
  if (result_ == nullptr) {
    auto* p = CreateMaybeMessage<::VeriBlock::GeneralReply>(GetArenaNoVirtual());
    result_ = p;
  }
  // @@protoc_insertion_point(field_mutable:VeriBlock.RewardsCalculateScoreReply.result)
  return result_;
}
inline void RewardsCalculateScoreReply::set_allocated_result(::VeriBlock::GeneralReply* result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete result_;
  }
  if (result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result, submessage_arena);
    }
    
  } else {
    
  }
  result_ = result;
  // @@protoc_insertion_point(field_set_allocated:VeriBlock.RewardsCalculateScoreReply.result)
}

// string score = 2;
inline void RewardsCalculateScoreReply::clear_score() {
  score_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RewardsCalculateScoreReply::score() const {
  // @@protoc_insertion_point(field_get:VeriBlock.RewardsCalculateScoreReply.score)
  return score_.GetNoArena();
}
inline void RewardsCalculateScoreReply::set_score(const std::string& value) {
  
  score_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:VeriBlock.RewardsCalculateScoreReply.score)
}
inline void RewardsCalculateScoreReply::set_score(std::string&& value) {
  
  score_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:VeriBlock.RewardsCalculateScoreReply.score)
}
inline void RewardsCalculateScoreReply::set_score(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  score_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:VeriBlock.RewardsCalculateScoreReply.score)
}
inline void RewardsCalculateScoreReply::set_score(const char* value, size_t size) {
  
  score_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:VeriBlock.RewardsCalculateScoreReply.score)
}
inline std::string* RewardsCalculateScoreReply::mutable_score() {
  
  // @@protoc_insertion_point(field_mutable:VeriBlock.RewardsCalculateScoreReply.score)
  return score_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RewardsCalculateScoreReply::release_score() {
  // @@protoc_insertion_point(field_release:VeriBlock.RewardsCalculateScoreReply.score)
  
  return score_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RewardsCalculateScoreReply::set_allocated_score(std::string* score) {
  if (score != nullptr) {
    
  } else {
    
  }
  score_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), score);
  // @@protoc_insertion_point(field_set_allocated:VeriBlock.RewardsCalculateScoreReply.score)
}

// -------------------------------------------------------------------

// RewardsCalculateOutputsRequest

// int32 blockAltHeight = 1;
inline void RewardsCalculateOutputsRequest::clear_blockaltheight() {
  blockaltheight_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RewardsCalculateOutputsRequest::blockaltheight() const {
  // @@protoc_insertion_point(field_get:VeriBlock.RewardsCalculateOutputsRequest.blockAltHeight)
  return blockaltheight_;
}
inline void RewardsCalculateOutputsRequest::set_blockaltheight(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  blockaltheight_ = value;
  // @@protoc_insertion_point(field_set:VeriBlock.RewardsCalculateOutputsRequest.blockAltHeight)
}

// repeated .VeriBlock.RewardEndorsement endorsementsForBlock = 2;
inline int RewardsCalculateOutputsRequest::endorsementsforblock_size() const {
  return endorsementsforblock_.size();
}
inline void RewardsCalculateOutputsRequest::clear_endorsementsforblock() {
  endorsementsforblock_.Clear();
}
inline ::VeriBlock::RewardEndorsement* RewardsCalculateOutputsRequest::mutable_endorsementsforblock(int index) {
  // @@protoc_insertion_point(field_mutable:VeriBlock.RewardsCalculateOutputsRequest.endorsementsForBlock)
  return endorsementsforblock_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::VeriBlock::RewardEndorsement >*
RewardsCalculateOutputsRequest::mutable_endorsementsforblock() {
  // @@protoc_insertion_point(field_mutable_list:VeriBlock.RewardsCalculateOutputsRequest.endorsementsForBlock)
  return &endorsementsforblock_;
}
inline const ::VeriBlock::RewardEndorsement& RewardsCalculateOutputsRequest::endorsementsforblock(int index) const {
  // @@protoc_insertion_point(field_get:VeriBlock.RewardsCalculateOutputsRequest.endorsementsForBlock)
  return endorsementsforblock_.Get(index);
}
inline ::VeriBlock::RewardEndorsement* RewardsCalculateOutputsRequest::add_endorsementsforblock() {
  // @@protoc_insertion_point(field_add:VeriBlock.RewardsCalculateOutputsRequest.endorsementsForBlock)
  return endorsementsforblock_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::VeriBlock::RewardEndorsement >&
RewardsCalculateOutputsRequest::endorsementsforblock() const {
  // @@protoc_insertion_point(field_list:VeriBlock.RewardsCalculateOutputsRequest.endorsementsForBlock)
  return endorsementsforblock_;
}

// string difficulty = 3;
inline void RewardsCalculateOutputsRequest::clear_difficulty() {
  difficulty_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RewardsCalculateOutputsRequest::difficulty() const {
  // @@protoc_insertion_point(field_get:VeriBlock.RewardsCalculateOutputsRequest.difficulty)
  return difficulty_.GetNoArena();
}
inline void RewardsCalculateOutputsRequest::set_difficulty(const std::string& value) {
  
  difficulty_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:VeriBlock.RewardsCalculateOutputsRequest.difficulty)
}
inline void RewardsCalculateOutputsRequest::set_difficulty(std::string&& value) {
  
  difficulty_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:VeriBlock.RewardsCalculateOutputsRequest.difficulty)
}
inline void RewardsCalculateOutputsRequest::set_difficulty(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  difficulty_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:VeriBlock.RewardsCalculateOutputsRequest.difficulty)
}
inline void RewardsCalculateOutputsRequest::set_difficulty(const char* value, size_t size) {
  
  difficulty_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:VeriBlock.RewardsCalculateOutputsRequest.difficulty)
}
inline std::string* RewardsCalculateOutputsRequest::mutable_difficulty() {
  
  // @@protoc_insertion_point(field_mutable:VeriBlock.RewardsCalculateOutputsRequest.difficulty)
  return difficulty_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RewardsCalculateOutputsRequest::release_difficulty() {
  // @@protoc_insertion_point(field_release:VeriBlock.RewardsCalculateOutputsRequest.difficulty)
  
  return difficulty_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RewardsCalculateOutputsRequest::set_allocated_difficulty(std::string* difficulty) {
  if (difficulty != nullptr) {
    
  } else {
    
  }
  difficulty_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), difficulty);
  // @@protoc_insertion_point(field_set_allocated:VeriBlock.RewardsCalculateOutputsRequest.difficulty)
}

// -------------------------------------------------------------------

// RewardsCalculateOutputsReply

// .VeriBlock.GeneralReply result = 1;
inline bool RewardsCalculateOutputsReply::has_result() const {
  return this != internal_default_instance() && result_ != nullptr;
}
inline void RewardsCalculateOutputsReply::clear_result() {
  if (GetArenaNoVirtual() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
}
inline const ::VeriBlock::GeneralReply& RewardsCalculateOutputsReply::result() const {
  const ::VeriBlock::GeneralReply* p = result_;
  // @@protoc_insertion_point(field_get:VeriBlock.RewardsCalculateOutputsReply.result)
  return p != nullptr ? *p : *reinterpret_cast<const ::VeriBlock::GeneralReply*>(
      &::VeriBlock::_GeneralReply_default_instance_);
}
inline ::VeriBlock::GeneralReply* RewardsCalculateOutputsReply::release_result() {
  // @@protoc_insertion_point(field_release:VeriBlock.RewardsCalculateOutputsReply.result)
  
  ::VeriBlock::GeneralReply* temp = result_;
  result_ = nullptr;
  return temp;
}
inline ::VeriBlock::GeneralReply* RewardsCalculateOutputsReply::mutable_result() {
  
  if (result_ == nullptr) {
    auto* p = CreateMaybeMessage<::VeriBlock::GeneralReply>(GetArenaNoVirtual());
    result_ = p;
  }
  // @@protoc_insertion_point(field_mutable:VeriBlock.RewardsCalculateOutputsReply.result)
  return result_;
}
inline void RewardsCalculateOutputsReply::set_allocated_result(::VeriBlock::GeneralReply* result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete result_;
  }
  if (result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result, submessage_arena);
    }
    
  } else {
    
  }
  result_ = result;
  // @@protoc_insertion_point(field_set_allocated:VeriBlock.RewardsCalculateOutputsReply.result)
}

// string totalReward = 2;
inline void RewardsCalculateOutputsReply::clear_totalreward() {
  totalreward_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RewardsCalculateOutputsReply::totalreward() const {
  // @@protoc_insertion_point(field_get:VeriBlock.RewardsCalculateOutputsReply.totalReward)
  return totalreward_.GetNoArena();
}
inline void RewardsCalculateOutputsReply::set_totalreward(const std::string& value) {
  
  totalreward_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:VeriBlock.RewardsCalculateOutputsReply.totalReward)
}
inline void RewardsCalculateOutputsReply::set_totalreward(std::string&& value) {
  
  totalreward_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:VeriBlock.RewardsCalculateOutputsReply.totalReward)
}
inline void RewardsCalculateOutputsReply::set_totalreward(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  totalreward_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:VeriBlock.RewardsCalculateOutputsReply.totalReward)
}
inline void RewardsCalculateOutputsReply::set_totalreward(const char* value, size_t size) {
  
  totalreward_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:VeriBlock.RewardsCalculateOutputsReply.totalReward)
}
inline std::string* RewardsCalculateOutputsReply::mutable_totalreward() {
  
  // @@protoc_insertion_point(field_mutable:VeriBlock.RewardsCalculateOutputsReply.totalReward)
  return totalreward_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RewardsCalculateOutputsReply::release_totalreward() {
  // @@protoc_insertion_point(field_release:VeriBlock.RewardsCalculateOutputsReply.totalReward)
  
  return totalreward_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RewardsCalculateOutputsReply::set_allocated_totalreward(std::string* totalreward) {
  if (totalreward != nullptr) {
    
  } else {
    
  }
  totalreward_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), totalreward);
  // @@protoc_insertion_point(field_set_allocated:VeriBlock.RewardsCalculateOutputsReply.totalReward)
}

// string blockReward = 3;
inline void RewardsCalculateOutputsReply::clear_blockreward() {
  blockreward_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RewardsCalculateOutputsReply::blockreward() const {
  // @@protoc_insertion_point(field_get:VeriBlock.RewardsCalculateOutputsReply.blockReward)
  return blockreward_.GetNoArena();
}
inline void RewardsCalculateOutputsReply::set_blockreward(const std::string& value) {
  
  blockreward_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:VeriBlock.RewardsCalculateOutputsReply.blockReward)
}
inline void RewardsCalculateOutputsReply::set_blockreward(std::string&& value) {
  
  blockreward_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:VeriBlock.RewardsCalculateOutputsReply.blockReward)
}
inline void RewardsCalculateOutputsReply::set_blockreward(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  blockreward_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:VeriBlock.RewardsCalculateOutputsReply.blockReward)
}
inline void RewardsCalculateOutputsReply::set_blockreward(const char* value, size_t size) {
  
  blockreward_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:VeriBlock.RewardsCalculateOutputsReply.blockReward)
}
inline std::string* RewardsCalculateOutputsReply::mutable_blockreward() {
  
  // @@protoc_insertion_point(field_mutable:VeriBlock.RewardsCalculateOutputsReply.blockReward)
  return blockreward_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RewardsCalculateOutputsReply::release_blockreward() {
  // @@protoc_insertion_point(field_release:VeriBlock.RewardsCalculateOutputsReply.blockReward)
  
  return blockreward_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RewardsCalculateOutputsReply::set_allocated_blockreward(std::string* blockreward) {
  if (blockreward != nullptr) {
    
  } else {
    
  }
  blockreward_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), blockreward);
  // @@protoc_insertion_point(field_set_allocated:VeriBlock.RewardsCalculateOutputsReply.blockReward)
}

// repeated .VeriBlock.RewardOutput outputs = 4;
inline int RewardsCalculateOutputsReply::outputs_size() const {
  return outputs_.size();
}
inline void RewardsCalculateOutputsReply::clear_outputs() {
  outputs_.Clear();
}
inline ::VeriBlock::RewardOutput* RewardsCalculateOutputsReply::mutable_outputs(int index) {
  // @@protoc_insertion_point(field_mutable:VeriBlock.RewardsCalculateOutputsReply.outputs)
  return outputs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::VeriBlock::RewardOutput >*
RewardsCalculateOutputsReply::mutable_outputs() {
  // @@protoc_insertion_point(field_mutable_list:VeriBlock.RewardsCalculateOutputsReply.outputs)
  return &outputs_;
}
inline const ::VeriBlock::RewardOutput& RewardsCalculateOutputsReply::outputs(int index) const {
  // @@protoc_insertion_point(field_get:VeriBlock.RewardsCalculateOutputsReply.outputs)
  return outputs_.Get(index);
}
inline ::VeriBlock::RewardOutput* RewardsCalculateOutputsReply::add_outputs() {
  // @@protoc_insertion_point(field_add:VeriBlock.RewardsCalculateOutputsReply.outputs)
  return outputs_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::VeriBlock::RewardOutput >&
RewardsCalculateOutputsReply::outputs() const {
  // @@protoc_insertion_point(field_list:VeriBlock.RewardsCalculateOutputsReply.outputs)
  return outputs_;
}

// -------------------------------------------------------------------

// BytesArrayRequest

// bytes data = 1;
inline void BytesArrayRequest::clear_data() {
  data_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& BytesArrayRequest::data() const {
  // @@protoc_insertion_point(field_get:VeriBlock.BytesArrayRequest.data)
  return data_.GetNoArena();
}
inline void BytesArrayRequest::set_data(const std::string& value) {
  
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:VeriBlock.BytesArrayRequest.data)
}
inline void BytesArrayRequest::set_data(std::string&& value) {
  
  data_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:VeriBlock.BytesArrayRequest.data)
}
inline void BytesArrayRequest::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:VeriBlock.BytesArrayRequest.data)
}
inline void BytesArrayRequest::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:VeriBlock.BytesArrayRequest.data)
}
inline std::string* BytesArrayRequest::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:VeriBlock.BytesArrayRequest.data)
  return data_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* BytesArrayRequest::release_data() {
  // @@protoc_insertion_point(field_release:VeriBlock.BytesArrayRequest.data)
  
  return data_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void BytesArrayRequest::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:VeriBlock.BytesArrayRequest.data)
}

// -------------------------------------------------------------------

// BytesArrayReply

// .VeriBlock.GeneralReply result = 1;
inline bool BytesArrayReply::has_result() const {
  return this != internal_default_instance() && result_ != nullptr;
}
inline void BytesArrayReply::clear_result() {
  if (GetArenaNoVirtual() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
}
inline const ::VeriBlock::GeneralReply& BytesArrayReply::result() const {
  const ::VeriBlock::GeneralReply* p = result_;
  // @@protoc_insertion_point(field_get:VeriBlock.BytesArrayReply.result)
  return p != nullptr ? *p : *reinterpret_cast<const ::VeriBlock::GeneralReply*>(
      &::VeriBlock::_GeneralReply_default_instance_);
}
inline ::VeriBlock::GeneralReply* BytesArrayReply::release_result() {
  // @@protoc_insertion_point(field_release:VeriBlock.BytesArrayReply.result)
  
  ::VeriBlock::GeneralReply* temp = result_;
  result_ = nullptr;
  return temp;
}
inline ::VeriBlock::GeneralReply* BytesArrayReply::mutable_result() {
  
  if (result_ == nullptr) {
    auto* p = CreateMaybeMessage<::VeriBlock::GeneralReply>(GetArenaNoVirtual());
    result_ = p;
  }
  // @@protoc_insertion_point(field_mutable:VeriBlock.BytesArrayReply.result)
  return result_;
}
inline void BytesArrayReply::set_allocated_result(::VeriBlock::GeneralReply* result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete result_;
  }
  if (result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result, submessage_arena);
    }
    
  } else {
    
  }
  result_ = result;
  // @@protoc_insertion_point(field_set_allocated:VeriBlock.BytesArrayReply.result)
}

// bytes data = 2;
inline void BytesArrayReply::clear_data() {
  data_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& BytesArrayReply::data() const {
  // @@protoc_insertion_point(field_get:VeriBlock.BytesArrayReply.data)
  return data_.GetNoArena();
}
inline void BytesArrayReply::set_data(const std::string& value) {
  
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:VeriBlock.BytesArrayReply.data)
}
inline void BytesArrayReply::set_data(std::string&& value) {
  
  data_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:VeriBlock.BytesArrayReply.data)
}
inline void BytesArrayReply::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:VeriBlock.BytesArrayReply.data)
}
inline void BytesArrayReply::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:VeriBlock.BytesArrayReply.data)
}
inline std::string* BytesArrayReply::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:VeriBlock.BytesArrayReply.data)
  return data_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* BytesArrayReply::release_data() {
  // @@protoc_insertion_point(field_release:VeriBlock.BytesArrayReply.data)
  
  return data_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void BytesArrayReply::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:VeriBlock.BytesArrayReply.data)
}

// -------------------------------------------------------------------

// MerklePath

// string merklePath = 1;
inline void MerklePath::clear_merklepath() {
  merklepath_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& MerklePath::merklepath() const {
  // @@protoc_insertion_point(field_get:VeriBlock.MerklePath.merklePath)
  return merklepath_.GetNoArena();
}
inline void MerklePath::set_merklepath(const std::string& value) {
  
  merklepath_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:VeriBlock.MerklePath.merklePath)
}
inline void MerklePath::set_merklepath(std::string&& value) {
  
  merklepath_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:VeriBlock.MerklePath.merklePath)
}
inline void MerklePath::set_merklepath(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  merklepath_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:VeriBlock.MerklePath.merklePath)
}
inline void MerklePath::set_merklepath(const char* value, size_t size) {
  
  merklepath_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:VeriBlock.MerklePath.merklePath)
}
inline std::string* MerklePath::mutable_merklepath() {
  
  // @@protoc_insertion_point(field_mutable:VeriBlock.MerklePath.merklePath)
  return merklepath_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MerklePath::release_merklepath() {
  // @@protoc_insertion_point(field_release:VeriBlock.MerklePath.merklePath)
  
  return merklepath_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MerklePath::set_allocated_merklepath(std::string* merklepath) {
  if (merklepath != nullptr) {
    
  } else {
    
  }
  merklepath_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), merklepath);
  // @@protoc_insertion_point(field_set_allocated:VeriBlock.MerklePath.merklePath)
}

// -------------------------------------------------------------------

// MerklePathRequest

// bytes data = 1;
inline void MerklePathRequest::clear_data() {
  data_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& MerklePathRequest::data() const {
  // @@protoc_insertion_point(field_get:VeriBlock.MerklePathRequest.data)
  return data_.GetNoArena();
}
inline void MerklePathRequest::set_data(const std::string& value) {
  
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:VeriBlock.MerklePathRequest.data)
}
inline void MerklePathRequest::set_data(std::string&& value) {
  
  data_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:VeriBlock.MerklePathRequest.data)
}
inline void MerklePathRequest::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:VeriBlock.MerklePathRequest.data)
}
inline void MerklePathRequest::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:VeriBlock.MerklePathRequest.data)
}
inline std::string* MerklePathRequest::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:VeriBlock.MerklePathRequest.data)
  return data_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MerklePathRequest::release_data() {
  // @@protoc_insertion_point(field_release:VeriBlock.MerklePathRequest.data)
  
  return data_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MerklePathRequest::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:VeriBlock.MerklePathRequest.data)
}

// bytes subject = 2 [(.VeriBlock.hex_encoded) = true];
inline void MerklePathRequest::clear_subject() {
  subject_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& MerklePathRequest::subject() const {
  // @@protoc_insertion_point(field_get:VeriBlock.MerklePathRequest.subject)
  return subject_.GetNoArena();
}
inline void MerklePathRequest::set_subject(const std::string& value) {
  
  subject_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:VeriBlock.MerklePathRequest.subject)
}
inline void MerklePathRequest::set_subject(std::string&& value) {
  
  subject_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:VeriBlock.MerklePathRequest.subject)
}
inline void MerklePathRequest::set_subject(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  subject_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:VeriBlock.MerklePathRequest.subject)
}
inline void MerklePathRequest::set_subject(const void* value, size_t size) {
  
  subject_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:VeriBlock.MerklePathRequest.subject)
}
inline std::string* MerklePathRequest::mutable_subject() {
  
  // @@protoc_insertion_point(field_mutable:VeriBlock.MerklePathRequest.subject)
  return subject_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MerklePathRequest::release_subject() {
  // @@protoc_insertion_point(field_release:VeriBlock.MerklePathRequest.subject)
  
  return subject_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MerklePathRequest::set_allocated_subject(std::string* subject) {
  if (subject != nullptr) {
    
  } else {
    
  }
  subject_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), subject);
  // @@protoc_insertion_point(field_set_allocated:VeriBlock.MerklePathRequest.subject)
}

// -------------------------------------------------------------------

// VeriBlockMerklePath

// string merklePath = 1;
inline void VeriBlockMerklePath::clear_merklepath() {
  merklepath_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& VeriBlockMerklePath::merklepath() const {
  // @@protoc_insertion_point(field_get:VeriBlock.VeriBlockMerklePath.merklePath)
  return merklepath_.GetNoArena();
}
inline void VeriBlockMerklePath::set_merklepath(const std::string& value) {
  
  merklepath_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:VeriBlock.VeriBlockMerklePath.merklePath)
}
inline void VeriBlockMerklePath::set_merklepath(std::string&& value) {
  
  merklepath_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:VeriBlock.VeriBlockMerklePath.merklePath)
}
inline void VeriBlockMerklePath::set_merklepath(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  merklepath_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:VeriBlock.VeriBlockMerklePath.merklePath)
}
inline void VeriBlockMerklePath::set_merklepath(const char* value, size_t size) {
  
  merklepath_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:VeriBlock.VeriBlockMerklePath.merklePath)
}
inline std::string* VeriBlockMerklePath::mutable_merklepath() {
  
  // @@protoc_insertion_point(field_mutable:VeriBlock.VeriBlockMerklePath.merklePath)
  return merklepath_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* VeriBlockMerklePath::release_merklepath() {
  // @@protoc_insertion_point(field_release:VeriBlock.VeriBlockMerklePath.merklePath)
  
  return merklepath_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void VeriBlockMerklePath::set_allocated_merklepath(std::string* merklepath) {
  if (merklepath != nullptr) {
    
  } else {
    
  }
  merklepath_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), merklepath);
  // @@protoc_insertion_point(field_set_allocated:VeriBlock.VeriBlockMerklePath.merklePath)
}

// -------------------------------------------------------------------

// AltPublicationReply

// .VeriBlock.GeneralReply result = 1;
inline bool AltPublicationReply::has_result() const {
  return this != internal_default_instance() && result_ != nullptr;
}
inline void AltPublicationReply::clear_result() {
  if (GetArenaNoVirtual() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
}
inline const ::VeriBlock::GeneralReply& AltPublicationReply::result() const {
  const ::VeriBlock::GeneralReply* p = result_;
  // @@protoc_insertion_point(field_get:VeriBlock.AltPublicationReply.result)
  return p != nullptr ? *p : *reinterpret_cast<const ::VeriBlock::GeneralReply*>(
      &::VeriBlock::_GeneralReply_default_instance_);
}
inline ::VeriBlock::GeneralReply* AltPublicationReply::release_result() {
  // @@protoc_insertion_point(field_release:VeriBlock.AltPublicationReply.result)
  
  ::VeriBlock::GeneralReply* temp = result_;
  result_ = nullptr;
  return temp;
}
inline ::VeriBlock::GeneralReply* AltPublicationReply::mutable_result() {
  
  if (result_ == nullptr) {
    auto* p = CreateMaybeMessage<::VeriBlock::GeneralReply>(GetArenaNoVirtual());
    result_ = p;
  }
  // @@protoc_insertion_point(field_mutable:VeriBlock.AltPublicationReply.result)
  return result_;
}
inline void AltPublicationReply::set_allocated_result(::VeriBlock::GeneralReply* result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete result_;
  }
  if (result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result, submessage_arena);
    }
    
  } else {
    
  }
  result_ = result;
  // @@protoc_insertion_point(field_set_allocated:VeriBlock.AltPublicationReply.result)
}

// .VeriBlock.AltPublication publication = 2;
inline bool AltPublicationReply::has_publication() const {
  return this != internal_default_instance() && publication_ != nullptr;
}
inline void AltPublicationReply::clear_publication() {
  if (GetArenaNoVirtual() == nullptr && publication_ != nullptr) {
    delete publication_;
  }
  publication_ = nullptr;
}
inline const ::VeriBlock::AltPublication& AltPublicationReply::publication() const {
  const ::VeriBlock::AltPublication* p = publication_;
  // @@protoc_insertion_point(field_get:VeriBlock.AltPublicationReply.publication)
  return p != nullptr ? *p : *reinterpret_cast<const ::VeriBlock::AltPublication*>(
      &::VeriBlock::_AltPublication_default_instance_);
}
inline ::VeriBlock::AltPublication* AltPublicationReply::release_publication() {
  // @@protoc_insertion_point(field_release:VeriBlock.AltPublicationReply.publication)
  
  ::VeriBlock::AltPublication* temp = publication_;
  publication_ = nullptr;
  return temp;
}
inline ::VeriBlock::AltPublication* AltPublicationReply::mutable_publication() {
  
  if (publication_ == nullptr) {
    auto* p = CreateMaybeMessage<::VeriBlock::AltPublication>(GetArenaNoVirtual());
    publication_ = p;
  }
  // @@protoc_insertion_point(field_mutable:VeriBlock.AltPublicationReply.publication)
  return publication_;
}
inline void AltPublicationReply::set_allocated_publication(::VeriBlock::AltPublication* publication) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete publication_;
  }
  if (publication) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      publication = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, publication, submessage_arena);
    }
    
  } else {
    
  }
  publication_ = publication;
  // @@protoc_insertion_point(field_set_allocated:VeriBlock.AltPublicationReply.publication)
}

// -------------------------------------------------------------------

// PublicationDataReply

// .VeriBlock.GeneralReply result = 1;
inline bool PublicationDataReply::has_result() const {
  return this != internal_default_instance() && result_ != nullptr;
}
inline void PublicationDataReply::clear_result() {
  if (GetArenaNoVirtual() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
}
inline const ::VeriBlock::GeneralReply& PublicationDataReply::result() const {
  const ::VeriBlock::GeneralReply* p = result_;
  // @@protoc_insertion_point(field_get:VeriBlock.PublicationDataReply.result)
  return p != nullptr ? *p : *reinterpret_cast<const ::VeriBlock::GeneralReply*>(
      &::VeriBlock::_GeneralReply_default_instance_);
}
inline ::VeriBlock::GeneralReply* PublicationDataReply::release_result() {
  // @@protoc_insertion_point(field_release:VeriBlock.PublicationDataReply.result)
  
  ::VeriBlock::GeneralReply* temp = result_;
  result_ = nullptr;
  return temp;
}
inline ::VeriBlock::GeneralReply* PublicationDataReply::mutable_result() {
  
  if (result_ == nullptr) {
    auto* p = CreateMaybeMessage<::VeriBlock::GeneralReply>(GetArenaNoVirtual());
    result_ = p;
  }
  // @@protoc_insertion_point(field_mutable:VeriBlock.PublicationDataReply.result)
  return result_;
}
inline void PublicationDataReply::set_allocated_result(::VeriBlock::GeneralReply* result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete result_;
  }
  if (result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result, submessage_arena);
    }
    
  } else {
    
  }
  result_ = result;
  // @@protoc_insertion_point(field_set_allocated:VeriBlock.PublicationDataReply.result)
}

// .VeriBlock.PublicationData publication = 2;
inline bool PublicationDataReply::has_publication() const {
  return this != internal_default_instance() && publication_ != nullptr;
}
inline void PublicationDataReply::clear_publication() {
  if (GetArenaNoVirtual() == nullptr && publication_ != nullptr) {
    delete publication_;
  }
  publication_ = nullptr;
}
inline const ::VeriBlock::PublicationData& PublicationDataReply::publication() const {
  const ::VeriBlock::PublicationData* p = publication_;
  // @@protoc_insertion_point(field_get:VeriBlock.PublicationDataReply.publication)
  return p != nullptr ? *p : *reinterpret_cast<const ::VeriBlock::PublicationData*>(
      &::VeriBlock::_PublicationData_default_instance_);
}
inline ::VeriBlock::PublicationData* PublicationDataReply::release_publication() {
  // @@protoc_insertion_point(field_release:VeriBlock.PublicationDataReply.publication)
  
  ::VeriBlock::PublicationData* temp = publication_;
  publication_ = nullptr;
  return temp;
}
inline ::VeriBlock::PublicationData* PublicationDataReply::mutable_publication() {
  
  if (publication_ == nullptr) {
    auto* p = CreateMaybeMessage<::VeriBlock::PublicationData>(GetArenaNoVirtual());
    publication_ = p;
  }
  // @@protoc_insertion_point(field_mutable:VeriBlock.PublicationDataReply.publication)
  return publication_;
}
inline void PublicationDataReply::set_allocated_publication(::VeriBlock::PublicationData* publication) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete publication_;
  }
  if (publication) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      publication = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, publication, submessage_arena);
    }
    
  } else {
    
  }
  publication_ = publication;
  // @@protoc_insertion_point(field_set_allocated:VeriBlock.PublicationDataReply.publication)
}

// -------------------------------------------------------------------

// BitcoinTransactionReply

// .VeriBlock.GeneralReply result = 1;
inline bool BitcoinTransactionReply::has_result() const {
  return this != internal_default_instance() && result_ != nullptr;
}
inline void BitcoinTransactionReply::clear_result() {
  if (GetArenaNoVirtual() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
}
inline const ::VeriBlock::GeneralReply& BitcoinTransactionReply::result() const {
  const ::VeriBlock::GeneralReply* p = result_;
  // @@protoc_insertion_point(field_get:VeriBlock.BitcoinTransactionReply.result)
  return p != nullptr ? *p : *reinterpret_cast<const ::VeriBlock::GeneralReply*>(
      &::VeriBlock::_GeneralReply_default_instance_);
}
inline ::VeriBlock::GeneralReply* BitcoinTransactionReply::release_result() {
  // @@protoc_insertion_point(field_release:VeriBlock.BitcoinTransactionReply.result)
  
  ::VeriBlock::GeneralReply* temp = result_;
  result_ = nullptr;
  return temp;
}
inline ::VeriBlock::GeneralReply* BitcoinTransactionReply::mutable_result() {
  
  if (result_ == nullptr) {
    auto* p = CreateMaybeMessage<::VeriBlock::GeneralReply>(GetArenaNoVirtual());
    result_ = p;
  }
  // @@protoc_insertion_point(field_mutable:VeriBlock.BitcoinTransactionReply.result)
  return result_;
}
inline void BitcoinTransactionReply::set_allocated_result(::VeriBlock::GeneralReply* result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete result_;
  }
  if (result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result, submessage_arena);
    }
    
  } else {
    
  }
  result_ = result;
  // @@protoc_insertion_point(field_set_allocated:VeriBlock.BitcoinTransactionReply.result)
}

// .VeriBlock.BitcoinTransaction transaction = 2;
inline bool BitcoinTransactionReply::has_transaction() const {
  return this != internal_default_instance() && transaction_ != nullptr;
}
inline void BitcoinTransactionReply::clear_transaction() {
  if (GetArenaNoVirtual() == nullptr && transaction_ != nullptr) {
    delete transaction_;
  }
  transaction_ = nullptr;
}
inline const ::VeriBlock::BitcoinTransaction& BitcoinTransactionReply::transaction() const {
  const ::VeriBlock::BitcoinTransaction* p = transaction_;
  // @@protoc_insertion_point(field_get:VeriBlock.BitcoinTransactionReply.transaction)
  return p != nullptr ? *p : *reinterpret_cast<const ::VeriBlock::BitcoinTransaction*>(
      &::VeriBlock::_BitcoinTransaction_default_instance_);
}
inline ::VeriBlock::BitcoinTransaction* BitcoinTransactionReply::release_transaction() {
  // @@protoc_insertion_point(field_release:VeriBlock.BitcoinTransactionReply.transaction)
  
  ::VeriBlock::BitcoinTransaction* temp = transaction_;
  transaction_ = nullptr;
  return temp;
}
inline ::VeriBlock::BitcoinTransaction* BitcoinTransactionReply::mutable_transaction() {
  
  if (transaction_ == nullptr) {
    auto* p = CreateMaybeMessage<::VeriBlock::BitcoinTransaction>(GetArenaNoVirtual());
    transaction_ = p;
  }
  // @@protoc_insertion_point(field_mutable:VeriBlock.BitcoinTransactionReply.transaction)
  return transaction_;
}
inline void BitcoinTransactionReply::set_allocated_transaction(::VeriBlock::BitcoinTransaction* transaction) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete transaction_;
  }
  if (transaction) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      transaction = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, transaction, submessage_arena);
    }
    
  } else {
    
  }
  transaction_ = transaction;
  // @@protoc_insertion_point(field_set_allocated:VeriBlock.BitcoinTransactionReply.transaction)
}

// -------------------------------------------------------------------

// VeriBlockBlockReply

// .VeriBlock.GeneralReply result = 1;
inline bool VeriBlockBlockReply::has_result() const {
  return this != internal_default_instance() && result_ != nullptr;
}
inline void VeriBlockBlockReply::clear_result() {
  if (GetArenaNoVirtual() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
}
inline const ::VeriBlock::GeneralReply& VeriBlockBlockReply::result() const {
  const ::VeriBlock::GeneralReply* p = result_;
  // @@protoc_insertion_point(field_get:VeriBlock.VeriBlockBlockReply.result)
  return p != nullptr ? *p : *reinterpret_cast<const ::VeriBlock::GeneralReply*>(
      &::VeriBlock::_GeneralReply_default_instance_);
}
inline ::VeriBlock::GeneralReply* VeriBlockBlockReply::release_result() {
  // @@protoc_insertion_point(field_release:VeriBlock.VeriBlockBlockReply.result)
  
  ::VeriBlock::GeneralReply* temp = result_;
  result_ = nullptr;
  return temp;
}
inline ::VeriBlock::GeneralReply* VeriBlockBlockReply::mutable_result() {
  
  if (result_ == nullptr) {
    auto* p = CreateMaybeMessage<::VeriBlock::GeneralReply>(GetArenaNoVirtual());
    result_ = p;
  }
  // @@protoc_insertion_point(field_mutable:VeriBlock.VeriBlockBlockReply.result)
  return result_;
}
inline void VeriBlockBlockReply::set_allocated_result(::VeriBlock::GeneralReply* result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete result_;
  }
  if (result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result, submessage_arena);
    }
    
  } else {
    
  }
  result_ = result;
  // @@protoc_insertion_point(field_set_allocated:VeriBlock.VeriBlockBlockReply.result)
}

// .VeriBlock.VeriBlockBlock block = 2;
inline bool VeriBlockBlockReply::has_block() const {
  return this != internal_default_instance() && block_ != nullptr;
}
inline void VeriBlockBlockReply::clear_block() {
  if (GetArenaNoVirtual() == nullptr && block_ != nullptr) {
    delete block_;
  }
  block_ = nullptr;
}
inline const ::VeriBlock::VeriBlockBlock& VeriBlockBlockReply::block() const {
  const ::VeriBlock::VeriBlockBlock* p = block_;
  // @@protoc_insertion_point(field_get:VeriBlock.VeriBlockBlockReply.block)
  return p != nullptr ? *p : *reinterpret_cast<const ::VeriBlock::VeriBlockBlock*>(
      &::VeriBlock::_VeriBlockBlock_default_instance_);
}
inline ::VeriBlock::VeriBlockBlock* VeriBlockBlockReply::release_block() {
  // @@protoc_insertion_point(field_release:VeriBlock.VeriBlockBlockReply.block)
  
  ::VeriBlock::VeriBlockBlock* temp = block_;
  block_ = nullptr;
  return temp;
}
inline ::VeriBlock::VeriBlockBlock* VeriBlockBlockReply::mutable_block() {
  
  if (block_ == nullptr) {
    auto* p = CreateMaybeMessage<::VeriBlock::VeriBlockBlock>(GetArenaNoVirtual());
    block_ = p;
  }
  // @@protoc_insertion_point(field_mutable:VeriBlock.VeriBlockBlockReply.block)
  return block_;
}
inline void VeriBlockBlockReply::set_allocated_block(::VeriBlock::VeriBlockBlock* block) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete block_;
  }
  if (block) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      block = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, block, submessage_arena);
    }
    
  } else {
    
  }
  block_ = block;
  // @@protoc_insertion_point(field_set_allocated:VeriBlock.VeriBlockBlockReply.block)
}

// -------------------------------------------------------------------

// VeriBlockTransactionReply

// .VeriBlock.GeneralReply result = 1;
inline bool VeriBlockTransactionReply::has_result() const {
  return this != internal_default_instance() && result_ != nullptr;
}
inline void VeriBlockTransactionReply::clear_result() {
  if (GetArenaNoVirtual() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
}
inline const ::VeriBlock::GeneralReply& VeriBlockTransactionReply::result() const {
  const ::VeriBlock::GeneralReply* p = result_;
  // @@protoc_insertion_point(field_get:VeriBlock.VeriBlockTransactionReply.result)
  return p != nullptr ? *p : *reinterpret_cast<const ::VeriBlock::GeneralReply*>(
      &::VeriBlock::_GeneralReply_default_instance_);
}
inline ::VeriBlock::GeneralReply* VeriBlockTransactionReply::release_result() {
  // @@protoc_insertion_point(field_release:VeriBlock.VeriBlockTransactionReply.result)
  
  ::VeriBlock::GeneralReply* temp = result_;
  result_ = nullptr;
  return temp;
}
inline ::VeriBlock::GeneralReply* VeriBlockTransactionReply::mutable_result() {
  
  if (result_ == nullptr) {
    auto* p = CreateMaybeMessage<::VeriBlock::GeneralReply>(GetArenaNoVirtual());
    result_ = p;
  }
  // @@protoc_insertion_point(field_mutable:VeriBlock.VeriBlockTransactionReply.result)
  return result_;
}
inline void VeriBlockTransactionReply::set_allocated_result(::VeriBlock::GeneralReply* result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete result_;
  }
  if (result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result, submessage_arena);
    }
    
  } else {
    
  }
  result_ = result;
  // @@protoc_insertion_point(field_set_allocated:VeriBlock.VeriBlockTransactionReply.result)
}

// .VeriBlock.VeriBlockTransaction transaction = 2;
inline bool VeriBlockTransactionReply::has_transaction() const {
  return this != internal_default_instance() && transaction_ != nullptr;
}
inline void VeriBlockTransactionReply::clear_transaction() {
  if (GetArenaNoVirtual() == nullptr && transaction_ != nullptr) {
    delete transaction_;
  }
  transaction_ = nullptr;
}
inline const ::VeriBlock::VeriBlockTransaction& VeriBlockTransactionReply::transaction() const {
  const ::VeriBlock::VeriBlockTransaction* p = transaction_;
  // @@protoc_insertion_point(field_get:VeriBlock.VeriBlockTransactionReply.transaction)
  return p != nullptr ? *p : *reinterpret_cast<const ::VeriBlock::VeriBlockTransaction*>(
      &::VeriBlock::_VeriBlockTransaction_default_instance_);
}
inline ::VeriBlock::VeriBlockTransaction* VeriBlockTransactionReply::release_transaction() {
  // @@protoc_insertion_point(field_release:VeriBlock.VeriBlockTransactionReply.transaction)
  
  ::VeriBlock::VeriBlockTransaction* temp = transaction_;
  transaction_ = nullptr;
  return temp;
}
inline ::VeriBlock::VeriBlockTransaction* VeriBlockTransactionReply::mutable_transaction() {
  
  if (transaction_ == nullptr) {
    auto* p = CreateMaybeMessage<::VeriBlock::VeriBlockTransaction>(GetArenaNoVirtual());
    transaction_ = p;
  }
  // @@protoc_insertion_point(field_mutable:VeriBlock.VeriBlockTransactionReply.transaction)
  return transaction_;
}
inline void VeriBlockTransactionReply::set_allocated_transaction(::VeriBlock::VeriBlockTransaction* transaction) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete transaction_;
  }
  if (transaction) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      transaction = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, transaction, submessage_arena);
    }
    
  } else {
    
  }
  transaction_ = transaction;
  // @@protoc_insertion_point(field_set_allocated:VeriBlock.VeriBlockTransactionReply.transaction)
}

// -------------------------------------------------------------------

// VeriBlockPublicationReply

// .VeriBlock.GeneralReply result = 1;
inline bool VeriBlockPublicationReply::has_result() const {
  return this != internal_default_instance() && result_ != nullptr;
}
inline void VeriBlockPublicationReply::clear_result() {
  if (GetArenaNoVirtual() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
}
inline const ::VeriBlock::GeneralReply& VeriBlockPublicationReply::result() const {
  const ::VeriBlock::GeneralReply* p = result_;
  // @@protoc_insertion_point(field_get:VeriBlock.VeriBlockPublicationReply.result)
  return p != nullptr ? *p : *reinterpret_cast<const ::VeriBlock::GeneralReply*>(
      &::VeriBlock::_GeneralReply_default_instance_);
}
inline ::VeriBlock::GeneralReply* VeriBlockPublicationReply::release_result() {
  // @@protoc_insertion_point(field_release:VeriBlock.VeriBlockPublicationReply.result)
  
  ::VeriBlock::GeneralReply* temp = result_;
  result_ = nullptr;
  return temp;
}
inline ::VeriBlock::GeneralReply* VeriBlockPublicationReply::mutable_result() {
  
  if (result_ == nullptr) {
    auto* p = CreateMaybeMessage<::VeriBlock::GeneralReply>(GetArenaNoVirtual());
    result_ = p;
  }
  // @@protoc_insertion_point(field_mutable:VeriBlock.VeriBlockPublicationReply.result)
  return result_;
}
inline void VeriBlockPublicationReply::set_allocated_result(::VeriBlock::GeneralReply* result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete result_;
  }
  if (result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result, submessage_arena);
    }
    
  } else {
    
  }
  result_ = result;
  // @@protoc_insertion_point(field_set_allocated:VeriBlock.VeriBlockPublicationReply.result)
}

// .VeriBlock.VeriBlockPublication publication = 2;
inline bool VeriBlockPublicationReply::has_publication() const {
  return this != internal_default_instance() && publication_ != nullptr;
}
inline void VeriBlockPublicationReply::clear_publication() {
  if (GetArenaNoVirtual() == nullptr && publication_ != nullptr) {
    delete publication_;
  }
  publication_ = nullptr;
}
inline const ::VeriBlock::VeriBlockPublication& VeriBlockPublicationReply::publication() const {
  const ::VeriBlock::VeriBlockPublication* p = publication_;
  // @@protoc_insertion_point(field_get:VeriBlock.VeriBlockPublicationReply.publication)
  return p != nullptr ? *p : *reinterpret_cast<const ::VeriBlock::VeriBlockPublication*>(
      &::VeriBlock::_VeriBlockPublication_default_instance_);
}
inline ::VeriBlock::VeriBlockPublication* VeriBlockPublicationReply::release_publication() {
  // @@protoc_insertion_point(field_release:VeriBlock.VeriBlockPublicationReply.publication)
  
  ::VeriBlock::VeriBlockPublication* temp = publication_;
  publication_ = nullptr;
  return temp;
}
inline ::VeriBlock::VeriBlockPublication* VeriBlockPublicationReply::mutable_publication() {
  
  if (publication_ == nullptr) {
    auto* p = CreateMaybeMessage<::VeriBlock::VeriBlockPublication>(GetArenaNoVirtual());
    publication_ = p;
  }
  // @@protoc_insertion_point(field_mutable:VeriBlock.VeriBlockPublicationReply.publication)
  return publication_;
}
inline void VeriBlockPublicationReply::set_allocated_publication(::VeriBlock::VeriBlockPublication* publication) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete publication_;
  }
  if (publication) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      publication = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, publication, submessage_arena);
    }
    
  } else {
    
  }
  publication_ = publication;
  // @@protoc_insertion_point(field_set_allocated:VeriBlock.VeriBlockPublicationReply.publication)
}

// -------------------------------------------------------------------

// VeriBlockPoPTransactionReply

// .VeriBlock.GeneralReply result = 1;
inline bool VeriBlockPoPTransactionReply::has_result() const {
  return this != internal_default_instance() && result_ != nullptr;
}
inline void VeriBlockPoPTransactionReply::clear_result() {
  if (GetArenaNoVirtual() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
}
inline const ::VeriBlock::GeneralReply& VeriBlockPoPTransactionReply::result() const {
  const ::VeriBlock::GeneralReply* p = result_;
  // @@protoc_insertion_point(field_get:VeriBlock.VeriBlockPoPTransactionReply.result)
  return p != nullptr ? *p : *reinterpret_cast<const ::VeriBlock::GeneralReply*>(
      &::VeriBlock::_GeneralReply_default_instance_);
}
inline ::VeriBlock::GeneralReply* VeriBlockPoPTransactionReply::release_result() {
  // @@protoc_insertion_point(field_release:VeriBlock.VeriBlockPoPTransactionReply.result)
  
  ::VeriBlock::GeneralReply* temp = result_;
  result_ = nullptr;
  return temp;
}
inline ::VeriBlock::GeneralReply* VeriBlockPoPTransactionReply::mutable_result() {
  
  if (result_ == nullptr) {
    auto* p = CreateMaybeMessage<::VeriBlock::GeneralReply>(GetArenaNoVirtual());
    result_ = p;
  }
  // @@protoc_insertion_point(field_mutable:VeriBlock.VeriBlockPoPTransactionReply.result)
  return result_;
}
inline void VeriBlockPoPTransactionReply::set_allocated_result(::VeriBlock::GeneralReply* result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete result_;
  }
  if (result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result, submessage_arena);
    }
    
  } else {
    
  }
  result_ = result;
  // @@protoc_insertion_point(field_set_allocated:VeriBlock.VeriBlockPoPTransactionReply.result)
}

// .VeriBlock.VeriBlockPoPTransaction transaction = 2;
inline bool VeriBlockPoPTransactionReply::has_transaction() const {
  return this != internal_default_instance() && transaction_ != nullptr;
}
inline void VeriBlockPoPTransactionReply::clear_transaction() {
  if (GetArenaNoVirtual() == nullptr && transaction_ != nullptr) {
    delete transaction_;
  }
  transaction_ = nullptr;
}
inline const ::VeriBlock::VeriBlockPoPTransaction& VeriBlockPoPTransactionReply::transaction() const {
  const ::VeriBlock::VeriBlockPoPTransaction* p = transaction_;
  // @@protoc_insertion_point(field_get:VeriBlock.VeriBlockPoPTransactionReply.transaction)
  return p != nullptr ? *p : *reinterpret_cast<const ::VeriBlock::VeriBlockPoPTransaction*>(
      &::VeriBlock::_VeriBlockPoPTransaction_default_instance_);
}
inline ::VeriBlock::VeriBlockPoPTransaction* VeriBlockPoPTransactionReply::release_transaction() {
  // @@protoc_insertion_point(field_release:VeriBlock.VeriBlockPoPTransactionReply.transaction)
  
  ::VeriBlock::VeriBlockPoPTransaction* temp = transaction_;
  transaction_ = nullptr;
  return temp;
}
inline ::VeriBlock::VeriBlockPoPTransaction* VeriBlockPoPTransactionReply::mutable_transaction() {
  
  if (transaction_ == nullptr) {
    auto* p = CreateMaybeMessage<::VeriBlock::VeriBlockPoPTransaction>(GetArenaNoVirtual());
    transaction_ = p;
  }
  // @@protoc_insertion_point(field_mutable:VeriBlock.VeriBlockPoPTransactionReply.transaction)
  return transaction_;
}
inline void VeriBlockPoPTransactionReply::set_allocated_transaction(::VeriBlock::VeriBlockPoPTransaction* transaction) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete transaction_;
  }
  if (transaction) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      transaction = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, transaction, submessage_arena);
    }
    
  } else {
    
  }
  transaction_ = transaction;
  // @@protoc_insertion_point(field_set_allocated:VeriBlock.VeriBlockPoPTransactionReply.transaction)
}

// -------------------------------------------------------------------

// OutputReply

// .VeriBlock.GeneralReply result = 1;
inline bool OutputReply::has_result() const {
  return this != internal_default_instance() && result_ != nullptr;
}
inline void OutputReply::clear_result() {
  if (GetArenaNoVirtual() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
}
inline const ::VeriBlock::GeneralReply& OutputReply::result() const {
  const ::VeriBlock::GeneralReply* p = result_;
  // @@protoc_insertion_point(field_get:VeriBlock.OutputReply.result)
  return p != nullptr ? *p : *reinterpret_cast<const ::VeriBlock::GeneralReply*>(
      &::VeriBlock::_GeneralReply_default_instance_);
}
inline ::VeriBlock::GeneralReply* OutputReply::release_result() {
  // @@protoc_insertion_point(field_release:VeriBlock.OutputReply.result)
  
  ::VeriBlock::GeneralReply* temp = result_;
  result_ = nullptr;
  return temp;
}
inline ::VeriBlock::GeneralReply* OutputReply::mutable_result() {
  
  if (result_ == nullptr) {
    auto* p = CreateMaybeMessage<::VeriBlock::GeneralReply>(GetArenaNoVirtual());
    result_ = p;
  }
  // @@protoc_insertion_point(field_mutable:VeriBlock.OutputReply.result)
  return result_;
}
inline void OutputReply::set_allocated_result(::VeriBlock::GeneralReply* result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete result_;
  }
  if (result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result, submessage_arena);
    }
    
  } else {
    
  }
  result_ = result;
  // @@protoc_insertion_point(field_set_allocated:VeriBlock.OutputReply.result)
}

// .VeriBlock.Output output = 2;
inline bool OutputReply::has_output() const {
  return this != internal_default_instance() && output_ != nullptr;
}
inline void OutputReply::clear_output() {
  if (GetArenaNoVirtual() == nullptr && output_ != nullptr) {
    delete output_;
  }
  output_ = nullptr;
}
inline const ::VeriBlock::Output& OutputReply::output() const {
  const ::VeriBlock::Output* p = output_;
  // @@protoc_insertion_point(field_get:VeriBlock.OutputReply.output)
  return p != nullptr ? *p : *reinterpret_cast<const ::VeriBlock::Output*>(
      &::VeriBlock::_Output_default_instance_);
}
inline ::VeriBlock::Output* OutputReply::release_output() {
  // @@protoc_insertion_point(field_release:VeriBlock.OutputReply.output)
  
  ::VeriBlock::Output* temp = output_;
  output_ = nullptr;
  return temp;
}
inline ::VeriBlock::Output* OutputReply::mutable_output() {
  
  if (output_ == nullptr) {
    auto* p = CreateMaybeMessage<::VeriBlock::Output>(GetArenaNoVirtual());
    output_ = p;
  }
  // @@protoc_insertion_point(field_mutable:VeriBlock.OutputReply.output)
  return output_;
}
inline void OutputReply::set_allocated_output(::VeriBlock::Output* output) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete output_;
  }
  if (output) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      output = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, output, submessage_arena);
    }
    
  } else {
    
  }
  output_ = output;
  // @@protoc_insertion_point(field_set_allocated:VeriBlock.OutputReply.output)
}

// -------------------------------------------------------------------

// AddressReply

// .VeriBlock.GeneralReply result = 1;
inline bool AddressReply::has_result() const {
  return this != internal_default_instance() && result_ != nullptr;
}
inline void AddressReply::clear_result() {
  if (GetArenaNoVirtual() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
}
inline const ::VeriBlock::GeneralReply& AddressReply::result() const {
  const ::VeriBlock::GeneralReply* p = result_;
  // @@protoc_insertion_point(field_get:VeriBlock.AddressReply.result)
  return p != nullptr ? *p : *reinterpret_cast<const ::VeriBlock::GeneralReply*>(
      &::VeriBlock::_GeneralReply_default_instance_);
}
inline ::VeriBlock::GeneralReply* AddressReply::release_result() {
  // @@protoc_insertion_point(field_release:VeriBlock.AddressReply.result)
  
  ::VeriBlock::GeneralReply* temp = result_;
  result_ = nullptr;
  return temp;
}
inline ::VeriBlock::GeneralReply* AddressReply::mutable_result() {
  
  if (result_ == nullptr) {
    auto* p = CreateMaybeMessage<::VeriBlock::GeneralReply>(GetArenaNoVirtual());
    result_ = p;
  }
  // @@protoc_insertion_point(field_mutable:VeriBlock.AddressReply.result)
  return result_;
}
inline void AddressReply::set_allocated_result(::VeriBlock::GeneralReply* result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete result_;
  }
  if (result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result, submessage_arena);
    }
    
  } else {
    
  }
  result_ = result;
  // @@protoc_insertion_point(field_set_allocated:VeriBlock.AddressReply.result)
}

// .VeriBlock.Address address = 2;
inline bool AddressReply::has_address() const {
  return this != internal_default_instance() && address_ != nullptr;
}
inline void AddressReply::clear_address() {
  if (GetArenaNoVirtual() == nullptr && address_ != nullptr) {
    delete address_;
  }
  address_ = nullptr;
}
inline const ::VeriBlock::Address& AddressReply::address() const {
  const ::VeriBlock::Address* p = address_;
  // @@protoc_insertion_point(field_get:VeriBlock.AddressReply.address)
  return p != nullptr ? *p : *reinterpret_cast<const ::VeriBlock::Address*>(
      &::VeriBlock::_Address_default_instance_);
}
inline ::VeriBlock::Address* AddressReply::release_address() {
  // @@protoc_insertion_point(field_release:VeriBlock.AddressReply.address)
  
  ::VeriBlock::Address* temp = address_;
  address_ = nullptr;
  return temp;
}
inline ::VeriBlock::Address* AddressReply::mutable_address() {
  
  if (address_ == nullptr) {
    auto* p = CreateMaybeMessage<::VeriBlock::Address>(GetArenaNoVirtual());
    address_ = p;
  }
  // @@protoc_insertion_point(field_mutable:VeriBlock.AddressReply.address)
  return address_;
}
inline void AddressReply::set_allocated_address(::VeriBlock::Address* address) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete address_;
  }
  if (address) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      address = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, address, submessage_arena);
    }
    
  } else {
    
  }
  address_ = address;
  // @@protoc_insertion_point(field_set_allocated:VeriBlock.AddressReply.address)
}

// -------------------------------------------------------------------

// BitcoinBlockReply

// .VeriBlock.GeneralReply result = 1;
inline bool BitcoinBlockReply::has_result() const {
  return this != internal_default_instance() && result_ != nullptr;
}
inline void BitcoinBlockReply::clear_result() {
  if (GetArenaNoVirtual() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
}
inline const ::VeriBlock::GeneralReply& BitcoinBlockReply::result() const {
  const ::VeriBlock::GeneralReply* p = result_;
  // @@protoc_insertion_point(field_get:VeriBlock.BitcoinBlockReply.result)
  return p != nullptr ? *p : *reinterpret_cast<const ::VeriBlock::GeneralReply*>(
      &::VeriBlock::_GeneralReply_default_instance_);
}
inline ::VeriBlock::GeneralReply* BitcoinBlockReply::release_result() {
  // @@protoc_insertion_point(field_release:VeriBlock.BitcoinBlockReply.result)
  
  ::VeriBlock::GeneralReply* temp = result_;
  result_ = nullptr;
  return temp;
}
inline ::VeriBlock::GeneralReply* BitcoinBlockReply::mutable_result() {
  
  if (result_ == nullptr) {
    auto* p = CreateMaybeMessage<::VeriBlock::GeneralReply>(GetArenaNoVirtual());
    result_ = p;
  }
  // @@protoc_insertion_point(field_mutable:VeriBlock.BitcoinBlockReply.result)
  return result_;
}
inline void BitcoinBlockReply::set_allocated_result(::VeriBlock::GeneralReply* result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete result_;
  }
  if (result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result, submessage_arena);
    }
    
  } else {
    
  }
  result_ = result;
  // @@protoc_insertion_point(field_set_allocated:VeriBlock.BitcoinBlockReply.result)
}

// .VeriBlock.BitcoinBlock block = 2;
inline bool BitcoinBlockReply::has_block() const {
  return this != internal_default_instance() && block_ != nullptr;
}
inline void BitcoinBlockReply::clear_block() {
  if (GetArenaNoVirtual() == nullptr && block_ != nullptr) {
    delete block_;
  }
  block_ = nullptr;
}
inline const ::VeriBlock::BitcoinBlock& BitcoinBlockReply::block() const {
  const ::VeriBlock::BitcoinBlock* p = block_;
  // @@protoc_insertion_point(field_get:VeriBlock.BitcoinBlockReply.block)
  return p != nullptr ? *p : *reinterpret_cast<const ::VeriBlock::BitcoinBlock*>(
      &::VeriBlock::_BitcoinBlock_default_instance_);
}
inline ::VeriBlock::BitcoinBlock* BitcoinBlockReply::release_block() {
  // @@protoc_insertion_point(field_release:VeriBlock.BitcoinBlockReply.block)
  
  ::VeriBlock::BitcoinBlock* temp = block_;
  block_ = nullptr;
  return temp;
}
inline ::VeriBlock::BitcoinBlock* BitcoinBlockReply::mutable_block() {
  
  if (block_ == nullptr) {
    auto* p = CreateMaybeMessage<::VeriBlock::BitcoinBlock>(GetArenaNoVirtual());
    block_ = p;
  }
  // @@protoc_insertion_point(field_mutable:VeriBlock.BitcoinBlockReply.block)
  return block_;
}
inline void BitcoinBlockReply::set_allocated_block(::VeriBlock::BitcoinBlock* block) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete block_;
  }
  if (block) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      block = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, block, submessage_arena);
    }
    
  } else {
    
  }
  block_ = block;
  // @@protoc_insertion_point(field_set_allocated:VeriBlock.BitcoinBlockReply.block)
}

// -------------------------------------------------------------------

// VeriBlockMerklePathReply

// .VeriBlock.GeneralReply result = 1;
inline bool VeriBlockMerklePathReply::has_result() const {
  return this != internal_default_instance() && result_ != nullptr;
}
inline void VeriBlockMerklePathReply::clear_result() {
  if (GetArenaNoVirtual() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
}
inline const ::VeriBlock::GeneralReply& VeriBlockMerklePathReply::result() const {
  const ::VeriBlock::GeneralReply* p = result_;
  // @@protoc_insertion_point(field_get:VeriBlock.VeriBlockMerklePathReply.result)
  return p != nullptr ? *p : *reinterpret_cast<const ::VeriBlock::GeneralReply*>(
      &::VeriBlock::_GeneralReply_default_instance_);
}
inline ::VeriBlock::GeneralReply* VeriBlockMerklePathReply::release_result() {
  // @@protoc_insertion_point(field_release:VeriBlock.VeriBlockMerklePathReply.result)
  
  ::VeriBlock::GeneralReply* temp = result_;
  result_ = nullptr;
  return temp;
}
inline ::VeriBlock::GeneralReply* VeriBlockMerklePathReply::mutable_result() {
  
  if (result_ == nullptr) {
    auto* p = CreateMaybeMessage<::VeriBlock::GeneralReply>(GetArenaNoVirtual());
    result_ = p;
  }
  // @@protoc_insertion_point(field_mutable:VeriBlock.VeriBlockMerklePathReply.result)
  return result_;
}
inline void VeriBlockMerklePathReply::set_allocated_result(::VeriBlock::GeneralReply* result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete result_;
  }
  if (result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result, submessage_arena);
    }
    
  } else {
    
  }
  result_ = result;
  // @@protoc_insertion_point(field_set_allocated:VeriBlock.VeriBlockMerklePathReply.result)
}

// .VeriBlock.VeriBlockMerklePath merklePath = 2;
inline bool VeriBlockMerklePathReply::has_merklepath() const {
  return this != internal_default_instance() && merklepath_ != nullptr;
}
inline void VeriBlockMerklePathReply::clear_merklepath() {
  if (GetArenaNoVirtual() == nullptr && merklepath_ != nullptr) {
    delete merklepath_;
  }
  merklepath_ = nullptr;
}
inline const ::VeriBlock::VeriBlockMerklePath& VeriBlockMerklePathReply::merklepath() const {
  const ::VeriBlock::VeriBlockMerklePath* p = merklepath_;
  // @@protoc_insertion_point(field_get:VeriBlock.VeriBlockMerklePathReply.merklePath)
  return p != nullptr ? *p : *reinterpret_cast<const ::VeriBlock::VeriBlockMerklePath*>(
      &::VeriBlock::_VeriBlockMerklePath_default_instance_);
}
inline ::VeriBlock::VeriBlockMerklePath* VeriBlockMerklePathReply::release_merklepath() {
  // @@protoc_insertion_point(field_release:VeriBlock.VeriBlockMerklePathReply.merklePath)
  
  ::VeriBlock::VeriBlockMerklePath* temp = merklepath_;
  merklepath_ = nullptr;
  return temp;
}
inline ::VeriBlock::VeriBlockMerklePath* VeriBlockMerklePathReply::mutable_merklepath() {
  
  if (merklepath_ == nullptr) {
    auto* p = CreateMaybeMessage<::VeriBlock::VeriBlockMerklePath>(GetArenaNoVirtual());
    merklepath_ = p;
  }
  // @@protoc_insertion_point(field_mutable:VeriBlock.VeriBlockMerklePathReply.merklePath)
  return merklepath_;
}
inline void VeriBlockMerklePathReply::set_allocated_merklepath(::VeriBlock::VeriBlockMerklePath* merklepath) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete merklepath_;
  }
  if (merklepath) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      merklepath = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, merklepath, submessage_arena);
    }
    
  } else {
    
  }
  merklepath_ = merklepath;
  // @@protoc_insertion_point(field_set_allocated:VeriBlock.VeriBlockMerklePathReply.merklePath)
}

// -------------------------------------------------------------------

// MerklePathReply

// .VeriBlock.GeneralReply result = 1;
inline bool MerklePathReply::has_result() const {
  return this != internal_default_instance() && result_ != nullptr;
}
inline void MerklePathReply::clear_result() {
  if (GetArenaNoVirtual() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
}
inline const ::VeriBlock::GeneralReply& MerklePathReply::result() const {
  const ::VeriBlock::GeneralReply* p = result_;
  // @@protoc_insertion_point(field_get:VeriBlock.MerklePathReply.result)
  return p != nullptr ? *p : *reinterpret_cast<const ::VeriBlock::GeneralReply*>(
      &::VeriBlock::_GeneralReply_default_instance_);
}
inline ::VeriBlock::GeneralReply* MerklePathReply::release_result() {
  // @@protoc_insertion_point(field_release:VeriBlock.MerklePathReply.result)
  
  ::VeriBlock::GeneralReply* temp = result_;
  result_ = nullptr;
  return temp;
}
inline ::VeriBlock::GeneralReply* MerklePathReply::mutable_result() {
  
  if (result_ == nullptr) {
    auto* p = CreateMaybeMessage<::VeriBlock::GeneralReply>(GetArenaNoVirtual());
    result_ = p;
  }
  // @@protoc_insertion_point(field_mutable:VeriBlock.MerklePathReply.result)
  return result_;
}
inline void MerklePathReply::set_allocated_result(::VeriBlock::GeneralReply* result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete result_;
  }
  if (result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result, submessage_arena);
    }
    
  } else {
    
  }
  result_ = result;
  // @@protoc_insertion_point(field_set_allocated:VeriBlock.MerklePathReply.result)
}

// .VeriBlock.MerklePath merklePath = 2;
inline bool MerklePathReply::has_merklepath() const {
  return this != internal_default_instance() && merklepath_ != nullptr;
}
inline void MerklePathReply::clear_merklepath() {
  if (GetArenaNoVirtual() == nullptr && merklepath_ != nullptr) {
    delete merklepath_;
  }
  merklepath_ = nullptr;
}
inline const ::VeriBlock::MerklePath& MerklePathReply::merklepath() const {
  const ::VeriBlock::MerklePath* p = merklepath_;
  // @@protoc_insertion_point(field_get:VeriBlock.MerklePathReply.merklePath)
  return p != nullptr ? *p : *reinterpret_cast<const ::VeriBlock::MerklePath*>(
      &::VeriBlock::_MerklePath_default_instance_);
}
inline ::VeriBlock::MerklePath* MerklePathReply::release_merklepath() {
  // @@protoc_insertion_point(field_release:VeriBlock.MerklePathReply.merklePath)
  
  ::VeriBlock::MerklePath* temp = merklepath_;
  merklepath_ = nullptr;
  return temp;
}
inline ::VeriBlock::MerklePath* MerklePathReply::mutable_merklepath() {
  
  if (merklepath_ == nullptr) {
    auto* p = CreateMaybeMessage<::VeriBlock::MerklePath>(GetArenaNoVirtual());
    merklepath_ = p;
  }
  // @@protoc_insertion_point(field_mutable:VeriBlock.MerklePathReply.merklePath)
  return merklepath_;
}
inline void MerklePathReply::set_allocated_merklepath(::VeriBlock::MerklePath* merklepath) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete merklepath_;
  }
  if (merklepath) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      merklepath = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, merklepath, submessage_arena);
    }
    
  } else {
    
  }
  merklepath_ = merklepath;
  // @@protoc_insertion_point(field_set_allocated:VeriBlock.MerklePathReply.merklePath)
}

// -------------------------------------------------------------------

// AltChainBlock

// .VeriBlock.BlockIndex blockIndex = 1;
inline bool AltChainBlock::has_blockindex() const {
  return this != internal_default_instance() && blockindex_ != nullptr;
}
inline void AltChainBlock::clear_blockindex() {
  if (GetArenaNoVirtual() == nullptr && blockindex_ != nullptr) {
    delete blockindex_;
  }
  blockindex_ = nullptr;
}
inline const ::VeriBlock::BlockIndex& AltChainBlock::blockindex() const {
  const ::VeriBlock::BlockIndex* p = blockindex_;
  // @@protoc_insertion_point(field_get:VeriBlock.AltChainBlock.blockIndex)
  return p != nullptr ? *p : *reinterpret_cast<const ::VeriBlock::BlockIndex*>(
      &::VeriBlock::_BlockIndex_default_instance_);
}
inline ::VeriBlock::BlockIndex* AltChainBlock::release_blockindex() {
  // @@protoc_insertion_point(field_release:VeriBlock.AltChainBlock.blockIndex)
  
  ::VeriBlock::BlockIndex* temp = blockindex_;
  blockindex_ = nullptr;
  return temp;
}
inline ::VeriBlock::BlockIndex* AltChainBlock::mutable_blockindex() {
  
  if (blockindex_ == nullptr) {
    auto* p = CreateMaybeMessage<::VeriBlock::BlockIndex>(GetArenaNoVirtual());
    blockindex_ = p;
  }
  // @@protoc_insertion_point(field_mutable:VeriBlock.AltChainBlock.blockIndex)
  return blockindex_;
}
inline void AltChainBlock::set_allocated_blockindex(::VeriBlock::BlockIndex* blockindex) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete blockindex_;
  }
  if (blockindex) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      blockindex = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, blockindex, submessage_arena);
    }
    
  } else {
    
  }
  blockindex_ = blockindex;
  // @@protoc_insertion_point(field_set_allocated:VeriBlock.AltChainBlock.blockIndex)
}

// int32 timestamp = 2;
inline void AltChainBlock::clear_timestamp() {
  timestamp_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AltChainBlock::timestamp() const {
  // @@protoc_insertion_point(field_get:VeriBlock.AltChainBlock.timestamp)
  return timestamp_;
}
inline void AltChainBlock::set_timestamp(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:VeriBlock.AltChainBlock.timestamp)
}

// -------------------------------------------------------------------

// TwoBranchesRequest

// repeated .VeriBlock.AltChainBlock leftFork = 1;
inline int TwoBranchesRequest::leftfork_size() const {
  return leftfork_.size();
}
inline void TwoBranchesRequest::clear_leftfork() {
  leftfork_.Clear();
}
inline ::VeriBlock::AltChainBlock* TwoBranchesRequest::mutable_leftfork(int index) {
  // @@protoc_insertion_point(field_mutable:VeriBlock.TwoBranchesRequest.leftFork)
  return leftfork_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::VeriBlock::AltChainBlock >*
TwoBranchesRequest::mutable_leftfork() {
  // @@protoc_insertion_point(field_mutable_list:VeriBlock.TwoBranchesRequest.leftFork)
  return &leftfork_;
}
inline const ::VeriBlock::AltChainBlock& TwoBranchesRequest::leftfork(int index) const {
  // @@protoc_insertion_point(field_get:VeriBlock.TwoBranchesRequest.leftFork)
  return leftfork_.Get(index);
}
inline ::VeriBlock::AltChainBlock* TwoBranchesRequest::add_leftfork() {
  // @@protoc_insertion_point(field_add:VeriBlock.TwoBranchesRequest.leftFork)
  return leftfork_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::VeriBlock::AltChainBlock >&
TwoBranchesRequest::leftfork() const {
  // @@protoc_insertion_point(field_list:VeriBlock.TwoBranchesRequest.leftFork)
  return leftfork_;
}

// repeated .VeriBlock.AltChainBlock rightFork = 2;
inline int TwoBranchesRequest::rightfork_size() const {
  return rightfork_.size();
}
inline void TwoBranchesRequest::clear_rightfork() {
  rightfork_.Clear();
}
inline ::VeriBlock::AltChainBlock* TwoBranchesRequest::mutable_rightfork(int index) {
  // @@protoc_insertion_point(field_mutable:VeriBlock.TwoBranchesRequest.rightFork)
  return rightfork_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::VeriBlock::AltChainBlock >*
TwoBranchesRequest::mutable_rightfork() {
  // @@protoc_insertion_point(field_mutable_list:VeriBlock.TwoBranchesRequest.rightFork)
  return &rightfork_;
}
inline const ::VeriBlock::AltChainBlock& TwoBranchesRequest::rightfork(int index) const {
  // @@protoc_insertion_point(field_get:VeriBlock.TwoBranchesRequest.rightFork)
  return rightfork_.Get(index);
}
inline ::VeriBlock::AltChainBlock* TwoBranchesRequest::add_rightfork() {
  // @@protoc_insertion_point(field_add:VeriBlock.TwoBranchesRequest.rightFork)
  return rightfork_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::VeriBlock::AltChainBlock >&
TwoBranchesRequest::rightfork() const {
  // @@protoc_insertion_point(field_list:VeriBlock.TwoBranchesRequest.rightFork)
  return rightfork_;
}

// -------------------------------------------------------------------

// CompareReply

// .VeriBlock.GeneralReply result = 1;
inline bool CompareReply::has_result() const {
  return this != internal_default_instance() && result_ != nullptr;
}
inline void CompareReply::clear_result() {
  if (GetArenaNoVirtual() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
}
inline const ::VeriBlock::GeneralReply& CompareReply::result() const {
  const ::VeriBlock::GeneralReply* p = result_;
  // @@protoc_insertion_point(field_get:VeriBlock.CompareReply.result)
  return p != nullptr ? *p : *reinterpret_cast<const ::VeriBlock::GeneralReply*>(
      &::VeriBlock::_GeneralReply_default_instance_);
}
inline ::VeriBlock::GeneralReply* CompareReply::release_result() {
  // @@protoc_insertion_point(field_release:VeriBlock.CompareReply.result)
  
  ::VeriBlock::GeneralReply* temp = result_;
  result_ = nullptr;
  return temp;
}
inline ::VeriBlock::GeneralReply* CompareReply::mutable_result() {
  
  if (result_ == nullptr) {
    auto* p = CreateMaybeMessage<::VeriBlock::GeneralReply>(GetArenaNoVirtual());
    result_ = p;
  }
  // @@protoc_insertion_point(field_mutable:VeriBlock.CompareReply.result)
  return result_;
}
inline void CompareReply::set_allocated_result(::VeriBlock::GeneralReply* result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete result_;
  }
  if (result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result, submessage_arena);
    }
    
  } else {
    
  }
  result_ = result;
  // @@protoc_insertion_point(field_set_allocated:VeriBlock.CompareReply.result)
}

// int32 comparingsResult = 2;
inline void CompareReply::clear_comparingsresult() {
  comparingsresult_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CompareReply::comparingsresult() const {
  // @@protoc_insertion_point(field_get:VeriBlock.CompareReply.comparingsResult)
  return comparingsresult_;
}
inline void CompareReply::set_comparingsresult(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  comparingsresult_ = value;
  // @@protoc_insertion_point(field_set:VeriBlock.CompareReply.comparingsResult)
}

// -------------------------------------------------------------------

// ForkresolutionConfigRequest

// int32 keystoneFinalityDelay = 1;
inline void ForkresolutionConfigRequest::clear_keystonefinalitydelay() {
  keystonefinalitydelay_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ForkresolutionConfigRequest::keystonefinalitydelay() const {
  // @@protoc_insertion_point(field_get:VeriBlock.ForkresolutionConfigRequest.keystoneFinalityDelay)
  return keystonefinalitydelay_;
}
inline void ForkresolutionConfigRequest::set_keystonefinalitydelay(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  keystonefinalitydelay_ = value;
  // @@protoc_insertion_point(field_set:VeriBlock.ForkresolutionConfigRequest.keystoneFinalityDelay)
}

// int32 amnestyPeriod = 2;
inline void ForkresolutionConfigRequest::clear_amnestyperiod() {
  amnestyperiod_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ForkresolutionConfigRequest::amnestyperiod() const {
  // @@protoc_insertion_point(field_get:VeriBlock.ForkresolutionConfigRequest.amnestyPeriod)
  return amnestyperiod_;
}
inline void ForkresolutionConfigRequest::set_amnestyperiod(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  amnestyperiod_ = value;
  // @@protoc_insertion_point(field_set:VeriBlock.ForkresolutionConfigRequest.amnestyPeriod)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace VeriBlock

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_integration_2eproto
