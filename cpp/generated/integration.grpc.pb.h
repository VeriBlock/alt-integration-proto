// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: integration.proto
#ifndef GRPC_integration_2eproto__INCLUDED
#define GRPC_integration_2eproto__INCLUDED

#include "integration.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpc_impl {
class Channel;
class CompletionQueue;
class ServerCompletionQueue;
}  // namespace grpc_impl

namespace grpc {
namespace experimental {
template <typename RequestT, typename ResponseT>
class MessageAllocator;
}  // namespace experimental
}  // namespace grpc_impl

namespace grpc {
class ServerContext;
}  // namespace grpc

namespace VeriBlock {

class IntegrationService final {
 public:
  static constexpr char const* service_full_name() {
    return "VeriBlock.IntegrationService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status ResetSecurity(::grpc::ClientContext* context, const ::VeriBlock::EmptyRequest& request, ::VeriBlock::GeneralReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::GeneralReply>> AsyncResetSecurity(::grpc::ClientContext* context, const ::VeriBlock::EmptyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::GeneralReply>>(AsyncResetSecurityRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::GeneralReply>> PrepareAsyncResetSecurity(::grpc::ClientContext* context, const ::VeriBlock::EmptyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::GeneralReply>>(PrepareAsyncResetSecurityRaw(context, request, cq));
    }
    virtual ::grpc::Status AddGenesisVeriBlock(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockBlock& request, ::VeriBlock::GeneralReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::GeneralReply>> AsyncAddGenesisVeriBlock(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockBlock& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::GeneralReply>>(AsyncAddGenesisVeriBlockRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::GeneralReply>> PrepareAsyncAddGenesisVeriBlock(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockBlock& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::GeneralReply>>(PrepareAsyncAddGenesisVeriBlockRaw(context, request, cq));
    }
    virtual ::grpc::Status AddGenesisBitcoin(::grpc::ClientContext* context, const ::VeriBlock::BitcoinBlock& request, ::VeriBlock::GeneralReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::GeneralReply>> AsyncAddGenesisBitcoin(::grpc::ClientContext* context, const ::VeriBlock::BitcoinBlock& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::GeneralReply>>(AsyncAddGenesisBitcoinRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::GeneralReply>> PrepareAsyncAddGenesisBitcoin(::grpc::ClientContext* context, const ::VeriBlock::BitcoinBlock& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::GeneralReply>>(PrepareAsyncAddGenesisBitcoinRaw(context, request, cq));
    }
    virtual ::grpc::Status AddPayloads(::grpc::ClientContext* context, const ::VeriBlock::AddPayloadsRequest& request, ::VeriBlock::GeneralReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::GeneralReply>> AsyncAddPayloads(::grpc::ClientContext* context, const ::VeriBlock::AddPayloadsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::GeneralReply>>(AsyncAddPayloadsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::GeneralReply>> PrepareAsyncAddPayloads(::grpc::ClientContext* context, const ::VeriBlock::AddPayloadsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::GeneralReply>>(PrepareAsyncAddPayloadsRaw(context, request, cq));
    }
    virtual ::grpc::Status RemovePayloads(::grpc::ClientContext* context, const ::VeriBlock::RemovePayloadsRequest& request, ::VeriBlock::GeneralReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::GeneralReply>> AsyncRemovePayloads(::grpc::ClientContext* context, const ::VeriBlock::RemovePayloadsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::GeneralReply>>(AsyncRemovePayloadsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::GeneralReply>> PrepareAsyncRemovePayloads(::grpc::ClientContext* context, const ::VeriBlock::RemovePayloadsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::GeneralReply>>(PrepareAsyncRemovePayloadsRaw(context, request, cq));
    }
    virtual ::grpc::Status AddTemporaryPayloads(::grpc::ClientContext* context, const ::VeriBlock::AddTemporaryPayloadsRequest& request, ::VeriBlock::GeneralReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::GeneralReply>> AsyncAddTemporaryPayloads(::grpc::ClientContext* context, const ::VeriBlock::AddTemporaryPayloadsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::GeneralReply>>(AsyncAddTemporaryPayloadsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::GeneralReply>> PrepareAsyncAddTemporaryPayloads(::grpc::ClientContext* context, const ::VeriBlock::AddTemporaryPayloadsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::GeneralReply>>(PrepareAsyncAddTemporaryPayloadsRaw(context, request, cq));
    }
    virtual ::grpc::Status ClearTemporaryPayloads(::grpc::ClientContext* context, const ::VeriBlock::EmptyRequest& request, ::VeriBlock::GeneralReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::GeneralReply>> AsyncClearTemporaryPayloads(::grpc::ClientContext* context, const ::VeriBlock::EmptyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::GeneralReply>>(AsyncClearTemporaryPayloadsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::GeneralReply>> PrepareAsyncClearTemporaryPayloads(::grpc::ClientContext* context, const ::VeriBlock::EmptyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::GeneralReply>>(PrepareAsyncClearTemporaryPayloadsRaw(context, request, cq));
    }
    virtual ::grpc::Status SimplifyVTBs(::grpc::ClientContext* context, const ::VeriBlock::SimplifyVTBsRequest& request, ::VeriBlock::SimplifyVTBsReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::SimplifyVTBsReply>> AsyncSimplifyVTBs(::grpc::ClientContext* context, const ::VeriBlock::SimplifyVTBsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::SimplifyVTBsReply>>(AsyncSimplifyVTBsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::SimplifyVTBsReply>> PrepareAsyncSimplifyVTBs(::grpc::ClientContext* context, const ::VeriBlock::SimplifyVTBsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::SimplifyVTBsReply>>(PrepareAsyncSimplifyVTBsRaw(context, request, cq));
    }
    virtual ::grpc::Status CheckATVAgainstView(::grpc::ClientContext* context, const ::VeriBlock::AltPublication& request, ::VeriBlock::GeneralReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::GeneralReply>> AsyncCheckATVAgainstView(::grpc::ClientContext* context, const ::VeriBlock::AltPublication& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::GeneralReply>>(AsyncCheckATVAgainstViewRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::GeneralReply>> PrepareAsyncCheckATVAgainstView(::grpc::ClientContext* context, const ::VeriBlock::AltPublication& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::GeneralReply>>(PrepareAsyncCheckATVAgainstViewRaw(context, request, cq));
    }
    virtual ::grpc::Status CheckVTBInternally(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockPublication& request, ::VeriBlock::GeneralReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::GeneralReply>> AsyncCheckVTBInternally(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockPublication& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::GeneralReply>>(AsyncCheckVTBInternallyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::GeneralReply>> PrepareAsyncCheckVTBInternally(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockPublication& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::GeneralReply>>(PrepareAsyncCheckVTBInternallyRaw(context, request, cq));
    }
    virtual ::grpc::Status CheckATVInternally(::grpc::ClientContext* context, const ::VeriBlock::AltPublication& request, ::VeriBlock::GeneralReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::GeneralReply>> AsyncCheckATVInternally(::grpc::ClientContext* context, const ::VeriBlock::AltPublication& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::GeneralReply>>(AsyncCheckATVInternallyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::GeneralReply>> PrepareAsyncCheckATVInternally(::grpc::ClientContext* context, const ::VeriBlock::AltPublication& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::GeneralReply>>(PrepareAsyncCheckATVInternallyRaw(context, request, cq));
    }
    virtual ::grpc::Status GetMainVBKHeightOfATV(::grpc::ClientContext* context, const ::VeriBlock::AltPublication& request, ::VeriBlock::GetMainVBKHeightOfATVReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::GetMainVBKHeightOfATVReply>> AsyncGetMainVBKHeightOfATV(::grpc::ClientContext* context, const ::VeriBlock::AltPublication& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::GetMainVBKHeightOfATVReply>>(AsyncGetMainVBKHeightOfATVRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::GetMainVBKHeightOfATVReply>> PrepareAsyncGetMainVBKHeightOfATV(::grpc::ClientContext* context, const ::VeriBlock::AltPublication& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::GetMainVBKHeightOfATVReply>>(PrepareAsyncGetMainVBKHeightOfATVRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      virtual void ResetSecurity(::grpc::ClientContext* context, const ::VeriBlock::EmptyRequest* request, ::VeriBlock::GeneralReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ResetSecurity(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::GeneralReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ResetSecurity(::grpc::ClientContext* context, const ::VeriBlock::EmptyRequest* request, ::VeriBlock::GeneralReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void ResetSecurity(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::GeneralReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void AddGenesisVeriBlock(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockBlock* request, ::VeriBlock::GeneralReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void AddGenesisVeriBlock(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::GeneralReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void AddGenesisVeriBlock(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockBlock* request, ::VeriBlock::GeneralReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void AddGenesisVeriBlock(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::GeneralReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void AddGenesisBitcoin(::grpc::ClientContext* context, const ::VeriBlock::BitcoinBlock* request, ::VeriBlock::GeneralReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void AddGenesisBitcoin(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::GeneralReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void AddGenesisBitcoin(::grpc::ClientContext* context, const ::VeriBlock::BitcoinBlock* request, ::VeriBlock::GeneralReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void AddGenesisBitcoin(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::GeneralReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void AddPayloads(::grpc::ClientContext* context, const ::VeriBlock::AddPayloadsRequest* request, ::VeriBlock::GeneralReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void AddPayloads(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::GeneralReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void AddPayloads(::grpc::ClientContext* context, const ::VeriBlock::AddPayloadsRequest* request, ::VeriBlock::GeneralReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void AddPayloads(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::GeneralReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void RemovePayloads(::grpc::ClientContext* context, const ::VeriBlock::RemovePayloadsRequest* request, ::VeriBlock::GeneralReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void RemovePayloads(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::GeneralReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void RemovePayloads(::grpc::ClientContext* context, const ::VeriBlock::RemovePayloadsRequest* request, ::VeriBlock::GeneralReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void RemovePayloads(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::GeneralReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void AddTemporaryPayloads(::grpc::ClientContext* context, const ::VeriBlock::AddTemporaryPayloadsRequest* request, ::VeriBlock::GeneralReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void AddTemporaryPayloads(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::GeneralReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void AddTemporaryPayloads(::grpc::ClientContext* context, const ::VeriBlock::AddTemporaryPayloadsRequest* request, ::VeriBlock::GeneralReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void AddTemporaryPayloads(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::GeneralReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void ClearTemporaryPayloads(::grpc::ClientContext* context, const ::VeriBlock::EmptyRequest* request, ::VeriBlock::GeneralReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ClearTemporaryPayloads(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::GeneralReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ClearTemporaryPayloads(::grpc::ClientContext* context, const ::VeriBlock::EmptyRequest* request, ::VeriBlock::GeneralReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void ClearTemporaryPayloads(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::GeneralReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void SimplifyVTBs(::grpc::ClientContext* context, const ::VeriBlock::SimplifyVTBsRequest* request, ::VeriBlock::SimplifyVTBsReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SimplifyVTBs(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::SimplifyVTBsReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SimplifyVTBs(::grpc::ClientContext* context, const ::VeriBlock::SimplifyVTBsRequest* request, ::VeriBlock::SimplifyVTBsReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void SimplifyVTBs(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::SimplifyVTBsReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void CheckATVAgainstView(::grpc::ClientContext* context, const ::VeriBlock::AltPublication* request, ::VeriBlock::GeneralReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CheckATVAgainstView(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::GeneralReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CheckATVAgainstView(::grpc::ClientContext* context, const ::VeriBlock::AltPublication* request, ::VeriBlock::GeneralReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void CheckATVAgainstView(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::GeneralReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void CheckVTBInternally(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockPublication* request, ::VeriBlock::GeneralReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CheckVTBInternally(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::GeneralReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CheckVTBInternally(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockPublication* request, ::VeriBlock::GeneralReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void CheckVTBInternally(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::GeneralReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void CheckATVInternally(::grpc::ClientContext* context, const ::VeriBlock::AltPublication* request, ::VeriBlock::GeneralReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CheckATVInternally(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::GeneralReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CheckATVInternally(::grpc::ClientContext* context, const ::VeriBlock::AltPublication* request, ::VeriBlock::GeneralReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void CheckATVInternally(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::GeneralReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void GetMainVBKHeightOfATV(::grpc::ClientContext* context, const ::VeriBlock::AltPublication* request, ::VeriBlock::GetMainVBKHeightOfATVReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetMainVBKHeightOfATV(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::GetMainVBKHeightOfATVReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetMainVBKHeightOfATV(::grpc::ClientContext* context, const ::VeriBlock::AltPublication* request, ::VeriBlock::GetMainVBKHeightOfATVReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void GetMainVBKHeightOfATV(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::GetMainVBKHeightOfATVReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
    };
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::GeneralReply>* AsyncResetSecurityRaw(::grpc::ClientContext* context, const ::VeriBlock::EmptyRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::GeneralReply>* PrepareAsyncResetSecurityRaw(::grpc::ClientContext* context, const ::VeriBlock::EmptyRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::GeneralReply>* AsyncAddGenesisVeriBlockRaw(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockBlock& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::GeneralReply>* PrepareAsyncAddGenesisVeriBlockRaw(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockBlock& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::GeneralReply>* AsyncAddGenesisBitcoinRaw(::grpc::ClientContext* context, const ::VeriBlock::BitcoinBlock& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::GeneralReply>* PrepareAsyncAddGenesisBitcoinRaw(::grpc::ClientContext* context, const ::VeriBlock::BitcoinBlock& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::GeneralReply>* AsyncAddPayloadsRaw(::grpc::ClientContext* context, const ::VeriBlock::AddPayloadsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::GeneralReply>* PrepareAsyncAddPayloadsRaw(::grpc::ClientContext* context, const ::VeriBlock::AddPayloadsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::GeneralReply>* AsyncRemovePayloadsRaw(::grpc::ClientContext* context, const ::VeriBlock::RemovePayloadsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::GeneralReply>* PrepareAsyncRemovePayloadsRaw(::grpc::ClientContext* context, const ::VeriBlock::RemovePayloadsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::GeneralReply>* AsyncAddTemporaryPayloadsRaw(::grpc::ClientContext* context, const ::VeriBlock::AddTemporaryPayloadsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::GeneralReply>* PrepareAsyncAddTemporaryPayloadsRaw(::grpc::ClientContext* context, const ::VeriBlock::AddTemporaryPayloadsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::GeneralReply>* AsyncClearTemporaryPayloadsRaw(::grpc::ClientContext* context, const ::VeriBlock::EmptyRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::GeneralReply>* PrepareAsyncClearTemporaryPayloadsRaw(::grpc::ClientContext* context, const ::VeriBlock::EmptyRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::SimplifyVTBsReply>* AsyncSimplifyVTBsRaw(::grpc::ClientContext* context, const ::VeriBlock::SimplifyVTBsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::SimplifyVTBsReply>* PrepareAsyncSimplifyVTBsRaw(::grpc::ClientContext* context, const ::VeriBlock::SimplifyVTBsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::GeneralReply>* AsyncCheckATVAgainstViewRaw(::grpc::ClientContext* context, const ::VeriBlock::AltPublication& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::GeneralReply>* PrepareAsyncCheckATVAgainstViewRaw(::grpc::ClientContext* context, const ::VeriBlock::AltPublication& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::GeneralReply>* AsyncCheckVTBInternallyRaw(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockPublication& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::GeneralReply>* PrepareAsyncCheckVTBInternallyRaw(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockPublication& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::GeneralReply>* AsyncCheckATVInternallyRaw(::grpc::ClientContext* context, const ::VeriBlock::AltPublication& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::GeneralReply>* PrepareAsyncCheckATVInternallyRaw(::grpc::ClientContext* context, const ::VeriBlock::AltPublication& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::GetMainVBKHeightOfATVReply>* AsyncGetMainVBKHeightOfATVRaw(::grpc::ClientContext* context, const ::VeriBlock::AltPublication& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::GetMainVBKHeightOfATVReply>* PrepareAsyncGetMainVBKHeightOfATVRaw(::grpc::ClientContext* context, const ::VeriBlock::AltPublication& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status ResetSecurity(::grpc::ClientContext* context, const ::VeriBlock::EmptyRequest& request, ::VeriBlock::GeneralReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::VeriBlock::GeneralReply>> AsyncResetSecurity(::grpc::ClientContext* context, const ::VeriBlock::EmptyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::VeriBlock::GeneralReply>>(AsyncResetSecurityRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::VeriBlock::GeneralReply>> PrepareAsyncResetSecurity(::grpc::ClientContext* context, const ::VeriBlock::EmptyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::VeriBlock::GeneralReply>>(PrepareAsyncResetSecurityRaw(context, request, cq));
    }
    ::grpc::Status AddGenesisVeriBlock(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockBlock& request, ::VeriBlock::GeneralReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::VeriBlock::GeneralReply>> AsyncAddGenesisVeriBlock(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockBlock& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::VeriBlock::GeneralReply>>(AsyncAddGenesisVeriBlockRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::VeriBlock::GeneralReply>> PrepareAsyncAddGenesisVeriBlock(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockBlock& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::VeriBlock::GeneralReply>>(PrepareAsyncAddGenesisVeriBlockRaw(context, request, cq));
    }
    ::grpc::Status AddGenesisBitcoin(::grpc::ClientContext* context, const ::VeriBlock::BitcoinBlock& request, ::VeriBlock::GeneralReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::VeriBlock::GeneralReply>> AsyncAddGenesisBitcoin(::grpc::ClientContext* context, const ::VeriBlock::BitcoinBlock& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::VeriBlock::GeneralReply>>(AsyncAddGenesisBitcoinRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::VeriBlock::GeneralReply>> PrepareAsyncAddGenesisBitcoin(::grpc::ClientContext* context, const ::VeriBlock::BitcoinBlock& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::VeriBlock::GeneralReply>>(PrepareAsyncAddGenesisBitcoinRaw(context, request, cq));
    }
    ::grpc::Status AddPayloads(::grpc::ClientContext* context, const ::VeriBlock::AddPayloadsRequest& request, ::VeriBlock::GeneralReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::VeriBlock::GeneralReply>> AsyncAddPayloads(::grpc::ClientContext* context, const ::VeriBlock::AddPayloadsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::VeriBlock::GeneralReply>>(AsyncAddPayloadsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::VeriBlock::GeneralReply>> PrepareAsyncAddPayloads(::grpc::ClientContext* context, const ::VeriBlock::AddPayloadsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::VeriBlock::GeneralReply>>(PrepareAsyncAddPayloadsRaw(context, request, cq));
    }
    ::grpc::Status RemovePayloads(::grpc::ClientContext* context, const ::VeriBlock::RemovePayloadsRequest& request, ::VeriBlock::GeneralReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::VeriBlock::GeneralReply>> AsyncRemovePayloads(::grpc::ClientContext* context, const ::VeriBlock::RemovePayloadsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::VeriBlock::GeneralReply>>(AsyncRemovePayloadsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::VeriBlock::GeneralReply>> PrepareAsyncRemovePayloads(::grpc::ClientContext* context, const ::VeriBlock::RemovePayloadsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::VeriBlock::GeneralReply>>(PrepareAsyncRemovePayloadsRaw(context, request, cq));
    }
    ::grpc::Status AddTemporaryPayloads(::grpc::ClientContext* context, const ::VeriBlock::AddTemporaryPayloadsRequest& request, ::VeriBlock::GeneralReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::VeriBlock::GeneralReply>> AsyncAddTemporaryPayloads(::grpc::ClientContext* context, const ::VeriBlock::AddTemporaryPayloadsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::VeriBlock::GeneralReply>>(AsyncAddTemporaryPayloadsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::VeriBlock::GeneralReply>> PrepareAsyncAddTemporaryPayloads(::grpc::ClientContext* context, const ::VeriBlock::AddTemporaryPayloadsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::VeriBlock::GeneralReply>>(PrepareAsyncAddTemporaryPayloadsRaw(context, request, cq));
    }
    ::grpc::Status ClearTemporaryPayloads(::grpc::ClientContext* context, const ::VeriBlock::EmptyRequest& request, ::VeriBlock::GeneralReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::VeriBlock::GeneralReply>> AsyncClearTemporaryPayloads(::grpc::ClientContext* context, const ::VeriBlock::EmptyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::VeriBlock::GeneralReply>>(AsyncClearTemporaryPayloadsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::VeriBlock::GeneralReply>> PrepareAsyncClearTemporaryPayloads(::grpc::ClientContext* context, const ::VeriBlock::EmptyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::VeriBlock::GeneralReply>>(PrepareAsyncClearTemporaryPayloadsRaw(context, request, cq));
    }
    ::grpc::Status SimplifyVTBs(::grpc::ClientContext* context, const ::VeriBlock::SimplifyVTBsRequest& request, ::VeriBlock::SimplifyVTBsReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::VeriBlock::SimplifyVTBsReply>> AsyncSimplifyVTBs(::grpc::ClientContext* context, const ::VeriBlock::SimplifyVTBsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::VeriBlock::SimplifyVTBsReply>>(AsyncSimplifyVTBsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::VeriBlock::SimplifyVTBsReply>> PrepareAsyncSimplifyVTBs(::grpc::ClientContext* context, const ::VeriBlock::SimplifyVTBsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::VeriBlock::SimplifyVTBsReply>>(PrepareAsyncSimplifyVTBsRaw(context, request, cq));
    }
    ::grpc::Status CheckATVAgainstView(::grpc::ClientContext* context, const ::VeriBlock::AltPublication& request, ::VeriBlock::GeneralReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::VeriBlock::GeneralReply>> AsyncCheckATVAgainstView(::grpc::ClientContext* context, const ::VeriBlock::AltPublication& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::VeriBlock::GeneralReply>>(AsyncCheckATVAgainstViewRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::VeriBlock::GeneralReply>> PrepareAsyncCheckATVAgainstView(::grpc::ClientContext* context, const ::VeriBlock::AltPublication& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::VeriBlock::GeneralReply>>(PrepareAsyncCheckATVAgainstViewRaw(context, request, cq));
    }
    ::grpc::Status CheckVTBInternally(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockPublication& request, ::VeriBlock::GeneralReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::VeriBlock::GeneralReply>> AsyncCheckVTBInternally(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockPublication& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::VeriBlock::GeneralReply>>(AsyncCheckVTBInternallyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::VeriBlock::GeneralReply>> PrepareAsyncCheckVTBInternally(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockPublication& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::VeriBlock::GeneralReply>>(PrepareAsyncCheckVTBInternallyRaw(context, request, cq));
    }
    ::grpc::Status CheckATVInternally(::grpc::ClientContext* context, const ::VeriBlock::AltPublication& request, ::VeriBlock::GeneralReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::VeriBlock::GeneralReply>> AsyncCheckATVInternally(::grpc::ClientContext* context, const ::VeriBlock::AltPublication& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::VeriBlock::GeneralReply>>(AsyncCheckATVInternallyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::VeriBlock::GeneralReply>> PrepareAsyncCheckATVInternally(::grpc::ClientContext* context, const ::VeriBlock::AltPublication& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::VeriBlock::GeneralReply>>(PrepareAsyncCheckATVInternallyRaw(context, request, cq));
    }
    ::grpc::Status GetMainVBKHeightOfATV(::grpc::ClientContext* context, const ::VeriBlock::AltPublication& request, ::VeriBlock::GetMainVBKHeightOfATVReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::VeriBlock::GetMainVBKHeightOfATVReply>> AsyncGetMainVBKHeightOfATV(::grpc::ClientContext* context, const ::VeriBlock::AltPublication& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::VeriBlock::GetMainVBKHeightOfATVReply>>(AsyncGetMainVBKHeightOfATVRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::VeriBlock::GetMainVBKHeightOfATVReply>> PrepareAsyncGetMainVBKHeightOfATV(::grpc::ClientContext* context, const ::VeriBlock::AltPublication& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::VeriBlock::GetMainVBKHeightOfATVReply>>(PrepareAsyncGetMainVBKHeightOfATVRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void ResetSecurity(::grpc::ClientContext* context, const ::VeriBlock::EmptyRequest* request, ::VeriBlock::GeneralReply* response, std::function<void(::grpc::Status)>) override;
      void ResetSecurity(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::GeneralReply* response, std::function<void(::grpc::Status)>) override;
      void ResetSecurity(::grpc::ClientContext* context, const ::VeriBlock::EmptyRequest* request, ::VeriBlock::GeneralReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void ResetSecurity(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::GeneralReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void AddGenesisVeriBlock(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockBlock* request, ::VeriBlock::GeneralReply* response, std::function<void(::grpc::Status)>) override;
      void AddGenesisVeriBlock(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::GeneralReply* response, std::function<void(::grpc::Status)>) override;
      void AddGenesisVeriBlock(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockBlock* request, ::VeriBlock::GeneralReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void AddGenesisVeriBlock(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::GeneralReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void AddGenesisBitcoin(::grpc::ClientContext* context, const ::VeriBlock::BitcoinBlock* request, ::VeriBlock::GeneralReply* response, std::function<void(::grpc::Status)>) override;
      void AddGenesisBitcoin(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::GeneralReply* response, std::function<void(::grpc::Status)>) override;
      void AddGenesisBitcoin(::grpc::ClientContext* context, const ::VeriBlock::BitcoinBlock* request, ::VeriBlock::GeneralReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void AddGenesisBitcoin(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::GeneralReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void AddPayloads(::grpc::ClientContext* context, const ::VeriBlock::AddPayloadsRequest* request, ::VeriBlock::GeneralReply* response, std::function<void(::grpc::Status)>) override;
      void AddPayloads(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::GeneralReply* response, std::function<void(::grpc::Status)>) override;
      void AddPayloads(::grpc::ClientContext* context, const ::VeriBlock::AddPayloadsRequest* request, ::VeriBlock::GeneralReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void AddPayloads(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::GeneralReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void RemovePayloads(::grpc::ClientContext* context, const ::VeriBlock::RemovePayloadsRequest* request, ::VeriBlock::GeneralReply* response, std::function<void(::grpc::Status)>) override;
      void RemovePayloads(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::GeneralReply* response, std::function<void(::grpc::Status)>) override;
      void RemovePayloads(::grpc::ClientContext* context, const ::VeriBlock::RemovePayloadsRequest* request, ::VeriBlock::GeneralReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void RemovePayloads(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::GeneralReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void AddTemporaryPayloads(::grpc::ClientContext* context, const ::VeriBlock::AddTemporaryPayloadsRequest* request, ::VeriBlock::GeneralReply* response, std::function<void(::grpc::Status)>) override;
      void AddTemporaryPayloads(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::GeneralReply* response, std::function<void(::grpc::Status)>) override;
      void AddTemporaryPayloads(::grpc::ClientContext* context, const ::VeriBlock::AddTemporaryPayloadsRequest* request, ::VeriBlock::GeneralReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void AddTemporaryPayloads(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::GeneralReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void ClearTemporaryPayloads(::grpc::ClientContext* context, const ::VeriBlock::EmptyRequest* request, ::VeriBlock::GeneralReply* response, std::function<void(::grpc::Status)>) override;
      void ClearTemporaryPayloads(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::GeneralReply* response, std::function<void(::grpc::Status)>) override;
      void ClearTemporaryPayloads(::grpc::ClientContext* context, const ::VeriBlock::EmptyRequest* request, ::VeriBlock::GeneralReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void ClearTemporaryPayloads(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::GeneralReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void SimplifyVTBs(::grpc::ClientContext* context, const ::VeriBlock::SimplifyVTBsRequest* request, ::VeriBlock::SimplifyVTBsReply* response, std::function<void(::grpc::Status)>) override;
      void SimplifyVTBs(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::SimplifyVTBsReply* response, std::function<void(::grpc::Status)>) override;
      void SimplifyVTBs(::grpc::ClientContext* context, const ::VeriBlock::SimplifyVTBsRequest* request, ::VeriBlock::SimplifyVTBsReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void SimplifyVTBs(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::SimplifyVTBsReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void CheckATVAgainstView(::grpc::ClientContext* context, const ::VeriBlock::AltPublication* request, ::VeriBlock::GeneralReply* response, std::function<void(::grpc::Status)>) override;
      void CheckATVAgainstView(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::GeneralReply* response, std::function<void(::grpc::Status)>) override;
      void CheckATVAgainstView(::grpc::ClientContext* context, const ::VeriBlock::AltPublication* request, ::VeriBlock::GeneralReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void CheckATVAgainstView(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::GeneralReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void CheckVTBInternally(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockPublication* request, ::VeriBlock::GeneralReply* response, std::function<void(::grpc::Status)>) override;
      void CheckVTBInternally(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::GeneralReply* response, std::function<void(::grpc::Status)>) override;
      void CheckVTBInternally(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockPublication* request, ::VeriBlock::GeneralReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void CheckVTBInternally(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::GeneralReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void CheckATVInternally(::grpc::ClientContext* context, const ::VeriBlock::AltPublication* request, ::VeriBlock::GeneralReply* response, std::function<void(::grpc::Status)>) override;
      void CheckATVInternally(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::GeneralReply* response, std::function<void(::grpc::Status)>) override;
      void CheckATVInternally(::grpc::ClientContext* context, const ::VeriBlock::AltPublication* request, ::VeriBlock::GeneralReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void CheckATVInternally(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::GeneralReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void GetMainVBKHeightOfATV(::grpc::ClientContext* context, const ::VeriBlock::AltPublication* request, ::VeriBlock::GetMainVBKHeightOfATVReply* response, std::function<void(::grpc::Status)>) override;
      void GetMainVBKHeightOfATV(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::GetMainVBKHeightOfATVReply* response, std::function<void(::grpc::Status)>) override;
      void GetMainVBKHeightOfATV(::grpc::ClientContext* context, const ::VeriBlock::AltPublication* request, ::VeriBlock::GetMainVBKHeightOfATVReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void GetMainVBKHeightOfATV(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::GetMainVBKHeightOfATVReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::VeriBlock::GeneralReply>* AsyncResetSecurityRaw(::grpc::ClientContext* context, const ::VeriBlock::EmptyRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::VeriBlock::GeneralReply>* PrepareAsyncResetSecurityRaw(::grpc::ClientContext* context, const ::VeriBlock::EmptyRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::VeriBlock::GeneralReply>* AsyncAddGenesisVeriBlockRaw(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockBlock& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::VeriBlock::GeneralReply>* PrepareAsyncAddGenesisVeriBlockRaw(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockBlock& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::VeriBlock::GeneralReply>* AsyncAddGenesisBitcoinRaw(::grpc::ClientContext* context, const ::VeriBlock::BitcoinBlock& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::VeriBlock::GeneralReply>* PrepareAsyncAddGenesisBitcoinRaw(::grpc::ClientContext* context, const ::VeriBlock::BitcoinBlock& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::VeriBlock::GeneralReply>* AsyncAddPayloadsRaw(::grpc::ClientContext* context, const ::VeriBlock::AddPayloadsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::VeriBlock::GeneralReply>* PrepareAsyncAddPayloadsRaw(::grpc::ClientContext* context, const ::VeriBlock::AddPayloadsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::VeriBlock::GeneralReply>* AsyncRemovePayloadsRaw(::grpc::ClientContext* context, const ::VeriBlock::RemovePayloadsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::VeriBlock::GeneralReply>* PrepareAsyncRemovePayloadsRaw(::grpc::ClientContext* context, const ::VeriBlock::RemovePayloadsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::VeriBlock::GeneralReply>* AsyncAddTemporaryPayloadsRaw(::grpc::ClientContext* context, const ::VeriBlock::AddTemporaryPayloadsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::VeriBlock::GeneralReply>* PrepareAsyncAddTemporaryPayloadsRaw(::grpc::ClientContext* context, const ::VeriBlock::AddTemporaryPayloadsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::VeriBlock::GeneralReply>* AsyncClearTemporaryPayloadsRaw(::grpc::ClientContext* context, const ::VeriBlock::EmptyRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::VeriBlock::GeneralReply>* PrepareAsyncClearTemporaryPayloadsRaw(::grpc::ClientContext* context, const ::VeriBlock::EmptyRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::VeriBlock::SimplifyVTBsReply>* AsyncSimplifyVTBsRaw(::grpc::ClientContext* context, const ::VeriBlock::SimplifyVTBsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::VeriBlock::SimplifyVTBsReply>* PrepareAsyncSimplifyVTBsRaw(::grpc::ClientContext* context, const ::VeriBlock::SimplifyVTBsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::VeriBlock::GeneralReply>* AsyncCheckATVAgainstViewRaw(::grpc::ClientContext* context, const ::VeriBlock::AltPublication& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::VeriBlock::GeneralReply>* PrepareAsyncCheckATVAgainstViewRaw(::grpc::ClientContext* context, const ::VeriBlock::AltPublication& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::VeriBlock::GeneralReply>* AsyncCheckVTBInternallyRaw(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockPublication& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::VeriBlock::GeneralReply>* PrepareAsyncCheckVTBInternallyRaw(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockPublication& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::VeriBlock::GeneralReply>* AsyncCheckATVInternallyRaw(::grpc::ClientContext* context, const ::VeriBlock::AltPublication& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::VeriBlock::GeneralReply>* PrepareAsyncCheckATVInternallyRaw(::grpc::ClientContext* context, const ::VeriBlock::AltPublication& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::VeriBlock::GetMainVBKHeightOfATVReply>* AsyncGetMainVBKHeightOfATVRaw(::grpc::ClientContext* context, const ::VeriBlock::AltPublication& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::VeriBlock::GetMainVBKHeightOfATVReply>* PrepareAsyncGetMainVBKHeightOfATVRaw(::grpc::ClientContext* context, const ::VeriBlock::AltPublication& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_ResetSecurity_;
    const ::grpc::internal::RpcMethod rpcmethod_AddGenesisVeriBlock_;
    const ::grpc::internal::RpcMethod rpcmethod_AddGenesisBitcoin_;
    const ::grpc::internal::RpcMethod rpcmethod_AddPayloads_;
    const ::grpc::internal::RpcMethod rpcmethod_RemovePayloads_;
    const ::grpc::internal::RpcMethod rpcmethod_AddTemporaryPayloads_;
    const ::grpc::internal::RpcMethod rpcmethod_ClearTemporaryPayloads_;
    const ::grpc::internal::RpcMethod rpcmethod_SimplifyVTBs_;
    const ::grpc::internal::RpcMethod rpcmethod_CheckATVAgainstView_;
    const ::grpc::internal::RpcMethod rpcmethod_CheckVTBInternally_;
    const ::grpc::internal::RpcMethod rpcmethod_CheckATVInternally_;
    const ::grpc::internal::RpcMethod rpcmethod_GetMainVBKHeightOfATV_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status ResetSecurity(::grpc::ServerContext* context, const ::VeriBlock::EmptyRequest* request, ::VeriBlock::GeneralReply* response);
    virtual ::grpc::Status AddGenesisVeriBlock(::grpc::ServerContext* context, const ::VeriBlock::VeriBlockBlock* request, ::VeriBlock::GeneralReply* response);
    virtual ::grpc::Status AddGenesisBitcoin(::grpc::ServerContext* context, const ::VeriBlock::BitcoinBlock* request, ::VeriBlock::GeneralReply* response);
    virtual ::grpc::Status AddPayloads(::grpc::ServerContext* context, const ::VeriBlock::AddPayloadsRequest* request, ::VeriBlock::GeneralReply* response);
    virtual ::grpc::Status RemovePayloads(::grpc::ServerContext* context, const ::VeriBlock::RemovePayloadsRequest* request, ::VeriBlock::GeneralReply* response);
    virtual ::grpc::Status AddTemporaryPayloads(::grpc::ServerContext* context, const ::VeriBlock::AddTemporaryPayloadsRequest* request, ::VeriBlock::GeneralReply* response);
    virtual ::grpc::Status ClearTemporaryPayloads(::grpc::ServerContext* context, const ::VeriBlock::EmptyRequest* request, ::VeriBlock::GeneralReply* response);
    virtual ::grpc::Status SimplifyVTBs(::grpc::ServerContext* context, const ::VeriBlock::SimplifyVTBsRequest* request, ::VeriBlock::SimplifyVTBsReply* response);
    virtual ::grpc::Status CheckATVAgainstView(::grpc::ServerContext* context, const ::VeriBlock::AltPublication* request, ::VeriBlock::GeneralReply* response);
    virtual ::grpc::Status CheckVTBInternally(::grpc::ServerContext* context, const ::VeriBlock::VeriBlockPublication* request, ::VeriBlock::GeneralReply* response);
    virtual ::grpc::Status CheckATVInternally(::grpc::ServerContext* context, const ::VeriBlock::AltPublication* request, ::VeriBlock::GeneralReply* response);
    virtual ::grpc::Status GetMainVBKHeightOfATV(::grpc::ServerContext* context, const ::VeriBlock::AltPublication* request, ::VeriBlock::GetMainVBKHeightOfATVReply* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_ResetSecurity : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_ResetSecurity() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_ResetSecurity() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ResetSecurity(::grpc::ServerContext* context, const ::VeriBlock::EmptyRequest* request, ::VeriBlock::GeneralReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestResetSecurity(::grpc::ServerContext* context, ::VeriBlock::EmptyRequest* request, ::grpc::ServerAsyncResponseWriter< ::VeriBlock::GeneralReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_AddGenesisVeriBlock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_AddGenesisVeriBlock() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_AddGenesisVeriBlock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddGenesisVeriBlock(::grpc::ServerContext* context, const ::VeriBlock::VeriBlockBlock* request, ::VeriBlock::GeneralReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAddGenesisVeriBlock(::grpc::ServerContext* context, ::VeriBlock::VeriBlockBlock* request, ::grpc::ServerAsyncResponseWriter< ::VeriBlock::GeneralReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_AddGenesisBitcoin : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_AddGenesisBitcoin() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_AddGenesisBitcoin() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddGenesisBitcoin(::grpc::ServerContext* context, const ::VeriBlock::BitcoinBlock* request, ::VeriBlock::GeneralReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAddGenesisBitcoin(::grpc::ServerContext* context, ::VeriBlock::BitcoinBlock* request, ::grpc::ServerAsyncResponseWriter< ::VeriBlock::GeneralReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_AddPayloads : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_AddPayloads() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_AddPayloads() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddPayloads(::grpc::ServerContext* context, const ::VeriBlock::AddPayloadsRequest* request, ::VeriBlock::GeneralReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAddPayloads(::grpc::ServerContext* context, ::VeriBlock::AddPayloadsRequest* request, ::grpc::ServerAsyncResponseWriter< ::VeriBlock::GeneralReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_RemovePayloads : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_RemovePayloads() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_RemovePayloads() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemovePayloads(::grpc::ServerContext* context, const ::VeriBlock::RemovePayloadsRequest* request, ::VeriBlock::GeneralReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRemovePayloads(::grpc::ServerContext* context, ::VeriBlock::RemovePayloadsRequest* request, ::grpc::ServerAsyncResponseWriter< ::VeriBlock::GeneralReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_AddTemporaryPayloads : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_AddTemporaryPayloads() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_AddTemporaryPayloads() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddTemporaryPayloads(::grpc::ServerContext* context, const ::VeriBlock::AddTemporaryPayloadsRequest* request, ::VeriBlock::GeneralReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAddTemporaryPayloads(::grpc::ServerContext* context, ::VeriBlock::AddTemporaryPayloadsRequest* request, ::grpc::ServerAsyncResponseWriter< ::VeriBlock::GeneralReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ClearTemporaryPayloads : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_ClearTemporaryPayloads() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_ClearTemporaryPayloads() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ClearTemporaryPayloads(::grpc::ServerContext* context, const ::VeriBlock::EmptyRequest* request, ::VeriBlock::GeneralReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestClearTemporaryPayloads(::grpc::ServerContext* context, ::VeriBlock::EmptyRequest* request, ::grpc::ServerAsyncResponseWriter< ::VeriBlock::GeneralReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SimplifyVTBs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_SimplifyVTBs() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_SimplifyVTBs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SimplifyVTBs(::grpc::ServerContext* context, const ::VeriBlock::SimplifyVTBsRequest* request, ::VeriBlock::SimplifyVTBsReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSimplifyVTBs(::grpc::ServerContext* context, ::VeriBlock::SimplifyVTBsRequest* request, ::grpc::ServerAsyncResponseWriter< ::VeriBlock::SimplifyVTBsReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CheckATVAgainstView : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_CheckATVAgainstView() {
      ::grpc::Service::MarkMethodAsync(8);
    }
    ~WithAsyncMethod_CheckATVAgainstView() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CheckATVAgainstView(::grpc::ServerContext* context, const ::VeriBlock::AltPublication* request, ::VeriBlock::GeneralReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCheckATVAgainstView(::grpc::ServerContext* context, ::VeriBlock::AltPublication* request, ::grpc::ServerAsyncResponseWriter< ::VeriBlock::GeneralReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CheckVTBInternally : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_CheckVTBInternally() {
      ::grpc::Service::MarkMethodAsync(9);
    }
    ~WithAsyncMethod_CheckVTBInternally() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CheckVTBInternally(::grpc::ServerContext* context, const ::VeriBlock::VeriBlockPublication* request, ::VeriBlock::GeneralReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCheckVTBInternally(::grpc::ServerContext* context, ::VeriBlock::VeriBlockPublication* request, ::grpc::ServerAsyncResponseWriter< ::VeriBlock::GeneralReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CheckATVInternally : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_CheckATVInternally() {
      ::grpc::Service::MarkMethodAsync(10);
    }
    ~WithAsyncMethod_CheckATVInternally() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CheckATVInternally(::grpc::ServerContext* context, const ::VeriBlock::AltPublication* request, ::VeriBlock::GeneralReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCheckATVInternally(::grpc::ServerContext* context, ::VeriBlock::AltPublication* request, ::grpc::ServerAsyncResponseWriter< ::VeriBlock::GeneralReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetMainVBKHeightOfATV : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetMainVBKHeightOfATV() {
      ::grpc::Service::MarkMethodAsync(11);
    }
    ~WithAsyncMethod_GetMainVBKHeightOfATV() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMainVBKHeightOfATV(::grpc::ServerContext* context, const ::VeriBlock::AltPublication* request, ::VeriBlock::GetMainVBKHeightOfATVReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetMainVBKHeightOfATV(::grpc::ServerContext* context, ::VeriBlock::AltPublication* request, ::grpc::ServerAsyncResponseWriter< ::VeriBlock::GetMainVBKHeightOfATVReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(11, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_ResetSecurity<WithAsyncMethod_AddGenesisVeriBlock<WithAsyncMethod_AddGenesisBitcoin<WithAsyncMethod_AddPayloads<WithAsyncMethod_RemovePayloads<WithAsyncMethod_AddTemporaryPayloads<WithAsyncMethod_ClearTemporaryPayloads<WithAsyncMethod_SimplifyVTBs<WithAsyncMethod_CheckATVAgainstView<WithAsyncMethod_CheckVTBInternally<WithAsyncMethod_CheckATVInternally<WithAsyncMethod_GetMainVBKHeightOfATV<Service > > > > > > > > > > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_ResetSecurity : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_ResetSecurity() {
      ::grpc::Service::experimental().MarkMethodCallback(0,
        new ::grpc::internal::CallbackUnaryHandler< ::VeriBlock::EmptyRequest, ::VeriBlock::GeneralReply>(
          [this](::grpc::ServerContext* context,
                 const ::VeriBlock::EmptyRequest* request,
                 ::VeriBlock::GeneralReply* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->ResetSecurity(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_ResetSecurity(
        ::grpc::experimental::MessageAllocator< ::VeriBlock::EmptyRequest, ::VeriBlock::GeneralReply>* allocator) {
      static_cast<::grpc::internal::CallbackUnaryHandler< ::VeriBlock::EmptyRequest, ::VeriBlock::GeneralReply>*>(
          ::grpc::Service::experimental().GetHandler(0))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_ResetSecurity() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ResetSecurity(::grpc::ServerContext* context, const ::VeriBlock::EmptyRequest* request, ::VeriBlock::GeneralReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void ResetSecurity(::grpc::ServerContext* context, const ::VeriBlock::EmptyRequest* request, ::VeriBlock::GeneralReply* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_AddGenesisVeriBlock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_AddGenesisVeriBlock() {
      ::grpc::Service::experimental().MarkMethodCallback(1,
        new ::grpc::internal::CallbackUnaryHandler< ::VeriBlock::VeriBlockBlock, ::VeriBlock::GeneralReply>(
          [this](::grpc::ServerContext* context,
                 const ::VeriBlock::VeriBlockBlock* request,
                 ::VeriBlock::GeneralReply* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->AddGenesisVeriBlock(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_AddGenesisVeriBlock(
        ::grpc::experimental::MessageAllocator< ::VeriBlock::VeriBlockBlock, ::VeriBlock::GeneralReply>* allocator) {
      static_cast<::grpc::internal::CallbackUnaryHandler< ::VeriBlock::VeriBlockBlock, ::VeriBlock::GeneralReply>*>(
          ::grpc::Service::experimental().GetHandler(1))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_AddGenesisVeriBlock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddGenesisVeriBlock(::grpc::ServerContext* context, const ::VeriBlock::VeriBlockBlock* request, ::VeriBlock::GeneralReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void AddGenesisVeriBlock(::grpc::ServerContext* context, const ::VeriBlock::VeriBlockBlock* request, ::VeriBlock::GeneralReply* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_AddGenesisBitcoin : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_AddGenesisBitcoin() {
      ::grpc::Service::experimental().MarkMethodCallback(2,
        new ::grpc::internal::CallbackUnaryHandler< ::VeriBlock::BitcoinBlock, ::VeriBlock::GeneralReply>(
          [this](::grpc::ServerContext* context,
                 const ::VeriBlock::BitcoinBlock* request,
                 ::VeriBlock::GeneralReply* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->AddGenesisBitcoin(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_AddGenesisBitcoin(
        ::grpc::experimental::MessageAllocator< ::VeriBlock::BitcoinBlock, ::VeriBlock::GeneralReply>* allocator) {
      static_cast<::grpc::internal::CallbackUnaryHandler< ::VeriBlock::BitcoinBlock, ::VeriBlock::GeneralReply>*>(
          ::grpc::Service::experimental().GetHandler(2))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_AddGenesisBitcoin() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddGenesisBitcoin(::grpc::ServerContext* context, const ::VeriBlock::BitcoinBlock* request, ::VeriBlock::GeneralReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void AddGenesisBitcoin(::grpc::ServerContext* context, const ::VeriBlock::BitcoinBlock* request, ::VeriBlock::GeneralReply* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_AddPayloads : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_AddPayloads() {
      ::grpc::Service::experimental().MarkMethodCallback(3,
        new ::grpc::internal::CallbackUnaryHandler< ::VeriBlock::AddPayloadsRequest, ::VeriBlock::GeneralReply>(
          [this](::grpc::ServerContext* context,
                 const ::VeriBlock::AddPayloadsRequest* request,
                 ::VeriBlock::GeneralReply* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->AddPayloads(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_AddPayloads(
        ::grpc::experimental::MessageAllocator< ::VeriBlock::AddPayloadsRequest, ::VeriBlock::GeneralReply>* allocator) {
      static_cast<::grpc::internal::CallbackUnaryHandler< ::VeriBlock::AddPayloadsRequest, ::VeriBlock::GeneralReply>*>(
          ::grpc::Service::experimental().GetHandler(3))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_AddPayloads() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddPayloads(::grpc::ServerContext* context, const ::VeriBlock::AddPayloadsRequest* request, ::VeriBlock::GeneralReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void AddPayloads(::grpc::ServerContext* context, const ::VeriBlock::AddPayloadsRequest* request, ::VeriBlock::GeneralReply* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_RemovePayloads : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_RemovePayloads() {
      ::grpc::Service::experimental().MarkMethodCallback(4,
        new ::grpc::internal::CallbackUnaryHandler< ::VeriBlock::RemovePayloadsRequest, ::VeriBlock::GeneralReply>(
          [this](::grpc::ServerContext* context,
                 const ::VeriBlock::RemovePayloadsRequest* request,
                 ::VeriBlock::GeneralReply* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->RemovePayloads(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_RemovePayloads(
        ::grpc::experimental::MessageAllocator< ::VeriBlock::RemovePayloadsRequest, ::VeriBlock::GeneralReply>* allocator) {
      static_cast<::grpc::internal::CallbackUnaryHandler< ::VeriBlock::RemovePayloadsRequest, ::VeriBlock::GeneralReply>*>(
          ::grpc::Service::experimental().GetHandler(4))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_RemovePayloads() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemovePayloads(::grpc::ServerContext* context, const ::VeriBlock::RemovePayloadsRequest* request, ::VeriBlock::GeneralReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void RemovePayloads(::grpc::ServerContext* context, const ::VeriBlock::RemovePayloadsRequest* request, ::VeriBlock::GeneralReply* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_AddTemporaryPayloads : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_AddTemporaryPayloads() {
      ::grpc::Service::experimental().MarkMethodCallback(5,
        new ::grpc::internal::CallbackUnaryHandler< ::VeriBlock::AddTemporaryPayloadsRequest, ::VeriBlock::GeneralReply>(
          [this](::grpc::ServerContext* context,
                 const ::VeriBlock::AddTemporaryPayloadsRequest* request,
                 ::VeriBlock::GeneralReply* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->AddTemporaryPayloads(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_AddTemporaryPayloads(
        ::grpc::experimental::MessageAllocator< ::VeriBlock::AddTemporaryPayloadsRequest, ::VeriBlock::GeneralReply>* allocator) {
      static_cast<::grpc::internal::CallbackUnaryHandler< ::VeriBlock::AddTemporaryPayloadsRequest, ::VeriBlock::GeneralReply>*>(
          ::grpc::Service::experimental().GetHandler(5))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_AddTemporaryPayloads() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddTemporaryPayloads(::grpc::ServerContext* context, const ::VeriBlock::AddTemporaryPayloadsRequest* request, ::VeriBlock::GeneralReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void AddTemporaryPayloads(::grpc::ServerContext* context, const ::VeriBlock::AddTemporaryPayloadsRequest* request, ::VeriBlock::GeneralReply* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_ClearTemporaryPayloads : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_ClearTemporaryPayloads() {
      ::grpc::Service::experimental().MarkMethodCallback(6,
        new ::grpc::internal::CallbackUnaryHandler< ::VeriBlock::EmptyRequest, ::VeriBlock::GeneralReply>(
          [this](::grpc::ServerContext* context,
                 const ::VeriBlock::EmptyRequest* request,
                 ::VeriBlock::GeneralReply* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->ClearTemporaryPayloads(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_ClearTemporaryPayloads(
        ::grpc::experimental::MessageAllocator< ::VeriBlock::EmptyRequest, ::VeriBlock::GeneralReply>* allocator) {
      static_cast<::grpc::internal::CallbackUnaryHandler< ::VeriBlock::EmptyRequest, ::VeriBlock::GeneralReply>*>(
          ::grpc::Service::experimental().GetHandler(6))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_ClearTemporaryPayloads() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ClearTemporaryPayloads(::grpc::ServerContext* context, const ::VeriBlock::EmptyRequest* request, ::VeriBlock::GeneralReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void ClearTemporaryPayloads(::grpc::ServerContext* context, const ::VeriBlock::EmptyRequest* request, ::VeriBlock::GeneralReply* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_SimplifyVTBs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_SimplifyVTBs() {
      ::grpc::Service::experimental().MarkMethodCallback(7,
        new ::grpc::internal::CallbackUnaryHandler< ::VeriBlock::SimplifyVTBsRequest, ::VeriBlock::SimplifyVTBsReply>(
          [this](::grpc::ServerContext* context,
                 const ::VeriBlock::SimplifyVTBsRequest* request,
                 ::VeriBlock::SimplifyVTBsReply* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->SimplifyVTBs(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_SimplifyVTBs(
        ::grpc::experimental::MessageAllocator< ::VeriBlock::SimplifyVTBsRequest, ::VeriBlock::SimplifyVTBsReply>* allocator) {
      static_cast<::grpc::internal::CallbackUnaryHandler< ::VeriBlock::SimplifyVTBsRequest, ::VeriBlock::SimplifyVTBsReply>*>(
          ::grpc::Service::experimental().GetHandler(7))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_SimplifyVTBs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SimplifyVTBs(::grpc::ServerContext* context, const ::VeriBlock::SimplifyVTBsRequest* request, ::VeriBlock::SimplifyVTBsReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void SimplifyVTBs(::grpc::ServerContext* context, const ::VeriBlock::SimplifyVTBsRequest* request, ::VeriBlock::SimplifyVTBsReply* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_CheckATVAgainstView : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_CheckATVAgainstView() {
      ::grpc::Service::experimental().MarkMethodCallback(8,
        new ::grpc::internal::CallbackUnaryHandler< ::VeriBlock::AltPublication, ::VeriBlock::GeneralReply>(
          [this](::grpc::ServerContext* context,
                 const ::VeriBlock::AltPublication* request,
                 ::VeriBlock::GeneralReply* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->CheckATVAgainstView(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_CheckATVAgainstView(
        ::grpc::experimental::MessageAllocator< ::VeriBlock::AltPublication, ::VeriBlock::GeneralReply>* allocator) {
      static_cast<::grpc::internal::CallbackUnaryHandler< ::VeriBlock::AltPublication, ::VeriBlock::GeneralReply>*>(
          ::grpc::Service::experimental().GetHandler(8))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_CheckATVAgainstView() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CheckATVAgainstView(::grpc::ServerContext* context, const ::VeriBlock::AltPublication* request, ::VeriBlock::GeneralReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void CheckATVAgainstView(::grpc::ServerContext* context, const ::VeriBlock::AltPublication* request, ::VeriBlock::GeneralReply* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_CheckVTBInternally : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_CheckVTBInternally() {
      ::grpc::Service::experimental().MarkMethodCallback(9,
        new ::grpc::internal::CallbackUnaryHandler< ::VeriBlock::VeriBlockPublication, ::VeriBlock::GeneralReply>(
          [this](::grpc::ServerContext* context,
                 const ::VeriBlock::VeriBlockPublication* request,
                 ::VeriBlock::GeneralReply* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->CheckVTBInternally(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_CheckVTBInternally(
        ::grpc::experimental::MessageAllocator< ::VeriBlock::VeriBlockPublication, ::VeriBlock::GeneralReply>* allocator) {
      static_cast<::grpc::internal::CallbackUnaryHandler< ::VeriBlock::VeriBlockPublication, ::VeriBlock::GeneralReply>*>(
          ::grpc::Service::experimental().GetHandler(9))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_CheckVTBInternally() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CheckVTBInternally(::grpc::ServerContext* context, const ::VeriBlock::VeriBlockPublication* request, ::VeriBlock::GeneralReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void CheckVTBInternally(::grpc::ServerContext* context, const ::VeriBlock::VeriBlockPublication* request, ::VeriBlock::GeneralReply* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_CheckATVInternally : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_CheckATVInternally() {
      ::grpc::Service::experimental().MarkMethodCallback(10,
        new ::grpc::internal::CallbackUnaryHandler< ::VeriBlock::AltPublication, ::VeriBlock::GeneralReply>(
          [this](::grpc::ServerContext* context,
                 const ::VeriBlock::AltPublication* request,
                 ::VeriBlock::GeneralReply* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->CheckATVInternally(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_CheckATVInternally(
        ::grpc::experimental::MessageAllocator< ::VeriBlock::AltPublication, ::VeriBlock::GeneralReply>* allocator) {
      static_cast<::grpc::internal::CallbackUnaryHandler< ::VeriBlock::AltPublication, ::VeriBlock::GeneralReply>*>(
          ::grpc::Service::experimental().GetHandler(10))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_CheckATVInternally() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CheckATVInternally(::grpc::ServerContext* context, const ::VeriBlock::AltPublication* request, ::VeriBlock::GeneralReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void CheckATVInternally(::grpc::ServerContext* context, const ::VeriBlock::AltPublication* request, ::VeriBlock::GeneralReply* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetMainVBKHeightOfATV : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_GetMainVBKHeightOfATV() {
      ::grpc::Service::experimental().MarkMethodCallback(11,
        new ::grpc::internal::CallbackUnaryHandler< ::VeriBlock::AltPublication, ::VeriBlock::GetMainVBKHeightOfATVReply>(
          [this](::grpc::ServerContext* context,
                 const ::VeriBlock::AltPublication* request,
                 ::VeriBlock::GetMainVBKHeightOfATVReply* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->GetMainVBKHeightOfATV(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_GetMainVBKHeightOfATV(
        ::grpc::experimental::MessageAllocator< ::VeriBlock::AltPublication, ::VeriBlock::GetMainVBKHeightOfATVReply>* allocator) {
      static_cast<::grpc::internal::CallbackUnaryHandler< ::VeriBlock::AltPublication, ::VeriBlock::GetMainVBKHeightOfATVReply>*>(
          ::grpc::Service::experimental().GetHandler(11))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetMainVBKHeightOfATV() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMainVBKHeightOfATV(::grpc::ServerContext* context, const ::VeriBlock::AltPublication* request, ::VeriBlock::GetMainVBKHeightOfATVReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GetMainVBKHeightOfATV(::grpc::ServerContext* context, const ::VeriBlock::AltPublication* request, ::VeriBlock::GetMainVBKHeightOfATVReply* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  typedef ExperimentalWithCallbackMethod_ResetSecurity<ExperimentalWithCallbackMethod_AddGenesisVeriBlock<ExperimentalWithCallbackMethod_AddGenesisBitcoin<ExperimentalWithCallbackMethod_AddPayloads<ExperimentalWithCallbackMethod_RemovePayloads<ExperimentalWithCallbackMethod_AddTemporaryPayloads<ExperimentalWithCallbackMethod_ClearTemporaryPayloads<ExperimentalWithCallbackMethod_SimplifyVTBs<ExperimentalWithCallbackMethod_CheckATVAgainstView<ExperimentalWithCallbackMethod_CheckVTBInternally<ExperimentalWithCallbackMethod_CheckATVInternally<ExperimentalWithCallbackMethod_GetMainVBKHeightOfATV<Service > > > > > > > > > > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_ResetSecurity : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_ResetSecurity() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_ResetSecurity() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ResetSecurity(::grpc::ServerContext* context, const ::VeriBlock::EmptyRequest* request, ::VeriBlock::GeneralReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_AddGenesisVeriBlock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_AddGenesisVeriBlock() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_AddGenesisVeriBlock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddGenesisVeriBlock(::grpc::ServerContext* context, const ::VeriBlock::VeriBlockBlock* request, ::VeriBlock::GeneralReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_AddGenesisBitcoin : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_AddGenesisBitcoin() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_AddGenesisBitcoin() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddGenesisBitcoin(::grpc::ServerContext* context, const ::VeriBlock::BitcoinBlock* request, ::VeriBlock::GeneralReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_AddPayloads : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_AddPayloads() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_AddPayloads() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddPayloads(::grpc::ServerContext* context, const ::VeriBlock::AddPayloadsRequest* request, ::VeriBlock::GeneralReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_RemovePayloads : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_RemovePayloads() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_RemovePayloads() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemovePayloads(::grpc::ServerContext* context, const ::VeriBlock::RemovePayloadsRequest* request, ::VeriBlock::GeneralReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_AddTemporaryPayloads : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_AddTemporaryPayloads() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_AddTemporaryPayloads() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddTemporaryPayloads(::grpc::ServerContext* context, const ::VeriBlock::AddTemporaryPayloadsRequest* request, ::VeriBlock::GeneralReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ClearTemporaryPayloads : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_ClearTemporaryPayloads() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_ClearTemporaryPayloads() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ClearTemporaryPayloads(::grpc::ServerContext* context, const ::VeriBlock::EmptyRequest* request, ::VeriBlock::GeneralReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SimplifyVTBs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_SimplifyVTBs() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_SimplifyVTBs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SimplifyVTBs(::grpc::ServerContext* context, const ::VeriBlock::SimplifyVTBsRequest* request, ::VeriBlock::SimplifyVTBsReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CheckATVAgainstView : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_CheckATVAgainstView() {
      ::grpc::Service::MarkMethodGeneric(8);
    }
    ~WithGenericMethod_CheckATVAgainstView() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CheckATVAgainstView(::grpc::ServerContext* context, const ::VeriBlock::AltPublication* request, ::VeriBlock::GeneralReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CheckVTBInternally : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_CheckVTBInternally() {
      ::grpc::Service::MarkMethodGeneric(9);
    }
    ~WithGenericMethod_CheckVTBInternally() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CheckVTBInternally(::grpc::ServerContext* context, const ::VeriBlock::VeriBlockPublication* request, ::VeriBlock::GeneralReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CheckATVInternally : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_CheckATVInternally() {
      ::grpc::Service::MarkMethodGeneric(10);
    }
    ~WithGenericMethod_CheckATVInternally() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CheckATVInternally(::grpc::ServerContext* context, const ::VeriBlock::AltPublication* request, ::VeriBlock::GeneralReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetMainVBKHeightOfATV : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetMainVBKHeightOfATV() {
      ::grpc::Service::MarkMethodGeneric(11);
    }
    ~WithGenericMethod_GetMainVBKHeightOfATV() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMainVBKHeightOfATV(::grpc::ServerContext* context, const ::VeriBlock::AltPublication* request, ::VeriBlock::GetMainVBKHeightOfATVReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_ResetSecurity : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_ResetSecurity() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_ResetSecurity() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ResetSecurity(::grpc::ServerContext* context, const ::VeriBlock::EmptyRequest* request, ::VeriBlock::GeneralReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestResetSecurity(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_AddGenesisVeriBlock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_AddGenesisVeriBlock() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_AddGenesisVeriBlock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddGenesisVeriBlock(::grpc::ServerContext* context, const ::VeriBlock::VeriBlockBlock* request, ::VeriBlock::GeneralReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAddGenesisVeriBlock(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_AddGenesisBitcoin : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_AddGenesisBitcoin() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_AddGenesisBitcoin() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddGenesisBitcoin(::grpc::ServerContext* context, const ::VeriBlock::BitcoinBlock* request, ::VeriBlock::GeneralReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAddGenesisBitcoin(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_AddPayloads : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_AddPayloads() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_AddPayloads() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddPayloads(::grpc::ServerContext* context, const ::VeriBlock::AddPayloadsRequest* request, ::VeriBlock::GeneralReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAddPayloads(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_RemovePayloads : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_RemovePayloads() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_RemovePayloads() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemovePayloads(::grpc::ServerContext* context, const ::VeriBlock::RemovePayloadsRequest* request, ::VeriBlock::GeneralReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRemovePayloads(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_AddTemporaryPayloads : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_AddTemporaryPayloads() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_AddTemporaryPayloads() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddTemporaryPayloads(::grpc::ServerContext* context, const ::VeriBlock::AddTemporaryPayloadsRequest* request, ::VeriBlock::GeneralReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAddTemporaryPayloads(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ClearTemporaryPayloads : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_ClearTemporaryPayloads() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_ClearTemporaryPayloads() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ClearTemporaryPayloads(::grpc::ServerContext* context, const ::VeriBlock::EmptyRequest* request, ::VeriBlock::GeneralReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestClearTemporaryPayloads(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SimplifyVTBs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_SimplifyVTBs() {
      ::grpc::Service::MarkMethodRaw(7);
    }
    ~WithRawMethod_SimplifyVTBs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SimplifyVTBs(::grpc::ServerContext* context, const ::VeriBlock::SimplifyVTBsRequest* request, ::VeriBlock::SimplifyVTBsReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSimplifyVTBs(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CheckATVAgainstView : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_CheckATVAgainstView() {
      ::grpc::Service::MarkMethodRaw(8);
    }
    ~WithRawMethod_CheckATVAgainstView() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CheckATVAgainstView(::grpc::ServerContext* context, const ::VeriBlock::AltPublication* request, ::VeriBlock::GeneralReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCheckATVAgainstView(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CheckVTBInternally : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_CheckVTBInternally() {
      ::grpc::Service::MarkMethodRaw(9);
    }
    ~WithRawMethod_CheckVTBInternally() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CheckVTBInternally(::grpc::ServerContext* context, const ::VeriBlock::VeriBlockPublication* request, ::VeriBlock::GeneralReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCheckVTBInternally(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CheckATVInternally : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_CheckATVInternally() {
      ::grpc::Service::MarkMethodRaw(10);
    }
    ~WithRawMethod_CheckATVInternally() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CheckATVInternally(::grpc::ServerContext* context, const ::VeriBlock::AltPublication* request, ::VeriBlock::GeneralReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCheckATVInternally(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetMainVBKHeightOfATV : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_GetMainVBKHeightOfATV() {
      ::grpc::Service::MarkMethodRaw(11);
    }
    ~WithRawMethod_GetMainVBKHeightOfATV() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMainVBKHeightOfATV(::grpc::ServerContext* context, const ::VeriBlock::AltPublication* request, ::VeriBlock::GetMainVBKHeightOfATVReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetMainVBKHeightOfATV(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(11, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_ResetSecurity : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_ResetSecurity() {
      ::grpc::Service::experimental().MarkMethodRawCallback(0,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->ResetSecurity(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_ResetSecurity() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ResetSecurity(::grpc::ServerContext* context, const ::VeriBlock::EmptyRequest* request, ::VeriBlock::GeneralReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void ResetSecurity(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_AddGenesisVeriBlock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_AddGenesisVeriBlock() {
      ::grpc::Service::experimental().MarkMethodRawCallback(1,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->AddGenesisVeriBlock(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_AddGenesisVeriBlock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddGenesisVeriBlock(::grpc::ServerContext* context, const ::VeriBlock::VeriBlockBlock* request, ::VeriBlock::GeneralReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void AddGenesisVeriBlock(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_AddGenesisBitcoin : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_AddGenesisBitcoin() {
      ::grpc::Service::experimental().MarkMethodRawCallback(2,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->AddGenesisBitcoin(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_AddGenesisBitcoin() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddGenesisBitcoin(::grpc::ServerContext* context, const ::VeriBlock::BitcoinBlock* request, ::VeriBlock::GeneralReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void AddGenesisBitcoin(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_AddPayloads : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_AddPayloads() {
      ::grpc::Service::experimental().MarkMethodRawCallback(3,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->AddPayloads(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_AddPayloads() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddPayloads(::grpc::ServerContext* context, const ::VeriBlock::AddPayloadsRequest* request, ::VeriBlock::GeneralReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void AddPayloads(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_RemovePayloads : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_RemovePayloads() {
      ::grpc::Service::experimental().MarkMethodRawCallback(4,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->RemovePayloads(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_RemovePayloads() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemovePayloads(::grpc::ServerContext* context, const ::VeriBlock::RemovePayloadsRequest* request, ::VeriBlock::GeneralReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void RemovePayloads(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_AddTemporaryPayloads : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_AddTemporaryPayloads() {
      ::grpc::Service::experimental().MarkMethodRawCallback(5,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->AddTemporaryPayloads(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_AddTemporaryPayloads() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddTemporaryPayloads(::grpc::ServerContext* context, const ::VeriBlock::AddTemporaryPayloadsRequest* request, ::VeriBlock::GeneralReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void AddTemporaryPayloads(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_ClearTemporaryPayloads : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_ClearTemporaryPayloads() {
      ::grpc::Service::experimental().MarkMethodRawCallback(6,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->ClearTemporaryPayloads(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_ClearTemporaryPayloads() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ClearTemporaryPayloads(::grpc::ServerContext* context, const ::VeriBlock::EmptyRequest* request, ::VeriBlock::GeneralReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void ClearTemporaryPayloads(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_SimplifyVTBs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_SimplifyVTBs() {
      ::grpc::Service::experimental().MarkMethodRawCallback(7,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->SimplifyVTBs(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_SimplifyVTBs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SimplifyVTBs(::grpc::ServerContext* context, const ::VeriBlock::SimplifyVTBsRequest* request, ::VeriBlock::SimplifyVTBsReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void SimplifyVTBs(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_CheckATVAgainstView : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_CheckATVAgainstView() {
      ::grpc::Service::experimental().MarkMethodRawCallback(8,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->CheckATVAgainstView(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_CheckATVAgainstView() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CheckATVAgainstView(::grpc::ServerContext* context, const ::VeriBlock::AltPublication* request, ::VeriBlock::GeneralReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void CheckATVAgainstView(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_CheckVTBInternally : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_CheckVTBInternally() {
      ::grpc::Service::experimental().MarkMethodRawCallback(9,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->CheckVTBInternally(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_CheckVTBInternally() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CheckVTBInternally(::grpc::ServerContext* context, const ::VeriBlock::VeriBlockPublication* request, ::VeriBlock::GeneralReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void CheckVTBInternally(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_CheckATVInternally : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_CheckATVInternally() {
      ::grpc::Service::experimental().MarkMethodRawCallback(10,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->CheckATVInternally(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_CheckATVInternally() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CheckATVInternally(::grpc::ServerContext* context, const ::VeriBlock::AltPublication* request, ::VeriBlock::GeneralReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void CheckATVInternally(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetMainVBKHeightOfATV : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_GetMainVBKHeightOfATV() {
      ::grpc::Service::experimental().MarkMethodRawCallback(11,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->GetMainVBKHeightOfATV(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_GetMainVBKHeightOfATV() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMainVBKHeightOfATV(::grpc::ServerContext* context, const ::VeriBlock::AltPublication* request, ::VeriBlock::GetMainVBKHeightOfATVReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GetMainVBKHeightOfATV(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ResetSecurity : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_ResetSecurity() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::VeriBlock::EmptyRequest, ::VeriBlock::GeneralReply>(std::bind(&WithStreamedUnaryMethod_ResetSecurity<BaseClass>::StreamedResetSecurity, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_ResetSecurity() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ResetSecurity(::grpc::ServerContext* context, const ::VeriBlock::EmptyRequest* request, ::VeriBlock::GeneralReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedResetSecurity(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::VeriBlock::EmptyRequest,::VeriBlock::GeneralReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_AddGenesisVeriBlock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_AddGenesisVeriBlock() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::VeriBlock::VeriBlockBlock, ::VeriBlock::GeneralReply>(std::bind(&WithStreamedUnaryMethod_AddGenesisVeriBlock<BaseClass>::StreamedAddGenesisVeriBlock, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_AddGenesisVeriBlock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status AddGenesisVeriBlock(::grpc::ServerContext* context, const ::VeriBlock::VeriBlockBlock* request, ::VeriBlock::GeneralReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedAddGenesisVeriBlock(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::VeriBlock::VeriBlockBlock,::VeriBlock::GeneralReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_AddGenesisBitcoin : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_AddGenesisBitcoin() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler< ::VeriBlock::BitcoinBlock, ::VeriBlock::GeneralReply>(std::bind(&WithStreamedUnaryMethod_AddGenesisBitcoin<BaseClass>::StreamedAddGenesisBitcoin, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_AddGenesisBitcoin() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status AddGenesisBitcoin(::grpc::ServerContext* context, const ::VeriBlock::BitcoinBlock* request, ::VeriBlock::GeneralReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedAddGenesisBitcoin(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::VeriBlock::BitcoinBlock,::VeriBlock::GeneralReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_AddPayloads : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_AddPayloads() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler< ::VeriBlock::AddPayloadsRequest, ::VeriBlock::GeneralReply>(std::bind(&WithStreamedUnaryMethod_AddPayloads<BaseClass>::StreamedAddPayloads, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_AddPayloads() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status AddPayloads(::grpc::ServerContext* context, const ::VeriBlock::AddPayloadsRequest* request, ::VeriBlock::GeneralReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedAddPayloads(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::VeriBlock::AddPayloadsRequest,::VeriBlock::GeneralReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_RemovePayloads : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_RemovePayloads() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler< ::VeriBlock::RemovePayloadsRequest, ::VeriBlock::GeneralReply>(std::bind(&WithStreamedUnaryMethod_RemovePayloads<BaseClass>::StreamedRemovePayloads, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_RemovePayloads() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RemovePayloads(::grpc::ServerContext* context, const ::VeriBlock::RemovePayloadsRequest* request, ::VeriBlock::GeneralReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRemovePayloads(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::VeriBlock::RemovePayloadsRequest,::VeriBlock::GeneralReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_AddTemporaryPayloads : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_AddTemporaryPayloads() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler< ::VeriBlock::AddTemporaryPayloadsRequest, ::VeriBlock::GeneralReply>(std::bind(&WithStreamedUnaryMethod_AddTemporaryPayloads<BaseClass>::StreamedAddTemporaryPayloads, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_AddTemporaryPayloads() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status AddTemporaryPayloads(::grpc::ServerContext* context, const ::VeriBlock::AddTemporaryPayloadsRequest* request, ::VeriBlock::GeneralReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedAddTemporaryPayloads(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::VeriBlock::AddTemporaryPayloadsRequest,::VeriBlock::GeneralReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ClearTemporaryPayloads : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_ClearTemporaryPayloads() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler< ::VeriBlock::EmptyRequest, ::VeriBlock::GeneralReply>(std::bind(&WithStreamedUnaryMethod_ClearTemporaryPayloads<BaseClass>::StreamedClearTemporaryPayloads, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_ClearTemporaryPayloads() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ClearTemporaryPayloads(::grpc::ServerContext* context, const ::VeriBlock::EmptyRequest* request, ::VeriBlock::GeneralReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedClearTemporaryPayloads(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::VeriBlock::EmptyRequest,::VeriBlock::GeneralReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SimplifyVTBs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_SimplifyVTBs() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::internal::StreamedUnaryHandler< ::VeriBlock::SimplifyVTBsRequest, ::VeriBlock::SimplifyVTBsReply>(std::bind(&WithStreamedUnaryMethod_SimplifyVTBs<BaseClass>::StreamedSimplifyVTBs, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_SimplifyVTBs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SimplifyVTBs(::grpc::ServerContext* context, const ::VeriBlock::SimplifyVTBsRequest* request, ::VeriBlock::SimplifyVTBsReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSimplifyVTBs(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::VeriBlock::SimplifyVTBsRequest,::VeriBlock::SimplifyVTBsReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CheckATVAgainstView : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_CheckATVAgainstView() {
      ::grpc::Service::MarkMethodStreamed(8,
        new ::grpc::internal::StreamedUnaryHandler< ::VeriBlock::AltPublication, ::VeriBlock::GeneralReply>(std::bind(&WithStreamedUnaryMethod_CheckATVAgainstView<BaseClass>::StreamedCheckATVAgainstView, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_CheckATVAgainstView() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CheckATVAgainstView(::grpc::ServerContext* context, const ::VeriBlock::AltPublication* request, ::VeriBlock::GeneralReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCheckATVAgainstView(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::VeriBlock::AltPublication,::VeriBlock::GeneralReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CheckVTBInternally : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_CheckVTBInternally() {
      ::grpc::Service::MarkMethodStreamed(9,
        new ::grpc::internal::StreamedUnaryHandler< ::VeriBlock::VeriBlockPublication, ::VeriBlock::GeneralReply>(std::bind(&WithStreamedUnaryMethod_CheckVTBInternally<BaseClass>::StreamedCheckVTBInternally, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_CheckVTBInternally() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CheckVTBInternally(::grpc::ServerContext* context, const ::VeriBlock::VeriBlockPublication* request, ::VeriBlock::GeneralReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCheckVTBInternally(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::VeriBlock::VeriBlockPublication,::VeriBlock::GeneralReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CheckATVInternally : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_CheckATVInternally() {
      ::grpc::Service::MarkMethodStreamed(10,
        new ::grpc::internal::StreamedUnaryHandler< ::VeriBlock::AltPublication, ::VeriBlock::GeneralReply>(std::bind(&WithStreamedUnaryMethod_CheckATVInternally<BaseClass>::StreamedCheckATVInternally, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_CheckATVInternally() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CheckATVInternally(::grpc::ServerContext* context, const ::VeriBlock::AltPublication* request, ::VeriBlock::GeneralReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCheckATVInternally(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::VeriBlock::AltPublication,::VeriBlock::GeneralReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetMainVBKHeightOfATV : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetMainVBKHeightOfATV() {
      ::grpc::Service::MarkMethodStreamed(11,
        new ::grpc::internal::StreamedUnaryHandler< ::VeriBlock::AltPublication, ::VeriBlock::GetMainVBKHeightOfATVReply>(std::bind(&WithStreamedUnaryMethod_GetMainVBKHeightOfATV<BaseClass>::StreamedGetMainVBKHeightOfATV, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetMainVBKHeightOfATV() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetMainVBKHeightOfATV(::grpc::ServerContext* context, const ::VeriBlock::AltPublication* request, ::VeriBlock::GetMainVBKHeightOfATVReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetMainVBKHeightOfATV(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::VeriBlock::AltPublication,::VeriBlock::GetMainVBKHeightOfATVReply>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_ResetSecurity<WithStreamedUnaryMethod_AddGenesisVeriBlock<WithStreamedUnaryMethod_AddGenesisBitcoin<WithStreamedUnaryMethod_AddPayloads<WithStreamedUnaryMethod_RemovePayloads<WithStreamedUnaryMethod_AddTemporaryPayloads<WithStreamedUnaryMethod_ClearTemporaryPayloads<WithStreamedUnaryMethod_SimplifyVTBs<WithStreamedUnaryMethod_CheckATVAgainstView<WithStreamedUnaryMethod_CheckVTBInternally<WithStreamedUnaryMethod_CheckATVInternally<WithStreamedUnaryMethod_GetMainVBKHeightOfATV<Service > > > > > > > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_ResetSecurity<WithStreamedUnaryMethod_AddGenesisVeriBlock<WithStreamedUnaryMethod_AddGenesisBitcoin<WithStreamedUnaryMethod_AddPayloads<WithStreamedUnaryMethod_RemovePayloads<WithStreamedUnaryMethod_AddTemporaryPayloads<WithStreamedUnaryMethod_ClearTemporaryPayloads<WithStreamedUnaryMethod_SimplifyVTBs<WithStreamedUnaryMethod_CheckATVAgainstView<WithStreamedUnaryMethod_CheckVTBInternally<WithStreamedUnaryMethod_CheckATVInternally<WithStreamedUnaryMethod_GetMainVBKHeightOfATV<Service > > > > > > > > > > > > StreamedService;
};

class RewardsService final {
 public:
  static constexpr char const* service_full_name() {
    return "VeriBlock.RewardsService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status ResetRewards(::grpc::ClientContext* context, const ::VeriBlock::EmptyRequest& request, ::VeriBlock::GeneralReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::GeneralReply>> AsyncResetRewards(::grpc::ClientContext* context, const ::VeriBlock::EmptyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::GeneralReply>>(AsyncResetRewardsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::GeneralReply>> PrepareAsyncResetRewards(::grpc::ClientContext* context, const ::VeriBlock::EmptyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::GeneralReply>>(PrepareAsyncResetRewardsRaw(context, request, cq));
    }
    virtual ::grpc::Status GetCalculator(::grpc::ClientContext* context, const ::VeriBlock::EmptyRequest& request, ::VeriBlock::GetCalculatorReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::GetCalculatorReply>> AsyncGetCalculator(::grpc::ClientContext* context, const ::VeriBlock::EmptyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::GetCalculatorReply>>(AsyncGetCalculatorRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::GetCalculatorReply>> PrepareAsyncGetCalculator(::grpc::ClientContext* context, const ::VeriBlock::EmptyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::GetCalculatorReply>>(PrepareAsyncGetCalculatorRaw(context, request, cq));
    }
    virtual ::grpc::Status SetCalculator(::grpc::ClientContext* context, const ::VeriBlock::SetCalculatorRequest& request, ::VeriBlock::GeneralReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::GeneralReply>> AsyncSetCalculator(::grpc::ClientContext* context, const ::VeriBlock::SetCalculatorRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::GeneralReply>>(AsyncSetCalculatorRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::GeneralReply>> PrepareAsyncSetCalculator(::grpc::ClientContext* context, const ::VeriBlock::SetCalculatorRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::GeneralReply>>(PrepareAsyncSetCalculatorRaw(context, request, cq));
    }
    virtual ::grpc::Status RewardsCalculateScore(::grpc::ClientContext* context, const ::VeriBlock::RewardsCalculateScoreRequest& request, ::VeriBlock::RewardsCalculateScoreReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::RewardsCalculateScoreReply>> AsyncRewardsCalculateScore(::grpc::ClientContext* context, const ::VeriBlock::RewardsCalculateScoreRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::RewardsCalculateScoreReply>>(AsyncRewardsCalculateScoreRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::RewardsCalculateScoreReply>> PrepareAsyncRewardsCalculateScore(::grpc::ClientContext* context, const ::VeriBlock::RewardsCalculateScoreRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::RewardsCalculateScoreReply>>(PrepareAsyncRewardsCalculateScoreRaw(context, request, cq));
    }
    virtual ::grpc::Status RewardsCalculateOutputs(::grpc::ClientContext* context, const ::VeriBlock::RewardsCalculateOutputsRequest& request, ::VeriBlock::RewardsCalculateOutputsReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::RewardsCalculateOutputsReply>> AsyncRewardsCalculateOutputs(::grpc::ClientContext* context, const ::VeriBlock::RewardsCalculateOutputsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::RewardsCalculateOutputsReply>>(AsyncRewardsCalculateOutputsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::RewardsCalculateOutputsReply>> PrepareAsyncRewardsCalculateOutputs(::grpc::ClientContext* context, const ::VeriBlock::RewardsCalculateOutputsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::RewardsCalculateOutputsReply>>(PrepareAsyncRewardsCalculateOutputsRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      virtual void ResetRewards(::grpc::ClientContext* context, const ::VeriBlock::EmptyRequest* request, ::VeriBlock::GeneralReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ResetRewards(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::GeneralReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ResetRewards(::grpc::ClientContext* context, const ::VeriBlock::EmptyRequest* request, ::VeriBlock::GeneralReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void ResetRewards(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::GeneralReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void GetCalculator(::grpc::ClientContext* context, const ::VeriBlock::EmptyRequest* request, ::VeriBlock::GetCalculatorReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetCalculator(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::GetCalculatorReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetCalculator(::grpc::ClientContext* context, const ::VeriBlock::EmptyRequest* request, ::VeriBlock::GetCalculatorReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void GetCalculator(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::GetCalculatorReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void SetCalculator(::grpc::ClientContext* context, const ::VeriBlock::SetCalculatorRequest* request, ::VeriBlock::GeneralReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SetCalculator(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::GeneralReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SetCalculator(::grpc::ClientContext* context, const ::VeriBlock::SetCalculatorRequest* request, ::VeriBlock::GeneralReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void SetCalculator(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::GeneralReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void RewardsCalculateScore(::grpc::ClientContext* context, const ::VeriBlock::RewardsCalculateScoreRequest* request, ::VeriBlock::RewardsCalculateScoreReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void RewardsCalculateScore(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::RewardsCalculateScoreReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void RewardsCalculateScore(::grpc::ClientContext* context, const ::VeriBlock::RewardsCalculateScoreRequest* request, ::VeriBlock::RewardsCalculateScoreReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void RewardsCalculateScore(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::RewardsCalculateScoreReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void RewardsCalculateOutputs(::grpc::ClientContext* context, const ::VeriBlock::RewardsCalculateOutputsRequest* request, ::VeriBlock::RewardsCalculateOutputsReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void RewardsCalculateOutputs(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::RewardsCalculateOutputsReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void RewardsCalculateOutputs(::grpc::ClientContext* context, const ::VeriBlock::RewardsCalculateOutputsRequest* request, ::VeriBlock::RewardsCalculateOutputsReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void RewardsCalculateOutputs(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::RewardsCalculateOutputsReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
    };
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::GeneralReply>* AsyncResetRewardsRaw(::grpc::ClientContext* context, const ::VeriBlock::EmptyRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::GeneralReply>* PrepareAsyncResetRewardsRaw(::grpc::ClientContext* context, const ::VeriBlock::EmptyRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::GetCalculatorReply>* AsyncGetCalculatorRaw(::grpc::ClientContext* context, const ::VeriBlock::EmptyRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::GetCalculatorReply>* PrepareAsyncGetCalculatorRaw(::grpc::ClientContext* context, const ::VeriBlock::EmptyRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::GeneralReply>* AsyncSetCalculatorRaw(::grpc::ClientContext* context, const ::VeriBlock::SetCalculatorRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::GeneralReply>* PrepareAsyncSetCalculatorRaw(::grpc::ClientContext* context, const ::VeriBlock::SetCalculatorRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::RewardsCalculateScoreReply>* AsyncRewardsCalculateScoreRaw(::grpc::ClientContext* context, const ::VeriBlock::RewardsCalculateScoreRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::RewardsCalculateScoreReply>* PrepareAsyncRewardsCalculateScoreRaw(::grpc::ClientContext* context, const ::VeriBlock::RewardsCalculateScoreRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::RewardsCalculateOutputsReply>* AsyncRewardsCalculateOutputsRaw(::grpc::ClientContext* context, const ::VeriBlock::RewardsCalculateOutputsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::RewardsCalculateOutputsReply>* PrepareAsyncRewardsCalculateOutputsRaw(::grpc::ClientContext* context, const ::VeriBlock::RewardsCalculateOutputsRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status ResetRewards(::grpc::ClientContext* context, const ::VeriBlock::EmptyRequest& request, ::VeriBlock::GeneralReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::VeriBlock::GeneralReply>> AsyncResetRewards(::grpc::ClientContext* context, const ::VeriBlock::EmptyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::VeriBlock::GeneralReply>>(AsyncResetRewardsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::VeriBlock::GeneralReply>> PrepareAsyncResetRewards(::grpc::ClientContext* context, const ::VeriBlock::EmptyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::VeriBlock::GeneralReply>>(PrepareAsyncResetRewardsRaw(context, request, cq));
    }
    ::grpc::Status GetCalculator(::grpc::ClientContext* context, const ::VeriBlock::EmptyRequest& request, ::VeriBlock::GetCalculatorReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::VeriBlock::GetCalculatorReply>> AsyncGetCalculator(::grpc::ClientContext* context, const ::VeriBlock::EmptyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::VeriBlock::GetCalculatorReply>>(AsyncGetCalculatorRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::VeriBlock::GetCalculatorReply>> PrepareAsyncGetCalculator(::grpc::ClientContext* context, const ::VeriBlock::EmptyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::VeriBlock::GetCalculatorReply>>(PrepareAsyncGetCalculatorRaw(context, request, cq));
    }
    ::grpc::Status SetCalculator(::grpc::ClientContext* context, const ::VeriBlock::SetCalculatorRequest& request, ::VeriBlock::GeneralReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::VeriBlock::GeneralReply>> AsyncSetCalculator(::grpc::ClientContext* context, const ::VeriBlock::SetCalculatorRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::VeriBlock::GeneralReply>>(AsyncSetCalculatorRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::VeriBlock::GeneralReply>> PrepareAsyncSetCalculator(::grpc::ClientContext* context, const ::VeriBlock::SetCalculatorRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::VeriBlock::GeneralReply>>(PrepareAsyncSetCalculatorRaw(context, request, cq));
    }
    ::grpc::Status RewardsCalculateScore(::grpc::ClientContext* context, const ::VeriBlock::RewardsCalculateScoreRequest& request, ::VeriBlock::RewardsCalculateScoreReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::VeriBlock::RewardsCalculateScoreReply>> AsyncRewardsCalculateScore(::grpc::ClientContext* context, const ::VeriBlock::RewardsCalculateScoreRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::VeriBlock::RewardsCalculateScoreReply>>(AsyncRewardsCalculateScoreRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::VeriBlock::RewardsCalculateScoreReply>> PrepareAsyncRewardsCalculateScore(::grpc::ClientContext* context, const ::VeriBlock::RewardsCalculateScoreRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::VeriBlock::RewardsCalculateScoreReply>>(PrepareAsyncRewardsCalculateScoreRaw(context, request, cq));
    }
    ::grpc::Status RewardsCalculateOutputs(::grpc::ClientContext* context, const ::VeriBlock::RewardsCalculateOutputsRequest& request, ::VeriBlock::RewardsCalculateOutputsReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::VeriBlock::RewardsCalculateOutputsReply>> AsyncRewardsCalculateOutputs(::grpc::ClientContext* context, const ::VeriBlock::RewardsCalculateOutputsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::VeriBlock::RewardsCalculateOutputsReply>>(AsyncRewardsCalculateOutputsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::VeriBlock::RewardsCalculateOutputsReply>> PrepareAsyncRewardsCalculateOutputs(::grpc::ClientContext* context, const ::VeriBlock::RewardsCalculateOutputsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::VeriBlock::RewardsCalculateOutputsReply>>(PrepareAsyncRewardsCalculateOutputsRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void ResetRewards(::grpc::ClientContext* context, const ::VeriBlock::EmptyRequest* request, ::VeriBlock::GeneralReply* response, std::function<void(::grpc::Status)>) override;
      void ResetRewards(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::GeneralReply* response, std::function<void(::grpc::Status)>) override;
      void ResetRewards(::grpc::ClientContext* context, const ::VeriBlock::EmptyRequest* request, ::VeriBlock::GeneralReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void ResetRewards(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::GeneralReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void GetCalculator(::grpc::ClientContext* context, const ::VeriBlock::EmptyRequest* request, ::VeriBlock::GetCalculatorReply* response, std::function<void(::grpc::Status)>) override;
      void GetCalculator(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::GetCalculatorReply* response, std::function<void(::grpc::Status)>) override;
      void GetCalculator(::grpc::ClientContext* context, const ::VeriBlock::EmptyRequest* request, ::VeriBlock::GetCalculatorReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void GetCalculator(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::GetCalculatorReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void SetCalculator(::grpc::ClientContext* context, const ::VeriBlock::SetCalculatorRequest* request, ::VeriBlock::GeneralReply* response, std::function<void(::grpc::Status)>) override;
      void SetCalculator(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::GeneralReply* response, std::function<void(::grpc::Status)>) override;
      void SetCalculator(::grpc::ClientContext* context, const ::VeriBlock::SetCalculatorRequest* request, ::VeriBlock::GeneralReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void SetCalculator(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::GeneralReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void RewardsCalculateScore(::grpc::ClientContext* context, const ::VeriBlock::RewardsCalculateScoreRequest* request, ::VeriBlock::RewardsCalculateScoreReply* response, std::function<void(::grpc::Status)>) override;
      void RewardsCalculateScore(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::RewardsCalculateScoreReply* response, std::function<void(::grpc::Status)>) override;
      void RewardsCalculateScore(::grpc::ClientContext* context, const ::VeriBlock::RewardsCalculateScoreRequest* request, ::VeriBlock::RewardsCalculateScoreReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void RewardsCalculateScore(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::RewardsCalculateScoreReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void RewardsCalculateOutputs(::grpc::ClientContext* context, const ::VeriBlock::RewardsCalculateOutputsRequest* request, ::VeriBlock::RewardsCalculateOutputsReply* response, std::function<void(::grpc::Status)>) override;
      void RewardsCalculateOutputs(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::RewardsCalculateOutputsReply* response, std::function<void(::grpc::Status)>) override;
      void RewardsCalculateOutputs(::grpc::ClientContext* context, const ::VeriBlock::RewardsCalculateOutputsRequest* request, ::VeriBlock::RewardsCalculateOutputsReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void RewardsCalculateOutputs(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::RewardsCalculateOutputsReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::VeriBlock::GeneralReply>* AsyncResetRewardsRaw(::grpc::ClientContext* context, const ::VeriBlock::EmptyRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::VeriBlock::GeneralReply>* PrepareAsyncResetRewardsRaw(::grpc::ClientContext* context, const ::VeriBlock::EmptyRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::VeriBlock::GetCalculatorReply>* AsyncGetCalculatorRaw(::grpc::ClientContext* context, const ::VeriBlock::EmptyRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::VeriBlock::GetCalculatorReply>* PrepareAsyncGetCalculatorRaw(::grpc::ClientContext* context, const ::VeriBlock::EmptyRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::VeriBlock::GeneralReply>* AsyncSetCalculatorRaw(::grpc::ClientContext* context, const ::VeriBlock::SetCalculatorRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::VeriBlock::GeneralReply>* PrepareAsyncSetCalculatorRaw(::grpc::ClientContext* context, const ::VeriBlock::SetCalculatorRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::VeriBlock::RewardsCalculateScoreReply>* AsyncRewardsCalculateScoreRaw(::grpc::ClientContext* context, const ::VeriBlock::RewardsCalculateScoreRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::VeriBlock::RewardsCalculateScoreReply>* PrepareAsyncRewardsCalculateScoreRaw(::grpc::ClientContext* context, const ::VeriBlock::RewardsCalculateScoreRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::VeriBlock::RewardsCalculateOutputsReply>* AsyncRewardsCalculateOutputsRaw(::grpc::ClientContext* context, const ::VeriBlock::RewardsCalculateOutputsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::VeriBlock::RewardsCalculateOutputsReply>* PrepareAsyncRewardsCalculateOutputsRaw(::grpc::ClientContext* context, const ::VeriBlock::RewardsCalculateOutputsRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_ResetRewards_;
    const ::grpc::internal::RpcMethod rpcmethod_GetCalculator_;
    const ::grpc::internal::RpcMethod rpcmethod_SetCalculator_;
    const ::grpc::internal::RpcMethod rpcmethod_RewardsCalculateScore_;
    const ::grpc::internal::RpcMethod rpcmethod_RewardsCalculateOutputs_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status ResetRewards(::grpc::ServerContext* context, const ::VeriBlock::EmptyRequest* request, ::VeriBlock::GeneralReply* response);
    virtual ::grpc::Status GetCalculator(::grpc::ServerContext* context, const ::VeriBlock::EmptyRequest* request, ::VeriBlock::GetCalculatorReply* response);
    virtual ::grpc::Status SetCalculator(::grpc::ServerContext* context, const ::VeriBlock::SetCalculatorRequest* request, ::VeriBlock::GeneralReply* response);
    virtual ::grpc::Status RewardsCalculateScore(::grpc::ServerContext* context, const ::VeriBlock::RewardsCalculateScoreRequest* request, ::VeriBlock::RewardsCalculateScoreReply* response);
    virtual ::grpc::Status RewardsCalculateOutputs(::grpc::ServerContext* context, const ::VeriBlock::RewardsCalculateOutputsRequest* request, ::VeriBlock::RewardsCalculateOutputsReply* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_ResetRewards : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_ResetRewards() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_ResetRewards() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ResetRewards(::grpc::ServerContext* context, const ::VeriBlock::EmptyRequest* request, ::VeriBlock::GeneralReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestResetRewards(::grpc::ServerContext* context, ::VeriBlock::EmptyRequest* request, ::grpc::ServerAsyncResponseWriter< ::VeriBlock::GeneralReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetCalculator : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetCalculator() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_GetCalculator() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCalculator(::grpc::ServerContext* context, const ::VeriBlock::EmptyRequest* request, ::VeriBlock::GetCalculatorReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetCalculator(::grpc::ServerContext* context, ::VeriBlock::EmptyRequest* request, ::grpc::ServerAsyncResponseWriter< ::VeriBlock::GetCalculatorReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SetCalculator : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_SetCalculator() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_SetCalculator() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetCalculator(::grpc::ServerContext* context, const ::VeriBlock::SetCalculatorRequest* request, ::VeriBlock::GeneralReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetCalculator(::grpc::ServerContext* context, ::VeriBlock::SetCalculatorRequest* request, ::grpc::ServerAsyncResponseWriter< ::VeriBlock::GeneralReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_RewardsCalculateScore : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_RewardsCalculateScore() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_RewardsCalculateScore() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RewardsCalculateScore(::grpc::ServerContext* context, const ::VeriBlock::RewardsCalculateScoreRequest* request, ::VeriBlock::RewardsCalculateScoreReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRewardsCalculateScore(::grpc::ServerContext* context, ::VeriBlock::RewardsCalculateScoreRequest* request, ::grpc::ServerAsyncResponseWriter< ::VeriBlock::RewardsCalculateScoreReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_RewardsCalculateOutputs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_RewardsCalculateOutputs() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_RewardsCalculateOutputs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RewardsCalculateOutputs(::grpc::ServerContext* context, const ::VeriBlock::RewardsCalculateOutputsRequest* request, ::VeriBlock::RewardsCalculateOutputsReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRewardsCalculateOutputs(::grpc::ServerContext* context, ::VeriBlock::RewardsCalculateOutputsRequest* request, ::grpc::ServerAsyncResponseWriter< ::VeriBlock::RewardsCalculateOutputsReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_ResetRewards<WithAsyncMethod_GetCalculator<WithAsyncMethod_SetCalculator<WithAsyncMethod_RewardsCalculateScore<WithAsyncMethod_RewardsCalculateOutputs<Service > > > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_ResetRewards : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_ResetRewards() {
      ::grpc::Service::experimental().MarkMethodCallback(0,
        new ::grpc::internal::CallbackUnaryHandler< ::VeriBlock::EmptyRequest, ::VeriBlock::GeneralReply>(
          [this](::grpc::ServerContext* context,
                 const ::VeriBlock::EmptyRequest* request,
                 ::VeriBlock::GeneralReply* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->ResetRewards(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_ResetRewards(
        ::grpc::experimental::MessageAllocator< ::VeriBlock::EmptyRequest, ::VeriBlock::GeneralReply>* allocator) {
      static_cast<::grpc::internal::CallbackUnaryHandler< ::VeriBlock::EmptyRequest, ::VeriBlock::GeneralReply>*>(
          ::grpc::Service::experimental().GetHandler(0))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_ResetRewards() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ResetRewards(::grpc::ServerContext* context, const ::VeriBlock::EmptyRequest* request, ::VeriBlock::GeneralReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void ResetRewards(::grpc::ServerContext* context, const ::VeriBlock::EmptyRequest* request, ::VeriBlock::GeneralReply* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetCalculator : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_GetCalculator() {
      ::grpc::Service::experimental().MarkMethodCallback(1,
        new ::grpc::internal::CallbackUnaryHandler< ::VeriBlock::EmptyRequest, ::VeriBlock::GetCalculatorReply>(
          [this](::grpc::ServerContext* context,
                 const ::VeriBlock::EmptyRequest* request,
                 ::VeriBlock::GetCalculatorReply* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->GetCalculator(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_GetCalculator(
        ::grpc::experimental::MessageAllocator< ::VeriBlock::EmptyRequest, ::VeriBlock::GetCalculatorReply>* allocator) {
      static_cast<::grpc::internal::CallbackUnaryHandler< ::VeriBlock::EmptyRequest, ::VeriBlock::GetCalculatorReply>*>(
          ::grpc::Service::experimental().GetHandler(1))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetCalculator() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCalculator(::grpc::ServerContext* context, const ::VeriBlock::EmptyRequest* request, ::VeriBlock::GetCalculatorReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GetCalculator(::grpc::ServerContext* context, const ::VeriBlock::EmptyRequest* request, ::VeriBlock::GetCalculatorReply* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_SetCalculator : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_SetCalculator() {
      ::grpc::Service::experimental().MarkMethodCallback(2,
        new ::grpc::internal::CallbackUnaryHandler< ::VeriBlock::SetCalculatorRequest, ::VeriBlock::GeneralReply>(
          [this](::grpc::ServerContext* context,
                 const ::VeriBlock::SetCalculatorRequest* request,
                 ::VeriBlock::GeneralReply* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->SetCalculator(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_SetCalculator(
        ::grpc::experimental::MessageAllocator< ::VeriBlock::SetCalculatorRequest, ::VeriBlock::GeneralReply>* allocator) {
      static_cast<::grpc::internal::CallbackUnaryHandler< ::VeriBlock::SetCalculatorRequest, ::VeriBlock::GeneralReply>*>(
          ::grpc::Service::experimental().GetHandler(2))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_SetCalculator() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetCalculator(::grpc::ServerContext* context, const ::VeriBlock::SetCalculatorRequest* request, ::VeriBlock::GeneralReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void SetCalculator(::grpc::ServerContext* context, const ::VeriBlock::SetCalculatorRequest* request, ::VeriBlock::GeneralReply* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_RewardsCalculateScore : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_RewardsCalculateScore() {
      ::grpc::Service::experimental().MarkMethodCallback(3,
        new ::grpc::internal::CallbackUnaryHandler< ::VeriBlock::RewardsCalculateScoreRequest, ::VeriBlock::RewardsCalculateScoreReply>(
          [this](::grpc::ServerContext* context,
                 const ::VeriBlock::RewardsCalculateScoreRequest* request,
                 ::VeriBlock::RewardsCalculateScoreReply* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->RewardsCalculateScore(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_RewardsCalculateScore(
        ::grpc::experimental::MessageAllocator< ::VeriBlock::RewardsCalculateScoreRequest, ::VeriBlock::RewardsCalculateScoreReply>* allocator) {
      static_cast<::grpc::internal::CallbackUnaryHandler< ::VeriBlock::RewardsCalculateScoreRequest, ::VeriBlock::RewardsCalculateScoreReply>*>(
          ::grpc::Service::experimental().GetHandler(3))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_RewardsCalculateScore() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RewardsCalculateScore(::grpc::ServerContext* context, const ::VeriBlock::RewardsCalculateScoreRequest* request, ::VeriBlock::RewardsCalculateScoreReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void RewardsCalculateScore(::grpc::ServerContext* context, const ::VeriBlock::RewardsCalculateScoreRequest* request, ::VeriBlock::RewardsCalculateScoreReply* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_RewardsCalculateOutputs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_RewardsCalculateOutputs() {
      ::grpc::Service::experimental().MarkMethodCallback(4,
        new ::grpc::internal::CallbackUnaryHandler< ::VeriBlock::RewardsCalculateOutputsRequest, ::VeriBlock::RewardsCalculateOutputsReply>(
          [this](::grpc::ServerContext* context,
                 const ::VeriBlock::RewardsCalculateOutputsRequest* request,
                 ::VeriBlock::RewardsCalculateOutputsReply* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->RewardsCalculateOutputs(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_RewardsCalculateOutputs(
        ::grpc::experimental::MessageAllocator< ::VeriBlock::RewardsCalculateOutputsRequest, ::VeriBlock::RewardsCalculateOutputsReply>* allocator) {
      static_cast<::grpc::internal::CallbackUnaryHandler< ::VeriBlock::RewardsCalculateOutputsRequest, ::VeriBlock::RewardsCalculateOutputsReply>*>(
          ::grpc::Service::experimental().GetHandler(4))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_RewardsCalculateOutputs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RewardsCalculateOutputs(::grpc::ServerContext* context, const ::VeriBlock::RewardsCalculateOutputsRequest* request, ::VeriBlock::RewardsCalculateOutputsReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void RewardsCalculateOutputs(::grpc::ServerContext* context, const ::VeriBlock::RewardsCalculateOutputsRequest* request, ::VeriBlock::RewardsCalculateOutputsReply* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  typedef ExperimentalWithCallbackMethod_ResetRewards<ExperimentalWithCallbackMethod_GetCalculator<ExperimentalWithCallbackMethod_SetCalculator<ExperimentalWithCallbackMethod_RewardsCalculateScore<ExperimentalWithCallbackMethod_RewardsCalculateOutputs<Service > > > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_ResetRewards : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_ResetRewards() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_ResetRewards() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ResetRewards(::grpc::ServerContext* context, const ::VeriBlock::EmptyRequest* request, ::VeriBlock::GeneralReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetCalculator : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetCalculator() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_GetCalculator() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCalculator(::grpc::ServerContext* context, const ::VeriBlock::EmptyRequest* request, ::VeriBlock::GetCalculatorReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SetCalculator : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_SetCalculator() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_SetCalculator() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetCalculator(::grpc::ServerContext* context, const ::VeriBlock::SetCalculatorRequest* request, ::VeriBlock::GeneralReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_RewardsCalculateScore : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_RewardsCalculateScore() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_RewardsCalculateScore() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RewardsCalculateScore(::grpc::ServerContext* context, const ::VeriBlock::RewardsCalculateScoreRequest* request, ::VeriBlock::RewardsCalculateScoreReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_RewardsCalculateOutputs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_RewardsCalculateOutputs() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_RewardsCalculateOutputs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RewardsCalculateOutputs(::grpc::ServerContext* context, const ::VeriBlock::RewardsCalculateOutputsRequest* request, ::VeriBlock::RewardsCalculateOutputsReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_ResetRewards : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_ResetRewards() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_ResetRewards() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ResetRewards(::grpc::ServerContext* context, const ::VeriBlock::EmptyRequest* request, ::VeriBlock::GeneralReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestResetRewards(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetCalculator : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_GetCalculator() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_GetCalculator() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCalculator(::grpc::ServerContext* context, const ::VeriBlock::EmptyRequest* request, ::VeriBlock::GetCalculatorReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetCalculator(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SetCalculator : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_SetCalculator() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_SetCalculator() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetCalculator(::grpc::ServerContext* context, const ::VeriBlock::SetCalculatorRequest* request, ::VeriBlock::GeneralReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetCalculator(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_RewardsCalculateScore : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_RewardsCalculateScore() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_RewardsCalculateScore() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RewardsCalculateScore(::grpc::ServerContext* context, const ::VeriBlock::RewardsCalculateScoreRequest* request, ::VeriBlock::RewardsCalculateScoreReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRewardsCalculateScore(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_RewardsCalculateOutputs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_RewardsCalculateOutputs() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_RewardsCalculateOutputs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RewardsCalculateOutputs(::grpc::ServerContext* context, const ::VeriBlock::RewardsCalculateOutputsRequest* request, ::VeriBlock::RewardsCalculateOutputsReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRewardsCalculateOutputs(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_ResetRewards : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_ResetRewards() {
      ::grpc::Service::experimental().MarkMethodRawCallback(0,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->ResetRewards(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_ResetRewards() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ResetRewards(::grpc::ServerContext* context, const ::VeriBlock::EmptyRequest* request, ::VeriBlock::GeneralReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void ResetRewards(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetCalculator : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_GetCalculator() {
      ::grpc::Service::experimental().MarkMethodRawCallback(1,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->GetCalculator(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_GetCalculator() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCalculator(::grpc::ServerContext* context, const ::VeriBlock::EmptyRequest* request, ::VeriBlock::GetCalculatorReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GetCalculator(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_SetCalculator : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_SetCalculator() {
      ::grpc::Service::experimental().MarkMethodRawCallback(2,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->SetCalculator(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_SetCalculator() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetCalculator(::grpc::ServerContext* context, const ::VeriBlock::SetCalculatorRequest* request, ::VeriBlock::GeneralReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void SetCalculator(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_RewardsCalculateScore : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_RewardsCalculateScore() {
      ::grpc::Service::experimental().MarkMethodRawCallback(3,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->RewardsCalculateScore(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_RewardsCalculateScore() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RewardsCalculateScore(::grpc::ServerContext* context, const ::VeriBlock::RewardsCalculateScoreRequest* request, ::VeriBlock::RewardsCalculateScoreReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void RewardsCalculateScore(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_RewardsCalculateOutputs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_RewardsCalculateOutputs() {
      ::grpc::Service::experimental().MarkMethodRawCallback(4,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->RewardsCalculateOutputs(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_RewardsCalculateOutputs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RewardsCalculateOutputs(::grpc::ServerContext* context, const ::VeriBlock::RewardsCalculateOutputsRequest* request, ::VeriBlock::RewardsCalculateOutputsReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void RewardsCalculateOutputs(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ResetRewards : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_ResetRewards() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::VeriBlock::EmptyRequest, ::VeriBlock::GeneralReply>(std::bind(&WithStreamedUnaryMethod_ResetRewards<BaseClass>::StreamedResetRewards, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_ResetRewards() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ResetRewards(::grpc::ServerContext* context, const ::VeriBlock::EmptyRequest* request, ::VeriBlock::GeneralReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedResetRewards(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::VeriBlock::EmptyRequest,::VeriBlock::GeneralReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetCalculator : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetCalculator() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::VeriBlock::EmptyRequest, ::VeriBlock::GetCalculatorReply>(std::bind(&WithStreamedUnaryMethod_GetCalculator<BaseClass>::StreamedGetCalculator, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetCalculator() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetCalculator(::grpc::ServerContext* context, const ::VeriBlock::EmptyRequest* request, ::VeriBlock::GetCalculatorReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetCalculator(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::VeriBlock::EmptyRequest,::VeriBlock::GetCalculatorReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SetCalculator : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_SetCalculator() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler< ::VeriBlock::SetCalculatorRequest, ::VeriBlock::GeneralReply>(std::bind(&WithStreamedUnaryMethod_SetCalculator<BaseClass>::StreamedSetCalculator, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_SetCalculator() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SetCalculator(::grpc::ServerContext* context, const ::VeriBlock::SetCalculatorRequest* request, ::VeriBlock::GeneralReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSetCalculator(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::VeriBlock::SetCalculatorRequest,::VeriBlock::GeneralReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_RewardsCalculateScore : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_RewardsCalculateScore() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler< ::VeriBlock::RewardsCalculateScoreRequest, ::VeriBlock::RewardsCalculateScoreReply>(std::bind(&WithStreamedUnaryMethod_RewardsCalculateScore<BaseClass>::StreamedRewardsCalculateScore, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_RewardsCalculateScore() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RewardsCalculateScore(::grpc::ServerContext* context, const ::VeriBlock::RewardsCalculateScoreRequest* request, ::VeriBlock::RewardsCalculateScoreReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRewardsCalculateScore(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::VeriBlock::RewardsCalculateScoreRequest,::VeriBlock::RewardsCalculateScoreReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_RewardsCalculateOutputs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_RewardsCalculateOutputs() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler< ::VeriBlock::RewardsCalculateOutputsRequest, ::VeriBlock::RewardsCalculateOutputsReply>(std::bind(&WithStreamedUnaryMethod_RewardsCalculateOutputs<BaseClass>::StreamedRewardsCalculateOutputs, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_RewardsCalculateOutputs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RewardsCalculateOutputs(::grpc::ServerContext* context, const ::VeriBlock::RewardsCalculateOutputsRequest* request, ::VeriBlock::RewardsCalculateOutputsReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRewardsCalculateOutputs(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::VeriBlock::RewardsCalculateOutputsRequest,::VeriBlock::RewardsCalculateOutputsReply>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_ResetRewards<WithStreamedUnaryMethod_GetCalculator<WithStreamedUnaryMethod_SetCalculator<WithStreamedUnaryMethod_RewardsCalculateScore<WithStreamedUnaryMethod_RewardsCalculateOutputs<Service > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_ResetRewards<WithStreamedUnaryMethod_GetCalculator<WithStreamedUnaryMethod_SetCalculator<WithStreamedUnaryMethod_RewardsCalculateScore<WithStreamedUnaryMethod_RewardsCalculateOutputs<Service > > > > > StreamedService;
};

class DeserializeService final {
 public:
  static constexpr char const* service_full_name() {
    return "VeriBlock.DeserializeService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status ParseAltPublication(::grpc::ClientContext* context, const ::VeriBlock::BytesArrayRequest& request, ::VeriBlock::AltPublication* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::AltPublication>> AsyncParseAltPublication(::grpc::ClientContext* context, const ::VeriBlock::BytesArrayRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::AltPublication>>(AsyncParseAltPublicationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::AltPublication>> PrepareAsyncParseAltPublication(::grpc::ClientContext* context, const ::VeriBlock::BytesArrayRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::AltPublication>>(PrepareAsyncParseAltPublicationRaw(context, request, cq));
    }
    virtual ::grpc::Status ParsePublicationData(::grpc::ClientContext* context, const ::VeriBlock::BytesArrayRequest& request, ::VeriBlock::PublicationData* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::PublicationData>> AsyncParsePublicationData(::grpc::ClientContext* context, const ::VeriBlock::BytesArrayRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::PublicationData>>(AsyncParsePublicationDataRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::PublicationData>> PrepareAsyncParsePublicationData(::grpc::ClientContext* context, const ::VeriBlock::BytesArrayRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::PublicationData>>(PrepareAsyncParsePublicationDataRaw(context, request, cq));
    }
    virtual ::grpc::Status ParseBitcoinTransaction(::grpc::ClientContext* context, const ::VeriBlock::BytesArrayRequest& request, ::VeriBlock::BitcoinTransaction* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::BitcoinTransaction>> AsyncParseBitcoinTransaction(::grpc::ClientContext* context, const ::VeriBlock::BytesArrayRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::BitcoinTransaction>>(AsyncParseBitcoinTransactionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::BitcoinTransaction>> PrepareAsyncParseBitcoinTransaction(::grpc::ClientContext* context, const ::VeriBlock::BytesArrayRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::BitcoinTransaction>>(PrepareAsyncParseBitcoinTransactionRaw(context, request, cq));
    }
    virtual ::grpc::Status ParseVeriBlockBlock(::grpc::ClientContext* context, const ::VeriBlock::BytesArrayRequest& request, ::VeriBlock::VeriBlockBlock* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::VeriBlockBlock>> AsyncParseVeriBlockBlock(::grpc::ClientContext* context, const ::VeriBlock::BytesArrayRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::VeriBlockBlock>>(AsyncParseVeriBlockBlockRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::VeriBlockBlock>> PrepareAsyncParseVeriBlockBlock(::grpc::ClientContext* context, const ::VeriBlock::BytesArrayRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::VeriBlockBlock>>(PrepareAsyncParseVeriBlockBlockRaw(context, request, cq));
    }
    virtual ::grpc::Status ParseVeriBlockTransaction(::grpc::ClientContext* context, const ::VeriBlock::BytesArrayRequest& request, ::VeriBlock::VeriBlockTransaction* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::VeriBlockTransaction>> AsyncParseVeriBlockTransaction(::grpc::ClientContext* context, const ::VeriBlock::BytesArrayRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::VeriBlockTransaction>>(AsyncParseVeriBlockTransactionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::VeriBlockTransaction>> PrepareAsyncParseVeriBlockTransaction(::grpc::ClientContext* context, const ::VeriBlock::BytesArrayRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::VeriBlockTransaction>>(PrepareAsyncParseVeriBlockTransactionRaw(context, request, cq));
    }
    virtual ::grpc::Status ParseVeriBlockPublication(::grpc::ClientContext* context, const ::VeriBlock::BytesArrayRequest& request, ::VeriBlock::VeriBlockPublication* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::VeriBlockPublication>> AsyncParseVeriBlockPublication(::grpc::ClientContext* context, const ::VeriBlock::BytesArrayRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::VeriBlockPublication>>(AsyncParseVeriBlockPublicationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::VeriBlockPublication>> PrepareAsyncParseVeriBlockPublication(::grpc::ClientContext* context, const ::VeriBlock::BytesArrayRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::VeriBlockPublication>>(PrepareAsyncParseVeriBlockPublicationRaw(context, request, cq));
    }
    virtual ::grpc::Status parseVeriBlockPopTx(::grpc::ClientContext* context, const ::VeriBlock::BytesArrayRequest& request, ::VeriBlock::VeriBlockPoPTransaction* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::VeriBlockPoPTransaction>> AsyncparseVeriBlockPopTx(::grpc::ClientContext* context, const ::VeriBlock::BytesArrayRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::VeriBlockPoPTransaction>>(AsyncparseVeriBlockPopTxRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::VeriBlockPoPTransaction>> PrepareAsyncparseVeriBlockPopTx(::grpc::ClientContext* context, const ::VeriBlock::BytesArrayRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::VeriBlockPoPTransaction>>(PrepareAsyncparseVeriBlockPopTxRaw(context, request, cq));
    }
    virtual ::grpc::Status ParseOutput(::grpc::ClientContext* context, const ::VeriBlock::BytesArrayRequest& request, ::VeriBlock::Output* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::Output>> AsyncParseOutput(::grpc::ClientContext* context, const ::VeriBlock::BytesArrayRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::Output>>(AsyncParseOutputRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::Output>> PrepareAsyncParseOutput(::grpc::ClientContext* context, const ::VeriBlock::BytesArrayRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::Output>>(PrepareAsyncParseOutputRaw(context, request, cq));
    }
    virtual ::grpc::Status ParseAddress(::grpc::ClientContext* context, const ::VeriBlock::BytesArrayRequest& request, ::VeriBlock::Address* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::Address>> AsyncParseAddress(::grpc::ClientContext* context, const ::VeriBlock::BytesArrayRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::Address>>(AsyncParseAddressRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::Address>> PrepareAsyncParseAddress(::grpc::ClientContext* context, const ::VeriBlock::BytesArrayRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::Address>>(PrepareAsyncParseAddressRaw(context, request, cq));
    }
    virtual ::grpc::Status ParseBitcoinBlock(::grpc::ClientContext* context, const ::VeriBlock::BytesArrayRequest& request, ::VeriBlock::BitcoinBlock* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::BitcoinBlock>> AsyncParseBitcoinBlock(::grpc::ClientContext* context, const ::VeriBlock::BytesArrayRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::BitcoinBlock>>(AsyncParseBitcoinBlockRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::BitcoinBlock>> PrepareAsyncParseBitcoinBlock(::grpc::ClientContext* context, const ::VeriBlock::BytesArrayRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::BitcoinBlock>>(PrepareAsyncParseBitcoinBlockRaw(context, request, cq));
    }
    virtual ::grpc::Status ParseVeriBlockMerklePath(::grpc::ClientContext* context, const ::VeriBlock::BytesArrayRequest& request, ::VeriBlock::VeriBlockMerklePath* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::VeriBlockMerklePath>> AsyncParseVeriBlockMerklePath(::grpc::ClientContext* context, const ::VeriBlock::BytesArrayRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::VeriBlockMerklePath>>(AsyncParseVeriBlockMerklePathRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::VeriBlockMerklePath>> PrepareAsyncParseVeriBlockMerklePath(::grpc::ClientContext* context, const ::VeriBlock::BytesArrayRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::VeriBlockMerklePath>>(PrepareAsyncParseVeriBlockMerklePathRaw(context, request, cq));
    }
    virtual ::grpc::Status ParseMerklePath(::grpc::ClientContext* context, const ::VeriBlock::MerklePathRequest& request, ::VeriBlock::MerklePath* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::MerklePath>> AsyncParseMerklePath(::grpc::ClientContext* context, const ::VeriBlock::MerklePathRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::MerklePath>>(AsyncParseMerklePathRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::MerklePath>> PrepareAsyncParseMerklePath(::grpc::ClientContext* context, const ::VeriBlock::MerklePathRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::MerklePath>>(PrepareAsyncParseMerklePathRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      virtual void ParseAltPublication(::grpc::ClientContext* context, const ::VeriBlock::BytesArrayRequest* request, ::VeriBlock::AltPublication* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ParseAltPublication(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::AltPublication* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ParseAltPublication(::grpc::ClientContext* context, const ::VeriBlock::BytesArrayRequest* request, ::VeriBlock::AltPublication* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void ParseAltPublication(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::AltPublication* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void ParsePublicationData(::grpc::ClientContext* context, const ::VeriBlock::BytesArrayRequest* request, ::VeriBlock::PublicationData* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ParsePublicationData(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::PublicationData* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ParsePublicationData(::grpc::ClientContext* context, const ::VeriBlock::BytesArrayRequest* request, ::VeriBlock::PublicationData* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void ParsePublicationData(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::PublicationData* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void ParseBitcoinTransaction(::grpc::ClientContext* context, const ::VeriBlock::BytesArrayRequest* request, ::VeriBlock::BitcoinTransaction* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ParseBitcoinTransaction(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::BitcoinTransaction* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ParseBitcoinTransaction(::grpc::ClientContext* context, const ::VeriBlock::BytesArrayRequest* request, ::VeriBlock::BitcoinTransaction* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void ParseBitcoinTransaction(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::BitcoinTransaction* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void ParseVeriBlockBlock(::grpc::ClientContext* context, const ::VeriBlock::BytesArrayRequest* request, ::VeriBlock::VeriBlockBlock* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ParseVeriBlockBlock(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::VeriBlockBlock* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ParseVeriBlockBlock(::grpc::ClientContext* context, const ::VeriBlock::BytesArrayRequest* request, ::VeriBlock::VeriBlockBlock* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void ParseVeriBlockBlock(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::VeriBlockBlock* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void ParseVeriBlockTransaction(::grpc::ClientContext* context, const ::VeriBlock::BytesArrayRequest* request, ::VeriBlock::VeriBlockTransaction* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ParseVeriBlockTransaction(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::VeriBlockTransaction* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ParseVeriBlockTransaction(::grpc::ClientContext* context, const ::VeriBlock::BytesArrayRequest* request, ::VeriBlock::VeriBlockTransaction* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void ParseVeriBlockTransaction(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::VeriBlockTransaction* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void ParseVeriBlockPublication(::grpc::ClientContext* context, const ::VeriBlock::BytesArrayRequest* request, ::VeriBlock::VeriBlockPublication* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ParseVeriBlockPublication(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::VeriBlockPublication* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ParseVeriBlockPublication(::grpc::ClientContext* context, const ::VeriBlock::BytesArrayRequest* request, ::VeriBlock::VeriBlockPublication* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void ParseVeriBlockPublication(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::VeriBlockPublication* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void parseVeriBlockPopTx(::grpc::ClientContext* context, const ::VeriBlock::BytesArrayRequest* request, ::VeriBlock::VeriBlockPoPTransaction* response, std::function<void(::grpc::Status)>) = 0;
      virtual void parseVeriBlockPopTx(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::VeriBlockPoPTransaction* response, std::function<void(::grpc::Status)>) = 0;
      virtual void parseVeriBlockPopTx(::grpc::ClientContext* context, const ::VeriBlock::BytesArrayRequest* request, ::VeriBlock::VeriBlockPoPTransaction* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void parseVeriBlockPopTx(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::VeriBlockPoPTransaction* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void ParseOutput(::grpc::ClientContext* context, const ::VeriBlock::BytesArrayRequest* request, ::VeriBlock::Output* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ParseOutput(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::Output* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ParseOutput(::grpc::ClientContext* context, const ::VeriBlock::BytesArrayRequest* request, ::VeriBlock::Output* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void ParseOutput(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::Output* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void ParseAddress(::grpc::ClientContext* context, const ::VeriBlock::BytesArrayRequest* request, ::VeriBlock::Address* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ParseAddress(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::Address* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ParseAddress(::grpc::ClientContext* context, const ::VeriBlock::BytesArrayRequest* request, ::VeriBlock::Address* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void ParseAddress(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::Address* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void ParseBitcoinBlock(::grpc::ClientContext* context, const ::VeriBlock::BytesArrayRequest* request, ::VeriBlock::BitcoinBlock* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ParseBitcoinBlock(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::BitcoinBlock* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ParseBitcoinBlock(::grpc::ClientContext* context, const ::VeriBlock::BytesArrayRequest* request, ::VeriBlock::BitcoinBlock* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void ParseBitcoinBlock(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::BitcoinBlock* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void ParseVeriBlockMerklePath(::grpc::ClientContext* context, const ::VeriBlock::BytesArrayRequest* request, ::VeriBlock::VeriBlockMerklePath* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ParseVeriBlockMerklePath(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::VeriBlockMerklePath* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ParseVeriBlockMerklePath(::grpc::ClientContext* context, const ::VeriBlock::BytesArrayRequest* request, ::VeriBlock::VeriBlockMerklePath* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void ParseVeriBlockMerklePath(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::VeriBlockMerklePath* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void ParseMerklePath(::grpc::ClientContext* context, const ::VeriBlock::MerklePathRequest* request, ::VeriBlock::MerklePath* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ParseMerklePath(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::MerklePath* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ParseMerklePath(::grpc::ClientContext* context, const ::VeriBlock::MerklePathRequest* request, ::VeriBlock::MerklePath* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void ParseMerklePath(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::MerklePath* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
    };
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::AltPublication>* AsyncParseAltPublicationRaw(::grpc::ClientContext* context, const ::VeriBlock::BytesArrayRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::AltPublication>* PrepareAsyncParseAltPublicationRaw(::grpc::ClientContext* context, const ::VeriBlock::BytesArrayRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::PublicationData>* AsyncParsePublicationDataRaw(::grpc::ClientContext* context, const ::VeriBlock::BytesArrayRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::PublicationData>* PrepareAsyncParsePublicationDataRaw(::grpc::ClientContext* context, const ::VeriBlock::BytesArrayRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::BitcoinTransaction>* AsyncParseBitcoinTransactionRaw(::grpc::ClientContext* context, const ::VeriBlock::BytesArrayRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::BitcoinTransaction>* PrepareAsyncParseBitcoinTransactionRaw(::grpc::ClientContext* context, const ::VeriBlock::BytesArrayRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::VeriBlockBlock>* AsyncParseVeriBlockBlockRaw(::grpc::ClientContext* context, const ::VeriBlock::BytesArrayRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::VeriBlockBlock>* PrepareAsyncParseVeriBlockBlockRaw(::grpc::ClientContext* context, const ::VeriBlock::BytesArrayRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::VeriBlockTransaction>* AsyncParseVeriBlockTransactionRaw(::grpc::ClientContext* context, const ::VeriBlock::BytesArrayRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::VeriBlockTransaction>* PrepareAsyncParseVeriBlockTransactionRaw(::grpc::ClientContext* context, const ::VeriBlock::BytesArrayRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::VeriBlockPublication>* AsyncParseVeriBlockPublicationRaw(::grpc::ClientContext* context, const ::VeriBlock::BytesArrayRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::VeriBlockPublication>* PrepareAsyncParseVeriBlockPublicationRaw(::grpc::ClientContext* context, const ::VeriBlock::BytesArrayRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::VeriBlockPoPTransaction>* AsyncparseVeriBlockPopTxRaw(::grpc::ClientContext* context, const ::VeriBlock::BytesArrayRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::VeriBlockPoPTransaction>* PrepareAsyncparseVeriBlockPopTxRaw(::grpc::ClientContext* context, const ::VeriBlock::BytesArrayRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::Output>* AsyncParseOutputRaw(::grpc::ClientContext* context, const ::VeriBlock::BytesArrayRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::Output>* PrepareAsyncParseOutputRaw(::grpc::ClientContext* context, const ::VeriBlock::BytesArrayRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::Address>* AsyncParseAddressRaw(::grpc::ClientContext* context, const ::VeriBlock::BytesArrayRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::Address>* PrepareAsyncParseAddressRaw(::grpc::ClientContext* context, const ::VeriBlock::BytesArrayRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::BitcoinBlock>* AsyncParseBitcoinBlockRaw(::grpc::ClientContext* context, const ::VeriBlock::BytesArrayRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::BitcoinBlock>* PrepareAsyncParseBitcoinBlockRaw(::grpc::ClientContext* context, const ::VeriBlock::BytesArrayRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::VeriBlockMerklePath>* AsyncParseVeriBlockMerklePathRaw(::grpc::ClientContext* context, const ::VeriBlock::BytesArrayRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::VeriBlockMerklePath>* PrepareAsyncParseVeriBlockMerklePathRaw(::grpc::ClientContext* context, const ::VeriBlock::BytesArrayRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::MerklePath>* AsyncParseMerklePathRaw(::grpc::ClientContext* context, const ::VeriBlock::MerklePathRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::MerklePath>* PrepareAsyncParseMerklePathRaw(::grpc::ClientContext* context, const ::VeriBlock::MerklePathRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status ParseAltPublication(::grpc::ClientContext* context, const ::VeriBlock::BytesArrayRequest& request, ::VeriBlock::AltPublication* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::VeriBlock::AltPublication>> AsyncParseAltPublication(::grpc::ClientContext* context, const ::VeriBlock::BytesArrayRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::VeriBlock::AltPublication>>(AsyncParseAltPublicationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::VeriBlock::AltPublication>> PrepareAsyncParseAltPublication(::grpc::ClientContext* context, const ::VeriBlock::BytesArrayRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::VeriBlock::AltPublication>>(PrepareAsyncParseAltPublicationRaw(context, request, cq));
    }
    ::grpc::Status ParsePublicationData(::grpc::ClientContext* context, const ::VeriBlock::BytesArrayRequest& request, ::VeriBlock::PublicationData* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::VeriBlock::PublicationData>> AsyncParsePublicationData(::grpc::ClientContext* context, const ::VeriBlock::BytesArrayRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::VeriBlock::PublicationData>>(AsyncParsePublicationDataRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::VeriBlock::PublicationData>> PrepareAsyncParsePublicationData(::grpc::ClientContext* context, const ::VeriBlock::BytesArrayRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::VeriBlock::PublicationData>>(PrepareAsyncParsePublicationDataRaw(context, request, cq));
    }
    ::grpc::Status ParseBitcoinTransaction(::grpc::ClientContext* context, const ::VeriBlock::BytesArrayRequest& request, ::VeriBlock::BitcoinTransaction* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::VeriBlock::BitcoinTransaction>> AsyncParseBitcoinTransaction(::grpc::ClientContext* context, const ::VeriBlock::BytesArrayRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::VeriBlock::BitcoinTransaction>>(AsyncParseBitcoinTransactionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::VeriBlock::BitcoinTransaction>> PrepareAsyncParseBitcoinTransaction(::grpc::ClientContext* context, const ::VeriBlock::BytesArrayRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::VeriBlock::BitcoinTransaction>>(PrepareAsyncParseBitcoinTransactionRaw(context, request, cq));
    }
    ::grpc::Status ParseVeriBlockBlock(::grpc::ClientContext* context, const ::VeriBlock::BytesArrayRequest& request, ::VeriBlock::VeriBlockBlock* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::VeriBlock::VeriBlockBlock>> AsyncParseVeriBlockBlock(::grpc::ClientContext* context, const ::VeriBlock::BytesArrayRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::VeriBlock::VeriBlockBlock>>(AsyncParseVeriBlockBlockRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::VeriBlock::VeriBlockBlock>> PrepareAsyncParseVeriBlockBlock(::grpc::ClientContext* context, const ::VeriBlock::BytesArrayRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::VeriBlock::VeriBlockBlock>>(PrepareAsyncParseVeriBlockBlockRaw(context, request, cq));
    }
    ::grpc::Status ParseVeriBlockTransaction(::grpc::ClientContext* context, const ::VeriBlock::BytesArrayRequest& request, ::VeriBlock::VeriBlockTransaction* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::VeriBlock::VeriBlockTransaction>> AsyncParseVeriBlockTransaction(::grpc::ClientContext* context, const ::VeriBlock::BytesArrayRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::VeriBlock::VeriBlockTransaction>>(AsyncParseVeriBlockTransactionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::VeriBlock::VeriBlockTransaction>> PrepareAsyncParseVeriBlockTransaction(::grpc::ClientContext* context, const ::VeriBlock::BytesArrayRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::VeriBlock::VeriBlockTransaction>>(PrepareAsyncParseVeriBlockTransactionRaw(context, request, cq));
    }
    ::grpc::Status ParseVeriBlockPublication(::grpc::ClientContext* context, const ::VeriBlock::BytesArrayRequest& request, ::VeriBlock::VeriBlockPublication* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::VeriBlock::VeriBlockPublication>> AsyncParseVeriBlockPublication(::grpc::ClientContext* context, const ::VeriBlock::BytesArrayRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::VeriBlock::VeriBlockPublication>>(AsyncParseVeriBlockPublicationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::VeriBlock::VeriBlockPublication>> PrepareAsyncParseVeriBlockPublication(::grpc::ClientContext* context, const ::VeriBlock::BytesArrayRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::VeriBlock::VeriBlockPublication>>(PrepareAsyncParseVeriBlockPublicationRaw(context, request, cq));
    }
    ::grpc::Status parseVeriBlockPopTx(::grpc::ClientContext* context, const ::VeriBlock::BytesArrayRequest& request, ::VeriBlock::VeriBlockPoPTransaction* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::VeriBlock::VeriBlockPoPTransaction>> AsyncparseVeriBlockPopTx(::grpc::ClientContext* context, const ::VeriBlock::BytesArrayRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::VeriBlock::VeriBlockPoPTransaction>>(AsyncparseVeriBlockPopTxRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::VeriBlock::VeriBlockPoPTransaction>> PrepareAsyncparseVeriBlockPopTx(::grpc::ClientContext* context, const ::VeriBlock::BytesArrayRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::VeriBlock::VeriBlockPoPTransaction>>(PrepareAsyncparseVeriBlockPopTxRaw(context, request, cq));
    }
    ::grpc::Status ParseOutput(::grpc::ClientContext* context, const ::VeriBlock::BytesArrayRequest& request, ::VeriBlock::Output* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::VeriBlock::Output>> AsyncParseOutput(::grpc::ClientContext* context, const ::VeriBlock::BytesArrayRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::VeriBlock::Output>>(AsyncParseOutputRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::VeriBlock::Output>> PrepareAsyncParseOutput(::grpc::ClientContext* context, const ::VeriBlock::BytesArrayRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::VeriBlock::Output>>(PrepareAsyncParseOutputRaw(context, request, cq));
    }
    ::grpc::Status ParseAddress(::grpc::ClientContext* context, const ::VeriBlock::BytesArrayRequest& request, ::VeriBlock::Address* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::VeriBlock::Address>> AsyncParseAddress(::grpc::ClientContext* context, const ::VeriBlock::BytesArrayRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::VeriBlock::Address>>(AsyncParseAddressRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::VeriBlock::Address>> PrepareAsyncParseAddress(::grpc::ClientContext* context, const ::VeriBlock::BytesArrayRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::VeriBlock::Address>>(PrepareAsyncParseAddressRaw(context, request, cq));
    }
    ::grpc::Status ParseBitcoinBlock(::grpc::ClientContext* context, const ::VeriBlock::BytesArrayRequest& request, ::VeriBlock::BitcoinBlock* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::VeriBlock::BitcoinBlock>> AsyncParseBitcoinBlock(::grpc::ClientContext* context, const ::VeriBlock::BytesArrayRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::VeriBlock::BitcoinBlock>>(AsyncParseBitcoinBlockRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::VeriBlock::BitcoinBlock>> PrepareAsyncParseBitcoinBlock(::grpc::ClientContext* context, const ::VeriBlock::BytesArrayRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::VeriBlock::BitcoinBlock>>(PrepareAsyncParseBitcoinBlockRaw(context, request, cq));
    }
    ::grpc::Status ParseVeriBlockMerklePath(::grpc::ClientContext* context, const ::VeriBlock::BytesArrayRequest& request, ::VeriBlock::VeriBlockMerklePath* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::VeriBlock::VeriBlockMerklePath>> AsyncParseVeriBlockMerklePath(::grpc::ClientContext* context, const ::VeriBlock::BytesArrayRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::VeriBlock::VeriBlockMerklePath>>(AsyncParseVeriBlockMerklePathRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::VeriBlock::VeriBlockMerklePath>> PrepareAsyncParseVeriBlockMerklePath(::grpc::ClientContext* context, const ::VeriBlock::BytesArrayRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::VeriBlock::VeriBlockMerklePath>>(PrepareAsyncParseVeriBlockMerklePathRaw(context, request, cq));
    }
    ::grpc::Status ParseMerklePath(::grpc::ClientContext* context, const ::VeriBlock::MerklePathRequest& request, ::VeriBlock::MerklePath* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::VeriBlock::MerklePath>> AsyncParseMerklePath(::grpc::ClientContext* context, const ::VeriBlock::MerklePathRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::VeriBlock::MerklePath>>(AsyncParseMerklePathRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::VeriBlock::MerklePath>> PrepareAsyncParseMerklePath(::grpc::ClientContext* context, const ::VeriBlock::MerklePathRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::VeriBlock::MerklePath>>(PrepareAsyncParseMerklePathRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void ParseAltPublication(::grpc::ClientContext* context, const ::VeriBlock::BytesArrayRequest* request, ::VeriBlock::AltPublication* response, std::function<void(::grpc::Status)>) override;
      void ParseAltPublication(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::AltPublication* response, std::function<void(::grpc::Status)>) override;
      void ParseAltPublication(::grpc::ClientContext* context, const ::VeriBlock::BytesArrayRequest* request, ::VeriBlock::AltPublication* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void ParseAltPublication(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::AltPublication* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void ParsePublicationData(::grpc::ClientContext* context, const ::VeriBlock::BytesArrayRequest* request, ::VeriBlock::PublicationData* response, std::function<void(::grpc::Status)>) override;
      void ParsePublicationData(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::PublicationData* response, std::function<void(::grpc::Status)>) override;
      void ParsePublicationData(::grpc::ClientContext* context, const ::VeriBlock::BytesArrayRequest* request, ::VeriBlock::PublicationData* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void ParsePublicationData(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::PublicationData* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void ParseBitcoinTransaction(::grpc::ClientContext* context, const ::VeriBlock::BytesArrayRequest* request, ::VeriBlock::BitcoinTransaction* response, std::function<void(::grpc::Status)>) override;
      void ParseBitcoinTransaction(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::BitcoinTransaction* response, std::function<void(::grpc::Status)>) override;
      void ParseBitcoinTransaction(::grpc::ClientContext* context, const ::VeriBlock::BytesArrayRequest* request, ::VeriBlock::BitcoinTransaction* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void ParseBitcoinTransaction(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::BitcoinTransaction* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void ParseVeriBlockBlock(::grpc::ClientContext* context, const ::VeriBlock::BytesArrayRequest* request, ::VeriBlock::VeriBlockBlock* response, std::function<void(::grpc::Status)>) override;
      void ParseVeriBlockBlock(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::VeriBlockBlock* response, std::function<void(::grpc::Status)>) override;
      void ParseVeriBlockBlock(::grpc::ClientContext* context, const ::VeriBlock::BytesArrayRequest* request, ::VeriBlock::VeriBlockBlock* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void ParseVeriBlockBlock(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::VeriBlockBlock* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void ParseVeriBlockTransaction(::grpc::ClientContext* context, const ::VeriBlock::BytesArrayRequest* request, ::VeriBlock::VeriBlockTransaction* response, std::function<void(::grpc::Status)>) override;
      void ParseVeriBlockTransaction(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::VeriBlockTransaction* response, std::function<void(::grpc::Status)>) override;
      void ParseVeriBlockTransaction(::grpc::ClientContext* context, const ::VeriBlock::BytesArrayRequest* request, ::VeriBlock::VeriBlockTransaction* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void ParseVeriBlockTransaction(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::VeriBlockTransaction* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void ParseVeriBlockPublication(::grpc::ClientContext* context, const ::VeriBlock::BytesArrayRequest* request, ::VeriBlock::VeriBlockPublication* response, std::function<void(::grpc::Status)>) override;
      void ParseVeriBlockPublication(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::VeriBlockPublication* response, std::function<void(::grpc::Status)>) override;
      void ParseVeriBlockPublication(::grpc::ClientContext* context, const ::VeriBlock::BytesArrayRequest* request, ::VeriBlock::VeriBlockPublication* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void ParseVeriBlockPublication(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::VeriBlockPublication* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void parseVeriBlockPopTx(::grpc::ClientContext* context, const ::VeriBlock::BytesArrayRequest* request, ::VeriBlock::VeriBlockPoPTransaction* response, std::function<void(::grpc::Status)>) override;
      void parseVeriBlockPopTx(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::VeriBlockPoPTransaction* response, std::function<void(::grpc::Status)>) override;
      void parseVeriBlockPopTx(::grpc::ClientContext* context, const ::VeriBlock::BytesArrayRequest* request, ::VeriBlock::VeriBlockPoPTransaction* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void parseVeriBlockPopTx(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::VeriBlockPoPTransaction* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void ParseOutput(::grpc::ClientContext* context, const ::VeriBlock::BytesArrayRequest* request, ::VeriBlock::Output* response, std::function<void(::grpc::Status)>) override;
      void ParseOutput(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::Output* response, std::function<void(::grpc::Status)>) override;
      void ParseOutput(::grpc::ClientContext* context, const ::VeriBlock::BytesArrayRequest* request, ::VeriBlock::Output* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void ParseOutput(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::Output* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void ParseAddress(::grpc::ClientContext* context, const ::VeriBlock::BytesArrayRequest* request, ::VeriBlock::Address* response, std::function<void(::grpc::Status)>) override;
      void ParseAddress(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::Address* response, std::function<void(::grpc::Status)>) override;
      void ParseAddress(::grpc::ClientContext* context, const ::VeriBlock::BytesArrayRequest* request, ::VeriBlock::Address* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void ParseAddress(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::Address* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void ParseBitcoinBlock(::grpc::ClientContext* context, const ::VeriBlock::BytesArrayRequest* request, ::VeriBlock::BitcoinBlock* response, std::function<void(::grpc::Status)>) override;
      void ParseBitcoinBlock(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::BitcoinBlock* response, std::function<void(::grpc::Status)>) override;
      void ParseBitcoinBlock(::grpc::ClientContext* context, const ::VeriBlock::BytesArrayRequest* request, ::VeriBlock::BitcoinBlock* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void ParseBitcoinBlock(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::BitcoinBlock* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void ParseVeriBlockMerklePath(::grpc::ClientContext* context, const ::VeriBlock::BytesArrayRequest* request, ::VeriBlock::VeriBlockMerklePath* response, std::function<void(::grpc::Status)>) override;
      void ParseVeriBlockMerklePath(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::VeriBlockMerklePath* response, std::function<void(::grpc::Status)>) override;
      void ParseVeriBlockMerklePath(::grpc::ClientContext* context, const ::VeriBlock::BytesArrayRequest* request, ::VeriBlock::VeriBlockMerklePath* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void ParseVeriBlockMerklePath(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::VeriBlockMerklePath* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void ParseMerklePath(::grpc::ClientContext* context, const ::VeriBlock::MerklePathRequest* request, ::VeriBlock::MerklePath* response, std::function<void(::grpc::Status)>) override;
      void ParseMerklePath(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::MerklePath* response, std::function<void(::grpc::Status)>) override;
      void ParseMerklePath(::grpc::ClientContext* context, const ::VeriBlock::MerklePathRequest* request, ::VeriBlock::MerklePath* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void ParseMerklePath(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::MerklePath* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::VeriBlock::AltPublication>* AsyncParseAltPublicationRaw(::grpc::ClientContext* context, const ::VeriBlock::BytesArrayRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::VeriBlock::AltPublication>* PrepareAsyncParseAltPublicationRaw(::grpc::ClientContext* context, const ::VeriBlock::BytesArrayRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::VeriBlock::PublicationData>* AsyncParsePublicationDataRaw(::grpc::ClientContext* context, const ::VeriBlock::BytesArrayRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::VeriBlock::PublicationData>* PrepareAsyncParsePublicationDataRaw(::grpc::ClientContext* context, const ::VeriBlock::BytesArrayRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::VeriBlock::BitcoinTransaction>* AsyncParseBitcoinTransactionRaw(::grpc::ClientContext* context, const ::VeriBlock::BytesArrayRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::VeriBlock::BitcoinTransaction>* PrepareAsyncParseBitcoinTransactionRaw(::grpc::ClientContext* context, const ::VeriBlock::BytesArrayRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::VeriBlock::VeriBlockBlock>* AsyncParseVeriBlockBlockRaw(::grpc::ClientContext* context, const ::VeriBlock::BytesArrayRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::VeriBlock::VeriBlockBlock>* PrepareAsyncParseVeriBlockBlockRaw(::grpc::ClientContext* context, const ::VeriBlock::BytesArrayRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::VeriBlock::VeriBlockTransaction>* AsyncParseVeriBlockTransactionRaw(::grpc::ClientContext* context, const ::VeriBlock::BytesArrayRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::VeriBlock::VeriBlockTransaction>* PrepareAsyncParseVeriBlockTransactionRaw(::grpc::ClientContext* context, const ::VeriBlock::BytesArrayRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::VeriBlock::VeriBlockPublication>* AsyncParseVeriBlockPublicationRaw(::grpc::ClientContext* context, const ::VeriBlock::BytesArrayRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::VeriBlock::VeriBlockPublication>* PrepareAsyncParseVeriBlockPublicationRaw(::grpc::ClientContext* context, const ::VeriBlock::BytesArrayRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::VeriBlock::VeriBlockPoPTransaction>* AsyncparseVeriBlockPopTxRaw(::grpc::ClientContext* context, const ::VeriBlock::BytesArrayRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::VeriBlock::VeriBlockPoPTransaction>* PrepareAsyncparseVeriBlockPopTxRaw(::grpc::ClientContext* context, const ::VeriBlock::BytesArrayRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::VeriBlock::Output>* AsyncParseOutputRaw(::grpc::ClientContext* context, const ::VeriBlock::BytesArrayRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::VeriBlock::Output>* PrepareAsyncParseOutputRaw(::grpc::ClientContext* context, const ::VeriBlock::BytesArrayRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::VeriBlock::Address>* AsyncParseAddressRaw(::grpc::ClientContext* context, const ::VeriBlock::BytesArrayRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::VeriBlock::Address>* PrepareAsyncParseAddressRaw(::grpc::ClientContext* context, const ::VeriBlock::BytesArrayRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::VeriBlock::BitcoinBlock>* AsyncParseBitcoinBlockRaw(::grpc::ClientContext* context, const ::VeriBlock::BytesArrayRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::VeriBlock::BitcoinBlock>* PrepareAsyncParseBitcoinBlockRaw(::grpc::ClientContext* context, const ::VeriBlock::BytesArrayRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::VeriBlock::VeriBlockMerklePath>* AsyncParseVeriBlockMerklePathRaw(::grpc::ClientContext* context, const ::VeriBlock::BytesArrayRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::VeriBlock::VeriBlockMerklePath>* PrepareAsyncParseVeriBlockMerklePathRaw(::grpc::ClientContext* context, const ::VeriBlock::BytesArrayRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::VeriBlock::MerklePath>* AsyncParseMerklePathRaw(::grpc::ClientContext* context, const ::VeriBlock::MerklePathRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::VeriBlock::MerklePath>* PrepareAsyncParseMerklePathRaw(::grpc::ClientContext* context, const ::VeriBlock::MerklePathRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_ParseAltPublication_;
    const ::grpc::internal::RpcMethod rpcmethod_ParsePublicationData_;
    const ::grpc::internal::RpcMethod rpcmethod_ParseBitcoinTransaction_;
    const ::grpc::internal::RpcMethod rpcmethod_ParseVeriBlockBlock_;
    const ::grpc::internal::RpcMethod rpcmethod_ParseVeriBlockTransaction_;
    const ::grpc::internal::RpcMethod rpcmethod_ParseVeriBlockPublication_;
    const ::grpc::internal::RpcMethod rpcmethod_parseVeriBlockPopTx_;
    const ::grpc::internal::RpcMethod rpcmethod_ParseOutput_;
    const ::grpc::internal::RpcMethod rpcmethod_ParseAddress_;
    const ::grpc::internal::RpcMethod rpcmethod_ParseBitcoinBlock_;
    const ::grpc::internal::RpcMethod rpcmethod_ParseVeriBlockMerklePath_;
    const ::grpc::internal::RpcMethod rpcmethod_ParseMerklePath_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status ParseAltPublication(::grpc::ServerContext* context, const ::VeriBlock::BytesArrayRequest* request, ::VeriBlock::AltPublication* response);
    virtual ::grpc::Status ParsePublicationData(::grpc::ServerContext* context, const ::VeriBlock::BytesArrayRequest* request, ::VeriBlock::PublicationData* response);
    virtual ::grpc::Status ParseBitcoinTransaction(::grpc::ServerContext* context, const ::VeriBlock::BytesArrayRequest* request, ::VeriBlock::BitcoinTransaction* response);
    virtual ::grpc::Status ParseVeriBlockBlock(::grpc::ServerContext* context, const ::VeriBlock::BytesArrayRequest* request, ::VeriBlock::VeriBlockBlock* response);
    virtual ::grpc::Status ParseVeriBlockTransaction(::grpc::ServerContext* context, const ::VeriBlock::BytesArrayRequest* request, ::VeriBlock::VeriBlockTransaction* response);
    virtual ::grpc::Status ParseVeriBlockPublication(::grpc::ServerContext* context, const ::VeriBlock::BytesArrayRequest* request, ::VeriBlock::VeriBlockPublication* response);
    virtual ::grpc::Status parseVeriBlockPopTx(::grpc::ServerContext* context, const ::VeriBlock::BytesArrayRequest* request, ::VeriBlock::VeriBlockPoPTransaction* response);
    virtual ::grpc::Status ParseOutput(::grpc::ServerContext* context, const ::VeriBlock::BytesArrayRequest* request, ::VeriBlock::Output* response);
    virtual ::grpc::Status ParseAddress(::grpc::ServerContext* context, const ::VeriBlock::BytesArrayRequest* request, ::VeriBlock::Address* response);
    virtual ::grpc::Status ParseBitcoinBlock(::grpc::ServerContext* context, const ::VeriBlock::BytesArrayRequest* request, ::VeriBlock::BitcoinBlock* response);
    virtual ::grpc::Status ParseVeriBlockMerklePath(::grpc::ServerContext* context, const ::VeriBlock::BytesArrayRequest* request, ::VeriBlock::VeriBlockMerklePath* response);
    virtual ::grpc::Status ParseMerklePath(::grpc::ServerContext* context, const ::VeriBlock::MerklePathRequest* request, ::VeriBlock::MerklePath* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_ParseAltPublication : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_ParseAltPublication() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_ParseAltPublication() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ParseAltPublication(::grpc::ServerContext* context, const ::VeriBlock::BytesArrayRequest* request, ::VeriBlock::AltPublication* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestParseAltPublication(::grpc::ServerContext* context, ::VeriBlock::BytesArrayRequest* request, ::grpc::ServerAsyncResponseWriter< ::VeriBlock::AltPublication>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ParsePublicationData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_ParsePublicationData() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_ParsePublicationData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ParsePublicationData(::grpc::ServerContext* context, const ::VeriBlock::BytesArrayRequest* request, ::VeriBlock::PublicationData* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestParsePublicationData(::grpc::ServerContext* context, ::VeriBlock::BytesArrayRequest* request, ::grpc::ServerAsyncResponseWriter< ::VeriBlock::PublicationData>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ParseBitcoinTransaction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_ParseBitcoinTransaction() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_ParseBitcoinTransaction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ParseBitcoinTransaction(::grpc::ServerContext* context, const ::VeriBlock::BytesArrayRequest* request, ::VeriBlock::BitcoinTransaction* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestParseBitcoinTransaction(::grpc::ServerContext* context, ::VeriBlock::BytesArrayRequest* request, ::grpc::ServerAsyncResponseWriter< ::VeriBlock::BitcoinTransaction>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ParseVeriBlockBlock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_ParseVeriBlockBlock() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_ParseVeriBlockBlock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ParseVeriBlockBlock(::grpc::ServerContext* context, const ::VeriBlock::BytesArrayRequest* request, ::VeriBlock::VeriBlockBlock* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestParseVeriBlockBlock(::grpc::ServerContext* context, ::VeriBlock::BytesArrayRequest* request, ::grpc::ServerAsyncResponseWriter< ::VeriBlock::VeriBlockBlock>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ParseVeriBlockTransaction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_ParseVeriBlockTransaction() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_ParseVeriBlockTransaction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ParseVeriBlockTransaction(::grpc::ServerContext* context, const ::VeriBlock::BytesArrayRequest* request, ::VeriBlock::VeriBlockTransaction* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestParseVeriBlockTransaction(::grpc::ServerContext* context, ::VeriBlock::BytesArrayRequest* request, ::grpc::ServerAsyncResponseWriter< ::VeriBlock::VeriBlockTransaction>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ParseVeriBlockPublication : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_ParseVeriBlockPublication() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_ParseVeriBlockPublication() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ParseVeriBlockPublication(::grpc::ServerContext* context, const ::VeriBlock::BytesArrayRequest* request, ::VeriBlock::VeriBlockPublication* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestParseVeriBlockPublication(::grpc::ServerContext* context, ::VeriBlock::BytesArrayRequest* request, ::grpc::ServerAsyncResponseWriter< ::VeriBlock::VeriBlockPublication>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_parseVeriBlockPopTx : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_parseVeriBlockPopTx() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_parseVeriBlockPopTx() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status parseVeriBlockPopTx(::grpc::ServerContext* context, const ::VeriBlock::BytesArrayRequest* request, ::VeriBlock::VeriBlockPoPTransaction* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestparseVeriBlockPopTx(::grpc::ServerContext* context, ::VeriBlock::BytesArrayRequest* request, ::grpc::ServerAsyncResponseWriter< ::VeriBlock::VeriBlockPoPTransaction>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ParseOutput : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_ParseOutput() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_ParseOutput() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ParseOutput(::grpc::ServerContext* context, const ::VeriBlock::BytesArrayRequest* request, ::VeriBlock::Output* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestParseOutput(::grpc::ServerContext* context, ::VeriBlock::BytesArrayRequest* request, ::grpc::ServerAsyncResponseWriter< ::VeriBlock::Output>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ParseAddress : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_ParseAddress() {
      ::grpc::Service::MarkMethodAsync(8);
    }
    ~WithAsyncMethod_ParseAddress() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ParseAddress(::grpc::ServerContext* context, const ::VeriBlock::BytesArrayRequest* request, ::VeriBlock::Address* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestParseAddress(::grpc::ServerContext* context, ::VeriBlock::BytesArrayRequest* request, ::grpc::ServerAsyncResponseWriter< ::VeriBlock::Address>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ParseBitcoinBlock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_ParseBitcoinBlock() {
      ::grpc::Service::MarkMethodAsync(9);
    }
    ~WithAsyncMethod_ParseBitcoinBlock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ParseBitcoinBlock(::grpc::ServerContext* context, const ::VeriBlock::BytesArrayRequest* request, ::VeriBlock::BitcoinBlock* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestParseBitcoinBlock(::grpc::ServerContext* context, ::VeriBlock::BytesArrayRequest* request, ::grpc::ServerAsyncResponseWriter< ::VeriBlock::BitcoinBlock>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ParseVeriBlockMerklePath : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_ParseVeriBlockMerklePath() {
      ::grpc::Service::MarkMethodAsync(10);
    }
    ~WithAsyncMethod_ParseVeriBlockMerklePath() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ParseVeriBlockMerklePath(::grpc::ServerContext* context, const ::VeriBlock::BytesArrayRequest* request, ::VeriBlock::VeriBlockMerklePath* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestParseVeriBlockMerklePath(::grpc::ServerContext* context, ::VeriBlock::BytesArrayRequest* request, ::grpc::ServerAsyncResponseWriter< ::VeriBlock::VeriBlockMerklePath>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ParseMerklePath : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_ParseMerklePath() {
      ::grpc::Service::MarkMethodAsync(11);
    }
    ~WithAsyncMethod_ParseMerklePath() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ParseMerklePath(::grpc::ServerContext* context, const ::VeriBlock::MerklePathRequest* request, ::VeriBlock::MerklePath* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestParseMerklePath(::grpc::ServerContext* context, ::VeriBlock::MerklePathRequest* request, ::grpc::ServerAsyncResponseWriter< ::VeriBlock::MerklePath>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(11, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_ParseAltPublication<WithAsyncMethod_ParsePublicationData<WithAsyncMethod_ParseBitcoinTransaction<WithAsyncMethod_ParseVeriBlockBlock<WithAsyncMethod_ParseVeriBlockTransaction<WithAsyncMethod_ParseVeriBlockPublication<WithAsyncMethod_parseVeriBlockPopTx<WithAsyncMethod_ParseOutput<WithAsyncMethod_ParseAddress<WithAsyncMethod_ParseBitcoinBlock<WithAsyncMethod_ParseVeriBlockMerklePath<WithAsyncMethod_ParseMerklePath<Service > > > > > > > > > > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_ParseAltPublication : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_ParseAltPublication() {
      ::grpc::Service::experimental().MarkMethodCallback(0,
        new ::grpc::internal::CallbackUnaryHandler< ::VeriBlock::BytesArrayRequest, ::VeriBlock::AltPublication>(
          [this](::grpc::ServerContext* context,
                 const ::VeriBlock::BytesArrayRequest* request,
                 ::VeriBlock::AltPublication* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->ParseAltPublication(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_ParseAltPublication(
        ::grpc::experimental::MessageAllocator< ::VeriBlock::BytesArrayRequest, ::VeriBlock::AltPublication>* allocator) {
      static_cast<::grpc::internal::CallbackUnaryHandler< ::VeriBlock::BytesArrayRequest, ::VeriBlock::AltPublication>*>(
          ::grpc::Service::experimental().GetHandler(0))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_ParseAltPublication() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ParseAltPublication(::grpc::ServerContext* context, const ::VeriBlock::BytesArrayRequest* request, ::VeriBlock::AltPublication* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void ParseAltPublication(::grpc::ServerContext* context, const ::VeriBlock::BytesArrayRequest* request, ::VeriBlock::AltPublication* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_ParsePublicationData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_ParsePublicationData() {
      ::grpc::Service::experimental().MarkMethodCallback(1,
        new ::grpc::internal::CallbackUnaryHandler< ::VeriBlock::BytesArrayRequest, ::VeriBlock::PublicationData>(
          [this](::grpc::ServerContext* context,
                 const ::VeriBlock::BytesArrayRequest* request,
                 ::VeriBlock::PublicationData* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->ParsePublicationData(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_ParsePublicationData(
        ::grpc::experimental::MessageAllocator< ::VeriBlock::BytesArrayRequest, ::VeriBlock::PublicationData>* allocator) {
      static_cast<::grpc::internal::CallbackUnaryHandler< ::VeriBlock::BytesArrayRequest, ::VeriBlock::PublicationData>*>(
          ::grpc::Service::experimental().GetHandler(1))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_ParsePublicationData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ParsePublicationData(::grpc::ServerContext* context, const ::VeriBlock::BytesArrayRequest* request, ::VeriBlock::PublicationData* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void ParsePublicationData(::grpc::ServerContext* context, const ::VeriBlock::BytesArrayRequest* request, ::VeriBlock::PublicationData* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_ParseBitcoinTransaction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_ParseBitcoinTransaction() {
      ::grpc::Service::experimental().MarkMethodCallback(2,
        new ::grpc::internal::CallbackUnaryHandler< ::VeriBlock::BytesArrayRequest, ::VeriBlock::BitcoinTransaction>(
          [this](::grpc::ServerContext* context,
                 const ::VeriBlock::BytesArrayRequest* request,
                 ::VeriBlock::BitcoinTransaction* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->ParseBitcoinTransaction(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_ParseBitcoinTransaction(
        ::grpc::experimental::MessageAllocator< ::VeriBlock::BytesArrayRequest, ::VeriBlock::BitcoinTransaction>* allocator) {
      static_cast<::grpc::internal::CallbackUnaryHandler< ::VeriBlock::BytesArrayRequest, ::VeriBlock::BitcoinTransaction>*>(
          ::grpc::Service::experimental().GetHandler(2))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_ParseBitcoinTransaction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ParseBitcoinTransaction(::grpc::ServerContext* context, const ::VeriBlock::BytesArrayRequest* request, ::VeriBlock::BitcoinTransaction* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void ParseBitcoinTransaction(::grpc::ServerContext* context, const ::VeriBlock::BytesArrayRequest* request, ::VeriBlock::BitcoinTransaction* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_ParseVeriBlockBlock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_ParseVeriBlockBlock() {
      ::grpc::Service::experimental().MarkMethodCallback(3,
        new ::grpc::internal::CallbackUnaryHandler< ::VeriBlock::BytesArrayRequest, ::VeriBlock::VeriBlockBlock>(
          [this](::grpc::ServerContext* context,
                 const ::VeriBlock::BytesArrayRequest* request,
                 ::VeriBlock::VeriBlockBlock* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->ParseVeriBlockBlock(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_ParseVeriBlockBlock(
        ::grpc::experimental::MessageAllocator< ::VeriBlock::BytesArrayRequest, ::VeriBlock::VeriBlockBlock>* allocator) {
      static_cast<::grpc::internal::CallbackUnaryHandler< ::VeriBlock::BytesArrayRequest, ::VeriBlock::VeriBlockBlock>*>(
          ::grpc::Service::experimental().GetHandler(3))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_ParseVeriBlockBlock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ParseVeriBlockBlock(::grpc::ServerContext* context, const ::VeriBlock::BytesArrayRequest* request, ::VeriBlock::VeriBlockBlock* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void ParseVeriBlockBlock(::grpc::ServerContext* context, const ::VeriBlock::BytesArrayRequest* request, ::VeriBlock::VeriBlockBlock* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_ParseVeriBlockTransaction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_ParseVeriBlockTransaction() {
      ::grpc::Service::experimental().MarkMethodCallback(4,
        new ::grpc::internal::CallbackUnaryHandler< ::VeriBlock::BytesArrayRequest, ::VeriBlock::VeriBlockTransaction>(
          [this](::grpc::ServerContext* context,
                 const ::VeriBlock::BytesArrayRequest* request,
                 ::VeriBlock::VeriBlockTransaction* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->ParseVeriBlockTransaction(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_ParseVeriBlockTransaction(
        ::grpc::experimental::MessageAllocator< ::VeriBlock::BytesArrayRequest, ::VeriBlock::VeriBlockTransaction>* allocator) {
      static_cast<::grpc::internal::CallbackUnaryHandler< ::VeriBlock::BytesArrayRequest, ::VeriBlock::VeriBlockTransaction>*>(
          ::grpc::Service::experimental().GetHandler(4))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_ParseVeriBlockTransaction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ParseVeriBlockTransaction(::grpc::ServerContext* context, const ::VeriBlock::BytesArrayRequest* request, ::VeriBlock::VeriBlockTransaction* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void ParseVeriBlockTransaction(::grpc::ServerContext* context, const ::VeriBlock::BytesArrayRequest* request, ::VeriBlock::VeriBlockTransaction* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_ParseVeriBlockPublication : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_ParseVeriBlockPublication() {
      ::grpc::Service::experimental().MarkMethodCallback(5,
        new ::grpc::internal::CallbackUnaryHandler< ::VeriBlock::BytesArrayRequest, ::VeriBlock::VeriBlockPublication>(
          [this](::grpc::ServerContext* context,
                 const ::VeriBlock::BytesArrayRequest* request,
                 ::VeriBlock::VeriBlockPublication* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->ParseVeriBlockPublication(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_ParseVeriBlockPublication(
        ::grpc::experimental::MessageAllocator< ::VeriBlock::BytesArrayRequest, ::VeriBlock::VeriBlockPublication>* allocator) {
      static_cast<::grpc::internal::CallbackUnaryHandler< ::VeriBlock::BytesArrayRequest, ::VeriBlock::VeriBlockPublication>*>(
          ::grpc::Service::experimental().GetHandler(5))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_ParseVeriBlockPublication() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ParseVeriBlockPublication(::grpc::ServerContext* context, const ::VeriBlock::BytesArrayRequest* request, ::VeriBlock::VeriBlockPublication* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void ParseVeriBlockPublication(::grpc::ServerContext* context, const ::VeriBlock::BytesArrayRequest* request, ::VeriBlock::VeriBlockPublication* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_parseVeriBlockPopTx : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_parseVeriBlockPopTx() {
      ::grpc::Service::experimental().MarkMethodCallback(6,
        new ::grpc::internal::CallbackUnaryHandler< ::VeriBlock::BytesArrayRequest, ::VeriBlock::VeriBlockPoPTransaction>(
          [this](::grpc::ServerContext* context,
                 const ::VeriBlock::BytesArrayRequest* request,
                 ::VeriBlock::VeriBlockPoPTransaction* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->parseVeriBlockPopTx(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_parseVeriBlockPopTx(
        ::grpc::experimental::MessageAllocator< ::VeriBlock::BytesArrayRequest, ::VeriBlock::VeriBlockPoPTransaction>* allocator) {
      static_cast<::grpc::internal::CallbackUnaryHandler< ::VeriBlock::BytesArrayRequest, ::VeriBlock::VeriBlockPoPTransaction>*>(
          ::grpc::Service::experimental().GetHandler(6))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_parseVeriBlockPopTx() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status parseVeriBlockPopTx(::grpc::ServerContext* context, const ::VeriBlock::BytesArrayRequest* request, ::VeriBlock::VeriBlockPoPTransaction* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void parseVeriBlockPopTx(::grpc::ServerContext* context, const ::VeriBlock::BytesArrayRequest* request, ::VeriBlock::VeriBlockPoPTransaction* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_ParseOutput : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_ParseOutput() {
      ::grpc::Service::experimental().MarkMethodCallback(7,
        new ::grpc::internal::CallbackUnaryHandler< ::VeriBlock::BytesArrayRequest, ::VeriBlock::Output>(
          [this](::grpc::ServerContext* context,
                 const ::VeriBlock::BytesArrayRequest* request,
                 ::VeriBlock::Output* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->ParseOutput(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_ParseOutput(
        ::grpc::experimental::MessageAllocator< ::VeriBlock::BytesArrayRequest, ::VeriBlock::Output>* allocator) {
      static_cast<::grpc::internal::CallbackUnaryHandler< ::VeriBlock::BytesArrayRequest, ::VeriBlock::Output>*>(
          ::grpc::Service::experimental().GetHandler(7))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_ParseOutput() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ParseOutput(::grpc::ServerContext* context, const ::VeriBlock::BytesArrayRequest* request, ::VeriBlock::Output* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void ParseOutput(::grpc::ServerContext* context, const ::VeriBlock::BytesArrayRequest* request, ::VeriBlock::Output* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_ParseAddress : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_ParseAddress() {
      ::grpc::Service::experimental().MarkMethodCallback(8,
        new ::grpc::internal::CallbackUnaryHandler< ::VeriBlock::BytesArrayRequest, ::VeriBlock::Address>(
          [this](::grpc::ServerContext* context,
                 const ::VeriBlock::BytesArrayRequest* request,
                 ::VeriBlock::Address* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->ParseAddress(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_ParseAddress(
        ::grpc::experimental::MessageAllocator< ::VeriBlock::BytesArrayRequest, ::VeriBlock::Address>* allocator) {
      static_cast<::grpc::internal::CallbackUnaryHandler< ::VeriBlock::BytesArrayRequest, ::VeriBlock::Address>*>(
          ::grpc::Service::experimental().GetHandler(8))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_ParseAddress() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ParseAddress(::grpc::ServerContext* context, const ::VeriBlock::BytesArrayRequest* request, ::VeriBlock::Address* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void ParseAddress(::grpc::ServerContext* context, const ::VeriBlock::BytesArrayRequest* request, ::VeriBlock::Address* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_ParseBitcoinBlock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_ParseBitcoinBlock() {
      ::grpc::Service::experimental().MarkMethodCallback(9,
        new ::grpc::internal::CallbackUnaryHandler< ::VeriBlock::BytesArrayRequest, ::VeriBlock::BitcoinBlock>(
          [this](::grpc::ServerContext* context,
                 const ::VeriBlock::BytesArrayRequest* request,
                 ::VeriBlock::BitcoinBlock* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->ParseBitcoinBlock(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_ParseBitcoinBlock(
        ::grpc::experimental::MessageAllocator< ::VeriBlock::BytesArrayRequest, ::VeriBlock::BitcoinBlock>* allocator) {
      static_cast<::grpc::internal::CallbackUnaryHandler< ::VeriBlock::BytesArrayRequest, ::VeriBlock::BitcoinBlock>*>(
          ::grpc::Service::experimental().GetHandler(9))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_ParseBitcoinBlock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ParseBitcoinBlock(::grpc::ServerContext* context, const ::VeriBlock::BytesArrayRequest* request, ::VeriBlock::BitcoinBlock* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void ParseBitcoinBlock(::grpc::ServerContext* context, const ::VeriBlock::BytesArrayRequest* request, ::VeriBlock::BitcoinBlock* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_ParseVeriBlockMerklePath : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_ParseVeriBlockMerklePath() {
      ::grpc::Service::experimental().MarkMethodCallback(10,
        new ::grpc::internal::CallbackUnaryHandler< ::VeriBlock::BytesArrayRequest, ::VeriBlock::VeriBlockMerklePath>(
          [this](::grpc::ServerContext* context,
                 const ::VeriBlock::BytesArrayRequest* request,
                 ::VeriBlock::VeriBlockMerklePath* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->ParseVeriBlockMerklePath(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_ParseVeriBlockMerklePath(
        ::grpc::experimental::MessageAllocator< ::VeriBlock::BytesArrayRequest, ::VeriBlock::VeriBlockMerklePath>* allocator) {
      static_cast<::grpc::internal::CallbackUnaryHandler< ::VeriBlock::BytesArrayRequest, ::VeriBlock::VeriBlockMerklePath>*>(
          ::grpc::Service::experimental().GetHandler(10))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_ParseVeriBlockMerklePath() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ParseVeriBlockMerklePath(::grpc::ServerContext* context, const ::VeriBlock::BytesArrayRequest* request, ::VeriBlock::VeriBlockMerklePath* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void ParseVeriBlockMerklePath(::grpc::ServerContext* context, const ::VeriBlock::BytesArrayRequest* request, ::VeriBlock::VeriBlockMerklePath* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_ParseMerklePath : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_ParseMerklePath() {
      ::grpc::Service::experimental().MarkMethodCallback(11,
        new ::grpc::internal::CallbackUnaryHandler< ::VeriBlock::MerklePathRequest, ::VeriBlock::MerklePath>(
          [this](::grpc::ServerContext* context,
                 const ::VeriBlock::MerklePathRequest* request,
                 ::VeriBlock::MerklePath* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->ParseMerklePath(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_ParseMerklePath(
        ::grpc::experimental::MessageAllocator< ::VeriBlock::MerklePathRequest, ::VeriBlock::MerklePath>* allocator) {
      static_cast<::grpc::internal::CallbackUnaryHandler< ::VeriBlock::MerklePathRequest, ::VeriBlock::MerklePath>*>(
          ::grpc::Service::experimental().GetHandler(11))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_ParseMerklePath() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ParseMerklePath(::grpc::ServerContext* context, const ::VeriBlock::MerklePathRequest* request, ::VeriBlock::MerklePath* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void ParseMerklePath(::grpc::ServerContext* context, const ::VeriBlock::MerklePathRequest* request, ::VeriBlock::MerklePath* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  typedef ExperimentalWithCallbackMethod_ParseAltPublication<ExperimentalWithCallbackMethod_ParsePublicationData<ExperimentalWithCallbackMethod_ParseBitcoinTransaction<ExperimentalWithCallbackMethod_ParseVeriBlockBlock<ExperimentalWithCallbackMethod_ParseVeriBlockTransaction<ExperimentalWithCallbackMethod_ParseVeriBlockPublication<ExperimentalWithCallbackMethod_parseVeriBlockPopTx<ExperimentalWithCallbackMethod_ParseOutput<ExperimentalWithCallbackMethod_ParseAddress<ExperimentalWithCallbackMethod_ParseBitcoinBlock<ExperimentalWithCallbackMethod_ParseVeriBlockMerklePath<ExperimentalWithCallbackMethod_ParseMerklePath<Service > > > > > > > > > > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_ParseAltPublication : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_ParseAltPublication() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_ParseAltPublication() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ParseAltPublication(::grpc::ServerContext* context, const ::VeriBlock::BytesArrayRequest* request, ::VeriBlock::AltPublication* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ParsePublicationData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_ParsePublicationData() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_ParsePublicationData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ParsePublicationData(::grpc::ServerContext* context, const ::VeriBlock::BytesArrayRequest* request, ::VeriBlock::PublicationData* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ParseBitcoinTransaction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_ParseBitcoinTransaction() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_ParseBitcoinTransaction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ParseBitcoinTransaction(::grpc::ServerContext* context, const ::VeriBlock::BytesArrayRequest* request, ::VeriBlock::BitcoinTransaction* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ParseVeriBlockBlock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_ParseVeriBlockBlock() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_ParseVeriBlockBlock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ParseVeriBlockBlock(::grpc::ServerContext* context, const ::VeriBlock::BytesArrayRequest* request, ::VeriBlock::VeriBlockBlock* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ParseVeriBlockTransaction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_ParseVeriBlockTransaction() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_ParseVeriBlockTransaction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ParseVeriBlockTransaction(::grpc::ServerContext* context, const ::VeriBlock::BytesArrayRequest* request, ::VeriBlock::VeriBlockTransaction* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ParseVeriBlockPublication : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_ParseVeriBlockPublication() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_ParseVeriBlockPublication() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ParseVeriBlockPublication(::grpc::ServerContext* context, const ::VeriBlock::BytesArrayRequest* request, ::VeriBlock::VeriBlockPublication* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_parseVeriBlockPopTx : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_parseVeriBlockPopTx() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_parseVeriBlockPopTx() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status parseVeriBlockPopTx(::grpc::ServerContext* context, const ::VeriBlock::BytesArrayRequest* request, ::VeriBlock::VeriBlockPoPTransaction* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ParseOutput : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_ParseOutput() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_ParseOutput() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ParseOutput(::grpc::ServerContext* context, const ::VeriBlock::BytesArrayRequest* request, ::VeriBlock::Output* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ParseAddress : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_ParseAddress() {
      ::grpc::Service::MarkMethodGeneric(8);
    }
    ~WithGenericMethod_ParseAddress() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ParseAddress(::grpc::ServerContext* context, const ::VeriBlock::BytesArrayRequest* request, ::VeriBlock::Address* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ParseBitcoinBlock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_ParseBitcoinBlock() {
      ::grpc::Service::MarkMethodGeneric(9);
    }
    ~WithGenericMethod_ParseBitcoinBlock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ParseBitcoinBlock(::grpc::ServerContext* context, const ::VeriBlock::BytesArrayRequest* request, ::VeriBlock::BitcoinBlock* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ParseVeriBlockMerklePath : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_ParseVeriBlockMerklePath() {
      ::grpc::Service::MarkMethodGeneric(10);
    }
    ~WithGenericMethod_ParseVeriBlockMerklePath() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ParseVeriBlockMerklePath(::grpc::ServerContext* context, const ::VeriBlock::BytesArrayRequest* request, ::VeriBlock::VeriBlockMerklePath* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ParseMerklePath : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_ParseMerklePath() {
      ::grpc::Service::MarkMethodGeneric(11);
    }
    ~WithGenericMethod_ParseMerklePath() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ParseMerklePath(::grpc::ServerContext* context, const ::VeriBlock::MerklePathRequest* request, ::VeriBlock::MerklePath* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_ParseAltPublication : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_ParseAltPublication() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_ParseAltPublication() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ParseAltPublication(::grpc::ServerContext* context, const ::VeriBlock::BytesArrayRequest* request, ::VeriBlock::AltPublication* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestParseAltPublication(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ParsePublicationData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_ParsePublicationData() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_ParsePublicationData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ParsePublicationData(::grpc::ServerContext* context, const ::VeriBlock::BytesArrayRequest* request, ::VeriBlock::PublicationData* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestParsePublicationData(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ParseBitcoinTransaction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_ParseBitcoinTransaction() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_ParseBitcoinTransaction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ParseBitcoinTransaction(::grpc::ServerContext* context, const ::VeriBlock::BytesArrayRequest* request, ::VeriBlock::BitcoinTransaction* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestParseBitcoinTransaction(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ParseVeriBlockBlock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_ParseVeriBlockBlock() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_ParseVeriBlockBlock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ParseVeriBlockBlock(::grpc::ServerContext* context, const ::VeriBlock::BytesArrayRequest* request, ::VeriBlock::VeriBlockBlock* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestParseVeriBlockBlock(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ParseVeriBlockTransaction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_ParseVeriBlockTransaction() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_ParseVeriBlockTransaction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ParseVeriBlockTransaction(::grpc::ServerContext* context, const ::VeriBlock::BytesArrayRequest* request, ::VeriBlock::VeriBlockTransaction* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestParseVeriBlockTransaction(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ParseVeriBlockPublication : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_ParseVeriBlockPublication() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_ParseVeriBlockPublication() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ParseVeriBlockPublication(::grpc::ServerContext* context, const ::VeriBlock::BytesArrayRequest* request, ::VeriBlock::VeriBlockPublication* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestParseVeriBlockPublication(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_parseVeriBlockPopTx : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_parseVeriBlockPopTx() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_parseVeriBlockPopTx() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status parseVeriBlockPopTx(::grpc::ServerContext* context, const ::VeriBlock::BytesArrayRequest* request, ::VeriBlock::VeriBlockPoPTransaction* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestparseVeriBlockPopTx(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ParseOutput : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_ParseOutput() {
      ::grpc::Service::MarkMethodRaw(7);
    }
    ~WithRawMethod_ParseOutput() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ParseOutput(::grpc::ServerContext* context, const ::VeriBlock::BytesArrayRequest* request, ::VeriBlock::Output* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestParseOutput(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ParseAddress : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_ParseAddress() {
      ::grpc::Service::MarkMethodRaw(8);
    }
    ~WithRawMethod_ParseAddress() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ParseAddress(::grpc::ServerContext* context, const ::VeriBlock::BytesArrayRequest* request, ::VeriBlock::Address* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestParseAddress(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ParseBitcoinBlock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_ParseBitcoinBlock() {
      ::grpc::Service::MarkMethodRaw(9);
    }
    ~WithRawMethod_ParseBitcoinBlock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ParseBitcoinBlock(::grpc::ServerContext* context, const ::VeriBlock::BytesArrayRequest* request, ::VeriBlock::BitcoinBlock* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestParseBitcoinBlock(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ParseVeriBlockMerklePath : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_ParseVeriBlockMerklePath() {
      ::grpc::Service::MarkMethodRaw(10);
    }
    ~WithRawMethod_ParseVeriBlockMerklePath() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ParseVeriBlockMerklePath(::grpc::ServerContext* context, const ::VeriBlock::BytesArrayRequest* request, ::VeriBlock::VeriBlockMerklePath* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestParseVeriBlockMerklePath(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ParseMerklePath : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_ParseMerklePath() {
      ::grpc::Service::MarkMethodRaw(11);
    }
    ~WithRawMethod_ParseMerklePath() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ParseMerklePath(::grpc::ServerContext* context, const ::VeriBlock::MerklePathRequest* request, ::VeriBlock::MerklePath* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestParseMerklePath(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(11, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_ParseAltPublication : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_ParseAltPublication() {
      ::grpc::Service::experimental().MarkMethodRawCallback(0,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->ParseAltPublication(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_ParseAltPublication() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ParseAltPublication(::grpc::ServerContext* context, const ::VeriBlock::BytesArrayRequest* request, ::VeriBlock::AltPublication* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void ParseAltPublication(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_ParsePublicationData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_ParsePublicationData() {
      ::grpc::Service::experimental().MarkMethodRawCallback(1,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->ParsePublicationData(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_ParsePublicationData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ParsePublicationData(::grpc::ServerContext* context, const ::VeriBlock::BytesArrayRequest* request, ::VeriBlock::PublicationData* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void ParsePublicationData(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_ParseBitcoinTransaction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_ParseBitcoinTransaction() {
      ::grpc::Service::experimental().MarkMethodRawCallback(2,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->ParseBitcoinTransaction(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_ParseBitcoinTransaction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ParseBitcoinTransaction(::grpc::ServerContext* context, const ::VeriBlock::BytesArrayRequest* request, ::VeriBlock::BitcoinTransaction* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void ParseBitcoinTransaction(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_ParseVeriBlockBlock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_ParseVeriBlockBlock() {
      ::grpc::Service::experimental().MarkMethodRawCallback(3,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->ParseVeriBlockBlock(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_ParseVeriBlockBlock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ParseVeriBlockBlock(::grpc::ServerContext* context, const ::VeriBlock::BytesArrayRequest* request, ::VeriBlock::VeriBlockBlock* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void ParseVeriBlockBlock(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_ParseVeriBlockTransaction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_ParseVeriBlockTransaction() {
      ::grpc::Service::experimental().MarkMethodRawCallback(4,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->ParseVeriBlockTransaction(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_ParseVeriBlockTransaction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ParseVeriBlockTransaction(::grpc::ServerContext* context, const ::VeriBlock::BytesArrayRequest* request, ::VeriBlock::VeriBlockTransaction* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void ParseVeriBlockTransaction(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_ParseVeriBlockPublication : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_ParseVeriBlockPublication() {
      ::grpc::Service::experimental().MarkMethodRawCallback(5,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->ParseVeriBlockPublication(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_ParseVeriBlockPublication() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ParseVeriBlockPublication(::grpc::ServerContext* context, const ::VeriBlock::BytesArrayRequest* request, ::VeriBlock::VeriBlockPublication* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void ParseVeriBlockPublication(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_parseVeriBlockPopTx : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_parseVeriBlockPopTx() {
      ::grpc::Service::experimental().MarkMethodRawCallback(6,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->parseVeriBlockPopTx(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_parseVeriBlockPopTx() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status parseVeriBlockPopTx(::grpc::ServerContext* context, const ::VeriBlock::BytesArrayRequest* request, ::VeriBlock::VeriBlockPoPTransaction* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void parseVeriBlockPopTx(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_ParseOutput : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_ParseOutput() {
      ::grpc::Service::experimental().MarkMethodRawCallback(7,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->ParseOutput(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_ParseOutput() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ParseOutput(::grpc::ServerContext* context, const ::VeriBlock::BytesArrayRequest* request, ::VeriBlock::Output* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void ParseOutput(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_ParseAddress : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_ParseAddress() {
      ::grpc::Service::experimental().MarkMethodRawCallback(8,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->ParseAddress(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_ParseAddress() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ParseAddress(::grpc::ServerContext* context, const ::VeriBlock::BytesArrayRequest* request, ::VeriBlock::Address* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void ParseAddress(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_ParseBitcoinBlock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_ParseBitcoinBlock() {
      ::grpc::Service::experimental().MarkMethodRawCallback(9,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->ParseBitcoinBlock(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_ParseBitcoinBlock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ParseBitcoinBlock(::grpc::ServerContext* context, const ::VeriBlock::BytesArrayRequest* request, ::VeriBlock::BitcoinBlock* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void ParseBitcoinBlock(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_ParseVeriBlockMerklePath : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_ParseVeriBlockMerklePath() {
      ::grpc::Service::experimental().MarkMethodRawCallback(10,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->ParseVeriBlockMerklePath(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_ParseVeriBlockMerklePath() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ParseVeriBlockMerklePath(::grpc::ServerContext* context, const ::VeriBlock::BytesArrayRequest* request, ::VeriBlock::VeriBlockMerklePath* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void ParseVeriBlockMerklePath(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_ParseMerklePath : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_ParseMerklePath() {
      ::grpc::Service::experimental().MarkMethodRawCallback(11,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->ParseMerklePath(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_ParseMerklePath() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ParseMerklePath(::grpc::ServerContext* context, const ::VeriBlock::MerklePathRequest* request, ::VeriBlock::MerklePath* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void ParseMerklePath(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ParseAltPublication : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_ParseAltPublication() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::VeriBlock::BytesArrayRequest, ::VeriBlock::AltPublication>(std::bind(&WithStreamedUnaryMethod_ParseAltPublication<BaseClass>::StreamedParseAltPublication, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_ParseAltPublication() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ParseAltPublication(::grpc::ServerContext* context, const ::VeriBlock::BytesArrayRequest* request, ::VeriBlock::AltPublication* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedParseAltPublication(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::VeriBlock::BytesArrayRequest,::VeriBlock::AltPublication>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ParsePublicationData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_ParsePublicationData() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::VeriBlock::BytesArrayRequest, ::VeriBlock::PublicationData>(std::bind(&WithStreamedUnaryMethod_ParsePublicationData<BaseClass>::StreamedParsePublicationData, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_ParsePublicationData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ParsePublicationData(::grpc::ServerContext* context, const ::VeriBlock::BytesArrayRequest* request, ::VeriBlock::PublicationData* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedParsePublicationData(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::VeriBlock::BytesArrayRequest,::VeriBlock::PublicationData>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ParseBitcoinTransaction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_ParseBitcoinTransaction() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler< ::VeriBlock::BytesArrayRequest, ::VeriBlock::BitcoinTransaction>(std::bind(&WithStreamedUnaryMethod_ParseBitcoinTransaction<BaseClass>::StreamedParseBitcoinTransaction, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_ParseBitcoinTransaction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ParseBitcoinTransaction(::grpc::ServerContext* context, const ::VeriBlock::BytesArrayRequest* request, ::VeriBlock::BitcoinTransaction* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedParseBitcoinTransaction(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::VeriBlock::BytesArrayRequest,::VeriBlock::BitcoinTransaction>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ParseVeriBlockBlock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_ParseVeriBlockBlock() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler< ::VeriBlock::BytesArrayRequest, ::VeriBlock::VeriBlockBlock>(std::bind(&WithStreamedUnaryMethod_ParseVeriBlockBlock<BaseClass>::StreamedParseVeriBlockBlock, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_ParseVeriBlockBlock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ParseVeriBlockBlock(::grpc::ServerContext* context, const ::VeriBlock::BytesArrayRequest* request, ::VeriBlock::VeriBlockBlock* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedParseVeriBlockBlock(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::VeriBlock::BytesArrayRequest,::VeriBlock::VeriBlockBlock>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ParseVeriBlockTransaction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_ParseVeriBlockTransaction() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler< ::VeriBlock::BytesArrayRequest, ::VeriBlock::VeriBlockTransaction>(std::bind(&WithStreamedUnaryMethod_ParseVeriBlockTransaction<BaseClass>::StreamedParseVeriBlockTransaction, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_ParseVeriBlockTransaction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ParseVeriBlockTransaction(::grpc::ServerContext* context, const ::VeriBlock::BytesArrayRequest* request, ::VeriBlock::VeriBlockTransaction* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedParseVeriBlockTransaction(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::VeriBlock::BytesArrayRequest,::VeriBlock::VeriBlockTransaction>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ParseVeriBlockPublication : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_ParseVeriBlockPublication() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler< ::VeriBlock::BytesArrayRequest, ::VeriBlock::VeriBlockPublication>(std::bind(&WithStreamedUnaryMethod_ParseVeriBlockPublication<BaseClass>::StreamedParseVeriBlockPublication, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_ParseVeriBlockPublication() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ParseVeriBlockPublication(::grpc::ServerContext* context, const ::VeriBlock::BytesArrayRequest* request, ::VeriBlock::VeriBlockPublication* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedParseVeriBlockPublication(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::VeriBlock::BytesArrayRequest,::VeriBlock::VeriBlockPublication>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_parseVeriBlockPopTx : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_parseVeriBlockPopTx() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler< ::VeriBlock::BytesArrayRequest, ::VeriBlock::VeriBlockPoPTransaction>(std::bind(&WithStreamedUnaryMethod_parseVeriBlockPopTx<BaseClass>::StreamedparseVeriBlockPopTx, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_parseVeriBlockPopTx() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status parseVeriBlockPopTx(::grpc::ServerContext* context, const ::VeriBlock::BytesArrayRequest* request, ::VeriBlock::VeriBlockPoPTransaction* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedparseVeriBlockPopTx(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::VeriBlock::BytesArrayRequest,::VeriBlock::VeriBlockPoPTransaction>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ParseOutput : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_ParseOutput() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::internal::StreamedUnaryHandler< ::VeriBlock::BytesArrayRequest, ::VeriBlock::Output>(std::bind(&WithStreamedUnaryMethod_ParseOutput<BaseClass>::StreamedParseOutput, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_ParseOutput() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ParseOutput(::grpc::ServerContext* context, const ::VeriBlock::BytesArrayRequest* request, ::VeriBlock::Output* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedParseOutput(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::VeriBlock::BytesArrayRequest,::VeriBlock::Output>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ParseAddress : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_ParseAddress() {
      ::grpc::Service::MarkMethodStreamed(8,
        new ::grpc::internal::StreamedUnaryHandler< ::VeriBlock::BytesArrayRequest, ::VeriBlock::Address>(std::bind(&WithStreamedUnaryMethod_ParseAddress<BaseClass>::StreamedParseAddress, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_ParseAddress() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ParseAddress(::grpc::ServerContext* context, const ::VeriBlock::BytesArrayRequest* request, ::VeriBlock::Address* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedParseAddress(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::VeriBlock::BytesArrayRequest,::VeriBlock::Address>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ParseBitcoinBlock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_ParseBitcoinBlock() {
      ::grpc::Service::MarkMethodStreamed(9,
        new ::grpc::internal::StreamedUnaryHandler< ::VeriBlock::BytesArrayRequest, ::VeriBlock::BitcoinBlock>(std::bind(&WithStreamedUnaryMethod_ParseBitcoinBlock<BaseClass>::StreamedParseBitcoinBlock, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_ParseBitcoinBlock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ParseBitcoinBlock(::grpc::ServerContext* context, const ::VeriBlock::BytesArrayRequest* request, ::VeriBlock::BitcoinBlock* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedParseBitcoinBlock(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::VeriBlock::BytesArrayRequest,::VeriBlock::BitcoinBlock>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ParseVeriBlockMerklePath : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_ParseVeriBlockMerklePath() {
      ::grpc::Service::MarkMethodStreamed(10,
        new ::grpc::internal::StreamedUnaryHandler< ::VeriBlock::BytesArrayRequest, ::VeriBlock::VeriBlockMerklePath>(std::bind(&WithStreamedUnaryMethod_ParseVeriBlockMerklePath<BaseClass>::StreamedParseVeriBlockMerklePath, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_ParseVeriBlockMerklePath() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ParseVeriBlockMerklePath(::grpc::ServerContext* context, const ::VeriBlock::BytesArrayRequest* request, ::VeriBlock::VeriBlockMerklePath* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedParseVeriBlockMerklePath(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::VeriBlock::BytesArrayRequest,::VeriBlock::VeriBlockMerklePath>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ParseMerklePath : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_ParseMerklePath() {
      ::grpc::Service::MarkMethodStreamed(11,
        new ::grpc::internal::StreamedUnaryHandler< ::VeriBlock::MerklePathRequest, ::VeriBlock::MerklePath>(std::bind(&WithStreamedUnaryMethod_ParseMerklePath<BaseClass>::StreamedParseMerklePath, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_ParseMerklePath() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ParseMerklePath(::grpc::ServerContext* context, const ::VeriBlock::MerklePathRequest* request, ::VeriBlock::MerklePath* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedParseMerklePath(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::VeriBlock::MerklePathRequest,::VeriBlock::MerklePath>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_ParseAltPublication<WithStreamedUnaryMethod_ParsePublicationData<WithStreamedUnaryMethod_ParseBitcoinTransaction<WithStreamedUnaryMethod_ParseVeriBlockBlock<WithStreamedUnaryMethod_ParseVeriBlockTransaction<WithStreamedUnaryMethod_ParseVeriBlockPublication<WithStreamedUnaryMethod_parseVeriBlockPopTx<WithStreamedUnaryMethod_ParseOutput<WithStreamedUnaryMethod_ParseAddress<WithStreamedUnaryMethod_ParseBitcoinBlock<WithStreamedUnaryMethod_ParseVeriBlockMerklePath<WithStreamedUnaryMethod_ParseMerklePath<Service > > > > > > > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_ParseAltPublication<WithStreamedUnaryMethod_ParsePublicationData<WithStreamedUnaryMethod_ParseBitcoinTransaction<WithStreamedUnaryMethod_ParseVeriBlockBlock<WithStreamedUnaryMethod_ParseVeriBlockTransaction<WithStreamedUnaryMethod_ParseVeriBlockPublication<WithStreamedUnaryMethod_parseVeriBlockPopTx<WithStreamedUnaryMethod_ParseOutput<WithStreamedUnaryMethod_ParseAddress<WithStreamedUnaryMethod_ParseBitcoinBlock<WithStreamedUnaryMethod_ParseVeriBlockMerklePath<WithStreamedUnaryMethod_ParseMerklePath<Service > > > > > > > > > > > > StreamedService;
};

class SerializeService final {
 public:
  static constexpr char const* service_full_name() {
    return "VeriBlock.SerializeService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status SerializeAltPublication(::grpc::ClientContext* context, const ::VeriBlock::AltPublication& request, ::VeriBlock::BytesArrayReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::BytesArrayReply>> AsyncSerializeAltPublication(::grpc::ClientContext* context, const ::VeriBlock::AltPublication& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::BytesArrayReply>>(AsyncSerializeAltPublicationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::BytesArrayReply>> PrepareAsyncSerializeAltPublication(::grpc::ClientContext* context, const ::VeriBlock::AltPublication& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::BytesArrayReply>>(PrepareAsyncSerializeAltPublicationRaw(context, request, cq));
    }
    virtual ::grpc::Status SerializePublicationData(::grpc::ClientContext* context, const ::VeriBlock::PublicationData& request, ::VeriBlock::BytesArrayReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::BytesArrayReply>> AsyncSerializePublicationData(::grpc::ClientContext* context, const ::VeriBlock::PublicationData& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::BytesArrayReply>>(AsyncSerializePublicationDataRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::BytesArrayReply>> PrepareAsyncSerializePublicationData(::grpc::ClientContext* context, const ::VeriBlock::PublicationData& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::BytesArrayReply>>(PrepareAsyncSerializePublicationDataRaw(context, request, cq));
    }
    virtual ::grpc::Status SerializeBitcoinTransaction(::grpc::ClientContext* context, const ::VeriBlock::BitcoinTransaction& request, ::VeriBlock::BytesArrayReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::BytesArrayReply>> AsyncSerializeBitcoinTransaction(::grpc::ClientContext* context, const ::VeriBlock::BitcoinTransaction& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::BytesArrayReply>>(AsyncSerializeBitcoinTransactionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::BytesArrayReply>> PrepareAsyncSerializeBitcoinTransaction(::grpc::ClientContext* context, const ::VeriBlock::BitcoinTransaction& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::BytesArrayReply>>(PrepareAsyncSerializeBitcoinTransactionRaw(context, request, cq));
    }
    virtual ::grpc::Status SerializeVeriBlockBlock(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockBlock& request, ::VeriBlock::BytesArrayReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::BytesArrayReply>> AsyncSerializeVeriBlockBlock(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockBlock& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::BytesArrayReply>>(AsyncSerializeVeriBlockBlockRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::BytesArrayReply>> PrepareAsyncSerializeVeriBlockBlock(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockBlock& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::BytesArrayReply>>(PrepareAsyncSerializeVeriBlockBlockRaw(context, request, cq));
    }
    virtual ::grpc::Status SerializeVeriBlockTransaction(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockTransaction& request, ::VeriBlock::BytesArrayReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::BytesArrayReply>> AsyncSerializeVeriBlockTransaction(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockTransaction& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::BytesArrayReply>>(AsyncSerializeVeriBlockTransactionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::BytesArrayReply>> PrepareAsyncSerializeVeriBlockTransaction(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockTransaction& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::BytesArrayReply>>(PrepareAsyncSerializeVeriBlockTransactionRaw(context, request, cq));
    }
    virtual ::grpc::Status SerializeVeriBlockPublication(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockPublication& request, ::VeriBlock::BytesArrayReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::BytesArrayReply>> AsyncSerializeVeriBlockPublication(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockPublication& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::BytesArrayReply>>(AsyncSerializeVeriBlockPublicationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::BytesArrayReply>> PrepareAsyncSerializeVeriBlockPublication(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockPublication& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::BytesArrayReply>>(PrepareAsyncSerializeVeriBlockPublicationRaw(context, request, cq));
    }
    virtual ::grpc::Status SerializeVeriBlockPopTx(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockPoPTransaction& request, ::VeriBlock::BytesArrayReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::BytesArrayReply>> AsyncSerializeVeriBlockPopTx(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockPoPTransaction& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::BytesArrayReply>>(AsyncSerializeVeriBlockPopTxRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::BytesArrayReply>> PrepareAsyncSerializeVeriBlockPopTx(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockPoPTransaction& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::BytesArrayReply>>(PrepareAsyncSerializeVeriBlockPopTxRaw(context, request, cq));
    }
    virtual ::grpc::Status SerializeOutput(::grpc::ClientContext* context, const ::VeriBlock::Output& request, ::VeriBlock::BytesArrayReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::BytesArrayReply>> AsyncSerializeOutput(::grpc::ClientContext* context, const ::VeriBlock::Output& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::BytesArrayReply>>(AsyncSerializeOutputRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::BytesArrayReply>> PrepareAsyncSerializeOutput(::grpc::ClientContext* context, const ::VeriBlock::Output& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::BytesArrayReply>>(PrepareAsyncSerializeOutputRaw(context, request, cq));
    }
    virtual ::grpc::Status SerializeAddress(::grpc::ClientContext* context, const ::VeriBlock::Address& request, ::VeriBlock::BytesArrayReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::BytesArrayReply>> AsyncSerializeAddress(::grpc::ClientContext* context, const ::VeriBlock::Address& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::BytesArrayReply>>(AsyncSerializeAddressRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::BytesArrayReply>> PrepareAsyncSerializeAddress(::grpc::ClientContext* context, const ::VeriBlock::Address& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::BytesArrayReply>>(PrepareAsyncSerializeAddressRaw(context, request, cq));
    }
    virtual ::grpc::Status SerializeBitcoinBlock(::grpc::ClientContext* context, const ::VeriBlock::BitcoinBlock& request, ::VeriBlock::BytesArrayReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::BytesArrayReply>> AsyncSerializeBitcoinBlock(::grpc::ClientContext* context, const ::VeriBlock::BitcoinBlock& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::BytesArrayReply>>(AsyncSerializeBitcoinBlockRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::BytesArrayReply>> PrepareAsyncSerializeBitcoinBlock(::grpc::ClientContext* context, const ::VeriBlock::BitcoinBlock& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::BytesArrayReply>>(PrepareAsyncSerializeBitcoinBlockRaw(context, request, cq));
    }
    virtual ::grpc::Status SerializeVeriBlockMerklePath(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockMerklePath& request, ::VeriBlock::BytesArrayReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::BytesArrayReply>> AsyncSerializeVeriBlockMerklePath(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockMerklePath& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::BytesArrayReply>>(AsyncSerializeVeriBlockMerklePathRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::BytesArrayReply>> PrepareAsyncSerializeVeriBlockMerklePath(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockMerklePath& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::BytesArrayReply>>(PrepareAsyncSerializeVeriBlockMerklePathRaw(context, request, cq));
    }
    virtual ::grpc::Status SerializeMerklePath(::grpc::ClientContext* context, const ::VeriBlock::MerklePath& request, ::VeriBlock::BytesArrayReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::BytesArrayReply>> AsyncSerializeMerklePath(::grpc::ClientContext* context, const ::VeriBlock::MerklePath& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::BytesArrayReply>>(AsyncSerializeMerklePathRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::BytesArrayReply>> PrepareAsyncSerializeMerklePath(::grpc::ClientContext* context, const ::VeriBlock::MerklePath& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::BytesArrayReply>>(PrepareAsyncSerializeMerklePathRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      virtual void SerializeAltPublication(::grpc::ClientContext* context, const ::VeriBlock::AltPublication* request, ::VeriBlock::BytesArrayReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SerializeAltPublication(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::BytesArrayReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SerializeAltPublication(::grpc::ClientContext* context, const ::VeriBlock::AltPublication* request, ::VeriBlock::BytesArrayReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void SerializeAltPublication(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::BytesArrayReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void SerializePublicationData(::grpc::ClientContext* context, const ::VeriBlock::PublicationData* request, ::VeriBlock::BytesArrayReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SerializePublicationData(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::BytesArrayReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SerializePublicationData(::grpc::ClientContext* context, const ::VeriBlock::PublicationData* request, ::VeriBlock::BytesArrayReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void SerializePublicationData(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::BytesArrayReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void SerializeBitcoinTransaction(::grpc::ClientContext* context, const ::VeriBlock::BitcoinTransaction* request, ::VeriBlock::BytesArrayReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SerializeBitcoinTransaction(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::BytesArrayReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SerializeBitcoinTransaction(::grpc::ClientContext* context, const ::VeriBlock::BitcoinTransaction* request, ::VeriBlock::BytesArrayReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void SerializeBitcoinTransaction(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::BytesArrayReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void SerializeVeriBlockBlock(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockBlock* request, ::VeriBlock::BytesArrayReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SerializeVeriBlockBlock(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::BytesArrayReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SerializeVeriBlockBlock(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockBlock* request, ::VeriBlock::BytesArrayReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void SerializeVeriBlockBlock(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::BytesArrayReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void SerializeVeriBlockTransaction(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockTransaction* request, ::VeriBlock::BytesArrayReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SerializeVeriBlockTransaction(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::BytesArrayReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SerializeVeriBlockTransaction(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockTransaction* request, ::VeriBlock::BytesArrayReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void SerializeVeriBlockTransaction(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::BytesArrayReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void SerializeVeriBlockPublication(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockPublication* request, ::VeriBlock::BytesArrayReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SerializeVeriBlockPublication(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::BytesArrayReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SerializeVeriBlockPublication(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockPublication* request, ::VeriBlock::BytesArrayReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void SerializeVeriBlockPublication(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::BytesArrayReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void SerializeVeriBlockPopTx(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockPoPTransaction* request, ::VeriBlock::BytesArrayReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SerializeVeriBlockPopTx(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::BytesArrayReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SerializeVeriBlockPopTx(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockPoPTransaction* request, ::VeriBlock::BytesArrayReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void SerializeVeriBlockPopTx(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::BytesArrayReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void SerializeOutput(::grpc::ClientContext* context, const ::VeriBlock::Output* request, ::VeriBlock::BytesArrayReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SerializeOutput(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::BytesArrayReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SerializeOutput(::grpc::ClientContext* context, const ::VeriBlock::Output* request, ::VeriBlock::BytesArrayReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void SerializeOutput(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::BytesArrayReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void SerializeAddress(::grpc::ClientContext* context, const ::VeriBlock::Address* request, ::VeriBlock::BytesArrayReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SerializeAddress(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::BytesArrayReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SerializeAddress(::grpc::ClientContext* context, const ::VeriBlock::Address* request, ::VeriBlock::BytesArrayReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void SerializeAddress(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::BytesArrayReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void SerializeBitcoinBlock(::grpc::ClientContext* context, const ::VeriBlock::BitcoinBlock* request, ::VeriBlock::BytesArrayReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SerializeBitcoinBlock(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::BytesArrayReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SerializeBitcoinBlock(::grpc::ClientContext* context, const ::VeriBlock::BitcoinBlock* request, ::VeriBlock::BytesArrayReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void SerializeBitcoinBlock(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::BytesArrayReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void SerializeVeriBlockMerklePath(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockMerklePath* request, ::VeriBlock::BytesArrayReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SerializeVeriBlockMerklePath(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::BytesArrayReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SerializeVeriBlockMerklePath(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockMerklePath* request, ::VeriBlock::BytesArrayReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void SerializeVeriBlockMerklePath(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::BytesArrayReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void SerializeMerklePath(::grpc::ClientContext* context, const ::VeriBlock::MerklePath* request, ::VeriBlock::BytesArrayReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SerializeMerklePath(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::BytesArrayReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SerializeMerklePath(::grpc::ClientContext* context, const ::VeriBlock::MerklePath* request, ::VeriBlock::BytesArrayReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void SerializeMerklePath(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::BytesArrayReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
    };
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::BytesArrayReply>* AsyncSerializeAltPublicationRaw(::grpc::ClientContext* context, const ::VeriBlock::AltPublication& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::BytesArrayReply>* PrepareAsyncSerializeAltPublicationRaw(::grpc::ClientContext* context, const ::VeriBlock::AltPublication& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::BytesArrayReply>* AsyncSerializePublicationDataRaw(::grpc::ClientContext* context, const ::VeriBlock::PublicationData& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::BytesArrayReply>* PrepareAsyncSerializePublicationDataRaw(::grpc::ClientContext* context, const ::VeriBlock::PublicationData& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::BytesArrayReply>* AsyncSerializeBitcoinTransactionRaw(::grpc::ClientContext* context, const ::VeriBlock::BitcoinTransaction& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::BytesArrayReply>* PrepareAsyncSerializeBitcoinTransactionRaw(::grpc::ClientContext* context, const ::VeriBlock::BitcoinTransaction& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::BytesArrayReply>* AsyncSerializeVeriBlockBlockRaw(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockBlock& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::BytesArrayReply>* PrepareAsyncSerializeVeriBlockBlockRaw(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockBlock& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::BytesArrayReply>* AsyncSerializeVeriBlockTransactionRaw(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockTransaction& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::BytesArrayReply>* PrepareAsyncSerializeVeriBlockTransactionRaw(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockTransaction& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::BytesArrayReply>* AsyncSerializeVeriBlockPublicationRaw(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockPublication& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::BytesArrayReply>* PrepareAsyncSerializeVeriBlockPublicationRaw(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockPublication& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::BytesArrayReply>* AsyncSerializeVeriBlockPopTxRaw(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockPoPTransaction& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::BytesArrayReply>* PrepareAsyncSerializeVeriBlockPopTxRaw(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockPoPTransaction& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::BytesArrayReply>* AsyncSerializeOutputRaw(::grpc::ClientContext* context, const ::VeriBlock::Output& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::BytesArrayReply>* PrepareAsyncSerializeOutputRaw(::grpc::ClientContext* context, const ::VeriBlock::Output& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::BytesArrayReply>* AsyncSerializeAddressRaw(::grpc::ClientContext* context, const ::VeriBlock::Address& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::BytesArrayReply>* PrepareAsyncSerializeAddressRaw(::grpc::ClientContext* context, const ::VeriBlock::Address& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::BytesArrayReply>* AsyncSerializeBitcoinBlockRaw(::grpc::ClientContext* context, const ::VeriBlock::BitcoinBlock& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::BytesArrayReply>* PrepareAsyncSerializeBitcoinBlockRaw(::grpc::ClientContext* context, const ::VeriBlock::BitcoinBlock& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::BytesArrayReply>* AsyncSerializeVeriBlockMerklePathRaw(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockMerklePath& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::BytesArrayReply>* PrepareAsyncSerializeVeriBlockMerklePathRaw(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockMerklePath& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::BytesArrayReply>* AsyncSerializeMerklePathRaw(::grpc::ClientContext* context, const ::VeriBlock::MerklePath& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::BytesArrayReply>* PrepareAsyncSerializeMerklePathRaw(::grpc::ClientContext* context, const ::VeriBlock::MerklePath& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status SerializeAltPublication(::grpc::ClientContext* context, const ::VeriBlock::AltPublication& request, ::VeriBlock::BytesArrayReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::VeriBlock::BytesArrayReply>> AsyncSerializeAltPublication(::grpc::ClientContext* context, const ::VeriBlock::AltPublication& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::VeriBlock::BytesArrayReply>>(AsyncSerializeAltPublicationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::VeriBlock::BytesArrayReply>> PrepareAsyncSerializeAltPublication(::grpc::ClientContext* context, const ::VeriBlock::AltPublication& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::VeriBlock::BytesArrayReply>>(PrepareAsyncSerializeAltPublicationRaw(context, request, cq));
    }
    ::grpc::Status SerializePublicationData(::grpc::ClientContext* context, const ::VeriBlock::PublicationData& request, ::VeriBlock::BytesArrayReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::VeriBlock::BytesArrayReply>> AsyncSerializePublicationData(::grpc::ClientContext* context, const ::VeriBlock::PublicationData& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::VeriBlock::BytesArrayReply>>(AsyncSerializePublicationDataRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::VeriBlock::BytesArrayReply>> PrepareAsyncSerializePublicationData(::grpc::ClientContext* context, const ::VeriBlock::PublicationData& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::VeriBlock::BytesArrayReply>>(PrepareAsyncSerializePublicationDataRaw(context, request, cq));
    }
    ::grpc::Status SerializeBitcoinTransaction(::grpc::ClientContext* context, const ::VeriBlock::BitcoinTransaction& request, ::VeriBlock::BytesArrayReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::VeriBlock::BytesArrayReply>> AsyncSerializeBitcoinTransaction(::grpc::ClientContext* context, const ::VeriBlock::BitcoinTransaction& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::VeriBlock::BytesArrayReply>>(AsyncSerializeBitcoinTransactionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::VeriBlock::BytesArrayReply>> PrepareAsyncSerializeBitcoinTransaction(::grpc::ClientContext* context, const ::VeriBlock::BitcoinTransaction& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::VeriBlock::BytesArrayReply>>(PrepareAsyncSerializeBitcoinTransactionRaw(context, request, cq));
    }
    ::grpc::Status SerializeVeriBlockBlock(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockBlock& request, ::VeriBlock::BytesArrayReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::VeriBlock::BytesArrayReply>> AsyncSerializeVeriBlockBlock(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockBlock& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::VeriBlock::BytesArrayReply>>(AsyncSerializeVeriBlockBlockRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::VeriBlock::BytesArrayReply>> PrepareAsyncSerializeVeriBlockBlock(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockBlock& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::VeriBlock::BytesArrayReply>>(PrepareAsyncSerializeVeriBlockBlockRaw(context, request, cq));
    }
    ::grpc::Status SerializeVeriBlockTransaction(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockTransaction& request, ::VeriBlock::BytesArrayReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::VeriBlock::BytesArrayReply>> AsyncSerializeVeriBlockTransaction(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockTransaction& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::VeriBlock::BytesArrayReply>>(AsyncSerializeVeriBlockTransactionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::VeriBlock::BytesArrayReply>> PrepareAsyncSerializeVeriBlockTransaction(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockTransaction& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::VeriBlock::BytesArrayReply>>(PrepareAsyncSerializeVeriBlockTransactionRaw(context, request, cq));
    }
    ::grpc::Status SerializeVeriBlockPublication(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockPublication& request, ::VeriBlock::BytesArrayReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::VeriBlock::BytesArrayReply>> AsyncSerializeVeriBlockPublication(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockPublication& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::VeriBlock::BytesArrayReply>>(AsyncSerializeVeriBlockPublicationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::VeriBlock::BytesArrayReply>> PrepareAsyncSerializeVeriBlockPublication(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockPublication& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::VeriBlock::BytesArrayReply>>(PrepareAsyncSerializeVeriBlockPublicationRaw(context, request, cq));
    }
    ::grpc::Status SerializeVeriBlockPopTx(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockPoPTransaction& request, ::VeriBlock::BytesArrayReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::VeriBlock::BytesArrayReply>> AsyncSerializeVeriBlockPopTx(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockPoPTransaction& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::VeriBlock::BytesArrayReply>>(AsyncSerializeVeriBlockPopTxRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::VeriBlock::BytesArrayReply>> PrepareAsyncSerializeVeriBlockPopTx(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockPoPTransaction& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::VeriBlock::BytesArrayReply>>(PrepareAsyncSerializeVeriBlockPopTxRaw(context, request, cq));
    }
    ::grpc::Status SerializeOutput(::grpc::ClientContext* context, const ::VeriBlock::Output& request, ::VeriBlock::BytesArrayReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::VeriBlock::BytesArrayReply>> AsyncSerializeOutput(::grpc::ClientContext* context, const ::VeriBlock::Output& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::VeriBlock::BytesArrayReply>>(AsyncSerializeOutputRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::VeriBlock::BytesArrayReply>> PrepareAsyncSerializeOutput(::grpc::ClientContext* context, const ::VeriBlock::Output& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::VeriBlock::BytesArrayReply>>(PrepareAsyncSerializeOutputRaw(context, request, cq));
    }
    ::grpc::Status SerializeAddress(::grpc::ClientContext* context, const ::VeriBlock::Address& request, ::VeriBlock::BytesArrayReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::VeriBlock::BytesArrayReply>> AsyncSerializeAddress(::grpc::ClientContext* context, const ::VeriBlock::Address& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::VeriBlock::BytesArrayReply>>(AsyncSerializeAddressRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::VeriBlock::BytesArrayReply>> PrepareAsyncSerializeAddress(::grpc::ClientContext* context, const ::VeriBlock::Address& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::VeriBlock::BytesArrayReply>>(PrepareAsyncSerializeAddressRaw(context, request, cq));
    }
    ::grpc::Status SerializeBitcoinBlock(::grpc::ClientContext* context, const ::VeriBlock::BitcoinBlock& request, ::VeriBlock::BytesArrayReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::VeriBlock::BytesArrayReply>> AsyncSerializeBitcoinBlock(::grpc::ClientContext* context, const ::VeriBlock::BitcoinBlock& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::VeriBlock::BytesArrayReply>>(AsyncSerializeBitcoinBlockRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::VeriBlock::BytesArrayReply>> PrepareAsyncSerializeBitcoinBlock(::grpc::ClientContext* context, const ::VeriBlock::BitcoinBlock& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::VeriBlock::BytesArrayReply>>(PrepareAsyncSerializeBitcoinBlockRaw(context, request, cq));
    }
    ::grpc::Status SerializeVeriBlockMerklePath(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockMerklePath& request, ::VeriBlock::BytesArrayReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::VeriBlock::BytesArrayReply>> AsyncSerializeVeriBlockMerklePath(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockMerklePath& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::VeriBlock::BytesArrayReply>>(AsyncSerializeVeriBlockMerklePathRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::VeriBlock::BytesArrayReply>> PrepareAsyncSerializeVeriBlockMerklePath(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockMerklePath& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::VeriBlock::BytesArrayReply>>(PrepareAsyncSerializeVeriBlockMerklePathRaw(context, request, cq));
    }
    ::grpc::Status SerializeMerklePath(::grpc::ClientContext* context, const ::VeriBlock::MerklePath& request, ::VeriBlock::BytesArrayReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::VeriBlock::BytesArrayReply>> AsyncSerializeMerklePath(::grpc::ClientContext* context, const ::VeriBlock::MerklePath& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::VeriBlock::BytesArrayReply>>(AsyncSerializeMerklePathRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::VeriBlock::BytesArrayReply>> PrepareAsyncSerializeMerklePath(::grpc::ClientContext* context, const ::VeriBlock::MerklePath& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::VeriBlock::BytesArrayReply>>(PrepareAsyncSerializeMerklePathRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void SerializeAltPublication(::grpc::ClientContext* context, const ::VeriBlock::AltPublication* request, ::VeriBlock::BytesArrayReply* response, std::function<void(::grpc::Status)>) override;
      void SerializeAltPublication(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::BytesArrayReply* response, std::function<void(::grpc::Status)>) override;
      void SerializeAltPublication(::grpc::ClientContext* context, const ::VeriBlock::AltPublication* request, ::VeriBlock::BytesArrayReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void SerializeAltPublication(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::BytesArrayReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void SerializePublicationData(::grpc::ClientContext* context, const ::VeriBlock::PublicationData* request, ::VeriBlock::BytesArrayReply* response, std::function<void(::grpc::Status)>) override;
      void SerializePublicationData(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::BytesArrayReply* response, std::function<void(::grpc::Status)>) override;
      void SerializePublicationData(::grpc::ClientContext* context, const ::VeriBlock::PublicationData* request, ::VeriBlock::BytesArrayReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void SerializePublicationData(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::BytesArrayReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void SerializeBitcoinTransaction(::grpc::ClientContext* context, const ::VeriBlock::BitcoinTransaction* request, ::VeriBlock::BytesArrayReply* response, std::function<void(::grpc::Status)>) override;
      void SerializeBitcoinTransaction(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::BytesArrayReply* response, std::function<void(::grpc::Status)>) override;
      void SerializeBitcoinTransaction(::grpc::ClientContext* context, const ::VeriBlock::BitcoinTransaction* request, ::VeriBlock::BytesArrayReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void SerializeBitcoinTransaction(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::BytesArrayReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void SerializeVeriBlockBlock(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockBlock* request, ::VeriBlock::BytesArrayReply* response, std::function<void(::grpc::Status)>) override;
      void SerializeVeriBlockBlock(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::BytesArrayReply* response, std::function<void(::grpc::Status)>) override;
      void SerializeVeriBlockBlock(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockBlock* request, ::VeriBlock::BytesArrayReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void SerializeVeriBlockBlock(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::BytesArrayReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void SerializeVeriBlockTransaction(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockTransaction* request, ::VeriBlock::BytesArrayReply* response, std::function<void(::grpc::Status)>) override;
      void SerializeVeriBlockTransaction(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::BytesArrayReply* response, std::function<void(::grpc::Status)>) override;
      void SerializeVeriBlockTransaction(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockTransaction* request, ::VeriBlock::BytesArrayReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void SerializeVeriBlockTransaction(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::BytesArrayReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void SerializeVeriBlockPublication(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockPublication* request, ::VeriBlock::BytesArrayReply* response, std::function<void(::grpc::Status)>) override;
      void SerializeVeriBlockPublication(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::BytesArrayReply* response, std::function<void(::grpc::Status)>) override;
      void SerializeVeriBlockPublication(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockPublication* request, ::VeriBlock::BytesArrayReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void SerializeVeriBlockPublication(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::BytesArrayReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void SerializeVeriBlockPopTx(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockPoPTransaction* request, ::VeriBlock::BytesArrayReply* response, std::function<void(::grpc::Status)>) override;
      void SerializeVeriBlockPopTx(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::BytesArrayReply* response, std::function<void(::grpc::Status)>) override;
      void SerializeVeriBlockPopTx(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockPoPTransaction* request, ::VeriBlock::BytesArrayReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void SerializeVeriBlockPopTx(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::BytesArrayReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void SerializeOutput(::grpc::ClientContext* context, const ::VeriBlock::Output* request, ::VeriBlock::BytesArrayReply* response, std::function<void(::grpc::Status)>) override;
      void SerializeOutput(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::BytesArrayReply* response, std::function<void(::grpc::Status)>) override;
      void SerializeOutput(::grpc::ClientContext* context, const ::VeriBlock::Output* request, ::VeriBlock::BytesArrayReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void SerializeOutput(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::BytesArrayReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void SerializeAddress(::grpc::ClientContext* context, const ::VeriBlock::Address* request, ::VeriBlock::BytesArrayReply* response, std::function<void(::grpc::Status)>) override;
      void SerializeAddress(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::BytesArrayReply* response, std::function<void(::grpc::Status)>) override;
      void SerializeAddress(::grpc::ClientContext* context, const ::VeriBlock::Address* request, ::VeriBlock::BytesArrayReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void SerializeAddress(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::BytesArrayReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void SerializeBitcoinBlock(::grpc::ClientContext* context, const ::VeriBlock::BitcoinBlock* request, ::VeriBlock::BytesArrayReply* response, std::function<void(::grpc::Status)>) override;
      void SerializeBitcoinBlock(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::BytesArrayReply* response, std::function<void(::grpc::Status)>) override;
      void SerializeBitcoinBlock(::grpc::ClientContext* context, const ::VeriBlock::BitcoinBlock* request, ::VeriBlock::BytesArrayReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void SerializeBitcoinBlock(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::BytesArrayReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void SerializeVeriBlockMerklePath(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockMerklePath* request, ::VeriBlock::BytesArrayReply* response, std::function<void(::grpc::Status)>) override;
      void SerializeVeriBlockMerklePath(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::BytesArrayReply* response, std::function<void(::grpc::Status)>) override;
      void SerializeVeriBlockMerklePath(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockMerklePath* request, ::VeriBlock::BytesArrayReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void SerializeVeriBlockMerklePath(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::BytesArrayReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void SerializeMerklePath(::grpc::ClientContext* context, const ::VeriBlock::MerklePath* request, ::VeriBlock::BytesArrayReply* response, std::function<void(::grpc::Status)>) override;
      void SerializeMerklePath(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::BytesArrayReply* response, std::function<void(::grpc::Status)>) override;
      void SerializeMerklePath(::grpc::ClientContext* context, const ::VeriBlock::MerklePath* request, ::VeriBlock::BytesArrayReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void SerializeMerklePath(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::BytesArrayReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::VeriBlock::BytesArrayReply>* AsyncSerializeAltPublicationRaw(::grpc::ClientContext* context, const ::VeriBlock::AltPublication& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::VeriBlock::BytesArrayReply>* PrepareAsyncSerializeAltPublicationRaw(::grpc::ClientContext* context, const ::VeriBlock::AltPublication& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::VeriBlock::BytesArrayReply>* AsyncSerializePublicationDataRaw(::grpc::ClientContext* context, const ::VeriBlock::PublicationData& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::VeriBlock::BytesArrayReply>* PrepareAsyncSerializePublicationDataRaw(::grpc::ClientContext* context, const ::VeriBlock::PublicationData& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::VeriBlock::BytesArrayReply>* AsyncSerializeBitcoinTransactionRaw(::grpc::ClientContext* context, const ::VeriBlock::BitcoinTransaction& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::VeriBlock::BytesArrayReply>* PrepareAsyncSerializeBitcoinTransactionRaw(::grpc::ClientContext* context, const ::VeriBlock::BitcoinTransaction& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::VeriBlock::BytesArrayReply>* AsyncSerializeVeriBlockBlockRaw(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockBlock& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::VeriBlock::BytesArrayReply>* PrepareAsyncSerializeVeriBlockBlockRaw(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockBlock& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::VeriBlock::BytesArrayReply>* AsyncSerializeVeriBlockTransactionRaw(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockTransaction& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::VeriBlock::BytesArrayReply>* PrepareAsyncSerializeVeriBlockTransactionRaw(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockTransaction& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::VeriBlock::BytesArrayReply>* AsyncSerializeVeriBlockPublicationRaw(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockPublication& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::VeriBlock::BytesArrayReply>* PrepareAsyncSerializeVeriBlockPublicationRaw(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockPublication& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::VeriBlock::BytesArrayReply>* AsyncSerializeVeriBlockPopTxRaw(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockPoPTransaction& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::VeriBlock::BytesArrayReply>* PrepareAsyncSerializeVeriBlockPopTxRaw(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockPoPTransaction& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::VeriBlock::BytesArrayReply>* AsyncSerializeOutputRaw(::grpc::ClientContext* context, const ::VeriBlock::Output& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::VeriBlock::BytesArrayReply>* PrepareAsyncSerializeOutputRaw(::grpc::ClientContext* context, const ::VeriBlock::Output& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::VeriBlock::BytesArrayReply>* AsyncSerializeAddressRaw(::grpc::ClientContext* context, const ::VeriBlock::Address& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::VeriBlock::BytesArrayReply>* PrepareAsyncSerializeAddressRaw(::grpc::ClientContext* context, const ::VeriBlock::Address& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::VeriBlock::BytesArrayReply>* AsyncSerializeBitcoinBlockRaw(::grpc::ClientContext* context, const ::VeriBlock::BitcoinBlock& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::VeriBlock::BytesArrayReply>* PrepareAsyncSerializeBitcoinBlockRaw(::grpc::ClientContext* context, const ::VeriBlock::BitcoinBlock& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::VeriBlock::BytesArrayReply>* AsyncSerializeVeriBlockMerklePathRaw(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockMerklePath& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::VeriBlock::BytesArrayReply>* PrepareAsyncSerializeVeriBlockMerklePathRaw(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockMerklePath& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::VeriBlock::BytesArrayReply>* AsyncSerializeMerklePathRaw(::grpc::ClientContext* context, const ::VeriBlock::MerklePath& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::VeriBlock::BytesArrayReply>* PrepareAsyncSerializeMerklePathRaw(::grpc::ClientContext* context, const ::VeriBlock::MerklePath& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_SerializeAltPublication_;
    const ::grpc::internal::RpcMethod rpcmethod_SerializePublicationData_;
    const ::grpc::internal::RpcMethod rpcmethod_SerializeBitcoinTransaction_;
    const ::grpc::internal::RpcMethod rpcmethod_SerializeVeriBlockBlock_;
    const ::grpc::internal::RpcMethod rpcmethod_SerializeVeriBlockTransaction_;
    const ::grpc::internal::RpcMethod rpcmethod_SerializeVeriBlockPublication_;
    const ::grpc::internal::RpcMethod rpcmethod_SerializeVeriBlockPopTx_;
    const ::grpc::internal::RpcMethod rpcmethod_SerializeOutput_;
    const ::grpc::internal::RpcMethod rpcmethod_SerializeAddress_;
    const ::grpc::internal::RpcMethod rpcmethod_SerializeBitcoinBlock_;
    const ::grpc::internal::RpcMethod rpcmethod_SerializeVeriBlockMerklePath_;
    const ::grpc::internal::RpcMethod rpcmethod_SerializeMerklePath_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status SerializeAltPublication(::grpc::ServerContext* context, const ::VeriBlock::AltPublication* request, ::VeriBlock::BytesArrayReply* response);
    virtual ::grpc::Status SerializePublicationData(::grpc::ServerContext* context, const ::VeriBlock::PublicationData* request, ::VeriBlock::BytesArrayReply* response);
    virtual ::grpc::Status SerializeBitcoinTransaction(::grpc::ServerContext* context, const ::VeriBlock::BitcoinTransaction* request, ::VeriBlock::BytesArrayReply* response);
    virtual ::grpc::Status SerializeVeriBlockBlock(::grpc::ServerContext* context, const ::VeriBlock::VeriBlockBlock* request, ::VeriBlock::BytesArrayReply* response);
    virtual ::grpc::Status SerializeVeriBlockTransaction(::grpc::ServerContext* context, const ::VeriBlock::VeriBlockTransaction* request, ::VeriBlock::BytesArrayReply* response);
    virtual ::grpc::Status SerializeVeriBlockPublication(::grpc::ServerContext* context, const ::VeriBlock::VeriBlockPublication* request, ::VeriBlock::BytesArrayReply* response);
    virtual ::grpc::Status SerializeVeriBlockPopTx(::grpc::ServerContext* context, const ::VeriBlock::VeriBlockPoPTransaction* request, ::VeriBlock::BytesArrayReply* response);
    virtual ::grpc::Status SerializeOutput(::grpc::ServerContext* context, const ::VeriBlock::Output* request, ::VeriBlock::BytesArrayReply* response);
    virtual ::grpc::Status SerializeAddress(::grpc::ServerContext* context, const ::VeriBlock::Address* request, ::VeriBlock::BytesArrayReply* response);
    virtual ::grpc::Status SerializeBitcoinBlock(::grpc::ServerContext* context, const ::VeriBlock::BitcoinBlock* request, ::VeriBlock::BytesArrayReply* response);
    virtual ::grpc::Status SerializeVeriBlockMerklePath(::grpc::ServerContext* context, const ::VeriBlock::VeriBlockMerklePath* request, ::VeriBlock::BytesArrayReply* response);
    virtual ::grpc::Status SerializeMerklePath(::grpc::ServerContext* context, const ::VeriBlock::MerklePath* request, ::VeriBlock::BytesArrayReply* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_SerializeAltPublication : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_SerializeAltPublication() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_SerializeAltPublication() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SerializeAltPublication(::grpc::ServerContext* context, const ::VeriBlock::AltPublication* request, ::VeriBlock::BytesArrayReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSerializeAltPublication(::grpc::ServerContext* context, ::VeriBlock::AltPublication* request, ::grpc::ServerAsyncResponseWriter< ::VeriBlock::BytesArrayReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SerializePublicationData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_SerializePublicationData() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_SerializePublicationData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SerializePublicationData(::grpc::ServerContext* context, const ::VeriBlock::PublicationData* request, ::VeriBlock::BytesArrayReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSerializePublicationData(::grpc::ServerContext* context, ::VeriBlock::PublicationData* request, ::grpc::ServerAsyncResponseWriter< ::VeriBlock::BytesArrayReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SerializeBitcoinTransaction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_SerializeBitcoinTransaction() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_SerializeBitcoinTransaction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SerializeBitcoinTransaction(::grpc::ServerContext* context, const ::VeriBlock::BitcoinTransaction* request, ::VeriBlock::BytesArrayReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSerializeBitcoinTransaction(::grpc::ServerContext* context, ::VeriBlock::BitcoinTransaction* request, ::grpc::ServerAsyncResponseWriter< ::VeriBlock::BytesArrayReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SerializeVeriBlockBlock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_SerializeVeriBlockBlock() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_SerializeVeriBlockBlock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SerializeVeriBlockBlock(::grpc::ServerContext* context, const ::VeriBlock::VeriBlockBlock* request, ::VeriBlock::BytesArrayReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSerializeVeriBlockBlock(::grpc::ServerContext* context, ::VeriBlock::VeriBlockBlock* request, ::grpc::ServerAsyncResponseWriter< ::VeriBlock::BytesArrayReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SerializeVeriBlockTransaction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_SerializeVeriBlockTransaction() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_SerializeVeriBlockTransaction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SerializeVeriBlockTransaction(::grpc::ServerContext* context, const ::VeriBlock::VeriBlockTransaction* request, ::VeriBlock::BytesArrayReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSerializeVeriBlockTransaction(::grpc::ServerContext* context, ::VeriBlock::VeriBlockTransaction* request, ::grpc::ServerAsyncResponseWriter< ::VeriBlock::BytesArrayReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SerializeVeriBlockPublication : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_SerializeVeriBlockPublication() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_SerializeVeriBlockPublication() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SerializeVeriBlockPublication(::grpc::ServerContext* context, const ::VeriBlock::VeriBlockPublication* request, ::VeriBlock::BytesArrayReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSerializeVeriBlockPublication(::grpc::ServerContext* context, ::VeriBlock::VeriBlockPublication* request, ::grpc::ServerAsyncResponseWriter< ::VeriBlock::BytesArrayReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SerializeVeriBlockPopTx : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_SerializeVeriBlockPopTx() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_SerializeVeriBlockPopTx() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SerializeVeriBlockPopTx(::grpc::ServerContext* context, const ::VeriBlock::VeriBlockPoPTransaction* request, ::VeriBlock::BytesArrayReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSerializeVeriBlockPopTx(::grpc::ServerContext* context, ::VeriBlock::VeriBlockPoPTransaction* request, ::grpc::ServerAsyncResponseWriter< ::VeriBlock::BytesArrayReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SerializeOutput : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_SerializeOutput() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_SerializeOutput() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SerializeOutput(::grpc::ServerContext* context, const ::VeriBlock::Output* request, ::VeriBlock::BytesArrayReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSerializeOutput(::grpc::ServerContext* context, ::VeriBlock::Output* request, ::grpc::ServerAsyncResponseWriter< ::VeriBlock::BytesArrayReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SerializeAddress : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_SerializeAddress() {
      ::grpc::Service::MarkMethodAsync(8);
    }
    ~WithAsyncMethod_SerializeAddress() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SerializeAddress(::grpc::ServerContext* context, const ::VeriBlock::Address* request, ::VeriBlock::BytesArrayReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSerializeAddress(::grpc::ServerContext* context, ::VeriBlock::Address* request, ::grpc::ServerAsyncResponseWriter< ::VeriBlock::BytesArrayReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SerializeBitcoinBlock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_SerializeBitcoinBlock() {
      ::grpc::Service::MarkMethodAsync(9);
    }
    ~WithAsyncMethod_SerializeBitcoinBlock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SerializeBitcoinBlock(::grpc::ServerContext* context, const ::VeriBlock::BitcoinBlock* request, ::VeriBlock::BytesArrayReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSerializeBitcoinBlock(::grpc::ServerContext* context, ::VeriBlock::BitcoinBlock* request, ::grpc::ServerAsyncResponseWriter< ::VeriBlock::BytesArrayReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SerializeVeriBlockMerklePath : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_SerializeVeriBlockMerklePath() {
      ::grpc::Service::MarkMethodAsync(10);
    }
    ~WithAsyncMethod_SerializeVeriBlockMerklePath() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SerializeVeriBlockMerklePath(::grpc::ServerContext* context, const ::VeriBlock::VeriBlockMerklePath* request, ::VeriBlock::BytesArrayReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSerializeVeriBlockMerklePath(::grpc::ServerContext* context, ::VeriBlock::VeriBlockMerklePath* request, ::grpc::ServerAsyncResponseWriter< ::VeriBlock::BytesArrayReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SerializeMerklePath : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_SerializeMerklePath() {
      ::grpc::Service::MarkMethodAsync(11);
    }
    ~WithAsyncMethod_SerializeMerklePath() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SerializeMerklePath(::grpc::ServerContext* context, const ::VeriBlock::MerklePath* request, ::VeriBlock::BytesArrayReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSerializeMerklePath(::grpc::ServerContext* context, ::VeriBlock::MerklePath* request, ::grpc::ServerAsyncResponseWriter< ::VeriBlock::BytesArrayReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(11, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_SerializeAltPublication<WithAsyncMethod_SerializePublicationData<WithAsyncMethod_SerializeBitcoinTransaction<WithAsyncMethod_SerializeVeriBlockBlock<WithAsyncMethod_SerializeVeriBlockTransaction<WithAsyncMethod_SerializeVeriBlockPublication<WithAsyncMethod_SerializeVeriBlockPopTx<WithAsyncMethod_SerializeOutput<WithAsyncMethod_SerializeAddress<WithAsyncMethod_SerializeBitcoinBlock<WithAsyncMethod_SerializeVeriBlockMerklePath<WithAsyncMethod_SerializeMerklePath<Service > > > > > > > > > > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_SerializeAltPublication : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_SerializeAltPublication() {
      ::grpc::Service::experimental().MarkMethodCallback(0,
        new ::grpc::internal::CallbackUnaryHandler< ::VeriBlock::AltPublication, ::VeriBlock::BytesArrayReply>(
          [this](::grpc::ServerContext* context,
                 const ::VeriBlock::AltPublication* request,
                 ::VeriBlock::BytesArrayReply* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->SerializeAltPublication(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_SerializeAltPublication(
        ::grpc::experimental::MessageAllocator< ::VeriBlock::AltPublication, ::VeriBlock::BytesArrayReply>* allocator) {
      static_cast<::grpc::internal::CallbackUnaryHandler< ::VeriBlock::AltPublication, ::VeriBlock::BytesArrayReply>*>(
          ::grpc::Service::experimental().GetHandler(0))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_SerializeAltPublication() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SerializeAltPublication(::grpc::ServerContext* context, const ::VeriBlock::AltPublication* request, ::VeriBlock::BytesArrayReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void SerializeAltPublication(::grpc::ServerContext* context, const ::VeriBlock::AltPublication* request, ::VeriBlock::BytesArrayReply* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_SerializePublicationData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_SerializePublicationData() {
      ::grpc::Service::experimental().MarkMethodCallback(1,
        new ::grpc::internal::CallbackUnaryHandler< ::VeriBlock::PublicationData, ::VeriBlock::BytesArrayReply>(
          [this](::grpc::ServerContext* context,
                 const ::VeriBlock::PublicationData* request,
                 ::VeriBlock::BytesArrayReply* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->SerializePublicationData(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_SerializePublicationData(
        ::grpc::experimental::MessageAllocator< ::VeriBlock::PublicationData, ::VeriBlock::BytesArrayReply>* allocator) {
      static_cast<::grpc::internal::CallbackUnaryHandler< ::VeriBlock::PublicationData, ::VeriBlock::BytesArrayReply>*>(
          ::grpc::Service::experimental().GetHandler(1))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_SerializePublicationData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SerializePublicationData(::grpc::ServerContext* context, const ::VeriBlock::PublicationData* request, ::VeriBlock::BytesArrayReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void SerializePublicationData(::grpc::ServerContext* context, const ::VeriBlock::PublicationData* request, ::VeriBlock::BytesArrayReply* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_SerializeBitcoinTransaction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_SerializeBitcoinTransaction() {
      ::grpc::Service::experimental().MarkMethodCallback(2,
        new ::grpc::internal::CallbackUnaryHandler< ::VeriBlock::BitcoinTransaction, ::VeriBlock::BytesArrayReply>(
          [this](::grpc::ServerContext* context,
                 const ::VeriBlock::BitcoinTransaction* request,
                 ::VeriBlock::BytesArrayReply* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->SerializeBitcoinTransaction(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_SerializeBitcoinTransaction(
        ::grpc::experimental::MessageAllocator< ::VeriBlock::BitcoinTransaction, ::VeriBlock::BytesArrayReply>* allocator) {
      static_cast<::grpc::internal::CallbackUnaryHandler< ::VeriBlock::BitcoinTransaction, ::VeriBlock::BytesArrayReply>*>(
          ::grpc::Service::experimental().GetHandler(2))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_SerializeBitcoinTransaction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SerializeBitcoinTransaction(::grpc::ServerContext* context, const ::VeriBlock::BitcoinTransaction* request, ::VeriBlock::BytesArrayReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void SerializeBitcoinTransaction(::grpc::ServerContext* context, const ::VeriBlock::BitcoinTransaction* request, ::VeriBlock::BytesArrayReply* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_SerializeVeriBlockBlock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_SerializeVeriBlockBlock() {
      ::grpc::Service::experimental().MarkMethodCallback(3,
        new ::grpc::internal::CallbackUnaryHandler< ::VeriBlock::VeriBlockBlock, ::VeriBlock::BytesArrayReply>(
          [this](::grpc::ServerContext* context,
                 const ::VeriBlock::VeriBlockBlock* request,
                 ::VeriBlock::BytesArrayReply* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->SerializeVeriBlockBlock(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_SerializeVeriBlockBlock(
        ::grpc::experimental::MessageAllocator< ::VeriBlock::VeriBlockBlock, ::VeriBlock::BytesArrayReply>* allocator) {
      static_cast<::grpc::internal::CallbackUnaryHandler< ::VeriBlock::VeriBlockBlock, ::VeriBlock::BytesArrayReply>*>(
          ::grpc::Service::experimental().GetHandler(3))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_SerializeVeriBlockBlock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SerializeVeriBlockBlock(::grpc::ServerContext* context, const ::VeriBlock::VeriBlockBlock* request, ::VeriBlock::BytesArrayReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void SerializeVeriBlockBlock(::grpc::ServerContext* context, const ::VeriBlock::VeriBlockBlock* request, ::VeriBlock::BytesArrayReply* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_SerializeVeriBlockTransaction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_SerializeVeriBlockTransaction() {
      ::grpc::Service::experimental().MarkMethodCallback(4,
        new ::grpc::internal::CallbackUnaryHandler< ::VeriBlock::VeriBlockTransaction, ::VeriBlock::BytesArrayReply>(
          [this](::grpc::ServerContext* context,
                 const ::VeriBlock::VeriBlockTransaction* request,
                 ::VeriBlock::BytesArrayReply* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->SerializeVeriBlockTransaction(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_SerializeVeriBlockTransaction(
        ::grpc::experimental::MessageAllocator< ::VeriBlock::VeriBlockTransaction, ::VeriBlock::BytesArrayReply>* allocator) {
      static_cast<::grpc::internal::CallbackUnaryHandler< ::VeriBlock::VeriBlockTransaction, ::VeriBlock::BytesArrayReply>*>(
          ::grpc::Service::experimental().GetHandler(4))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_SerializeVeriBlockTransaction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SerializeVeriBlockTransaction(::grpc::ServerContext* context, const ::VeriBlock::VeriBlockTransaction* request, ::VeriBlock::BytesArrayReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void SerializeVeriBlockTransaction(::grpc::ServerContext* context, const ::VeriBlock::VeriBlockTransaction* request, ::VeriBlock::BytesArrayReply* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_SerializeVeriBlockPublication : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_SerializeVeriBlockPublication() {
      ::grpc::Service::experimental().MarkMethodCallback(5,
        new ::grpc::internal::CallbackUnaryHandler< ::VeriBlock::VeriBlockPublication, ::VeriBlock::BytesArrayReply>(
          [this](::grpc::ServerContext* context,
                 const ::VeriBlock::VeriBlockPublication* request,
                 ::VeriBlock::BytesArrayReply* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->SerializeVeriBlockPublication(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_SerializeVeriBlockPublication(
        ::grpc::experimental::MessageAllocator< ::VeriBlock::VeriBlockPublication, ::VeriBlock::BytesArrayReply>* allocator) {
      static_cast<::grpc::internal::CallbackUnaryHandler< ::VeriBlock::VeriBlockPublication, ::VeriBlock::BytesArrayReply>*>(
          ::grpc::Service::experimental().GetHandler(5))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_SerializeVeriBlockPublication() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SerializeVeriBlockPublication(::grpc::ServerContext* context, const ::VeriBlock::VeriBlockPublication* request, ::VeriBlock::BytesArrayReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void SerializeVeriBlockPublication(::grpc::ServerContext* context, const ::VeriBlock::VeriBlockPublication* request, ::VeriBlock::BytesArrayReply* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_SerializeVeriBlockPopTx : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_SerializeVeriBlockPopTx() {
      ::grpc::Service::experimental().MarkMethodCallback(6,
        new ::grpc::internal::CallbackUnaryHandler< ::VeriBlock::VeriBlockPoPTransaction, ::VeriBlock::BytesArrayReply>(
          [this](::grpc::ServerContext* context,
                 const ::VeriBlock::VeriBlockPoPTransaction* request,
                 ::VeriBlock::BytesArrayReply* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->SerializeVeriBlockPopTx(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_SerializeVeriBlockPopTx(
        ::grpc::experimental::MessageAllocator< ::VeriBlock::VeriBlockPoPTransaction, ::VeriBlock::BytesArrayReply>* allocator) {
      static_cast<::grpc::internal::CallbackUnaryHandler< ::VeriBlock::VeriBlockPoPTransaction, ::VeriBlock::BytesArrayReply>*>(
          ::grpc::Service::experimental().GetHandler(6))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_SerializeVeriBlockPopTx() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SerializeVeriBlockPopTx(::grpc::ServerContext* context, const ::VeriBlock::VeriBlockPoPTransaction* request, ::VeriBlock::BytesArrayReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void SerializeVeriBlockPopTx(::grpc::ServerContext* context, const ::VeriBlock::VeriBlockPoPTransaction* request, ::VeriBlock::BytesArrayReply* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_SerializeOutput : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_SerializeOutput() {
      ::grpc::Service::experimental().MarkMethodCallback(7,
        new ::grpc::internal::CallbackUnaryHandler< ::VeriBlock::Output, ::VeriBlock::BytesArrayReply>(
          [this](::grpc::ServerContext* context,
                 const ::VeriBlock::Output* request,
                 ::VeriBlock::BytesArrayReply* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->SerializeOutput(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_SerializeOutput(
        ::grpc::experimental::MessageAllocator< ::VeriBlock::Output, ::VeriBlock::BytesArrayReply>* allocator) {
      static_cast<::grpc::internal::CallbackUnaryHandler< ::VeriBlock::Output, ::VeriBlock::BytesArrayReply>*>(
          ::grpc::Service::experimental().GetHandler(7))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_SerializeOutput() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SerializeOutput(::grpc::ServerContext* context, const ::VeriBlock::Output* request, ::VeriBlock::BytesArrayReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void SerializeOutput(::grpc::ServerContext* context, const ::VeriBlock::Output* request, ::VeriBlock::BytesArrayReply* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_SerializeAddress : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_SerializeAddress() {
      ::grpc::Service::experimental().MarkMethodCallback(8,
        new ::grpc::internal::CallbackUnaryHandler< ::VeriBlock::Address, ::VeriBlock::BytesArrayReply>(
          [this](::grpc::ServerContext* context,
                 const ::VeriBlock::Address* request,
                 ::VeriBlock::BytesArrayReply* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->SerializeAddress(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_SerializeAddress(
        ::grpc::experimental::MessageAllocator< ::VeriBlock::Address, ::VeriBlock::BytesArrayReply>* allocator) {
      static_cast<::grpc::internal::CallbackUnaryHandler< ::VeriBlock::Address, ::VeriBlock::BytesArrayReply>*>(
          ::grpc::Service::experimental().GetHandler(8))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_SerializeAddress() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SerializeAddress(::grpc::ServerContext* context, const ::VeriBlock::Address* request, ::VeriBlock::BytesArrayReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void SerializeAddress(::grpc::ServerContext* context, const ::VeriBlock::Address* request, ::VeriBlock::BytesArrayReply* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_SerializeBitcoinBlock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_SerializeBitcoinBlock() {
      ::grpc::Service::experimental().MarkMethodCallback(9,
        new ::grpc::internal::CallbackUnaryHandler< ::VeriBlock::BitcoinBlock, ::VeriBlock::BytesArrayReply>(
          [this](::grpc::ServerContext* context,
                 const ::VeriBlock::BitcoinBlock* request,
                 ::VeriBlock::BytesArrayReply* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->SerializeBitcoinBlock(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_SerializeBitcoinBlock(
        ::grpc::experimental::MessageAllocator< ::VeriBlock::BitcoinBlock, ::VeriBlock::BytesArrayReply>* allocator) {
      static_cast<::grpc::internal::CallbackUnaryHandler< ::VeriBlock::BitcoinBlock, ::VeriBlock::BytesArrayReply>*>(
          ::grpc::Service::experimental().GetHandler(9))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_SerializeBitcoinBlock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SerializeBitcoinBlock(::grpc::ServerContext* context, const ::VeriBlock::BitcoinBlock* request, ::VeriBlock::BytesArrayReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void SerializeBitcoinBlock(::grpc::ServerContext* context, const ::VeriBlock::BitcoinBlock* request, ::VeriBlock::BytesArrayReply* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_SerializeVeriBlockMerklePath : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_SerializeVeriBlockMerklePath() {
      ::grpc::Service::experimental().MarkMethodCallback(10,
        new ::grpc::internal::CallbackUnaryHandler< ::VeriBlock::VeriBlockMerklePath, ::VeriBlock::BytesArrayReply>(
          [this](::grpc::ServerContext* context,
                 const ::VeriBlock::VeriBlockMerklePath* request,
                 ::VeriBlock::BytesArrayReply* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->SerializeVeriBlockMerklePath(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_SerializeVeriBlockMerklePath(
        ::grpc::experimental::MessageAllocator< ::VeriBlock::VeriBlockMerklePath, ::VeriBlock::BytesArrayReply>* allocator) {
      static_cast<::grpc::internal::CallbackUnaryHandler< ::VeriBlock::VeriBlockMerklePath, ::VeriBlock::BytesArrayReply>*>(
          ::grpc::Service::experimental().GetHandler(10))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_SerializeVeriBlockMerklePath() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SerializeVeriBlockMerklePath(::grpc::ServerContext* context, const ::VeriBlock::VeriBlockMerklePath* request, ::VeriBlock::BytesArrayReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void SerializeVeriBlockMerklePath(::grpc::ServerContext* context, const ::VeriBlock::VeriBlockMerklePath* request, ::VeriBlock::BytesArrayReply* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_SerializeMerklePath : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_SerializeMerklePath() {
      ::grpc::Service::experimental().MarkMethodCallback(11,
        new ::grpc::internal::CallbackUnaryHandler< ::VeriBlock::MerklePath, ::VeriBlock::BytesArrayReply>(
          [this](::grpc::ServerContext* context,
                 const ::VeriBlock::MerklePath* request,
                 ::VeriBlock::BytesArrayReply* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->SerializeMerklePath(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_SerializeMerklePath(
        ::grpc::experimental::MessageAllocator< ::VeriBlock::MerklePath, ::VeriBlock::BytesArrayReply>* allocator) {
      static_cast<::grpc::internal::CallbackUnaryHandler< ::VeriBlock::MerklePath, ::VeriBlock::BytesArrayReply>*>(
          ::grpc::Service::experimental().GetHandler(11))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_SerializeMerklePath() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SerializeMerklePath(::grpc::ServerContext* context, const ::VeriBlock::MerklePath* request, ::VeriBlock::BytesArrayReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void SerializeMerklePath(::grpc::ServerContext* context, const ::VeriBlock::MerklePath* request, ::VeriBlock::BytesArrayReply* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  typedef ExperimentalWithCallbackMethod_SerializeAltPublication<ExperimentalWithCallbackMethod_SerializePublicationData<ExperimentalWithCallbackMethod_SerializeBitcoinTransaction<ExperimentalWithCallbackMethod_SerializeVeriBlockBlock<ExperimentalWithCallbackMethod_SerializeVeriBlockTransaction<ExperimentalWithCallbackMethod_SerializeVeriBlockPublication<ExperimentalWithCallbackMethod_SerializeVeriBlockPopTx<ExperimentalWithCallbackMethod_SerializeOutput<ExperimentalWithCallbackMethod_SerializeAddress<ExperimentalWithCallbackMethod_SerializeBitcoinBlock<ExperimentalWithCallbackMethod_SerializeVeriBlockMerklePath<ExperimentalWithCallbackMethod_SerializeMerklePath<Service > > > > > > > > > > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_SerializeAltPublication : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_SerializeAltPublication() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_SerializeAltPublication() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SerializeAltPublication(::grpc::ServerContext* context, const ::VeriBlock::AltPublication* request, ::VeriBlock::BytesArrayReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SerializePublicationData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_SerializePublicationData() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_SerializePublicationData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SerializePublicationData(::grpc::ServerContext* context, const ::VeriBlock::PublicationData* request, ::VeriBlock::BytesArrayReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SerializeBitcoinTransaction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_SerializeBitcoinTransaction() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_SerializeBitcoinTransaction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SerializeBitcoinTransaction(::grpc::ServerContext* context, const ::VeriBlock::BitcoinTransaction* request, ::VeriBlock::BytesArrayReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SerializeVeriBlockBlock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_SerializeVeriBlockBlock() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_SerializeVeriBlockBlock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SerializeVeriBlockBlock(::grpc::ServerContext* context, const ::VeriBlock::VeriBlockBlock* request, ::VeriBlock::BytesArrayReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SerializeVeriBlockTransaction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_SerializeVeriBlockTransaction() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_SerializeVeriBlockTransaction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SerializeVeriBlockTransaction(::grpc::ServerContext* context, const ::VeriBlock::VeriBlockTransaction* request, ::VeriBlock::BytesArrayReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SerializeVeriBlockPublication : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_SerializeVeriBlockPublication() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_SerializeVeriBlockPublication() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SerializeVeriBlockPublication(::grpc::ServerContext* context, const ::VeriBlock::VeriBlockPublication* request, ::VeriBlock::BytesArrayReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SerializeVeriBlockPopTx : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_SerializeVeriBlockPopTx() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_SerializeVeriBlockPopTx() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SerializeVeriBlockPopTx(::grpc::ServerContext* context, const ::VeriBlock::VeriBlockPoPTransaction* request, ::VeriBlock::BytesArrayReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SerializeOutput : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_SerializeOutput() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_SerializeOutput() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SerializeOutput(::grpc::ServerContext* context, const ::VeriBlock::Output* request, ::VeriBlock::BytesArrayReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SerializeAddress : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_SerializeAddress() {
      ::grpc::Service::MarkMethodGeneric(8);
    }
    ~WithGenericMethod_SerializeAddress() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SerializeAddress(::grpc::ServerContext* context, const ::VeriBlock::Address* request, ::VeriBlock::BytesArrayReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SerializeBitcoinBlock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_SerializeBitcoinBlock() {
      ::grpc::Service::MarkMethodGeneric(9);
    }
    ~WithGenericMethod_SerializeBitcoinBlock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SerializeBitcoinBlock(::grpc::ServerContext* context, const ::VeriBlock::BitcoinBlock* request, ::VeriBlock::BytesArrayReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SerializeVeriBlockMerklePath : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_SerializeVeriBlockMerklePath() {
      ::grpc::Service::MarkMethodGeneric(10);
    }
    ~WithGenericMethod_SerializeVeriBlockMerklePath() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SerializeVeriBlockMerklePath(::grpc::ServerContext* context, const ::VeriBlock::VeriBlockMerklePath* request, ::VeriBlock::BytesArrayReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SerializeMerklePath : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_SerializeMerklePath() {
      ::grpc::Service::MarkMethodGeneric(11);
    }
    ~WithGenericMethod_SerializeMerklePath() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SerializeMerklePath(::grpc::ServerContext* context, const ::VeriBlock::MerklePath* request, ::VeriBlock::BytesArrayReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_SerializeAltPublication : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_SerializeAltPublication() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_SerializeAltPublication() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SerializeAltPublication(::grpc::ServerContext* context, const ::VeriBlock::AltPublication* request, ::VeriBlock::BytesArrayReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSerializeAltPublication(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SerializePublicationData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_SerializePublicationData() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_SerializePublicationData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SerializePublicationData(::grpc::ServerContext* context, const ::VeriBlock::PublicationData* request, ::VeriBlock::BytesArrayReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSerializePublicationData(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SerializeBitcoinTransaction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_SerializeBitcoinTransaction() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_SerializeBitcoinTransaction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SerializeBitcoinTransaction(::grpc::ServerContext* context, const ::VeriBlock::BitcoinTransaction* request, ::VeriBlock::BytesArrayReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSerializeBitcoinTransaction(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SerializeVeriBlockBlock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_SerializeVeriBlockBlock() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_SerializeVeriBlockBlock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SerializeVeriBlockBlock(::grpc::ServerContext* context, const ::VeriBlock::VeriBlockBlock* request, ::VeriBlock::BytesArrayReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSerializeVeriBlockBlock(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SerializeVeriBlockTransaction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_SerializeVeriBlockTransaction() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_SerializeVeriBlockTransaction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SerializeVeriBlockTransaction(::grpc::ServerContext* context, const ::VeriBlock::VeriBlockTransaction* request, ::VeriBlock::BytesArrayReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSerializeVeriBlockTransaction(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SerializeVeriBlockPublication : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_SerializeVeriBlockPublication() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_SerializeVeriBlockPublication() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SerializeVeriBlockPublication(::grpc::ServerContext* context, const ::VeriBlock::VeriBlockPublication* request, ::VeriBlock::BytesArrayReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSerializeVeriBlockPublication(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SerializeVeriBlockPopTx : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_SerializeVeriBlockPopTx() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_SerializeVeriBlockPopTx() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SerializeVeriBlockPopTx(::grpc::ServerContext* context, const ::VeriBlock::VeriBlockPoPTransaction* request, ::VeriBlock::BytesArrayReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSerializeVeriBlockPopTx(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SerializeOutput : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_SerializeOutput() {
      ::grpc::Service::MarkMethodRaw(7);
    }
    ~WithRawMethod_SerializeOutput() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SerializeOutput(::grpc::ServerContext* context, const ::VeriBlock::Output* request, ::VeriBlock::BytesArrayReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSerializeOutput(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SerializeAddress : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_SerializeAddress() {
      ::grpc::Service::MarkMethodRaw(8);
    }
    ~WithRawMethod_SerializeAddress() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SerializeAddress(::grpc::ServerContext* context, const ::VeriBlock::Address* request, ::VeriBlock::BytesArrayReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSerializeAddress(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SerializeBitcoinBlock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_SerializeBitcoinBlock() {
      ::grpc::Service::MarkMethodRaw(9);
    }
    ~WithRawMethod_SerializeBitcoinBlock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SerializeBitcoinBlock(::grpc::ServerContext* context, const ::VeriBlock::BitcoinBlock* request, ::VeriBlock::BytesArrayReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSerializeBitcoinBlock(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SerializeVeriBlockMerklePath : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_SerializeVeriBlockMerklePath() {
      ::grpc::Service::MarkMethodRaw(10);
    }
    ~WithRawMethod_SerializeVeriBlockMerklePath() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SerializeVeriBlockMerklePath(::grpc::ServerContext* context, const ::VeriBlock::VeriBlockMerklePath* request, ::VeriBlock::BytesArrayReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSerializeVeriBlockMerklePath(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SerializeMerklePath : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_SerializeMerklePath() {
      ::grpc::Service::MarkMethodRaw(11);
    }
    ~WithRawMethod_SerializeMerklePath() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SerializeMerklePath(::grpc::ServerContext* context, const ::VeriBlock::MerklePath* request, ::VeriBlock::BytesArrayReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSerializeMerklePath(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(11, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_SerializeAltPublication : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_SerializeAltPublication() {
      ::grpc::Service::experimental().MarkMethodRawCallback(0,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->SerializeAltPublication(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_SerializeAltPublication() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SerializeAltPublication(::grpc::ServerContext* context, const ::VeriBlock::AltPublication* request, ::VeriBlock::BytesArrayReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void SerializeAltPublication(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_SerializePublicationData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_SerializePublicationData() {
      ::grpc::Service::experimental().MarkMethodRawCallback(1,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->SerializePublicationData(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_SerializePublicationData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SerializePublicationData(::grpc::ServerContext* context, const ::VeriBlock::PublicationData* request, ::VeriBlock::BytesArrayReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void SerializePublicationData(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_SerializeBitcoinTransaction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_SerializeBitcoinTransaction() {
      ::grpc::Service::experimental().MarkMethodRawCallback(2,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->SerializeBitcoinTransaction(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_SerializeBitcoinTransaction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SerializeBitcoinTransaction(::grpc::ServerContext* context, const ::VeriBlock::BitcoinTransaction* request, ::VeriBlock::BytesArrayReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void SerializeBitcoinTransaction(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_SerializeVeriBlockBlock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_SerializeVeriBlockBlock() {
      ::grpc::Service::experimental().MarkMethodRawCallback(3,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->SerializeVeriBlockBlock(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_SerializeVeriBlockBlock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SerializeVeriBlockBlock(::grpc::ServerContext* context, const ::VeriBlock::VeriBlockBlock* request, ::VeriBlock::BytesArrayReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void SerializeVeriBlockBlock(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_SerializeVeriBlockTransaction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_SerializeVeriBlockTransaction() {
      ::grpc::Service::experimental().MarkMethodRawCallback(4,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->SerializeVeriBlockTransaction(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_SerializeVeriBlockTransaction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SerializeVeriBlockTransaction(::grpc::ServerContext* context, const ::VeriBlock::VeriBlockTransaction* request, ::VeriBlock::BytesArrayReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void SerializeVeriBlockTransaction(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_SerializeVeriBlockPublication : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_SerializeVeriBlockPublication() {
      ::grpc::Service::experimental().MarkMethodRawCallback(5,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->SerializeVeriBlockPublication(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_SerializeVeriBlockPublication() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SerializeVeriBlockPublication(::grpc::ServerContext* context, const ::VeriBlock::VeriBlockPublication* request, ::VeriBlock::BytesArrayReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void SerializeVeriBlockPublication(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_SerializeVeriBlockPopTx : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_SerializeVeriBlockPopTx() {
      ::grpc::Service::experimental().MarkMethodRawCallback(6,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->SerializeVeriBlockPopTx(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_SerializeVeriBlockPopTx() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SerializeVeriBlockPopTx(::grpc::ServerContext* context, const ::VeriBlock::VeriBlockPoPTransaction* request, ::VeriBlock::BytesArrayReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void SerializeVeriBlockPopTx(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_SerializeOutput : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_SerializeOutput() {
      ::grpc::Service::experimental().MarkMethodRawCallback(7,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->SerializeOutput(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_SerializeOutput() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SerializeOutput(::grpc::ServerContext* context, const ::VeriBlock::Output* request, ::VeriBlock::BytesArrayReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void SerializeOutput(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_SerializeAddress : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_SerializeAddress() {
      ::grpc::Service::experimental().MarkMethodRawCallback(8,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->SerializeAddress(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_SerializeAddress() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SerializeAddress(::grpc::ServerContext* context, const ::VeriBlock::Address* request, ::VeriBlock::BytesArrayReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void SerializeAddress(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_SerializeBitcoinBlock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_SerializeBitcoinBlock() {
      ::grpc::Service::experimental().MarkMethodRawCallback(9,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->SerializeBitcoinBlock(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_SerializeBitcoinBlock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SerializeBitcoinBlock(::grpc::ServerContext* context, const ::VeriBlock::BitcoinBlock* request, ::VeriBlock::BytesArrayReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void SerializeBitcoinBlock(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_SerializeVeriBlockMerklePath : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_SerializeVeriBlockMerklePath() {
      ::grpc::Service::experimental().MarkMethodRawCallback(10,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->SerializeVeriBlockMerklePath(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_SerializeVeriBlockMerklePath() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SerializeVeriBlockMerklePath(::grpc::ServerContext* context, const ::VeriBlock::VeriBlockMerklePath* request, ::VeriBlock::BytesArrayReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void SerializeVeriBlockMerklePath(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_SerializeMerklePath : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_SerializeMerklePath() {
      ::grpc::Service::experimental().MarkMethodRawCallback(11,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->SerializeMerklePath(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_SerializeMerklePath() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SerializeMerklePath(::grpc::ServerContext* context, const ::VeriBlock::MerklePath* request, ::VeriBlock::BytesArrayReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void SerializeMerklePath(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SerializeAltPublication : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_SerializeAltPublication() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::VeriBlock::AltPublication, ::VeriBlock::BytesArrayReply>(std::bind(&WithStreamedUnaryMethod_SerializeAltPublication<BaseClass>::StreamedSerializeAltPublication, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_SerializeAltPublication() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SerializeAltPublication(::grpc::ServerContext* context, const ::VeriBlock::AltPublication* request, ::VeriBlock::BytesArrayReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSerializeAltPublication(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::VeriBlock::AltPublication,::VeriBlock::BytesArrayReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SerializePublicationData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_SerializePublicationData() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::VeriBlock::PublicationData, ::VeriBlock::BytesArrayReply>(std::bind(&WithStreamedUnaryMethod_SerializePublicationData<BaseClass>::StreamedSerializePublicationData, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_SerializePublicationData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SerializePublicationData(::grpc::ServerContext* context, const ::VeriBlock::PublicationData* request, ::VeriBlock::BytesArrayReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSerializePublicationData(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::VeriBlock::PublicationData,::VeriBlock::BytesArrayReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SerializeBitcoinTransaction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_SerializeBitcoinTransaction() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler< ::VeriBlock::BitcoinTransaction, ::VeriBlock::BytesArrayReply>(std::bind(&WithStreamedUnaryMethod_SerializeBitcoinTransaction<BaseClass>::StreamedSerializeBitcoinTransaction, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_SerializeBitcoinTransaction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SerializeBitcoinTransaction(::grpc::ServerContext* context, const ::VeriBlock::BitcoinTransaction* request, ::VeriBlock::BytesArrayReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSerializeBitcoinTransaction(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::VeriBlock::BitcoinTransaction,::VeriBlock::BytesArrayReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SerializeVeriBlockBlock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_SerializeVeriBlockBlock() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler< ::VeriBlock::VeriBlockBlock, ::VeriBlock::BytesArrayReply>(std::bind(&WithStreamedUnaryMethod_SerializeVeriBlockBlock<BaseClass>::StreamedSerializeVeriBlockBlock, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_SerializeVeriBlockBlock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SerializeVeriBlockBlock(::grpc::ServerContext* context, const ::VeriBlock::VeriBlockBlock* request, ::VeriBlock::BytesArrayReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSerializeVeriBlockBlock(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::VeriBlock::VeriBlockBlock,::VeriBlock::BytesArrayReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SerializeVeriBlockTransaction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_SerializeVeriBlockTransaction() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler< ::VeriBlock::VeriBlockTransaction, ::VeriBlock::BytesArrayReply>(std::bind(&WithStreamedUnaryMethod_SerializeVeriBlockTransaction<BaseClass>::StreamedSerializeVeriBlockTransaction, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_SerializeVeriBlockTransaction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SerializeVeriBlockTransaction(::grpc::ServerContext* context, const ::VeriBlock::VeriBlockTransaction* request, ::VeriBlock::BytesArrayReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSerializeVeriBlockTransaction(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::VeriBlock::VeriBlockTransaction,::VeriBlock::BytesArrayReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SerializeVeriBlockPublication : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_SerializeVeriBlockPublication() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler< ::VeriBlock::VeriBlockPublication, ::VeriBlock::BytesArrayReply>(std::bind(&WithStreamedUnaryMethod_SerializeVeriBlockPublication<BaseClass>::StreamedSerializeVeriBlockPublication, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_SerializeVeriBlockPublication() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SerializeVeriBlockPublication(::grpc::ServerContext* context, const ::VeriBlock::VeriBlockPublication* request, ::VeriBlock::BytesArrayReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSerializeVeriBlockPublication(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::VeriBlock::VeriBlockPublication,::VeriBlock::BytesArrayReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SerializeVeriBlockPopTx : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_SerializeVeriBlockPopTx() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler< ::VeriBlock::VeriBlockPoPTransaction, ::VeriBlock::BytesArrayReply>(std::bind(&WithStreamedUnaryMethod_SerializeVeriBlockPopTx<BaseClass>::StreamedSerializeVeriBlockPopTx, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_SerializeVeriBlockPopTx() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SerializeVeriBlockPopTx(::grpc::ServerContext* context, const ::VeriBlock::VeriBlockPoPTransaction* request, ::VeriBlock::BytesArrayReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSerializeVeriBlockPopTx(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::VeriBlock::VeriBlockPoPTransaction,::VeriBlock::BytesArrayReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SerializeOutput : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_SerializeOutput() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::internal::StreamedUnaryHandler< ::VeriBlock::Output, ::VeriBlock::BytesArrayReply>(std::bind(&WithStreamedUnaryMethod_SerializeOutput<BaseClass>::StreamedSerializeOutput, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_SerializeOutput() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SerializeOutput(::grpc::ServerContext* context, const ::VeriBlock::Output* request, ::VeriBlock::BytesArrayReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSerializeOutput(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::VeriBlock::Output,::VeriBlock::BytesArrayReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SerializeAddress : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_SerializeAddress() {
      ::grpc::Service::MarkMethodStreamed(8,
        new ::grpc::internal::StreamedUnaryHandler< ::VeriBlock::Address, ::VeriBlock::BytesArrayReply>(std::bind(&WithStreamedUnaryMethod_SerializeAddress<BaseClass>::StreamedSerializeAddress, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_SerializeAddress() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SerializeAddress(::grpc::ServerContext* context, const ::VeriBlock::Address* request, ::VeriBlock::BytesArrayReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSerializeAddress(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::VeriBlock::Address,::VeriBlock::BytesArrayReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SerializeBitcoinBlock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_SerializeBitcoinBlock() {
      ::grpc::Service::MarkMethodStreamed(9,
        new ::grpc::internal::StreamedUnaryHandler< ::VeriBlock::BitcoinBlock, ::VeriBlock::BytesArrayReply>(std::bind(&WithStreamedUnaryMethod_SerializeBitcoinBlock<BaseClass>::StreamedSerializeBitcoinBlock, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_SerializeBitcoinBlock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SerializeBitcoinBlock(::grpc::ServerContext* context, const ::VeriBlock::BitcoinBlock* request, ::VeriBlock::BytesArrayReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSerializeBitcoinBlock(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::VeriBlock::BitcoinBlock,::VeriBlock::BytesArrayReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SerializeVeriBlockMerklePath : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_SerializeVeriBlockMerklePath() {
      ::grpc::Service::MarkMethodStreamed(10,
        new ::grpc::internal::StreamedUnaryHandler< ::VeriBlock::VeriBlockMerklePath, ::VeriBlock::BytesArrayReply>(std::bind(&WithStreamedUnaryMethod_SerializeVeriBlockMerklePath<BaseClass>::StreamedSerializeVeriBlockMerklePath, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_SerializeVeriBlockMerklePath() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SerializeVeriBlockMerklePath(::grpc::ServerContext* context, const ::VeriBlock::VeriBlockMerklePath* request, ::VeriBlock::BytesArrayReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSerializeVeriBlockMerklePath(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::VeriBlock::VeriBlockMerklePath,::VeriBlock::BytesArrayReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SerializeMerklePath : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_SerializeMerklePath() {
      ::grpc::Service::MarkMethodStreamed(11,
        new ::grpc::internal::StreamedUnaryHandler< ::VeriBlock::MerklePath, ::VeriBlock::BytesArrayReply>(std::bind(&WithStreamedUnaryMethod_SerializeMerklePath<BaseClass>::StreamedSerializeMerklePath, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_SerializeMerklePath() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SerializeMerklePath(::grpc::ServerContext* context, const ::VeriBlock::MerklePath* request, ::VeriBlock::BytesArrayReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSerializeMerklePath(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::VeriBlock::MerklePath,::VeriBlock::BytesArrayReply>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_SerializeAltPublication<WithStreamedUnaryMethod_SerializePublicationData<WithStreamedUnaryMethod_SerializeBitcoinTransaction<WithStreamedUnaryMethod_SerializeVeriBlockBlock<WithStreamedUnaryMethod_SerializeVeriBlockTransaction<WithStreamedUnaryMethod_SerializeVeriBlockPublication<WithStreamedUnaryMethod_SerializeVeriBlockPopTx<WithStreamedUnaryMethod_SerializeOutput<WithStreamedUnaryMethod_SerializeAddress<WithStreamedUnaryMethod_SerializeBitcoinBlock<WithStreamedUnaryMethod_SerializeVeriBlockMerklePath<WithStreamedUnaryMethod_SerializeMerklePath<Service > > > > > > > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_SerializeAltPublication<WithStreamedUnaryMethod_SerializePublicationData<WithStreamedUnaryMethod_SerializeBitcoinTransaction<WithStreamedUnaryMethod_SerializeVeriBlockBlock<WithStreamedUnaryMethod_SerializeVeriBlockTransaction<WithStreamedUnaryMethod_SerializeVeriBlockPublication<WithStreamedUnaryMethod_SerializeVeriBlockPopTx<WithStreamedUnaryMethod_SerializeOutput<WithStreamedUnaryMethod_SerializeAddress<WithStreamedUnaryMethod_SerializeBitcoinBlock<WithStreamedUnaryMethod_SerializeVeriBlockMerklePath<WithStreamedUnaryMethod_SerializeMerklePath<Service > > > > > > > > > > > > StreamedService;
};

class ValidationService final {
 public:
  static constexpr char const* service_full_name() {
    return "VeriBlock.ValidationService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status VerifyVeriBlockPoPTx(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockPoPTransaction& request, ::VeriBlock::GeneralReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::GeneralReply>> AsyncVerifyVeriBlockPoPTx(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockPoPTransaction& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::GeneralReply>>(AsyncVerifyVeriBlockPoPTxRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::GeneralReply>> PrepareAsyncVerifyVeriBlockPoPTx(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockPoPTransaction& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::GeneralReply>>(PrepareAsyncVerifyVeriBlockPoPTxRaw(context, request, cq));
    }
    virtual ::grpc::Status CheckSignatureVeriBlockPoPTx(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockPoPTransaction& request, ::VeriBlock::GeneralReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::GeneralReply>> AsyncCheckSignatureVeriBlockPoPTx(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockPoPTransaction& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::GeneralReply>>(AsyncCheckSignatureVeriBlockPoPTxRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::GeneralReply>> PrepareAsyncCheckSignatureVeriBlockPoPTx(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockPoPTransaction& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::GeneralReply>>(PrepareAsyncCheckSignatureVeriBlockPoPTxRaw(context, request, cq));
    }
    virtual ::grpc::Status CheckBitcoinTransactionForPoPData(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockPoPTransaction& request, ::VeriBlock::GeneralReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::GeneralReply>> AsyncCheckBitcoinTransactionForPoPData(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockPoPTransaction& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::GeneralReply>>(AsyncCheckBitcoinTransactionForPoPDataRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::GeneralReply>> PrepareAsyncCheckBitcoinTransactionForPoPData(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockPoPTransaction& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::GeneralReply>>(PrepareAsyncCheckBitcoinTransactionForPoPDataRaw(context, request, cq));
    }
    virtual ::grpc::Status CheckBitcoinMerklePathVeriBlockPoPTx(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockPoPTransaction& request, ::VeriBlock::GeneralReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::GeneralReply>> AsyncCheckBitcoinMerklePathVeriBlockPoPTx(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockPoPTransaction& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::GeneralReply>>(AsyncCheckBitcoinMerklePathVeriBlockPoPTxRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::GeneralReply>> PrepareAsyncCheckBitcoinMerklePathVeriBlockPoPTx(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockPoPTransaction& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::GeneralReply>>(PrepareAsyncCheckBitcoinMerklePathVeriBlockPoPTxRaw(context, request, cq));
    }
    virtual ::grpc::Status CheckBitcoinBlocksVeriBlockPoPTx(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockPoPTransaction& request, ::VeriBlock::GeneralReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::GeneralReply>> AsyncCheckBitcoinBlocksVeriBlockPoPTx(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockPoPTransaction& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::GeneralReply>>(AsyncCheckBitcoinBlocksVeriBlockPoPTxRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::GeneralReply>> PrepareAsyncCheckBitcoinBlocksVeriBlockPoPTx(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockPoPTransaction& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::GeneralReply>>(PrepareAsyncCheckBitcoinBlocksVeriBlockPoPTxRaw(context, request, cq));
    }
    virtual ::grpc::Status VerifyVeriBlockPublication(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockPublication& request, ::VeriBlock::GeneralReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::GeneralReply>> AsyncVerifyVeriBlockPublication(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockPublication& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::GeneralReply>>(AsyncVerifyVeriBlockPublicationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::GeneralReply>> PrepareAsyncVerifyVeriBlockPublication(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockPublication& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::GeneralReply>>(PrepareAsyncVerifyVeriBlockPublicationRaw(context, request, cq));
    }
    virtual ::grpc::Status CheckBlocksVeriBlockPublication(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockPublication& request, ::VeriBlock::GeneralReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::GeneralReply>> AsyncCheckBlocksVeriBlockPublication(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockPublication& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::GeneralReply>>(AsyncCheckBlocksVeriBlockPublicationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::GeneralReply>> PrepareAsyncCheckBlocksVeriBlockPublication(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockPublication& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::GeneralReply>>(PrepareAsyncCheckBlocksVeriBlockPublicationRaw(context, request, cq));
    }
    virtual ::grpc::Status CheckMerklePathVeriBlockPublication(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockPublication& request, ::VeriBlock::GeneralReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::GeneralReply>> AsyncCheckMerklePathVeriBlockPublication(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockPublication& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::GeneralReply>>(AsyncCheckMerklePathVeriBlockPublicationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::GeneralReply>> PrepareAsyncCheckMerklePathVeriBlockPublication(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockPublication& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::GeneralReply>>(PrepareAsyncCheckMerklePathVeriBlockPublicationRaw(context, request, cq));
    }
    virtual ::grpc::Status VerifyVeriBlockTransaction(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockTransaction& request, ::VeriBlock::GeneralReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::GeneralReply>> AsyncVerifyVeriBlockTransaction(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockTransaction& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::GeneralReply>>(AsyncVerifyVeriBlockTransactionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::GeneralReply>> PrepareAsyncVerifyVeriBlockTransaction(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockTransaction& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::GeneralReply>>(PrepareAsyncVerifyVeriBlockTransactionRaw(context, request, cq));
    }
    virtual ::grpc::Status CheckSignatureVeriBlockTransaction(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockTransaction& request, ::VeriBlock::GeneralReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::GeneralReply>> AsyncCheckSignatureVeriBlockTransaction(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockTransaction& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::GeneralReply>>(AsyncCheckSignatureVeriBlockTransactionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::GeneralReply>> PrepareAsyncCheckSignatureVeriBlockTransaction(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockTransaction& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::GeneralReply>>(PrepareAsyncCheckSignatureVeriBlockTransactionRaw(context, request, cq));
    }
    virtual ::grpc::Status VerifyVeriBlockBlock(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockBlock& request, ::VeriBlock::GeneralReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::GeneralReply>> AsyncVerifyVeriBlockBlock(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockBlock& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::GeneralReply>>(AsyncVerifyVeriBlockBlockRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::GeneralReply>> PrepareAsyncVerifyVeriBlockBlock(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockBlock& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::GeneralReply>>(PrepareAsyncVerifyVeriBlockBlockRaw(context, request, cq));
    }
    virtual ::grpc::Status CheckProofOfWorkVeriBlockBlock(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockBlock& request, ::VeriBlock::GeneralReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::GeneralReply>> AsyncCheckProofOfWorkVeriBlockBlock(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockBlock& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::GeneralReply>>(AsyncCheckProofOfWorkVeriBlockBlockRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::GeneralReply>> PrepareAsyncCheckProofOfWorkVeriBlockBlock(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockBlock& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::GeneralReply>>(PrepareAsyncCheckProofOfWorkVeriBlockBlockRaw(context, request, cq));
    }
    virtual ::grpc::Status CheckMaximumDriftVeriBlockBlock(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockBlock& request, ::VeriBlock::GeneralReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::GeneralReply>> AsyncCheckMaximumDriftVeriBlockBlock(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockBlock& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::GeneralReply>>(AsyncCheckMaximumDriftVeriBlockBlockRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::GeneralReply>> PrepareAsyncCheckMaximumDriftVeriBlockBlock(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockBlock& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::GeneralReply>>(PrepareAsyncCheckMaximumDriftVeriBlockBlockRaw(context, request, cq));
    }
    virtual ::grpc::Status VerifyBitcoinBlock(::grpc::ClientContext* context, const ::VeriBlock::BitcoinBlock& request, ::VeriBlock::GeneralReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::GeneralReply>> AsyncVerifyBitcoinBlock(::grpc::ClientContext* context, const ::VeriBlock::BitcoinBlock& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::GeneralReply>>(AsyncVerifyBitcoinBlockRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::GeneralReply>> PrepareAsyncVerifyBitcoinBlock(::grpc::ClientContext* context, const ::VeriBlock::BitcoinBlock& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::GeneralReply>>(PrepareAsyncVerifyBitcoinBlockRaw(context, request, cq));
    }
    virtual ::grpc::Status CheckProofOfWorkBitcoinBlock(::grpc::ClientContext* context, const ::VeriBlock::BitcoinBlock& request, ::VeriBlock::GeneralReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::GeneralReply>> AsyncCheckProofOfWorkBitcoinBlock(::grpc::ClientContext* context, const ::VeriBlock::BitcoinBlock& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::GeneralReply>>(AsyncCheckProofOfWorkBitcoinBlockRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::GeneralReply>> PrepareAsyncCheckProofOfWorkBitcoinBlock(::grpc::ClientContext* context, const ::VeriBlock::BitcoinBlock& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::GeneralReply>>(PrepareAsyncCheckProofOfWorkBitcoinBlockRaw(context, request, cq));
    }
    virtual ::grpc::Status CheckMaximumDriftBitcoinBlock(::grpc::ClientContext* context, const ::VeriBlock::BitcoinBlock& request, ::VeriBlock::GeneralReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::GeneralReply>> AsyncCheckMaximumDriftBitcoinBlock(::grpc::ClientContext* context, const ::VeriBlock::BitcoinBlock& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::GeneralReply>>(AsyncCheckMaximumDriftBitcoinBlockRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::GeneralReply>> PrepareAsyncCheckMaximumDriftBitcoinBlock(::grpc::ClientContext* context, const ::VeriBlock::BitcoinBlock& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::GeneralReply>>(PrepareAsyncCheckMaximumDriftBitcoinBlockRaw(context, request, cq));
    }
    virtual ::grpc::Status VerifyAltPublication(::grpc::ClientContext* context, const ::VeriBlock::AltPublication& request, ::VeriBlock::GeneralReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::GeneralReply>> AsyncVerifyAltPublication(::grpc::ClientContext* context, const ::VeriBlock::AltPublication& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::GeneralReply>>(AsyncVerifyAltPublicationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::GeneralReply>> PrepareAsyncVerifyAltPublication(::grpc::ClientContext* context, const ::VeriBlock::AltPublication& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::GeneralReply>>(PrepareAsyncVerifyAltPublicationRaw(context, request, cq));
    }
    virtual ::grpc::Status CheckMerklePathAltPublication(::grpc::ClientContext* context, const ::VeriBlock::AltPublication& request, ::VeriBlock::GeneralReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::GeneralReply>> AsyncCheckMerklePathAltPublication(::grpc::ClientContext* context, const ::VeriBlock::AltPublication& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::GeneralReply>>(AsyncCheckMerklePathAltPublicationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::GeneralReply>> PrepareAsyncCheckMerklePathAltPublication(::grpc::ClientContext* context, const ::VeriBlock::AltPublication& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::GeneralReply>>(PrepareAsyncCheckMerklePathAltPublicationRaw(context, request, cq));
    }
    virtual ::grpc::Status CheckBlocksAltPublication(::grpc::ClientContext* context, const ::VeriBlock::AltPublication& request, ::VeriBlock::GeneralReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::GeneralReply>> AsyncCheckBlocksAltPublication(::grpc::ClientContext* context, const ::VeriBlock::AltPublication& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::GeneralReply>>(AsyncCheckBlocksAltPublicationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::GeneralReply>> PrepareAsyncCheckBlocksAltPublication(::grpc::ClientContext* context, const ::VeriBlock::AltPublication& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::GeneralReply>>(PrepareAsyncCheckBlocksAltPublicationRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      virtual void VerifyVeriBlockPoPTx(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockPoPTransaction* request, ::VeriBlock::GeneralReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void VerifyVeriBlockPoPTx(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::GeneralReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void VerifyVeriBlockPoPTx(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockPoPTransaction* request, ::VeriBlock::GeneralReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void VerifyVeriBlockPoPTx(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::GeneralReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void CheckSignatureVeriBlockPoPTx(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockPoPTransaction* request, ::VeriBlock::GeneralReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CheckSignatureVeriBlockPoPTx(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::GeneralReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CheckSignatureVeriBlockPoPTx(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockPoPTransaction* request, ::VeriBlock::GeneralReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void CheckSignatureVeriBlockPoPTx(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::GeneralReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void CheckBitcoinTransactionForPoPData(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockPoPTransaction* request, ::VeriBlock::GeneralReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CheckBitcoinTransactionForPoPData(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::GeneralReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CheckBitcoinTransactionForPoPData(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockPoPTransaction* request, ::VeriBlock::GeneralReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void CheckBitcoinTransactionForPoPData(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::GeneralReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void CheckBitcoinMerklePathVeriBlockPoPTx(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockPoPTransaction* request, ::VeriBlock::GeneralReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CheckBitcoinMerklePathVeriBlockPoPTx(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::GeneralReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CheckBitcoinMerklePathVeriBlockPoPTx(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockPoPTransaction* request, ::VeriBlock::GeneralReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void CheckBitcoinMerklePathVeriBlockPoPTx(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::GeneralReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void CheckBitcoinBlocksVeriBlockPoPTx(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockPoPTransaction* request, ::VeriBlock::GeneralReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CheckBitcoinBlocksVeriBlockPoPTx(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::GeneralReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CheckBitcoinBlocksVeriBlockPoPTx(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockPoPTransaction* request, ::VeriBlock::GeneralReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void CheckBitcoinBlocksVeriBlockPoPTx(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::GeneralReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void VerifyVeriBlockPublication(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockPublication* request, ::VeriBlock::GeneralReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void VerifyVeriBlockPublication(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::GeneralReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void VerifyVeriBlockPublication(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockPublication* request, ::VeriBlock::GeneralReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void VerifyVeriBlockPublication(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::GeneralReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void CheckBlocksVeriBlockPublication(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockPublication* request, ::VeriBlock::GeneralReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CheckBlocksVeriBlockPublication(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::GeneralReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CheckBlocksVeriBlockPublication(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockPublication* request, ::VeriBlock::GeneralReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void CheckBlocksVeriBlockPublication(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::GeneralReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void CheckMerklePathVeriBlockPublication(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockPublication* request, ::VeriBlock::GeneralReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CheckMerklePathVeriBlockPublication(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::GeneralReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CheckMerklePathVeriBlockPublication(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockPublication* request, ::VeriBlock::GeneralReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void CheckMerklePathVeriBlockPublication(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::GeneralReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void VerifyVeriBlockTransaction(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockTransaction* request, ::VeriBlock::GeneralReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void VerifyVeriBlockTransaction(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::GeneralReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void VerifyVeriBlockTransaction(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockTransaction* request, ::VeriBlock::GeneralReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void VerifyVeriBlockTransaction(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::GeneralReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void CheckSignatureVeriBlockTransaction(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockTransaction* request, ::VeriBlock::GeneralReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CheckSignatureVeriBlockTransaction(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::GeneralReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CheckSignatureVeriBlockTransaction(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockTransaction* request, ::VeriBlock::GeneralReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void CheckSignatureVeriBlockTransaction(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::GeneralReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void VerifyVeriBlockBlock(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockBlock* request, ::VeriBlock::GeneralReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void VerifyVeriBlockBlock(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::GeneralReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void VerifyVeriBlockBlock(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockBlock* request, ::VeriBlock::GeneralReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void VerifyVeriBlockBlock(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::GeneralReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void CheckProofOfWorkVeriBlockBlock(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockBlock* request, ::VeriBlock::GeneralReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CheckProofOfWorkVeriBlockBlock(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::GeneralReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CheckProofOfWorkVeriBlockBlock(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockBlock* request, ::VeriBlock::GeneralReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void CheckProofOfWorkVeriBlockBlock(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::GeneralReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void CheckMaximumDriftVeriBlockBlock(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockBlock* request, ::VeriBlock::GeneralReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CheckMaximumDriftVeriBlockBlock(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::GeneralReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CheckMaximumDriftVeriBlockBlock(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockBlock* request, ::VeriBlock::GeneralReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void CheckMaximumDriftVeriBlockBlock(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::GeneralReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void VerifyBitcoinBlock(::grpc::ClientContext* context, const ::VeriBlock::BitcoinBlock* request, ::VeriBlock::GeneralReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void VerifyBitcoinBlock(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::GeneralReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void VerifyBitcoinBlock(::grpc::ClientContext* context, const ::VeriBlock::BitcoinBlock* request, ::VeriBlock::GeneralReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void VerifyBitcoinBlock(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::GeneralReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void CheckProofOfWorkBitcoinBlock(::grpc::ClientContext* context, const ::VeriBlock::BitcoinBlock* request, ::VeriBlock::GeneralReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CheckProofOfWorkBitcoinBlock(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::GeneralReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CheckProofOfWorkBitcoinBlock(::grpc::ClientContext* context, const ::VeriBlock::BitcoinBlock* request, ::VeriBlock::GeneralReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void CheckProofOfWorkBitcoinBlock(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::GeneralReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void CheckMaximumDriftBitcoinBlock(::grpc::ClientContext* context, const ::VeriBlock::BitcoinBlock* request, ::VeriBlock::GeneralReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CheckMaximumDriftBitcoinBlock(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::GeneralReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CheckMaximumDriftBitcoinBlock(::grpc::ClientContext* context, const ::VeriBlock::BitcoinBlock* request, ::VeriBlock::GeneralReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void CheckMaximumDriftBitcoinBlock(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::GeneralReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void VerifyAltPublication(::grpc::ClientContext* context, const ::VeriBlock::AltPublication* request, ::VeriBlock::GeneralReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void VerifyAltPublication(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::GeneralReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void VerifyAltPublication(::grpc::ClientContext* context, const ::VeriBlock::AltPublication* request, ::VeriBlock::GeneralReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void VerifyAltPublication(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::GeneralReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void CheckMerklePathAltPublication(::grpc::ClientContext* context, const ::VeriBlock::AltPublication* request, ::VeriBlock::GeneralReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CheckMerklePathAltPublication(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::GeneralReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CheckMerklePathAltPublication(::grpc::ClientContext* context, const ::VeriBlock::AltPublication* request, ::VeriBlock::GeneralReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void CheckMerklePathAltPublication(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::GeneralReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void CheckBlocksAltPublication(::grpc::ClientContext* context, const ::VeriBlock::AltPublication* request, ::VeriBlock::GeneralReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CheckBlocksAltPublication(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::GeneralReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CheckBlocksAltPublication(::grpc::ClientContext* context, const ::VeriBlock::AltPublication* request, ::VeriBlock::GeneralReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void CheckBlocksAltPublication(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::GeneralReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
    };
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::GeneralReply>* AsyncVerifyVeriBlockPoPTxRaw(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockPoPTransaction& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::GeneralReply>* PrepareAsyncVerifyVeriBlockPoPTxRaw(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockPoPTransaction& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::GeneralReply>* AsyncCheckSignatureVeriBlockPoPTxRaw(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockPoPTransaction& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::GeneralReply>* PrepareAsyncCheckSignatureVeriBlockPoPTxRaw(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockPoPTransaction& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::GeneralReply>* AsyncCheckBitcoinTransactionForPoPDataRaw(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockPoPTransaction& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::GeneralReply>* PrepareAsyncCheckBitcoinTransactionForPoPDataRaw(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockPoPTransaction& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::GeneralReply>* AsyncCheckBitcoinMerklePathVeriBlockPoPTxRaw(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockPoPTransaction& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::GeneralReply>* PrepareAsyncCheckBitcoinMerklePathVeriBlockPoPTxRaw(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockPoPTransaction& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::GeneralReply>* AsyncCheckBitcoinBlocksVeriBlockPoPTxRaw(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockPoPTransaction& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::GeneralReply>* PrepareAsyncCheckBitcoinBlocksVeriBlockPoPTxRaw(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockPoPTransaction& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::GeneralReply>* AsyncVerifyVeriBlockPublicationRaw(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockPublication& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::GeneralReply>* PrepareAsyncVerifyVeriBlockPublicationRaw(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockPublication& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::GeneralReply>* AsyncCheckBlocksVeriBlockPublicationRaw(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockPublication& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::GeneralReply>* PrepareAsyncCheckBlocksVeriBlockPublicationRaw(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockPublication& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::GeneralReply>* AsyncCheckMerklePathVeriBlockPublicationRaw(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockPublication& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::GeneralReply>* PrepareAsyncCheckMerklePathVeriBlockPublicationRaw(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockPublication& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::GeneralReply>* AsyncVerifyVeriBlockTransactionRaw(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockTransaction& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::GeneralReply>* PrepareAsyncVerifyVeriBlockTransactionRaw(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockTransaction& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::GeneralReply>* AsyncCheckSignatureVeriBlockTransactionRaw(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockTransaction& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::GeneralReply>* PrepareAsyncCheckSignatureVeriBlockTransactionRaw(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockTransaction& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::GeneralReply>* AsyncVerifyVeriBlockBlockRaw(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockBlock& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::GeneralReply>* PrepareAsyncVerifyVeriBlockBlockRaw(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockBlock& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::GeneralReply>* AsyncCheckProofOfWorkVeriBlockBlockRaw(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockBlock& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::GeneralReply>* PrepareAsyncCheckProofOfWorkVeriBlockBlockRaw(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockBlock& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::GeneralReply>* AsyncCheckMaximumDriftVeriBlockBlockRaw(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockBlock& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::GeneralReply>* PrepareAsyncCheckMaximumDriftVeriBlockBlockRaw(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockBlock& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::GeneralReply>* AsyncVerifyBitcoinBlockRaw(::grpc::ClientContext* context, const ::VeriBlock::BitcoinBlock& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::GeneralReply>* PrepareAsyncVerifyBitcoinBlockRaw(::grpc::ClientContext* context, const ::VeriBlock::BitcoinBlock& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::GeneralReply>* AsyncCheckProofOfWorkBitcoinBlockRaw(::grpc::ClientContext* context, const ::VeriBlock::BitcoinBlock& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::GeneralReply>* PrepareAsyncCheckProofOfWorkBitcoinBlockRaw(::grpc::ClientContext* context, const ::VeriBlock::BitcoinBlock& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::GeneralReply>* AsyncCheckMaximumDriftBitcoinBlockRaw(::grpc::ClientContext* context, const ::VeriBlock::BitcoinBlock& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::GeneralReply>* PrepareAsyncCheckMaximumDriftBitcoinBlockRaw(::grpc::ClientContext* context, const ::VeriBlock::BitcoinBlock& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::GeneralReply>* AsyncVerifyAltPublicationRaw(::grpc::ClientContext* context, const ::VeriBlock::AltPublication& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::GeneralReply>* PrepareAsyncVerifyAltPublicationRaw(::grpc::ClientContext* context, const ::VeriBlock::AltPublication& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::GeneralReply>* AsyncCheckMerklePathAltPublicationRaw(::grpc::ClientContext* context, const ::VeriBlock::AltPublication& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::GeneralReply>* PrepareAsyncCheckMerklePathAltPublicationRaw(::grpc::ClientContext* context, const ::VeriBlock::AltPublication& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::GeneralReply>* AsyncCheckBlocksAltPublicationRaw(::grpc::ClientContext* context, const ::VeriBlock::AltPublication& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::VeriBlock::GeneralReply>* PrepareAsyncCheckBlocksAltPublicationRaw(::grpc::ClientContext* context, const ::VeriBlock::AltPublication& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status VerifyVeriBlockPoPTx(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockPoPTransaction& request, ::VeriBlock::GeneralReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::VeriBlock::GeneralReply>> AsyncVerifyVeriBlockPoPTx(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockPoPTransaction& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::VeriBlock::GeneralReply>>(AsyncVerifyVeriBlockPoPTxRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::VeriBlock::GeneralReply>> PrepareAsyncVerifyVeriBlockPoPTx(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockPoPTransaction& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::VeriBlock::GeneralReply>>(PrepareAsyncVerifyVeriBlockPoPTxRaw(context, request, cq));
    }
    ::grpc::Status CheckSignatureVeriBlockPoPTx(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockPoPTransaction& request, ::VeriBlock::GeneralReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::VeriBlock::GeneralReply>> AsyncCheckSignatureVeriBlockPoPTx(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockPoPTransaction& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::VeriBlock::GeneralReply>>(AsyncCheckSignatureVeriBlockPoPTxRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::VeriBlock::GeneralReply>> PrepareAsyncCheckSignatureVeriBlockPoPTx(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockPoPTransaction& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::VeriBlock::GeneralReply>>(PrepareAsyncCheckSignatureVeriBlockPoPTxRaw(context, request, cq));
    }
    ::grpc::Status CheckBitcoinTransactionForPoPData(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockPoPTransaction& request, ::VeriBlock::GeneralReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::VeriBlock::GeneralReply>> AsyncCheckBitcoinTransactionForPoPData(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockPoPTransaction& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::VeriBlock::GeneralReply>>(AsyncCheckBitcoinTransactionForPoPDataRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::VeriBlock::GeneralReply>> PrepareAsyncCheckBitcoinTransactionForPoPData(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockPoPTransaction& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::VeriBlock::GeneralReply>>(PrepareAsyncCheckBitcoinTransactionForPoPDataRaw(context, request, cq));
    }
    ::grpc::Status CheckBitcoinMerklePathVeriBlockPoPTx(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockPoPTransaction& request, ::VeriBlock::GeneralReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::VeriBlock::GeneralReply>> AsyncCheckBitcoinMerklePathVeriBlockPoPTx(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockPoPTransaction& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::VeriBlock::GeneralReply>>(AsyncCheckBitcoinMerklePathVeriBlockPoPTxRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::VeriBlock::GeneralReply>> PrepareAsyncCheckBitcoinMerklePathVeriBlockPoPTx(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockPoPTransaction& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::VeriBlock::GeneralReply>>(PrepareAsyncCheckBitcoinMerklePathVeriBlockPoPTxRaw(context, request, cq));
    }
    ::grpc::Status CheckBitcoinBlocksVeriBlockPoPTx(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockPoPTransaction& request, ::VeriBlock::GeneralReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::VeriBlock::GeneralReply>> AsyncCheckBitcoinBlocksVeriBlockPoPTx(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockPoPTransaction& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::VeriBlock::GeneralReply>>(AsyncCheckBitcoinBlocksVeriBlockPoPTxRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::VeriBlock::GeneralReply>> PrepareAsyncCheckBitcoinBlocksVeriBlockPoPTx(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockPoPTransaction& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::VeriBlock::GeneralReply>>(PrepareAsyncCheckBitcoinBlocksVeriBlockPoPTxRaw(context, request, cq));
    }
    ::grpc::Status VerifyVeriBlockPublication(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockPublication& request, ::VeriBlock::GeneralReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::VeriBlock::GeneralReply>> AsyncVerifyVeriBlockPublication(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockPublication& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::VeriBlock::GeneralReply>>(AsyncVerifyVeriBlockPublicationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::VeriBlock::GeneralReply>> PrepareAsyncVerifyVeriBlockPublication(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockPublication& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::VeriBlock::GeneralReply>>(PrepareAsyncVerifyVeriBlockPublicationRaw(context, request, cq));
    }
    ::grpc::Status CheckBlocksVeriBlockPublication(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockPublication& request, ::VeriBlock::GeneralReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::VeriBlock::GeneralReply>> AsyncCheckBlocksVeriBlockPublication(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockPublication& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::VeriBlock::GeneralReply>>(AsyncCheckBlocksVeriBlockPublicationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::VeriBlock::GeneralReply>> PrepareAsyncCheckBlocksVeriBlockPublication(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockPublication& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::VeriBlock::GeneralReply>>(PrepareAsyncCheckBlocksVeriBlockPublicationRaw(context, request, cq));
    }
    ::grpc::Status CheckMerklePathVeriBlockPublication(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockPublication& request, ::VeriBlock::GeneralReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::VeriBlock::GeneralReply>> AsyncCheckMerklePathVeriBlockPublication(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockPublication& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::VeriBlock::GeneralReply>>(AsyncCheckMerklePathVeriBlockPublicationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::VeriBlock::GeneralReply>> PrepareAsyncCheckMerklePathVeriBlockPublication(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockPublication& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::VeriBlock::GeneralReply>>(PrepareAsyncCheckMerklePathVeriBlockPublicationRaw(context, request, cq));
    }
    ::grpc::Status VerifyVeriBlockTransaction(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockTransaction& request, ::VeriBlock::GeneralReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::VeriBlock::GeneralReply>> AsyncVerifyVeriBlockTransaction(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockTransaction& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::VeriBlock::GeneralReply>>(AsyncVerifyVeriBlockTransactionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::VeriBlock::GeneralReply>> PrepareAsyncVerifyVeriBlockTransaction(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockTransaction& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::VeriBlock::GeneralReply>>(PrepareAsyncVerifyVeriBlockTransactionRaw(context, request, cq));
    }
    ::grpc::Status CheckSignatureVeriBlockTransaction(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockTransaction& request, ::VeriBlock::GeneralReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::VeriBlock::GeneralReply>> AsyncCheckSignatureVeriBlockTransaction(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockTransaction& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::VeriBlock::GeneralReply>>(AsyncCheckSignatureVeriBlockTransactionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::VeriBlock::GeneralReply>> PrepareAsyncCheckSignatureVeriBlockTransaction(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockTransaction& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::VeriBlock::GeneralReply>>(PrepareAsyncCheckSignatureVeriBlockTransactionRaw(context, request, cq));
    }
    ::grpc::Status VerifyVeriBlockBlock(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockBlock& request, ::VeriBlock::GeneralReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::VeriBlock::GeneralReply>> AsyncVerifyVeriBlockBlock(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockBlock& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::VeriBlock::GeneralReply>>(AsyncVerifyVeriBlockBlockRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::VeriBlock::GeneralReply>> PrepareAsyncVerifyVeriBlockBlock(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockBlock& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::VeriBlock::GeneralReply>>(PrepareAsyncVerifyVeriBlockBlockRaw(context, request, cq));
    }
    ::grpc::Status CheckProofOfWorkVeriBlockBlock(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockBlock& request, ::VeriBlock::GeneralReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::VeriBlock::GeneralReply>> AsyncCheckProofOfWorkVeriBlockBlock(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockBlock& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::VeriBlock::GeneralReply>>(AsyncCheckProofOfWorkVeriBlockBlockRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::VeriBlock::GeneralReply>> PrepareAsyncCheckProofOfWorkVeriBlockBlock(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockBlock& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::VeriBlock::GeneralReply>>(PrepareAsyncCheckProofOfWorkVeriBlockBlockRaw(context, request, cq));
    }
    ::grpc::Status CheckMaximumDriftVeriBlockBlock(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockBlock& request, ::VeriBlock::GeneralReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::VeriBlock::GeneralReply>> AsyncCheckMaximumDriftVeriBlockBlock(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockBlock& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::VeriBlock::GeneralReply>>(AsyncCheckMaximumDriftVeriBlockBlockRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::VeriBlock::GeneralReply>> PrepareAsyncCheckMaximumDriftVeriBlockBlock(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockBlock& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::VeriBlock::GeneralReply>>(PrepareAsyncCheckMaximumDriftVeriBlockBlockRaw(context, request, cq));
    }
    ::grpc::Status VerifyBitcoinBlock(::grpc::ClientContext* context, const ::VeriBlock::BitcoinBlock& request, ::VeriBlock::GeneralReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::VeriBlock::GeneralReply>> AsyncVerifyBitcoinBlock(::grpc::ClientContext* context, const ::VeriBlock::BitcoinBlock& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::VeriBlock::GeneralReply>>(AsyncVerifyBitcoinBlockRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::VeriBlock::GeneralReply>> PrepareAsyncVerifyBitcoinBlock(::grpc::ClientContext* context, const ::VeriBlock::BitcoinBlock& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::VeriBlock::GeneralReply>>(PrepareAsyncVerifyBitcoinBlockRaw(context, request, cq));
    }
    ::grpc::Status CheckProofOfWorkBitcoinBlock(::grpc::ClientContext* context, const ::VeriBlock::BitcoinBlock& request, ::VeriBlock::GeneralReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::VeriBlock::GeneralReply>> AsyncCheckProofOfWorkBitcoinBlock(::grpc::ClientContext* context, const ::VeriBlock::BitcoinBlock& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::VeriBlock::GeneralReply>>(AsyncCheckProofOfWorkBitcoinBlockRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::VeriBlock::GeneralReply>> PrepareAsyncCheckProofOfWorkBitcoinBlock(::grpc::ClientContext* context, const ::VeriBlock::BitcoinBlock& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::VeriBlock::GeneralReply>>(PrepareAsyncCheckProofOfWorkBitcoinBlockRaw(context, request, cq));
    }
    ::grpc::Status CheckMaximumDriftBitcoinBlock(::grpc::ClientContext* context, const ::VeriBlock::BitcoinBlock& request, ::VeriBlock::GeneralReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::VeriBlock::GeneralReply>> AsyncCheckMaximumDriftBitcoinBlock(::grpc::ClientContext* context, const ::VeriBlock::BitcoinBlock& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::VeriBlock::GeneralReply>>(AsyncCheckMaximumDriftBitcoinBlockRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::VeriBlock::GeneralReply>> PrepareAsyncCheckMaximumDriftBitcoinBlock(::grpc::ClientContext* context, const ::VeriBlock::BitcoinBlock& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::VeriBlock::GeneralReply>>(PrepareAsyncCheckMaximumDriftBitcoinBlockRaw(context, request, cq));
    }
    ::grpc::Status VerifyAltPublication(::grpc::ClientContext* context, const ::VeriBlock::AltPublication& request, ::VeriBlock::GeneralReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::VeriBlock::GeneralReply>> AsyncVerifyAltPublication(::grpc::ClientContext* context, const ::VeriBlock::AltPublication& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::VeriBlock::GeneralReply>>(AsyncVerifyAltPublicationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::VeriBlock::GeneralReply>> PrepareAsyncVerifyAltPublication(::grpc::ClientContext* context, const ::VeriBlock::AltPublication& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::VeriBlock::GeneralReply>>(PrepareAsyncVerifyAltPublicationRaw(context, request, cq));
    }
    ::grpc::Status CheckMerklePathAltPublication(::grpc::ClientContext* context, const ::VeriBlock::AltPublication& request, ::VeriBlock::GeneralReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::VeriBlock::GeneralReply>> AsyncCheckMerklePathAltPublication(::grpc::ClientContext* context, const ::VeriBlock::AltPublication& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::VeriBlock::GeneralReply>>(AsyncCheckMerklePathAltPublicationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::VeriBlock::GeneralReply>> PrepareAsyncCheckMerklePathAltPublication(::grpc::ClientContext* context, const ::VeriBlock::AltPublication& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::VeriBlock::GeneralReply>>(PrepareAsyncCheckMerklePathAltPublicationRaw(context, request, cq));
    }
    ::grpc::Status CheckBlocksAltPublication(::grpc::ClientContext* context, const ::VeriBlock::AltPublication& request, ::VeriBlock::GeneralReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::VeriBlock::GeneralReply>> AsyncCheckBlocksAltPublication(::grpc::ClientContext* context, const ::VeriBlock::AltPublication& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::VeriBlock::GeneralReply>>(AsyncCheckBlocksAltPublicationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::VeriBlock::GeneralReply>> PrepareAsyncCheckBlocksAltPublication(::grpc::ClientContext* context, const ::VeriBlock::AltPublication& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::VeriBlock::GeneralReply>>(PrepareAsyncCheckBlocksAltPublicationRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void VerifyVeriBlockPoPTx(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockPoPTransaction* request, ::VeriBlock::GeneralReply* response, std::function<void(::grpc::Status)>) override;
      void VerifyVeriBlockPoPTx(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::GeneralReply* response, std::function<void(::grpc::Status)>) override;
      void VerifyVeriBlockPoPTx(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockPoPTransaction* request, ::VeriBlock::GeneralReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void VerifyVeriBlockPoPTx(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::GeneralReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void CheckSignatureVeriBlockPoPTx(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockPoPTransaction* request, ::VeriBlock::GeneralReply* response, std::function<void(::grpc::Status)>) override;
      void CheckSignatureVeriBlockPoPTx(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::GeneralReply* response, std::function<void(::grpc::Status)>) override;
      void CheckSignatureVeriBlockPoPTx(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockPoPTransaction* request, ::VeriBlock::GeneralReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void CheckSignatureVeriBlockPoPTx(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::GeneralReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void CheckBitcoinTransactionForPoPData(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockPoPTransaction* request, ::VeriBlock::GeneralReply* response, std::function<void(::grpc::Status)>) override;
      void CheckBitcoinTransactionForPoPData(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::GeneralReply* response, std::function<void(::grpc::Status)>) override;
      void CheckBitcoinTransactionForPoPData(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockPoPTransaction* request, ::VeriBlock::GeneralReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void CheckBitcoinTransactionForPoPData(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::GeneralReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void CheckBitcoinMerklePathVeriBlockPoPTx(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockPoPTransaction* request, ::VeriBlock::GeneralReply* response, std::function<void(::grpc::Status)>) override;
      void CheckBitcoinMerklePathVeriBlockPoPTx(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::GeneralReply* response, std::function<void(::grpc::Status)>) override;
      void CheckBitcoinMerklePathVeriBlockPoPTx(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockPoPTransaction* request, ::VeriBlock::GeneralReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void CheckBitcoinMerklePathVeriBlockPoPTx(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::GeneralReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void CheckBitcoinBlocksVeriBlockPoPTx(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockPoPTransaction* request, ::VeriBlock::GeneralReply* response, std::function<void(::grpc::Status)>) override;
      void CheckBitcoinBlocksVeriBlockPoPTx(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::GeneralReply* response, std::function<void(::grpc::Status)>) override;
      void CheckBitcoinBlocksVeriBlockPoPTx(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockPoPTransaction* request, ::VeriBlock::GeneralReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void CheckBitcoinBlocksVeriBlockPoPTx(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::GeneralReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void VerifyVeriBlockPublication(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockPublication* request, ::VeriBlock::GeneralReply* response, std::function<void(::grpc::Status)>) override;
      void VerifyVeriBlockPublication(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::GeneralReply* response, std::function<void(::grpc::Status)>) override;
      void VerifyVeriBlockPublication(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockPublication* request, ::VeriBlock::GeneralReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void VerifyVeriBlockPublication(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::GeneralReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void CheckBlocksVeriBlockPublication(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockPublication* request, ::VeriBlock::GeneralReply* response, std::function<void(::grpc::Status)>) override;
      void CheckBlocksVeriBlockPublication(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::GeneralReply* response, std::function<void(::grpc::Status)>) override;
      void CheckBlocksVeriBlockPublication(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockPublication* request, ::VeriBlock::GeneralReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void CheckBlocksVeriBlockPublication(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::GeneralReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void CheckMerklePathVeriBlockPublication(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockPublication* request, ::VeriBlock::GeneralReply* response, std::function<void(::grpc::Status)>) override;
      void CheckMerklePathVeriBlockPublication(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::GeneralReply* response, std::function<void(::grpc::Status)>) override;
      void CheckMerklePathVeriBlockPublication(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockPublication* request, ::VeriBlock::GeneralReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void CheckMerklePathVeriBlockPublication(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::GeneralReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void VerifyVeriBlockTransaction(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockTransaction* request, ::VeriBlock::GeneralReply* response, std::function<void(::grpc::Status)>) override;
      void VerifyVeriBlockTransaction(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::GeneralReply* response, std::function<void(::grpc::Status)>) override;
      void VerifyVeriBlockTransaction(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockTransaction* request, ::VeriBlock::GeneralReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void VerifyVeriBlockTransaction(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::GeneralReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void CheckSignatureVeriBlockTransaction(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockTransaction* request, ::VeriBlock::GeneralReply* response, std::function<void(::grpc::Status)>) override;
      void CheckSignatureVeriBlockTransaction(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::GeneralReply* response, std::function<void(::grpc::Status)>) override;
      void CheckSignatureVeriBlockTransaction(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockTransaction* request, ::VeriBlock::GeneralReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void CheckSignatureVeriBlockTransaction(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::GeneralReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void VerifyVeriBlockBlock(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockBlock* request, ::VeriBlock::GeneralReply* response, std::function<void(::grpc::Status)>) override;
      void VerifyVeriBlockBlock(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::GeneralReply* response, std::function<void(::grpc::Status)>) override;
      void VerifyVeriBlockBlock(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockBlock* request, ::VeriBlock::GeneralReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void VerifyVeriBlockBlock(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::GeneralReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void CheckProofOfWorkVeriBlockBlock(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockBlock* request, ::VeriBlock::GeneralReply* response, std::function<void(::grpc::Status)>) override;
      void CheckProofOfWorkVeriBlockBlock(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::GeneralReply* response, std::function<void(::grpc::Status)>) override;
      void CheckProofOfWorkVeriBlockBlock(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockBlock* request, ::VeriBlock::GeneralReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void CheckProofOfWorkVeriBlockBlock(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::GeneralReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void CheckMaximumDriftVeriBlockBlock(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockBlock* request, ::VeriBlock::GeneralReply* response, std::function<void(::grpc::Status)>) override;
      void CheckMaximumDriftVeriBlockBlock(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::GeneralReply* response, std::function<void(::grpc::Status)>) override;
      void CheckMaximumDriftVeriBlockBlock(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockBlock* request, ::VeriBlock::GeneralReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void CheckMaximumDriftVeriBlockBlock(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::GeneralReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void VerifyBitcoinBlock(::grpc::ClientContext* context, const ::VeriBlock::BitcoinBlock* request, ::VeriBlock::GeneralReply* response, std::function<void(::grpc::Status)>) override;
      void VerifyBitcoinBlock(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::GeneralReply* response, std::function<void(::grpc::Status)>) override;
      void VerifyBitcoinBlock(::grpc::ClientContext* context, const ::VeriBlock::BitcoinBlock* request, ::VeriBlock::GeneralReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void VerifyBitcoinBlock(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::GeneralReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void CheckProofOfWorkBitcoinBlock(::grpc::ClientContext* context, const ::VeriBlock::BitcoinBlock* request, ::VeriBlock::GeneralReply* response, std::function<void(::grpc::Status)>) override;
      void CheckProofOfWorkBitcoinBlock(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::GeneralReply* response, std::function<void(::grpc::Status)>) override;
      void CheckProofOfWorkBitcoinBlock(::grpc::ClientContext* context, const ::VeriBlock::BitcoinBlock* request, ::VeriBlock::GeneralReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void CheckProofOfWorkBitcoinBlock(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::GeneralReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void CheckMaximumDriftBitcoinBlock(::grpc::ClientContext* context, const ::VeriBlock::BitcoinBlock* request, ::VeriBlock::GeneralReply* response, std::function<void(::grpc::Status)>) override;
      void CheckMaximumDriftBitcoinBlock(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::GeneralReply* response, std::function<void(::grpc::Status)>) override;
      void CheckMaximumDriftBitcoinBlock(::grpc::ClientContext* context, const ::VeriBlock::BitcoinBlock* request, ::VeriBlock::GeneralReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void CheckMaximumDriftBitcoinBlock(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::GeneralReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void VerifyAltPublication(::grpc::ClientContext* context, const ::VeriBlock::AltPublication* request, ::VeriBlock::GeneralReply* response, std::function<void(::grpc::Status)>) override;
      void VerifyAltPublication(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::GeneralReply* response, std::function<void(::grpc::Status)>) override;
      void VerifyAltPublication(::grpc::ClientContext* context, const ::VeriBlock::AltPublication* request, ::VeriBlock::GeneralReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void VerifyAltPublication(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::GeneralReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void CheckMerklePathAltPublication(::grpc::ClientContext* context, const ::VeriBlock::AltPublication* request, ::VeriBlock::GeneralReply* response, std::function<void(::grpc::Status)>) override;
      void CheckMerklePathAltPublication(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::GeneralReply* response, std::function<void(::grpc::Status)>) override;
      void CheckMerklePathAltPublication(::grpc::ClientContext* context, const ::VeriBlock::AltPublication* request, ::VeriBlock::GeneralReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void CheckMerklePathAltPublication(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::GeneralReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void CheckBlocksAltPublication(::grpc::ClientContext* context, const ::VeriBlock::AltPublication* request, ::VeriBlock::GeneralReply* response, std::function<void(::grpc::Status)>) override;
      void CheckBlocksAltPublication(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::GeneralReply* response, std::function<void(::grpc::Status)>) override;
      void CheckBlocksAltPublication(::grpc::ClientContext* context, const ::VeriBlock::AltPublication* request, ::VeriBlock::GeneralReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void CheckBlocksAltPublication(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VeriBlock::GeneralReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::VeriBlock::GeneralReply>* AsyncVerifyVeriBlockPoPTxRaw(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockPoPTransaction& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::VeriBlock::GeneralReply>* PrepareAsyncVerifyVeriBlockPoPTxRaw(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockPoPTransaction& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::VeriBlock::GeneralReply>* AsyncCheckSignatureVeriBlockPoPTxRaw(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockPoPTransaction& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::VeriBlock::GeneralReply>* PrepareAsyncCheckSignatureVeriBlockPoPTxRaw(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockPoPTransaction& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::VeriBlock::GeneralReply>* AsyncCheckBitcoinTransactionForPoPDataRaw(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockPoPTransaction& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::VeriBlock::GeneralReply>* PrepareAsyncCheckBitcoinTransactionForPoPDataRaw(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockPoPTransaction& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::VeriBlock::GeneralReply>* AsyncCheckBitcoinMerklePathVeriBlockPoPTxRaw(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockPoPTransaction& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::VeriBlock::GeneralReply>* PrepareAsyncCheckBitcoinMerklePathVeriBlockPoPTxRaw(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockPoPTransaction& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::VeriBlock::GeneralReply>* AsyncCheckBitcoinBlocksVeriBlockPoPTxRaw(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockPoPTransaction& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::VeriBlock::GeneralReply>* PrepareAsyncCheckBitcoinBlocksVeriBlockPoPTxRaw(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockPoPTransaction& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::VeriBlock::GeneralReply>* AsyncVerifyVeriBlockPublicationRaw(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockPublication& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::VeriBlock::GeneralReply>* PrepareAsyncVerifyVeriBlockPublicationRaw(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockPublication& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::VeriBlock::GeneralReply>* AsyncCheckBlocksVeriBlockPublicationRaw(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockPublication& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::VeriBlock::GeneralReply>* PrepareAsyncCheckBlocksVeriBlockPublicationRaw(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockPublication& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::VeriBlock::GeneralReply>* AsyncCheckMerklePathVeriBlockPublicationRaw(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockPublication& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::VeriBlock::GeneralReply>* PrepareAsyncCheckMerklePathVeriBlockPublicationRaw(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockPublication& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::VeriBlock::GeneralReply>* AsyncVerifyVeriBlockTransactionRaw(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockTransaction& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::VeriBlock::GeneralReply>* PrepareAsyncVerifyVeriBlockTransactionRaw(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockTransaction& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::VeriBlock::GeneralReply>* AsyncCheckSignatureVeriBlockTransactionRaw(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockTransaction& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::VeriBlock::GeneralReply>* PrepareAsyncCheckSignatureVeriBlockTransactionRaw(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockTransaction& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::VeriBlock::GeneralReply>* AsyncVerifyVeriBlockBlockRaw(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockBlock& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::VeriBlock::GeneralReply>* PrepareAsyncVerifyVeriBlockBlockRaw(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockBlock& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::VeriBlock::GeneralReply>* AsyncCheckProofOfWorkVeriBlockBlockRaw(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockBlock& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::VeriBlock::GeneralReply>* PrepareAsyncCheckProofOfWorkVeriBlockBlockRaw(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockBlock& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::VeriBlock::GeneralReply>* AsyncCheckMaximumDriftVeriBlockBlockRaw(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockBlock& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::VeriBlock::GeneralReply>* PrepareAsyncCheckMaximumDriftVeriBlockBlockRaw(::grpc::ClientContext* context, const ::VeriBlock::VeriBlockBlock& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::VeriBlock::GeneralReply>* AsyncVerifyBitcoinBlockRaw(::grpc::ClientContext* context, const ::VeriBlock::BitcoinBlock& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::VeriBlock::GeneralReply>* PrepareAsyncVerifyBitcoinBlockRaw(::grpc::ClientContext* context, const ::VeriBlock::BitcoinBlock& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::VeriBlock::GeneralReply>* AsyncCheckProofOfWorkBitcoinBlockRaw(::grpc::ClientContext* context, const ::VeriBlock::BitcoinBlock& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::VeriBlock::GeneralReply>* PrepareAsyncCheckProofOfWorkBitcoinBlockRaw(::grpc::ClientContext* context, const ::VeriBlock::BitcoinBlock& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::VeriBlock::GeneralReply>* AsyncCheckMaximumDriftBitcoinBlockRaw(::grpc::ClientContext* context, const ::VeriBlock::BitcoinBlock& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::VeriBlock::GeneralReply>* PrepareAsyncCheckMaximumDriftBitcoinBlockRaw(::grpc::ClientContext* context, const ::VeriBlock::BitcoinBlock& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::VeriBlock::GeneralReply>* AsyncVerifyAltPublicationRaw(::grpc::ClientContext* context, const ::VeriBlock::AltPublication& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::VeriBlock::GeneralReply>* PrepareAsyncVerifyAltPublicationRaw(::grpc::ClientContext* context, const ::VeriBlock::AltPublication& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::VeriBlock::GeneralReply>* AsyncCheckMerklePathAltPublicationRaw(::grpc::ClientContext* context, const ::VeriBlock::AltPublication& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::VeriBlock::GeneralReply>* PrepareAsyncCheckMerklePathAltPublicationRaw(::grpc::ClientContext* context, const ::VeriBlock::AltPublication& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::VeriBlock::GeneralReply>* AsyncCheckBlocksAltPublicationRaw(::grpc::ClientContext* context, const ::VeriBlock::AltPublication& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::VeriBlock::GeneralReply>* PrepareAsyncCheckBlocksAltPublicationRaw(::grpc::ClientContext* context, const ::VeriBlock::AltPublication& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_VerifyVeriBlockPoPTx_;
    const ::grpc::internal::RpcMethod rpcmethod_CheckSignatureVeriBlockPoPTx_;
    const ::grpc::internal::RpcMethod rpcmethod_CheckBitcoinTransactionForPoPData_;
    const ::grpc::internal::RpcMethod rpcmethod_CheckBitcoinMerklePathVeriBlockPoPTx_;
    const ::grpc::internal::RpcMethod rpcmethod_CheckBitcoinBlocksVeriBlockPoPTx_;
    const ::grpc::internal::RpcMethod rpcmethod_VerifyVeriBlockPublication_;
    const ::grpc::internal::RpcMethod rpcmethod_CheckBlocksVeriBlockPublication_;
    const ::grpc::internal::RpcMethod rpcmethod_CheckMerklePathVeriBlockPublication_;
    const ::grpc::internal::RpcMethod rpcmethod_VerifyVeriBlockTransaction_;
    const ::grpc::internal::RpcMethod rpcmethod_CheckSignatureVeriBlockTransaction_;
    const ::grpc::internal::RpcMethod rpcmethod_VerifyVeriBlockBlock_;
    const ::grpc::internal::RpcMethod rpcmethod_CheckProofOfWorkVeriBlockBlock_;
    const ::grpc::internal::RpcMethod rpcmethod_CheckMaximumDriftVeriBlockBlock_;
    const ::grpc::internal::RpcMethod rpcmethod_VerifyBitcoinBlock_;
    const ::grpc::internal::RpcMethod rpcmethod_CheckProofOfWorkBitcoinBlock_;
    const ::grpc::internal::RpcMethod rpcmethod_CheckMaximumDriftBitcoinBlock_;
    const ::grpc::internal::RpcMethod rpcmethod_VerifyAltPublication_;
    const ::grpc::internal::RpcMethod rpcmethod_CheckMerklePathAltPublication_;
    const ::grpc::internal::RpcMethod rpcmethod_CheckBlocksAltPublication_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status VerifyVeriBlockPoPTx(::grpc::ServerContext* context, const ::VeriBlock::VeriBlockPoPTransaction* request, ::VeriBlock::GeneralReply* response);
    virtual ::grpc::Status CheckSignatureVeriBlockPoPTx(::grpc::ServerContext* context, const ::VeriBlock::VeriBlockPoPTransaction* request, ::VeriBlock::GeneralReply* response);
    virtual ::grpc::Status CheckBitcoinTransactionForPoPData(::grpc::ServerContext* context, const ::VeriBlock::VeriBlockPoPTransaction* request, ::VeriBlock::GeneralReply* response);
    virtual ::grpc::Status CheckBitcoinMerklePathVeriBlockPoPTx(::grpc::ServerContext* context, const ::VeriBlock::VeriBlockPoPTransaction* request, ::VeriBlock::GeneralReply* response);
    virtual ::grpc::Status CheckBitcoinBlocksVeriBlockPoPTx(::grpc::ServerContext* context, const ::VeriBlock::VeriBlockPoPTransaction* request, ::VeriBlock::GeneralReply* response);
    virtual ::grpc::Status VerifyVeriBlockPublication(::grpc::ServerContext* context, const ::VeriBlock::VeriBlockPublication* request, ::VeriBlock::GeneralReply* response);
    virtual ::grpc::Status CheckBlocksVeriBlockPublication(::grpc::ServerContext* context, const ::VeriBlock::VeriBlockPublication* request, ::VeriBlock::GeneralReply* response);
    virtual ::grpc::Status CheckMerklePathVeriBlockPublication(::grpc::ServerContext* context, const ::VeriBlock::VeriBlockPublication* request, ::VeriBlock::GeneralReply* response);
    virtual ::grpc::Status VerifyVeriBlockTransaction(::grpc::ServerContext* context, const ::VeriBlock::VeriBlockTransaction* request, ::VeriBlock::GeneralReply* response);
    virtual ::grpc::Status CheckSignatureVeriBlockTransaction(::grpc::ServerContext* context, const ::VeriBlock::VeriBlockTransaction* request, ::VeriBlock::GeneralReply* response);
    virtual ::grpc::Status VerifyVeriBlockBlock(::grpc::ServerContext* context, const ::VeriBlock::VeriBlockBlock* request, ::VeriBlock::GeneralReply* response);
    virtual ::grpc::Status CheckProofOfWorkVeriBlockBlock(::grpc::ServerContext* context, const ::VeriBlock::VeriBlockBlock* request, ::VeriBlock::GeneralReply* response);
    virtual ::grpc::Status CheckMaximumDriftVeriBlockBlock(::grpc::ServerContext* context, const ::VeriBlock::VeriBlockBlock* request, ::VeriBlock::GeneralReply* response);
    virtual ::grpc::Status VerifyBitcoinBlock(::grpc::ServerContext* context, const ::VeriBlock::BitcoinBlock* request, ::VeriBlock::GeneralReply* response);
    virtual ::grpc::Status CheckProofOfWorkBitcoinBlock(::grpc::ServerContext* context, const ::VeriBlock::BitcoinBlock* request, ::VeriBlock::GeneralReply* response);
    virtual ::grpc::Status CheckMaximumDriftBitcoinBlock(::grpc::ServerContext* context, const ::VeriBlock::BitcoinBlock* request, ::VeriBlock::GeneralReply* response);
    virtual ::grpc::Status VerifyAltPublication(::grpc::ServerContext* context, const ::VeriBlock::AltPublication* request, ::VeriBlock::GeneralReply* response);
    virtual ::grpc::Status CheckMerklePathAltPublication(::grpc::ServerContext* context, const ::VeriBlock::AltPublication* request, ::VeriBlock::GeneralReply* response);
    virtual ::grpc::Status CheckBlocksAltPublication(::grpc::ServerContext* context, const ::VeriBlock::AltPublication* request, ::VeriBlock::GeneralReply* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_VerifyVeriBlockPoPTx : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_VerifyVeriBlockPoPTx() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_VerifyVeriBlockPoPTx() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status VerifyVeriBlockPoPTx(::grpc::ServerContext* context, const ::VeriBlock::VeriBlockPoPTransaction* request, ::VeriBlock::GeneralReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestVerifyVeriBlockPoPTx(::grpc::ServerContext* context, ::VeriBlock::VeriBlockPoPTransaction* request, ::grpc::ServerAsyncResponseWriter< ::VeriBlock::GeneralReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CheckSignatureVeriBlockPoPTx : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_CheckSignatureVeriBlockPoPTx() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_CheckSignatureVeriBlockPoPTx() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CheckSignatureVeriBlockPoPTx(::grpc::ServerContext* context, const ::VeriBlock::VeriBlockPoPTransaction* request, ::VeriBlock::GeneralReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCheckSignatureVeriBlockPoPTx(::grpc::ServerContext* context, ::VeriBlock::VeriBlockPoPTransaction* request, ::grpc::ServerAsyncResponseWriter< ::VeriBlock::GeneralReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CheckBitcoinTransactionForPoPData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_CheckBitcoinTransactionForPoPData() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_CheckBitcoinTransactionForPoPData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CheckBitcoinTransactionForPoPData(::grpc::ServerContext* context, const ::VeriBlock::VeriBlockPoPTransaction* request, ::VeriBlock::GeneralReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCheckBitcoinTransactionForPoPData(::grpc::ServerContext* context, ::VeriBlock::VeriBlockPoPTransaction* request, ::grpc::ServerAsyncResponseWriter< ::VeriBlock::GeneralReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CheckBitcoinMerklePathVeriBlockPoPTx : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_CheckBitcoinMerklePathVeriBlockPoPTx() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_CheckBitcoinMerklePathVeriBlockPoPTx() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CheckBitcoinMerklePathVeriBlockPoPTx(::grpc::ServerContext* context, const ::VeriBlock::VeriBlockPoPTransaction* request, ::VeriBlock::GeneralReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCheckBitcoinMerklePathVeriBlockPoPTx(::grpc::ServerContext* context, ::VeriBlock::VeriBlockPoPTransaction* request, ::grpc::ServerAsyncResponseWriter< ::VeriBlock::GeneralReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CheckBitcoinBlocksVeriBlockPoPTx : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_CheckBitcoinBlocksVeriBlockPoPTx() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_CheckBitcoinBlocksVeriBlockPoPTx() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CheckBitcoinBlocksVeriBlockPoPTx(::grpc::ServerContext* context, const ::VeriBlock::VeriBlockPoPTransaction* request, ::VeriBlock::GeneralReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCheckBitcoinBlocksVeriBlockPoPTx(::grpc::ServerContext* context, ::VeriBlock::VeriBlockPoPTransaction* request, ::grpc::ServerAsyncResponseWriter< ::VeriBlock::GeneralReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_VerifyVeriBlockPublication : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_VerifyVeriBlockPublication() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_VerifyVeriBlockPublication() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status VerifyVeriBlockPublication(::grpc::ServerContext* context, const ::VeriBlock::VeriBlockPublication* request, ::VeriBlock::GeneralReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestVerifyVeriBlockPublication(::grpc::ServerContext* context, ::VeriBlock::VeriBlockPublication* request, ::grpc::ServerAsyncResponseWriter< ::VeriBlock::GeneralReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CheckBlocksVeriBlockPublication : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_CheckBlocksVeriBlockPublication() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_CheckBlocksVeriBlockPublication() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CheckBlocksVeriBlockPublication(::grpc::ServerContext* context, const ::VeriBlock::VeriBlockPublication* request, ::VeriBlock::GeneralReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCheckBlocksVeriBlockPublication(::grpc::ServerContext* context, ::VeriBlock::VeriBlockPublication* request, ::grpc::ServerAsyncResponseWriter< ::VeriBlock::GeneralReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CheckMerklePathVeriBlockPublication : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_CheckMerklePathVeriBlockPublication() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_CheckMerklePathVeriBlockPublication() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CheckMerklePathVeriBlockPublication(::grpc::ServerContext* context, const ::VeriBlock::VeriBlockPublication* request, ::VeriBlock::GeneralReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCheckMerklePathVeriBlockPublication(::grpc::ServerContext* context, ::VeriBlock::VeriBlockPublication* request, ::grpc::ServerAsyncResponseWriter< ::VeriBlock::GeneralReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_VerifyVeriBlockTransaction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_VerifyVeriBlockTransaction() {
      ::grpc::Service::MarkMethodAsync(8);
    }
    ~WithAsyncMethod_VerifyVeriBlockTransaction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status VerifyVeriBlockTransaction(::grpc::ServerContext* context, const ::VeriBlock::VeriBlockTransaction* request, ::VeriBlock::GeneralReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestVerifyVeriBlockTransaction(::grpc::ServerContext* context, ::VeriBlock::VeriBlockTransaction* request, ::grpc::ServerAsyncResponseWriter< ::VeriBlock::GeneralReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CheckSignatureVeriBlockTransaction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_CheckSignatureVeriBlockTransaction() {
      ::grpc::Service::MarkMethodAsync(9);
    }
    ~WithAsyncMethod_CheckSignatureVeriBlockTransaction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CheckSignatureVeriBlockTransaction(::grpc::ServerContext* context, const ::VeriBlock::VeriBlockTransaction* request, ::VeriBlock::GeneralReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCheckSignatureVeriBlockTransaction(::grpc::ServerContext* context, ::VeriBlock::VeriBlockTransaction* request, ::grpc::ServerAsyncResponseWriter< ::VeriBlock::GeneralReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_VerifyVeriBlockBlock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_VerifyVeriBlockBlock() {
      ::grpc::Service::MarkMethodAsync(10);
    }
    ~WithAsyncMethod_VerifyVeriBlockBlock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status VerifyVeriBlockBlock(::grpc::ServerContext* context, const ::VeriBlock::VeriBlockBlock* request, ::VeriBlock::GeneralReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestVerifyVeriBlockBlock(::grpc::ServerContext* context, ::VeriBlock::VeriBlockBlock* request, ::grpc::ServerAsyncResponseWriter< ::VeriBlock::GeneralReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CheckProofOfWorkVeriBlockBlock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_CheckProofOfWorkVeriBlockBlock() {
      ::grpc::Service::MarkMethodAsync(11);
    }
    ~WithAsyncMethod_CheckProofOfWorkVeriBlockBlock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CheckProofOfWorkVeriBlockBlock(::grpc::ServerContext* context, const ::VeriBlock::VeriBlockBlock* request, ::VeriBlock::GeneralReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCheckProofOfWorkVeriBlockBlock(::grpc::ServerContext* context, ::VeriBlock::VeriBlockBlock* request, ::grpc::ServerAsyncResponseWriter< ::VeriBlock::GeneralReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(11, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CheckMaximumDriftVeriBlockBlock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_CheckMaximumDriftVeriBlockBlock() {
      ::grpc::Service::MarkMethodAsync(12);
    }
    ~WithAsyncMethod_CheckMaximumDriftVeriBlockBlock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CheckMaximumDriftVeriBlockBlock(::grpc::ServerContext* context, const ::VeriBlock::VeriBlockBlock* request, ::VeriBlock::GeneralReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCheckMaximumDriftVeriBlockBlock(::grpc::ServerContext* context, ::VeriBlock::VeriBlockBlock* request, ::grpc::ServerAsyncResponseWriter< ::VeriBlock::GeneralReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(12, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_VerifyBitcoinBlock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_VerifyBitcoinBlock() {
      ::grpc::Service::MarkMethodAsync(13);
    }
    ~WithAsyncMethod_VerifyBitcoinBlock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status VerifyBitcoinBlock(::grpc::ServerContext* context, const ::VeriBlock::BitcoinBlock* request, ::VeriBlock::GeneralReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestVerifyBitcoinBlock(::grpc::ServerContext* context, ::VeriBlock::BitcoinBlock* request, ::grpc::ServerAsyncResponseWriter< ::VeriBlock::GeneralReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(13, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CheckProofOfWorkBitcoinBlock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_CheckProofOfWorkBitcoinBlock() {
      ::grpc::Service::MarkMethodAsync(14);
    }
    ~WithAsyncMethod_CheckProofOfWorkBitcoinBlock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CheckProofOfWorkBitcoinBlock(::grpc::ServerContext* context, const ::VeriBlock::BitcoinBlock* request, ::VeriBlock::GeneralReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCheckProofOfWorkBitcoinBlock(::grpc::ServerContext* context, ::VeriBlock::BitcoinBlock* request, ::grpc::ServerAsyncResponseWriter< ::VeriBlock::GeneralReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(14, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CheckMaximumDriftBitcoinBlock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_CheckMaximumDriftBitcoinBlock() {
      ::grpc::Service::MarkMethodAsync(15);
    }
    ~WithAsyncMethod_CheckMaximumDriftBitcoinBlock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CheckMaximumDriftBitcoinBlock(::grpc::ServerContext* context, const ::VeriBlock::BitcoinBlock* request, ::VeriBlock::GeneralReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCheckMaximumDriftBitcoinBlock(::grpc::ServerContext* context, ::VeriBlock::BitcoinBlock* request, ::grpc::ServerAsyncResponseWriter< ::VeriBlock::GeneralReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(15, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_VerifyAltPublication : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_VerifyAltPublication() {
      ::grpc::Service::MarkMethodAsync(16);
    }
    ~WithAsyncMethod_VerifyAltPublication() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status VerifyAltPublication(::grpc::ServerContext* context, const ::VeriBlock::AltPublication* request, ::VeriBlock::GeneralReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestVerifyAltPublication(::grpc::ServerContext* context, ::VeriBlock::AltPublication* request, ::grpc::ServerAsyncResponseWriter< ::VeriBlock::GeneralReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(16, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CheckMerklePathAltPublication : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_CheckMerklePathAltPublication() {
      ::grpc::Service::MarkMethodAsync(17);
    }
    ~WithAsyncMethod_CheckMerklePathAltPublication() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CheckMerklePathAltPublication(::grpc::ServerContext* context, const ::VeriBlock::AltPublication* request, ::VeriBlock::GeneralReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCheckMerklePathAltPublication(::grpc::ServerContext* context, ::VeriBlock::AltPublication* request, ::grpc::ServerAsyncResponseWriter< ::VeriBlock::GeneralReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(17, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CheckBlocksAltPublication : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_CheckBlocksAltPublication() {
      ::grpc::Service::MarkMethodAsync(18);
    }
    ~WithAsyncMethod_CheckBlocksAltPublication() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CheckBlocksAltPublication(::grpc::ServerContext* context, const ::VeriBlock::AltPublication* request, ::VeriBlock::GeneralReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCheckBlocksAltPublication(::grpc::ServerContext* context, ::VeriBlock::AltPublication* request, ::grpc::ServerAsyncResponseWriter< ::VeriBlock::GeneralReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(18, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_VerifyVeriBlockPoPTx<WithAsyncMethod_CheckSignatureVeriBlockPoPTx<WithAsyncMethod_CheckBitcoinTransactionForPoPData<WithAsyncMethod_CheckBitcoinMerklePathVeriBlockPoPTx<WithAsyncMethod_CheckBitcoinBlocksVeriBlockPoPTx<WithAsyncMethod_VerifyVeriBlockPublication<WithAsyncMethod_CheckBlocksVeriBlockPublication<WithAsyncMethod_CheckMerklePathVeriBlockPublication<WithAsyncMethod_VerifyVeriBlockTransaction<WithAsyncMethod_CheckSignatureVeriBlockTransaction<WithAsyncMethod_VerifyVeriBlockBlock<WithAsyncMethod_CheckProofOfWorkVeriBlockBlock<WithAsyncMethod_CheckMaximumDriftVeriBlockBlock<WithAsyncMethod_VerifyBitcoinBlock<WithAsyncMethod_CheckProofOfWorkBitcoinBlock<WithAsyncMethod_CheckMaximumDriftBitcoinBlock<WithAsyncMethod_VerifyAltPublication<WithAsyncMethod_CheckMerklePathAltPublication<WithAsyncMethod_CheckBlocksAltPublication<Service > > > > > > > > > > > > > > > > > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_VerifyVeriBlockPoPTx : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_VerifyVeriBlockPoPTx() {
      ::grpc::Service::experimental().MarkMethodCallback(0,
        new ::grpc::internal::CallbackUnaryHandler< ::VeriBlock::VeriBlockPoPTransaction, ::VeriBlock::GeneralReply>(
          [this](::grpc::ServerContext* context,
                 const ::VeriBlock::VeriBlockPoPTransaction* request,
                 ::VeriBlock::GeneralReply* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->VerifyVeriBlockPoPTx(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_VerifyVeriBlockPoPTx(
        ::grpc::experimental::MessageAllocator< ::VeriBlock::VeriBlockPoPTransaction, ::VeriBlock::GeneralReply>* allocator) {
      static_cast<::grpc::internal::CallbackUnaryHandler< ::VeriBlock::VeriBlockPoPTransaction, ::VeriBlock::GeneralReply>*>(
          ::grpc::Service::experimental().GetHandler(0))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_VerifyVeriBlockPoPTx() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status VerifyVeriBlockPoPTx(::grpc::ServerContext* context, const ::VeriBlock::VeriBlockPoPTransaction* request, ::VeriBlock::GeneralReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void VerifyVeriBlockPoPTx(::grpc::ServerContext* context, const ::VeriBlock::VeriBlockPoPTransaction* request, ::VeriBlock::GeneralReply* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_CheckSignatureVeriBlockPoPTx : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_CheckSignatureVeriBlockPoPTx() {
      ::grpc::Service::experimental().MarkMethodCallback(1,
        new ::grpc::internal::CallbackUnaryHandler< ::VeriBlock::VeriBlockPoPTransaction, ::VeriBlock::GeneralReply>(
          [this](::grpc::ServerContext* context,
                 const ::VeriBlock::VeriBlockPoPTransaction* request,
                 ::VeriBlock::GeneralReply* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->CheckSignatureVeriBlockPoPTx(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_CheckSignatureVeriBlockPoPTx(
        ::grpc::experimental::MessageAllocator< ::VeriBlock::VeriBlockPoPTransaction, ::VeriBlock::GeneralReply>* allocator) {
      static_cast<::grpc::internal::CallbackUnaryHandler< ::VeriBlock::VeriBlockPoPTransaction, ::VeriBlock::GeneralReply>*>(
          ::grpc::Service::experimental().GetHandler(1))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_CheckSignatureVeriBlockPoPTx() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CheckSignatureVeriBlockPoPTx(::grpc::ServerContext* context, const ::VeriBlock::VeriBlockPoPTransaction* request, ::VeriBlock::GeneralReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void CheckSignatureVeriBlockPoPTx(::grpc::ServerContext* context, const ::VeriBlock::VeriBlockPoPTransaction* request, ::VeriBlock::GeneralReply* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_CheckBitcoinTransactionForPoPData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_CheckBitcoinTransactionForPoPData() {
      ::grpc::Service::experimental().MarkMethodCallback(2,
        new ::grpc::internal::CallbackUnaryHandler< ::VeriBlock::VeriBlockPoPTransaction, ::VeriBlock::GeneralReply>(
          [this](::grpc::ServerContext* context,
                 const ::VeriBlock::VeriBlockPoPTransaction* request,
                 ::VeriBlock::GeneralReply* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->CheckBitcoinTransactionForPoPData(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_CheckBitcoinTransactionForPoPData(
        ::grpc::experimental::MessageAllocator< ::VeriBlock::VeriBlockPoPTransaction, ::VeriBlock::GeneralReply>* allocator) {
      static_cast<::grpc::internal::CallbackUnaryHandler< ::VeriBlock::VeriBlockPoPTransaction, ::VeriBlock::GeneralReply>*>(
          ::grpc::Service::experimental().GetHandler(2))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_CheckBitcoinTransactionForPoPData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CheckBitcoinTransactionForPoPData(::grpc::ServerContext* context, const ::VeriBlock::VeriBlockPoPTransaction* request, ::VeriBlock::GeneralReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void CheckBitcoinTransactionForPoPData(::grpc::ServerContext* context, const ::VeriBlock::VeriBlockPoPTransaction* request, ::VeriBlock::GeneralReply* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_CheckBitcoinMerklePathVeriBlockPoPTx : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_CheckBitcoinMerklePathVeriBlockPoPTx() {
      ::grpc::Service::experimental().MarkMethodCallback(3,
        new ::grpc::internal::CallbackUnaryHandler< ::VeriBlock::VeriBlockPoPTransaction, ::VeriBlock::GeneralReply>(
          [this](::grpc::ServerContext* context,
                 const ::VeriBlock::VeriBlockPoPTransaction* request,
                 ::VeriBlock::GeneralReply* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->CheckBitcoinMerklePathVeriBlockPoPTx(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_CheckBitcoinMerklePathVeriBlockPoPTx(
        ::grpc::experimental::MessageAllocator< ::VeriBlock::VeriBlockPoPTransaction, ::VeriBlock::GeneralReply>* allocator) {
      static_cast<::grpc::internal::CallbackUnaryHandler< ::VeriBlock::VeriBlockPoPTransaction, ::VeriBlock::GeneralReply>*>(
          ::grpc::Service::experimental().GetHandler(3))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_CheckBitcoinMerklePathVeriBlockPoPTx() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CheckBitcoinMerklePathVeriBlockPoPTx(::grpc::ServerContext* context, const ::VeriBlock::VeriBlockPoPTransaction* request, ::VeriBlock::GeneralReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void CheckBitcoinMerklePathVeriBlockPoPTx(::grpc::ServerContext* context, const ::VeriBlock::VeriBlockPoPTransaction* request, ::VeriBlock::GeneralReply* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_CheckBitcoinBlocksVeriBlockPoPTx : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_CheckBitcoinBlocksVeriBlockPoPTx() {
      ::grpc::Service::experimental().MarkMethodCallback(4,
        new ::grpc::internal::CallbackUnaryHandler< ::VeriBlock::VeriBlockPoPTransaction, ::VeriBlock::GeneralReply>(
          [this](::grpc::ServerContext* context,
                 const ::VeriBlock::VeriBlockPoPTransaction* request,
                 ::VeriBlock::GeneralReply* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->CheckBitcoinBlocksVeriBlockPoPTx(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_CheckBitcoinBlocksVeriBlockPoPTx(
        ::grpc::experimental::MessageAllocator< ::VeriBlock::VeriBlockPoPTransaction, ::VeriBlock::GeneralReply>* allocator) {
      static_cast<::grpc::internal::CallbackUnaryHandler< ::VeriBlock::VeriBlockPoPTransaction, ::VeriBlock::GeneralReply>*>(
          ::grpc::Service::experimental().GetHandler(4))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_CheckBitcoinBlocksVeriBlockPoPTx() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CheckBitcoinBlocksVeriBlockPoPTx(::grpc::ServerContext* context, const ::VeriBlock::VeriBlockPoPTransaction* request, ::VeriBlock::GeneralReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void CheckBitcoinBlocksVeriBlockPoPTx(::grpc::ServerContext* context, const ::VeriBlock::VeriBlockPoPTransaction* request, ::VeriBlock::GeneralReply* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_VerifyVeriBlockPublication : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_VerifyVeriBlockPublication() {
      ::grpc::Service::experimental().MarkMethodCallback(5,
        new ::grpc::internal::CallbackUnaryHandler< ::VeriBlock::VeriBlockPublication, ::VeriBlock::GeneralReply>(
          [this](::grpc::ServerContext* context,
                 const ::VeriBlock::VeriBlockPublication* request,
                 ::VeriBlock::GeneralReply* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->VerifyVeriBlockPublication(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_VerifyVeriBlockPublication(
        ::grpc::experimental::MessageAllocator< ::VeriBlock::VeriBlockPublication, ::VeriBlock::GeneralReply>* allocator) {
      static_cast<::grpc::internal::CallbackUnaryHandler< ::VeriBlock::VeriBlockPublication, ::VeriBlock::GeneralReply>*>(
          ::grpc::Service::experimental().GetHandler(5))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_VerifyVeriBlockPublication() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status VerifyVeriBlockPublication(::grpc::ServerContext* context, const ::VeriBlock::VeriBlockPublication* request, ::VeriBlock::GeneralReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void VerifyVeriBlockPublication(::grpc::ServerContext* context, const ::VeriBlock::VeriBlockPublication* request, ::VeriBlock::GeneralReply* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_CheckBlocksVeriBlockPublication : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_CheckBlocksVeriBlockPublication() {
      ::grpc::Service::experimental().MarkMethodCallback(6,
        new ::grpc::internal::CallbackUnaryHandler< ::VeriBlock::VeriBlockPublication, ::VeriBlock::GeneralReply>(
          [this](::grpc::ServerContext* context,
                 const ::VeriBlock::VeriBlockPublication* request,
                 ::VeriBlock::GeneralReply* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->CheckBlocksVeriBlockPublication(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_CheckBlocksVeriBlockPublication(
        ::grpc::experimental::MessageAllocator< ::VeriBlock::VeriBlockPublication, ::VeriBlock::GeneralReply>* allocator) {
      static_cast<::grpc::internal::CallbackUnaryHandler< ::VeriBlock::VeriBlockPublication, ::VeriBlock::GeneralReply>*>(
          ::grpc::Service::experimental().GetHandler(6))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_CheckBlocksVeriBlockPublication() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CheckBlocksVeriBlockPublication(::grpc::ServerContext* context, const ::VeriBlock::VeriBlockPublication* request, ::VeriBlock::GeneralReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void CheckBlocksVeriBlockPublication(::grpc::ServerContext* context, const ::VeriBlock::VeriBlockPublication* request, ::VeriBlock::GeneralReply* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_CheckMerklePathVeriBlockPublication : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_CheckMerklePathVeriBlockPublication() {
      ::grpc::Service::experimental().MarkMethodCallback(7,
        new ::grpc::internal::CallbackUnaryHandler< ::VeriBlock::VeriBlockPublication, ::VeriBlock::GeneralReply>(
          [this](::grpc::ServerContext* context,
                 const ::VeriBlock::VeriBlockPublication* request,
                 ::VeriBlock::GeneralReply* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->CheckMerklePathVeriBlockPublication(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_CheckMerklePathVeriBlockPublication(
        ::grpc::experimental::MessageAllocator< ::VeriBlock::VeriBlockPublication, ::VeriBlock::GeneralReply>* allocator) {
      static_cast<::grpc::internal::CallbackUnaryHandler< ::VeriBlock::VeriBlockPublication, ::VeriBlock::GeneralReply>*>(
          ::grpc::Service::experimental().GetHandler(7))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_CheckMerklePathVeriBlockPublication() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CheckMerklePathVeriBlockPublication(::grpc::ServerContext* context, const ::VeriBlock::VeriBlockPublication* request, ::VeriBlock::GeneralReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void CheckMerklePathVeriBlockPublication(::grpc::ServerContext* context, const ::VeriBlock::VeriBlockPublication* request, ::VeriBlock::GeneralReply* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_VerifyVeriBlockTransaction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_VerifyVeriBlockTransaction() {
      ::grpc::Service::experimental().MarkMethodCallback(8,
        new ::grpc::internal::CallbackUnaryHandler< ::VeriBlock::VeriBlockTransaction, ::VeriBlock::GeneralReply>(
          [this](::grpc::ServerContext* context,
                 const ::VeriBlock::VeriBlockTransaction* request,
                 ::VeriBlock::GeneralReply* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->VerifyVeriBlockTransaction(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_VerifyVeriBlockTransaction(
        ::grpc::experimental::MessageAllocator< ::VeriBlock::VeriBlockTransaction, ::VeriBlock::GeneralReply>* allocator) {
      static_cast<::grpc::internal::CallbackUnaryHandler< ::VeriBlock::VeriBlockTransaction, ::VeriBlock::GeneralReply>*>(
          ::grpc::Service::experimental().GetHandler(8))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_VerifyVeriBlockTransaction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status VerifyVeriBlockTransaction(::grpc::ServerContext* context, const ::VeriBlock::VeriBlockTransaction* request, ::VeriBlock::GeneralReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void VerifyVeriBlockTransaction(::grpc::ServerContext* context, const ::VeriBlock::VeriBlockTransaction* request, ::VeriBlock::GeneralReply* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_CheckSignatureVeriBlockTransaction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_CheckSignatureVeriBlockTransaction() {
      ::grpc::Service::experimental().MarkMethodCallback(9,
        new ::grpc::internal::CallbackUnaryHandler< ::VeriBlock::VeriBlockTransaction, ::VeriBlock::GeneralReply>(
          [this](::grpc::ServerContext* context,
                 const ::VeriBlock::VeriBlockTransaction* request,
                 ::VeriBlock::GeneralReply* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->CheckSignatureVeriBlockTransaction(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_CheckSignatureVeriBlockTransaction(
        ::grpc::experimental::MessageAllocator< ::VeriBlock::VeriBlockTransaction, ::VeriBlock::GeneralReply>* allocator) {
      static_cast<::grpc::internal::CallbackUnaryHandler< ::VeriBlock::VeriBlockTransaction, ::VeriBlock::GeneralReply>*>(
          ::grpc::Service::experimental().GetHandler(9))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_CheckSignatureVeriBlockTransaction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CheckSignatureVeriBlockTransaction(::grpc::ServerContext* context, const ::VeriBlock::VeriBlockTransaction* request, ::VeriBlock::GeneralReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void CheckSignatureVeriBlockTransaction(::grpc::ServerContext* context, const ::VeriBlock::VeriBlockTransaction* request, ::VeriBlock::GeneralReply* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_VerifyVeriBlockBlock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_VerifyVeriBlockBlock() {
      ::grpc::Service::experimental().MarkMethodCallback(10,
        new ::grpc::internal::CallbackUnaryHandler< ::VeriBlock::VeriBlockBlock, ::VeriBlock::GeneralReply>(
          [this](::grpc::ServerContext* context,
                 const ::VeriBlock::VeriBlockBlock* request,
                 ::VeriBlock::GeneralReply* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->VerifyVeriBlockBlock(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_VerifyVeriBlockBlock(
        ::grpc::experimental::MessageAllocator< ::VeriBlock::VeriBlockBlock, ::VeriBlock::GeneralReply>* allocator) {
      static_cast<::grpc::internal::CallbackUnaryHandler< ::VeriBlock::VeriBlockBlock, ::VeriBlock::GeneralReply>*>(
          ::grpc::Service::experimental().GetHandler(10))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_VerifyVeriBlockBlock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status VerifyVeriBlockBlock(::grpc::ServerContext* context, const ::VeriBlock::VeriBlockBlock* request, ::VeriBlock::GeneralReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void VerifyVeriBlockBlock(::grpc::ServerContext* context, const ::VeriBlock::VeriBlockBlock* request, ::VeriBlock::GeneralReply* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_CheckProofOfWorkVeriBlockBlock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_CheckProofOfWorkVeriBlockBlock() {
      ::grpc::Service::experimental().MarkMethodCallback(11,
        new ::grpc::internal::CallbackUnaryHandler< ::VeriBlock::VeriBlockBlock, ::VeriBlock::GeneralReply>(
          [this](::grpc::ServerContext* context,
                 const ::VeriBlock::VeriBlockBlock* request,
                 ::VeriBlock::GeneralReply* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->CheckProofOfWorkVeriBlockBlock(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_CheckProofOfWorkVeriBlockBlock(
        ::grpc::experimental::MessageAllocator< ::VeriBlock::VeriBlockBlock, ::VeriBlock::GeneralReply>* allocator) {
      static_cast<::grpc::internal::CallbackUnaryHandler< ::VeriBlock::VeriBlockBlock, ::VeriBlock::GeneralReply>*>(
          ::grpc::Service::experimental().GetHandler(11))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_CheckProofOfWorkVeriBlockBlock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CheckProofOfWorkVeriBlockBlock(::grpc::ServerContext* context, const ::VeriBlock::VeriBlockBlock* request, ::VeriBlock::GeneralReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void CheckProofOfWorkVeriBlockBlock(::grpc::ServerContext* context, const ::VeriBlock::VeriBlockBlock* request, ::VeriBlock::GeneralReply* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_CheckMaximumDriftVeriBlockBlock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_CheckMaximumDriftVeriBlockBlock() {
      ::grpc::Service::experimental().MarkMethodCallback(12,
        new ::grpc::internal::CallbackUnaryHandler< ::VeriBlock::VeriBlockBlock, ::VeriBlock::GeneralReply>(
          [this](::grpc::ServerContext* context,
                 const ::VeriBlock::VeriBlockBlock* request,
                 ::VeriBlock::GeneralReply* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->CheckMaximumDriftVeriBlockBlock(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_CheckMaximumDriftVeriBlockBlock(
        ::grpc::experimental::MessageAllocator< ::VeriBlock::VeriBlockBlock, ::VeriBlock::GeneralReply>* allocator) {
      static_cast<::grpc::internal::CallbackUnaryHandler< ::VeriBlock::VeriBlockBlock, ::VeriBlock::GeneralReply>*>(
          ::grpc::Service::experimental().GetHandler(12))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_CheckMaximumDriftVeriBlockBlock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CheckMaximumDriftVeriBlockBlock(::grpc::ServerContext* context, const ::VeriBlock::VeriBlockBlock* request, ::VeriBlock::GeneralReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void CheckMaximumDriftVeriBlockBlock(::grpc::ServerContext* context, const ::VeriBlock::VeriBlockBlock* request, ::VeriBlock::GeneralReply* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_VerifyBitcoinBlock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_VerifyBitcoinBlock() {
      ::grpc::Service::experimental().MarkMethodCallback(13,
        new ::grpc::internal::CallbackUnaryHandler< ::VeriBlock::BitcoinBlock, ::VeriBlock::GeneralReply>(
          [this](::grpc::ServerContext* context,
                 const ::VeriBlock::BitcoinBlock* request,
                 ::VeriBlock::GeneralReply* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->VerifyBitcoinBlock(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_VerifyBitcoinBlock(
        ::grpc::experimental::MessageAllocator< ::VeriBlock::BitcoinBlock, ::VeriBlock::GeneralReply>* allocator) {
      static_cast<::grpc::internal::CallbackUnaryHandler< ::VeriBlock::BitcoinBlock, ::VeriBlock::GeneralReply>*>(
          ::grpc::Service::experimental().GetHandler(13))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_VerifyBitcoinBlock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status VerifyBitcoinBlock(::grpc::ServerContext* context, const ::VeriBlock::BitcoinBlock* request, ::VeriBlock::GeneralReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void VerifyBitcoinBlock(::grpc::ServerContext* context, const ::VeriBlock::BitcoinBlock* request, ::VeriBlock::GeneralReply* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_CheckProofOfWorkBitcoinBlock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_CheckProofOfWorkBitcoinBlock() {
      ::grpc::Service::experimental().MarkMethodCallback(14,
        new ::grpc::internal::CallbackUnaryHandler< ::VeriBlock::BitcoinBlock, ::VeriBlock::GeneralReply>(
          [this](::grpc::ServerContext* context,
                 const ::VeriBlock::BitcoinBlock* request,
                 ::VeriBlock::GeneralReply* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->CheckProofOfWorkBitcoinBlock(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_CheckProofOfWorkBitcoinBlock(
        ::grpc::experimental::MessageAllocator< ::VeriBlock::BitcoinBlock, ::VeriBlock::GeneralReply>* allocator) {
      static_cast<::grpc::internal::CallbackUnaryHandler< ::VeriBlock::BitcoinBlock, ::VeriBlock::GeneralReply>*>(
          ::grpc::Service::experimental().GetHandler(14))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_CheckProofOfWorkBitcoinBlock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CheckProofOfWorkBitcoinBlock(::grpc::ServerContext* context, const ::VeriBlock::BitcoinBlock* request, ::VeriBlock::GeneralReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void CheckProofOfWorkBitcoinBlock(::grpc::ServerContext* context, const ::VeriBlock::BitcoinBlock* request, ::VeriBlock::GeneralReply* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_CheckMaximumDriftBitcoinBlock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_CheckMaximumDriftBitcoinBlock() {
      ::grpc::Service::experimental().MarkMethodCallback(15,
        new ::grpc::internal::CallbackUnaryHandler< ::VeriBlock::BitcoinBlock, ::VeriBlock::GeneralReply>(
          [this](::grpc::ServerContext* context,
                 const ::VeriBlock::BitcoinBlock* request,
                 ::VeriBlock::GeneralReply* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->CheckMaximumDriftBitcoinBlock(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_CheckMaximumDriftBitcoinBlock(
        ::grpc::experimental::MessageAllocator< ::VeriBlock::BitcoinBlock, ::VeriBlock::GeneralReply>* allocator) {
      static_cast<::grpc::internal::CallbackUnaryHandler< ::VeriBlock::BitcoinBlock, ::VeriBlock::GeneralReply>*>(
          ::grpc::Service::experimental().GetHandler(15))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_CheckMaximumDriftBitcoinBlock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CheckMaximumDriftBitcoinBlock(::grpc::ServerContext* context, const ::VeriBlock::BitcoinBlock* request, ::VeriBlock::GeneralReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void CheckMaximumDriftBitcoinBlock(::grpc::ServerContext* context, const ::VeriBlock::BitcoinBlock* request, ::VeriBlock::GeneralReply* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_VerifyAltPublication : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_VerifyAltPublication() {
      ::grpc::Service::experimental().MarkMethodCallback(16,
        new ::grpc::internal::CallbackUnaryHandler< ::VeriBlock::AltPublication, ::VeriBlock::GeneralReply>(
          [this](::grpc::ServerContext* context,
                 const ::VeriBlock::AltPublication* request,
                 ::VeriBlock::GeneralReply* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->VerifyAltPublication(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_VerifyAltPublication(
        ::grpc::experimental::MessageAllocator< ::VeriBlock::AltPublication, ::VeriBlock::GeneralReply>* allocator) {
      static_cast<::grpc::internal::CallbackUnaryHandler< ::VeriBlock::AltPublication, ::VeriBlock::GeneralReply>*>(
          ::grpc::Service::experimental().GetHandler(16))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_VerifyAltPublication() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status VerifyAltPublication(::grpc::ServerContext* context, const ::VeriBlock::AltPublication* request, ::VeriBlock::GeneralReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void VerifyAltPublication(::grpc::ServerContext* context, const ::VeriBlock::AltPublication* request, ::VeriBlock::GeneralReply* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_CheckMerklePathAltPublication : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_CheckMerklePathAltPublication() {
      ::grpc::Service::experimental().MarkMethodCallback(17,
        new ::grpc::internal::CallbackUnaryHandler< ::VeriBlock::AltPublication, ::VeriBlock::GeneralReply>(
          [this](::grpc::ServerContext* context,
                 const ::VeriBlock::AltPublication* request,
                 ::VeriBlock::GeneralReply* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->CheckMerklePathAltPublication(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_CheckMerklePathAltPublication(
        ::grpc::experimental::MessageAllocator< ::VeriBlock::AltPublication, ::VeriBlock::GeneralReply>* allocator) {
      static_cast<::grpc::internal::CallbackUnaryHandler< ::VeriBlock::AltPublication, ::VeriBlock::GeneralReply>*>(
          ::grpc::Service::experimental().GetHandler(17))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_CheckMerklePathAltPublication() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CheckMerklePathAltPublication(::grpc::ServerContext* context, const ::VeriBlock::AltPublication* request, ::VeriBlock::GeneralReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void CheckMerklePathAltPublication(::grpc::ServerContext* context, const ::VeriBlock::AltPublication* request, ::VeriBlock::GeneralReply* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_CheckBlocksAltPublication : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_CheckBlocksAltPublication() {
      ::grpc::Service::experimental().MarkMethodCallback(18,
        new ::grpc::internal::CallbackUnaryHandler< ::VeriBlock::AltPublication, ::VeriBlock::GeneralReply>(
          [this](::grpc::ServerContext* context,
                 const ::VeriBlock::AltPublication* request,
                 ::VeriBlock::GeneralReply* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->CheckBlocksAltPublication(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_CheckBlocksAltPublication(
        ::grpc::experimental::MessageAllocator< ::VeriBlock::AltPublication, ::VeriBlock::GeneralReply>* allocator) {
      static_cast<::grpc::internal::CallbackUnaryHandler< ::VeriBlock::AltPublication, ::VeriBlock::GeneralReply>*>(
          ::grpc::Service::experimental().GetHandler(18))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_CheckBlocksAltPublication() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CheckBlocksAltPublication(::grpc::ServerContext* context, const ::VeriBlock::AltPublication* request, ::VeriBlock::GeneralReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void CheckBlocksAltPublication(::grpc::ServerContext* context, const ::VeriBlock::AltPublication* request, ::VeriBlock::GeneralReply* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  typedef ExperimentalWithCallbackMethod_VerifyVeriBlockPoPTx<ExperimentalWithCallbackMethod_CheckSignatureVeriBlockPoPTx<ExperimentalWithCallbackMethod_CheckBitcoinTransactionForPoPData<ExperimentalWithCallbackMethod_CheckBitcoinMerklePathVeriBlockPoPTx<ExperimentalWithCallbackMethod_CheckBitcoinBlocksVeriBlockPoPTx<ExperimentalWithCallbackMethod_VerifyVeriBlockPublication<ExperimentalWithCallbackMethod_CheckBlocksVeriBlockPublication<ExperimentalWithCallbackMethod_CheckMerklePathVeriBlockPublication<ExperimentalWithCallbackMethod_VerifyVeriBlockTransaction<ExperimentalWithCallbackMethod_CheckSignatureVeriBlockTransaction<ExperimentalWithCallbackMethod_VerifyVeriBlockBlock<ExperimentalWithCallbackMethod_CheckProofOfWorkVeriBlockBlock<ExperimentalWithCallbackMethod_CheckMaximumDriftVeriBlockBlock<ExperimentalWithCallbackMethod_VerifyBitcoinBlock<ExperimentalWithCallbackMethod_CheckProofOfWorkBitcoinBlock<ExperimentalWithCallbackMethod_CheckMaximumDriftBitcoinBlock<ExperimentalWithCallbackMethod_VerifyAltPublication<ExperimentalWithCallbackMethod_CheckMerklePathAltPublication<ExperimentalWithCallbackMethod_CheckBlocksAltPublication<Service > > > > > > > > > > > > > > > > > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_VerifyVeriBlockPoPTx : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_VerifyVeriBlockPoPTx() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_VerifyVeriBlockPoPTx() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status VerifyVeriBlockPoPTx(::grpc::ServerContext* context, const ::VeriBlock::VeriBlockPoPTransaction* request, ::VeriBlock::GeneralReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CheckSignatureVeriBlockPoPTx : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_CheckSignatureVeriBlockPoPTx() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_CheckSignatureVeriBlockPoPTx() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CheckSignatureVeriBlockPoPTx(::grpc::ServerContext* context, const ::VeriBlock::VeriBlockPoPTransaction* request, ::VeriBlock::GeneralReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CheckBitcoinTransactionForPoPData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_CheckBitcoinTransactionForPoPData() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_CheckBitcoinTransactionForPoPData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CheckBitcoinTransactionForPoPData(::grpc::ServerContext* context, const ::VeriBlock::VeriBlockPoPTransaction* request, ::VeriBlock::GeneralReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CheckBitcoinMerklePathVeriBlockPoPTx : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_CheckBitcoinMerklePathVeriBlockPoPTx() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_CheckBitcoinMerklePathVeriBlockPoPTx() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CheckBitcoinMerklePathVeriBlockPoPTx(::grpc::ServerContext* context, const ::VeriBlock::VeriBlockPoPTransaction* request, ::VeriBlock::GeneralReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CheckBitcoinBlocksVeriBlockPoPTx : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_CheckBitcoinBlocksVeriBlockPoPTx() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_CheckBitcoinBlocksVeriBlockPoPTx() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CheckBitcoinBlocksVeriBlockPoPTx(::grpc::ServerContext* context, const ::VeriBlock::VeriBlockPoPTransaction* request, ::VeriBlock::GeneralReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_VerifyVeriBlockPublication : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_VerifyVeriBlockPublication() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_VerifyVeriBlockPublication() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status VerifyVeriBlockPublication(::grpc::ServerContext* context, const ::VeriBlock::VeriBlockPublication* request, ::VeriBlock::GeneralReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CheckBlocksVeriBlockPublication : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_CheckBlocksVeriBlockPublication() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_CheckBlocksVeriBlockPublication() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CheckBlocksVeriBlockPublication(::grpc::ServerContext* context, const ::VeriBlock::VeriBlockPublication* request, ::VeriBlock::GeneralReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CheckMerklePathVeriBlockPublication : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_CheckMerklePathVeriBlockPublication() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_CheckMerklePathVeriBlockPublication() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CheckMerklePathVeriBlockPublication(::grpc::ServerContext* context, const ::VeriBlock::VeriBlockPublication* request, ::VeriBlock::GeneralReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_VerifyVeriBlockTransaction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_VerifyVeriBlockTransaction() {
      ::grpc::Service::MarkMethodGeneric(8);
    }
    ~WithGenericMethod_VerifyVeriBlockTransaction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status VerifyVeriBlockTransaction(::grpc::ServerContext* context, const ::VeriBlock::VeriBlockTransaction* request, ::VeriBlock::GeneralReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CheckSignatureVeriBlockTransaction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_CheckSignatureVeriBlockTransaction() {
      ::grpc::Service::MarkMethodGeneric(9);
    }
    ~WithGenericMethod_CheckSignatureVeriBlockTransaction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CheckSignatureVeriBlockTransaction(::grpc::ServerContext* context, const ::VeriBlock::VeriBlockTransaction* request, ::VeriBlock::GeneralReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_VerifyVeriBlockBlock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_VerifyVeriBlockBlock() {
      ::grpc::Service::MarkMethodGeneric(10);
    }
    ~WithGenericMethod_VerifyVeriBlockBlock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status VerifyVeriBlockBlock(::grpc::ServerContext* context, const ::VeriBlock::VeriBlockBlock* request, ::VeriBlock::GeneralReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CheckProofOfWorkVeriBlockBlock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_CheckProofOfWorkVeriBlockBlock() {
      ::grpc::Service::MarkMethodGeneric(11);
    }
    ~WithGenericMethod_CheckProofOfWorkVeriBlockBlock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CheckProofOfWorkVeriBlockBlock(::grpc::ServerContext* context, const ::VeriBlock::VeriBlockBlock* request, ::VeriBlock::GeneralReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CheckMaximumDriftVeriBlockBlock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_CheckMaximumDriftVeriBlockBlock() {
      ::grpc::Service::MarkMethodGeneric(12);
    }
    ~WithGenericMethod_CheckMaximumDriftVeriBlockBlock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CheckMaximumDriftVeriBlockBlock(::grpc::ServerContext* context, const ::VeriBlock::VeriBlockBlock* request, ::VeriBlock::GeneralReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_VerifyBitcoinBlock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_VerifyBitcoinBlock() {
      ::grpc::Service::MarkMethodGeneric(13);
    }
    ~WithGenericMethod_VerifyBitcoinBlock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status VerifyBitcoinBlock(::grpc::ServerContext* context, const ::VeriBlock::BitcoinBlock* request, ::VeriBlock::GeneralReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CheckProofOfWorkBitcoinBlock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_CheckProofOfWorkBitcoinBlock() {
      ::grpc::Service::MarkMethodGeneric(14);
    }
    ~WithGenericMethod_CheckProofOfWorkBitcoinBlock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CheckProofOfWorkBitcoinBlock(::grpc::ServerContext* context, const ::VeriBlock::BitcoinBlock* request, ::VeriBlock::GeneralReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CheckMaximumDriftBitcoinBlock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_CheckMaximumDriftBitcoinBlock() {
      ::grpc::Service::MarkMethodGeneric(15);
    }
    ~WithGenericMethod_CheckMaximumDriftBitcoinBlock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CheckMaximumDriftBitcoinBlock(::grpc::ServerContext* context, const ::VeriBlock::BitcoinBlock* request, ::VeriBlock::GeneralReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_VerifyAltPublication : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_VerifyAltPublication() {
      ::grpc::Service::MarkMethodGeneric(16);
    }
    ~WithGenericMethod_VerifyAltPublication() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status VerifyAltPublication(::grpc::ServerContext* context, const ::VeriBlock::AltPublication* request, ::VeriBlock::GeneralReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CheckMerklePathAltPublication : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_CheckMerklePathAltPublication() {
      ::grpc::Service::MarkMethodGeneric(17);
    }
    ~WithGenericMethod_CheckMerklePathAltPublication() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CheckMerklePathAltPublication(::grpc::ServerContext* context, const ::VeriBlock::AltPublication* request, ::VeriBlock::GeneralReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CheckBlocksAltPublication : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_CheckBlocksAltPublication() {
      ::grpc::Service::MarkMethodGeneric(18);
    }
    ~WithGenericMethod_CheckBlocksAltPublication() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CheckBlocksAltPublication(::grpc::ServerContext* context, const ::VeriBlock::AltPublication* request, ::VeriBlock::GeneralReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_VerifyVeriBlockPoPTx : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_VerifyVeriBlockPoPTx() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_VerifyVeriBlockPoPTx() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status VerifyVeriBlockPoPTx(::grpc::ServerContext* context, const ::VeriBlock::VeriBlockPoPTransaction* request, ::VeriBlock::GeneralReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestVerifyVeriBlockPoPTx(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CheckSignatureVeriBlockPoPTx : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_CheckSignatureVeriBlockPoPTx() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_CheckSignatureVeriBlockPoPTx() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CheckSignatureVeriBlockPoPTx(::grpc::ServerContext* context, const ::VeriBlock::VeriBlockPoPTransaction* request, ::VeriBlock::GeneralReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCheckSignatureVeriBlockPoPTx(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CheckBitcoinTransactionForPoPData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_CheckBitcoinTransactionForPoPData() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_CheckBitcoinTransactionForPoPData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CheckBitcoinTransactionForPoPData(::grpc::ServerContext* context, const ::VeriBlock::VeriBlockPoPTransaction* request, ::VeriBlock::GeneralReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCheckBitcoinTransactionForPoPData(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CheckBitcoinMerklePathVeriBlockPoPTx : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_CheckBitcoinMerklePathVeriBlockPoPTx() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_CheckBitcoinMerklePathVeriBlockPoPTx() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CheckBitcoinMerklePathVeriBlockPoPTx(::grpc::ServerContext* context, const ::VeriBlock::VeriBlockPoPTransaction* request, ::VeriBlock::GeneralReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCheckBitcoinMerklePathVeriBlockPoPTx(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CheckBitcoinBlocksVeriBlockPoPTx : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_CheckBitcoinBlocksVeriBlockPoPTx() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_CheckBitcoinBlocksVeriBlockPoPTx() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CheckBitcoinBlocksVeriBlockPoPTx(::grpc::ServerContext* context, const ::VeriBlock::VeriBlockPoPTransaction* request, ::VeriBlock::GeneralReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCheckBitcoinBlocksVeriBlockPoPTx(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_VerifyVeriBlockPublication : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_VerifyVeriBlockPublication() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_VerifyVeriBlockPublication() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status VerifyVeriBlockPublication(::grpc::ServerContext* context, const ::VeriBlock::VeriBlockPublication* request, ::VeriBlock::GeneralReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestVerifyVeriBlockPublication(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CheckBlocksVeriBlockPublication : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_CheckBlocksVeriBlockPublication() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_CheckBlocksVeriBlockPublication() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CheckBlocksVeriBlockPublication(::grpc::ServerContext* context, const ::VeriBlock::VeriBlockPublication* request, ::VeriBlock::GeneralReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCheckBlocksVeriBlockPublication(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CheckMerklePathVeriBlockPublication : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_CheckMerklePathVeriBlockPublication() {
      ::grpc::Service::MarkMethodRaw(7);
    }
    ~WithRawMethod_CheckMerklePathVeriBlockPublication() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CheckMerklePathVeriBlockPublication(::grpc::ServerContext* context, const ::VeriBlock::VeriBlockPublication* request, ::VeriBlock::GeneralReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCheckMerklePathVeriBlockPublication(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_VerifyVeriBlockTransaction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_VerifyVeriBlockTransaction() {
      ::grpc::Service::MarkMethodRaw(8);
    }
    ~WithRawMethod_VerifyVeriBlockTransaction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status VerifyVeriBlockTransaction(::grpc::ServerContext* context, const ::VeriBlock::VeriBlockTransaction* request, ::VeriBlock::GeneralReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestVerifyVeriBlockTransaction(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CheckSignatureVeriBlockTransaction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_CheckSignatureVeriBlockTransaction() {
      ::grpc::Service::MarkMethodRaw(9);
    }
    ~WithRawMethod_CheckSignatureVeriBlockTransaction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CheckSignatureVeriBlockTransaction(::grpc::ServerContext* context, const ::VeriBlock::VeriBlockTransaction* request, ::VeriBlock::GeneralReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCheckSignatureVeriBlockTransaction(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_VerifyVeriBlockBlock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_VerifyVeriBlockBlock() {
      ::grpc::Service::MarkMethodRaw(10);
    }
    ~WithRawMethod_VerifyVeriBlockBlock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status VerifyVeriBlockBlock(::grpc::ServerContext* context, const ::VeriBlock::VeriBlockBlock* request, ::VeriBlock::GeneralReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestVerifyVeriBlockBlock(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CheckProofOfWorkVeriBlockBlock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_CheckProofOfWorkVeriBlockBlock() {
      ::grpc::Service::MarkMethodRaw(11);
    }
    ~WithRawMethod_CheckProofOfWorkVeriBlockBlock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CheckProofOfWorkVeriBlockBlock(::grpc::ServerContext* context, const ::VeriBlock::VeriBlockBlock* request, ::VeriBlock::GeneralReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCheckProofOfWorkVeriBlockBlock(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(11, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CheckMaximumDriftVeriBlockBlock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_CheckMaximumDriftVeriBlockBlock() {
      ::grpc::Service::MarkMethodRaw(12);
    }
    ~WithRawMethod_CheckMaximumDriftVeriBlockBlock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CheckMaximumDriftVeriBlockBlock(::grpc::ServerContext* context, const ::VeriBlock::VeriBlockBlock* request, ::VeriBlock::GeneralReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCheckMaximumDriftVeriBlockBlock(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(12, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_VerifyBitcoinBlock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_VerifyBitcoinBlock() {
      ::grpc::Service::MarkMethodRaw(13);
    }
    ~WithRawMethod_VerifyBitcoinBlock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status VerifyBitcoinBlock(::grpc::ServerContext* context, const ::VeriBlock::BitcoinBlock* request, ::VeriBlock::GeneralReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestVerifyBitcoinBlock(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(13, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CheckProofOfWorkBitcoinBlock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_CheckProofOfWorkBitcoinBlock() {
      ::grpc::Service::MarkMethodRaw(14);
    }
    ~WithRawMethod_CheckProofOfWorkBitcoinBlock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CheckProofOfWorkBitcoinBlock(::grpc::ServerContext* context, const ::VeriBlock::BitcoinBlock* request, ::VeriBlock::GeneralReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCheckProofOfWorkBitcoinBlock(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(14, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CheckMaximumDriftBitcoinBlock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_CheckMaximumDriftBitcoinBlock() {
      ::grpc::Service::MarkMethodRaw(15);
    }
    ~WithRawMethod_CheckMaximumDriftBitcoinBlock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CheckMaximumDriftBitcoinBlock(::grpc::ServerContext* context, const ::VeriBlock::BitcoinBlock* request, ::VeriBlock::GeneralReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCheckMaximumDriftBitcoinBlock(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(15, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_VerifyAltPublication : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_VerifyAltPublication() {
      ::grpc::Service::MarkMethodRaw(16);
    }
    ~WithRawMethod_VerifyAltPublication() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status VerifyAltPublication(::grpc::ServerContext* context, const ::VeriBlock::AltPublication* request, ::VeriBlock::GeneralReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestVerifyAltPublication(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(16, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CheckMerklePathAltPublication : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_CheckMerklePathAltPublication() {
      ::grpc::Service::MarkMethodRaw(17);
    }
    ~WithRawMethod_CheckMerklePathAltPublication() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CheckMerklePathAltPublication(::grpc::ServerContext* context, const ::VeriBlock::AltPublication* request, ::VeriBlock::GeneralReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCheckMerklePathAltPublication(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(17, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CheckBlocksAltPublication : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_CheckBlocksAltPublication() {
      ::grpc::Service::MarkMethodRaw(18);
    }
    ~WithRawMethod_CheckBlocksAltPublication() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CheckBlocksAltPublication(::grpc::ServerContext* context, const ::VeriBlock::AltPublication* request, ::VeriBlock::GeneralReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCheckBlocksAltPublication(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(18, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_VerifyVeriBlockPoPTx : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_VerifyVeriBlockPoPTx() {
      ::grpc::Service::experimental().MarkMethodRawCallback(0,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->VerifyVeriBlockPoPTx(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_VerifyVeriBlockPoPTx() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status VerifyVeriBlockPoPTx(::grpc::ServerContext* context, const ::VeriBlock::VeriBlockPoPTransaction* request, ::VeriBlock::GeneralReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void VerifyVeriBlockPoPTx(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_CheckSignatureVeriBlockPoPTx : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_CheckSignatureVeriBlockPoPTx() {
      ::grpc::Service::experimental().MarkMethodRawCallback(1,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->CheckSignatureVeriBlockPoPTx(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_CheckSignatureVeriBlockPoPTx() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CheckSignatureVeriBlockPoPTx(::grpc::ServerContext* context, const ::VeriBlock::VeriBlockPoPTransaction* request, ::VeriBlock::GeneralReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void CheckSignatureVeriBlockPoPTx(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_CheckBitcoinTransactionForPoPData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_CheckBitcoinTransactionForPoPData() {
      ::grpc::Service::experimental().MarkMethodRawCallback(2,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->CheckBitcoinTransactionForPoPData(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_CheckBitcoinTransactionForPoPData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CheckBitcoinTransactionForPoPData(::grpc::ServerContext* context, const ::VeriBlock::VeriBlockPoPTransaction* request, ::VeriBlock::GeneralReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void CheckBitcoinTransactionForPoPData(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_CheckBitcoinMerklePathVeriBlockPoPTx : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_CheckBitcoinMerklePathVeriBlockPoPTx() {
      ::grpc::Service::experimental().MarkMethodRawCallback(3,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->CheckBitcoinMerklePathVeriBlockPoPTx(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_CheckBitcoinMerklePathVeriBlockPoPTx() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CheckBitcoinMerklePathVeriBlockPoPTx(::grpc::ServerContext* context, const ::VeriBlock::VeriBlockPoPTransaction* request, ::VeriBlock::GeneralReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void CheckBitcoinMerklePathVeriBlockPoPTx(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_CheckBitcoinBlocksVeriBlockPoPTx : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_CheckBitcoinBlocksVeriBlockPoPTx() {
      ::grpc::Service::experimental().MarkMethodRawCallback(4,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->CheckBitcoinBlocksVeriBlockPoPTx(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_CheckBitcoinBlocksVeriBlockPoPTx() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CheckBitcoinBlocksVeriBlockPoPTx(::grpc::ServerContext* context, const ::VeriBlock::VeriBlockPoPTransaction* request, ::VeriBlock::GeneralReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void CheckBitcoinBlocksVeriBlockPoPTx(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_VerifyVeriBlockPublication : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_VerifyVeriBlockPublication() {
      ::grpc::Service::experimental().MarkMethodRawCallback(5,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->VerifyVeriBlockPublication(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_VerifyVeriBlockPublication() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status VerifyVeriBlockPublication(::grpc::ServerContext* context, const ::VeriBlock::VeriBlockPublication* request, ::VeriBlock::GeneralReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void VerifyVeriBlockPublication(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_CheckBlocksVeriBlockPublication : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_CheckBlocksVeriBlockPublication() {
      ::grpc::Service::experimental().MarkMethodRawCallback(6,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->CheckBlocksVeriBlockPublication(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_CheckBlocksVeriBlockPublication() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CheckBlocksVeriBlockPublication(::grpc::ServerContext* context, const ::VeriBlock::VeriBlockPublication* request, ::VeriBlock::GeneralReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void CheckBlocksVeriBlockPublication(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_CheckMerklePathVeriBlockPublication : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_CheckMerklePathVeriBlockPublication() {
      ::grpc::Service::experimental().MarkMethodRawCallback(7,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->CheckMerklePathVeriBlockPublication(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_CheckMerklePathVeriBlockPublication() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CheckMerklePathVeriBlockPublication(::grpc::ServerContext* context, const ::VeriBlock::VeriBlockPublication* request, ::VeriBlock::GeneralReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void CheckMerklePathVeriBlockPublication(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_VerifyVeriBlockTransaction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_VerifyVeriBlockTransaction() {
      ::grpc::Service::experimental().MarkMethodRawCallback(8,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->VerifyVeriBlockTransaction(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_VerifyVeriBlockTransaction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status VerifyVeriBlockTransaction(::grpc::ServerContext* context, const ::VeriBlock::VeriBlockTransaction* request, ::VeriBlock::GeneralReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void VerifyVeriBlockTransaction(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_CheckSignatureVeriBlockTransaction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_CheckSignatureVeriBlockTransaction() {
      ::grpc::Service::experimental().MarkMethodRawCallback(9,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->CheckSignatureVeriBlockTransaction(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_CheckSignatureVeriBlockTransaction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CheckSignatureVeriBlockTransaction(::grpc::ServerContext* context, const ::VeriBlock::VeriBlockTransaction* request, ::VeriBlock::GeneralReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void CheckSignatureVeriBlockTransaction(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_VerifyVeriBlockBlock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_VerifyVeriBlockBlock() {
      ::grpc::Service::experimental().MarkMethodRawCallback(10,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->VerifyVeriBlockBlock(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_VerifyVeriBlockBlock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status VerifyVeriBlockBlock(::grpc::ServerContext* context, const ::VeriBlock::VeriBlockBlock* request, ::VeriBlock::GeneralReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void VerifyVeriBlockBlock(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_CheckProofOfWorkVeriBlockBlock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_CheckProofOfWorkVeriBlockBlock() {
      ::grpc::Service::experimental().MarkMethodRawCallback(11,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->CheckProofOfWorkVeriBlockBlock(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_CheckProofOfWorkVeriBlockBlock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CheckProofOfWorkVeriBlockBlock(::grpc::ServerContext* context, const ::VeriBlock::VeriBlockBlock* request, ::VeriBlock::GeneralReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void CheckProofOfWorkVeriBlockBlock(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_CheckMaximumDriftVeriBlockBlock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_CheckMaximumDriftVeriBlockBlock() {
      ::grpc::Service::experimental().MarkMethodRawCallback(12,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->CheckMaximumDriftVeriBlockBlock(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_CheckMaximumDriftVeriBlockBlock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CheckMaximumDriftVeriBlockBlock(::grpc::ServerContext* context, const ::VeriBlock::VeriBlockBlock* request, ::VeriBlock::GeneralReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void CheckMaximumDriftVeriBlockBlock(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_VerifyBitcoinBlock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_VerifyBitcoinBlock() {
      ::grpc::Service::experimental().MarkMethodRawCallback(13,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->VerifyBitcoinBlock(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_VerifyBitcoinBlock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status VerifyBitcoinBlock(::grpc::ServerContext* context, const ::VeriBlock::BitcoinBlock* request, ::VeriBlock::GeneralReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void VerifyBitcoinBlock(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_CheckProofOfWorkBitcoinBlock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_CheckProofOfWorkBitcoinBlock() {
      ::grpc::Service::experimental().MarkMethodRawCallback(14,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->CheckProofOfWorkBitcoinBlock(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_CheckProofOfWorkBitcoinBlock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CheckProofOfWorkBitcoinBlock(::grpc::ServerContext* context, const ::VeriBlock::BitcoinBlock* request, ::VeriBlock::GeneralReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void CheckProofOfWorkBitcoinBlock(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_CheckMaximumDriftBitcoinBlock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_CheckMaximumDriftBitcoinBlock() {
      ::grpc::Service::experimental().MarkMethodRawCallback(15,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->CheckMaximumDriftBitcoinBlock(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_CheckMaximumDriftBitcoinBlock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CheckMaximumDriftBitcoinBlock(::grpc::ServerContext* context, const ::VeriBlock::BitcoinBlock* request, ::VeriBlock::GeneralReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void CheckMaximumDriftBitcoinBlock(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_VerifyAltPublication : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_VerifyAltPublication() {
      ::grpc::Service::experimental().MarkMethodRawCallback(16,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->VerifyAltPublication(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_VerifyAltPublication() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status VerifyAltPublication(::grpc::ServerContext* context, const ::VeriBlock::AltPublication* request, ::VeriBlock::GeneralReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void VerifyAltPublication(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_CheckMerklePathAltPublication : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_CheckMerklePathAltPublication() {
      ::grpc::Service::experimental().MarkMethodRawCallback(17,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->CheckMerklePathAltPublication(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_CheckMerklePathAltPublication() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CheckMerklePathAltPublication(::grpc::ServerContext* context, const ::VeriBlock::AltPublication* request, ::VeriBlock::GeneralReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void CheckMerklePathAltPublication(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_CheckBlocksAltPublication : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_CheckBlocksAltPublication() {
      ::grpc::Service::experimental().MarkMethodRawCallback(18,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->CheckBlocksAltPublication(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_CheckBlocksAltPublication() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CheckBlocksAltPublication(::grpc::ServerContext* context, const ::VeriBlock::AltPublication* request, ::VeriBlock::GeneralReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void CheckBlocksAltPublication(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_VerifyVeriBlockPoPTx : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_VerifyVeriBlockPoPTx() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::VeriBlock::VeriBlockPoPTransaction, ::VeriBlock::GeneralReply>(std::bind(&WithStreamedUnaryMethod_VerifyVeriBlockPoPTx<BaseClass>::StreamedVerifyVeriBlockPoPTx, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_VerifyVeriBlockPoPTx() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status VerifyVeriBlockPoPTx(::grpc::ServerContext* context, const ::VeriBlock::VeriBlockPoPTransaction* request, ::VeriBlock::GeneralReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedVerifyVeriBlockPoPTx(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::VeriBlock::VeriBlockPoPTransaction,::VeriBlock::GeneralReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CheckSignatureVeriBlockPoPTx : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_CheckSignatureVeriBlockPoPTx() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::VeriBlock::VeriBlockPoPTransaction, ::VeriBlock::GeneralReply>(std::bind(&WithStreamedUnaryMethod_CheckSignatureVeriBlockPoPTx<BaseClass>::StreamedCheckSignatureVeriBlockPoPTx, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_CheckSignatureVeriBlockPoPTx() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CheckSignatureVeriBlockPoPTx(::grpc::ServerContext* context, const ::VeriBlock::VeriBlockPoPTransaction* request, ::VeriBlock::GeneralReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCheckSignatureVeriBlockPoPTx(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::VeriBlock::VeriBlockPoPTransaction,::VeriBlock::GeneralReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CheckBitcoinTransactionForPoPData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_CheckBitcoinTransactionForPoPData() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler< ::VeriBlock::VeriBlockPoPTransaction, ::VeriBlock::GeneralReply>(std::bind(&WithStreamedUnaryMethod_CheckBitcoinTransactionForPoPData<BaseClass>::StreamedCheckBitcoinTransactionForPoPData, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_CheckBitcoinTransactionForPoPData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CheckBitcoinTransactionForPoPData(::grpc::ServerContext* context, const ::VeriBlock::VeriBlockPoPTransaction* request, ::VeriBlock::GeneralReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCheckBitcoinTransactionForPoPData(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::VeriBlock::VeriBlockPoPTransaction,::VeriBlock::GeneralReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CheckBitcoinMerklePathVeriBlockPoPTx : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_CheckBitcoinMerklePathVeriBlockPoPTx() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler< ::VeriBlock::VeriBlockPoPTransaction, ::VeriBlock::GeneralReply>(std::bind(&WithStreamedUnaryMethod_CheckBitcoinMerklePathVeriBlockPoPTx<BaseClass>::StreamedCheckBitcoinMerklePathVeriBlockPoPTx, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_CheckBitcoinMerklePathVeriBlockPoPTx() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CheckBitcoinMerklePathVeriBlockPoPTx(::grpc::ServerContext* context, const ::VeriBlock::VeriBlockPoPTransaction* request, ::VeriBlock::GeneralReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCheckBitcoinMerklePathVeriBlockPoPTx(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::VeriBlock::VeriBlockPoPTransaction,::VeriBlock::GeneralReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CheckBitcoinBlocksVeriBlockPoPTx : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_CheckBitcoinBlocksVeriBlockPoPTx() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler< ::VeriBlock::VeriBlockPoPTransaction, ::VeriBlock::GeneralReply>(std::bind(&WithStreamedUnaryMethod_CheckBitcoinBlocksVeriBlockPoPTx<BaseClass>::StreamedCheckBitcoinBlocksVeriBlockPoPTx, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_CheckBitcoinBlocksVeriBlockPoPTx() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CheckBitcoinBlocksVeriBlockPoPTx(::grpc::ServerContext* context, const ::VeriBlock::VeriBlockPoPTransaction* request, ::VeriBlock::GeneralReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCheckBitcoinBlocksVeriBlockPoPTx(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::VeriBlock::VeriBlockPoPTransaction,::VeriBlock::GeneralReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_VerifyVeriBlockPublication : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_VerifyVeriBlockPublication() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler< ::VeriBlock::VeriBlockPublication, ::VeriBlock::GeneralReply>(std::bind(&WithStreamedUnaryMethod_VerifyVeriBlockPublication<BaseClass>::StreamedVerifyVeriBlockPublication, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_VerifyVeriBlockPublication() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status VerifyVeriBlockPublication(::grpc::ServerContext* context, const ::VeriBlock::VeriBlockPublication* request, ::VeriBlock::GeneralReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedVerifyVeriBlockPublication(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::VeriBlock::VeriBlockPublication,::VeriBlock::GeneralReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CheckBlocksVeriBlockPublication : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_CheckBlocksVeriBlockPublication() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler< ::VeriBlock::VeriBlockPublication, ::VeriBlock::GeneralReply>(std::bind(&WithStreamedUnaryMethod_CheckBlocksVeriBlockPublication<BaseClass>::StreamedCheckBlocksVeriBlockPublication, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_CheckBlocksVeriBlockPublication() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CheckBlocksVeriBlockPublication(::grpc::ServerContext* context, const ::VeriBlock::VeriBlockPublication* request, ::VeriBlock::GeneralReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCheckBlocksVeriBlockPublication(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::VeriBlock::VeriBlockPublication,::VeriBlock::GeneralReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CheckMerklePathVeriBlockPublication : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_CheckMerklePathVeriBlockPublication() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::internal::StreamedUnaryHandler< ::VeriBlock::VeriBlockPublication, ::VeriBlock::GeneralReply>(std::bind(&WithStreamedUnaryMethod_CheckMerklePathVeriBlockPublication<BaseClass>::StreamedCheckMerklePathVeriBlockPublication, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_CheckMerklePathVeriBlockPublication() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CheckMerklePathVeriBlockPublication(::grpc::ServerContext* context, const ::VeriBlock::VeriBlockPublication* request, ::VeriBlock::GeneralReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCheckMerklePathVeriBlockPublication(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::VeriBlock::VeriBlockPublication,::VeriBlock::GeneralReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_VerifyVeriBlockTransaction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_VerifyVeriBlockTransaction() {
      ::grpc::Service::MarkMethodStreamed(8,
        new ::grpc::internal::StreamedUnaryHandler< ::VeriBlock::VeriBlockTransaction, ::VeriBlock::GeneralReply>(std::bind(&WithStreamedUnaryMethod_VerifyVeriBlockTransaction<BaseClass>::StreamedVerifyVeriBlockTransaction, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_VerifyVeriBlockTransaction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status VerifyVeriBlockTransaction(::grpc::ServerContext* context, const ::VeriBlock::VeriBlockTransaction* request, ::VeriBlock::GeneralReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedVerifyVeriBlockTransaction(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::VeriBlock::VeriBlockTransaction,::VeriBlock::GeneralReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CheckSignatureVeriBlockTransaction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_CheckSignatureVeriBlockTransaction() {
      ::grpc::Service::MarkMethodStreamed(9,
        new ::grpc::internal::StreamedUnaryHandler< ::VeriBlock::VeriBlockTransaction, ::VeriBlock::GeneralReply>(std::bind(&WithStreamedUnaryMethod_CheckSignatureVeriBlockTransaction<BaseClass>::StreamedCheckSignatureVeriBlockTransaction, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_CheckSignatureVeriBlockTransaction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CheckSignatureVeriBlockTransaction(::grpc::ServerContext* context, const ::VeriBlock::VeriBlockTransaction* request, ::VeriBlock::GeneralReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCheckSignatureVeriBlockTransaction(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::VeriBlock::VeriBlockTransaction,::VeriBlock::GeneralReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_VerifyVeriBlockBlock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_VerifyVeriBlockBlock() {
      ::grpc::Service::MarkMethodStreamed(10,
        new ::grpc::internal::StreamedUnaryHandler< ::VeriBlock::VeriBlockBlock, ::VeriBlock::GeneralReply>(std::bind(&WithStreamedUnaryMethod_VerifyVeriBlockBlock<BaseClass>::StreamedVerifyVeriBlockBlock, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_VerifyVeriBlockBlock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status VerifyVeriBlockBlock(::grpc::ServerContext* context, const ::VeriBlock::VeriBlockBlock* request, ::VeriBlock::GeneralReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedVerifyVeriBlockBlock(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::VeriBlock::VeriBlockBlock,::VeriBlock::GeneralReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CheckProofOfWorkVeriBlockBlock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_CheckProofOfWorkVeriBlockBlock() {
      ::grpc::Service::MarkMethodStreamed(11,
        new ::grpc::internal::StreamedUnaryHandler< ::VeriBlock::VeriBlockBlock, ::VeriBlock::GeneralReply>(std::bind(&WithStreamedUnaryMethod_CheckProofOfWorkVeriBlockBlock<BaseClass>::StreamedCheckProofOfWorkVeriBlockBlock, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_CheckProofOfWorkVeriBlockBlock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CheckProofOfWorkVeriBlockBlock(::grpc::ServerContext* context, const ::VeriBlock::VeriBlockBlock* request, ::VeriBlock::GeneralReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCheckProofOfWorkVeriBlockBlock(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::VeriBlock::VeriBlockBlock,::VeriBlock::GeneralReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CheckMaximumDriftVeriBlockBlock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_CheckMaximumDriftVeriBlockBlock() {
      ::grpc::Service::MarkMethodStreamed(12,
        new ::grpc::internal::StreamedUnaryHandler< ::VeriBlock::VeriBlockBlock, ::VeriBlock::GeneralReply>(std::bind(&WithStreamedUnaryMethod_CheckMaximumDriftVeriBlockBlock<BaseClass>::StreamedCheckMaximumDriftVeriBlockBlock, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_CheckMaximumDriftVeriBlockBlock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CheckMaximumDriftVeriBlockBlock(::grpc::ServerContext* context, const ::VeriBlock::VeriBlockBlock* request, ::VeriBlock::GeneralReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCheckMaximumDriftVeriBlockBlock(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::VeriBlock::VeriBlockBlock,::VeriBlock::GeneralReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_VerifyBitcoinBlock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_VerifyBitcoinBlock() {
      ::grpc::Service::MarkMethodStreamed(13,
        new ::grpc::internal::StreamedUnaryHandler< ::VeriBlock::BitcoinBlock, ::VeriBlock::GeneralReply>(std::bind(&WithStreamedUnaryMethod_VerifyBitcoinBlock<BaseClass>::StreamedVerifyBitcoinBlock, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_VerifyBitcoinBlock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status VerifyBitcoinBlock(::grpc::ServerContext* context, const ::VeriBlock::BitcoinBlock* request, ::VeriBlock::GeneralReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedVerifyBitcoinBlock(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::VeriBlock::BitcoinBlock,::VeriBlock::GeneralReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CheckProofOfWorkBitcoinBlock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_CheckProofOfWorkBitcoinBlock() {
      ::grpc::Service::MarkMethodStreamed(14,
        new ::grpc::internal::StreamedUnaryHandler< ::VeriBlock::BitcoinBlock, ::VeriBlock::GeneralReply>(std::bind(&WithStreamedUnaryMethod_CheckProofOfWorkBitcoinBlock<BaseClass>::StreamedCheckProofOfWorkBitcoinBlock, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_CheckProofOfWorkBitcoinBlock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CheckProofOfWorkBitcoinBlock(::grpc::ServerContext* context, const ::VeriBlock::BitcoinBlock* request, ::VeriBlock::GeneralReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCheckProofOfWorkBitcoinBlock(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::VeriBlock::BitcoinBlock,::VeriBlock::GeneralReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CheckMaximumDriftBitcoinBlock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_CheckMaximumDriftBitcoinBlock() {
      ::grpc::Service::MarkMethodStreamed(15,
        new ::grpc::internal::StreamedUnaryHandler< ::VeriBlock::BitcoinBlock, ::VeriBlock::GeneralReply>(std::bind(&WithStreamedUnaryMethod_CheckMaximumDriftBitcoinBlock<BaseClass>::StreamedCheckMaximumDriftBitcoinBlock, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_CheckMaximumDriftBitcoinBlock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CheckMaximumDriftBitcoinBlock(::grpc::ServerContext* context, const ::VeriBlock::BitcoinBlock* request, ::VeriBlock::GeneralReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCheckMaximumDriftBitcoinBlock(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::VeriBlock::BitcoinBlock,::VeriBlock::GeneralReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_VerifyAltPublication : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_VerifyAltPublication() {
      ::grpc::Service::MarkMethodStreamed(16,
        new ::grpc::internal::StreamedUnaryHandler< ::VeriBlock::AltPublication, ::VeriBlock::GeneralReply>(std::bind(&WithStreamedUnaryMethod_VerifyAltPublication<BaseClass>::StreamedVerifyAltPublication, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_VerifyAltPublication() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status VerifyAltPublication(::grpc::ServerContext* context, const ::VeriBlock::AltPublication* request, ::VeriBlock::GeneralReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedVerifyAltPublication(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::VeriBlock::AltPublication,::VeriBlock::GeneralReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CheckMerklePathAltPublication : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_CheckMerklePathAltPublication() {
      ::grpc::Service::MarkMethodStreamed(17,
        new ::grpc::internal::StreamedUnaryHandler< ::VeriBlock::AltPublication, ::VeriBlock::GeneralReply>(std::bind(&WithStreamedUnaryMethod_CheckMerklePathAltPublication<BaseClass>::StreamedCheckMerklePathAltPublication, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_CheckMerklePathAltPublication() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CheckMerklePathAltPublication(::grpc::ServerContext* context, const ::VeriBlock::AltPublication* request, ::VeriBlock::GeneralReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCheckMerklePathAltPublication(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::VeriBlock::AltPublication,::VeriBlock::GeneralReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CheckBlocksAltPublication : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_CheckBlocksAltPublication() {
      ::grpc::Service::MarkMethodStreamed(18,
        new ::grpc::internal::StreamedUnaryHandler< ::VeriBlock::AltPublication, ::VeriBlock::GeneralReply>(std::bind(&WithStreamedUnaryMethod_CheckBlocksAltPublication<BaseClass>::StreamedCheckBlocksAltPublication, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_CheckBlocksAltPublication() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CheckBlocksAltPublication(::grpc::ServerContext* context, const ::VeriBlock::AltPublication* request, ::VeriBlock::GeneralReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCheckBlocksAltPublication(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::VeriBlock::AltPublication,::VeriBlock::GeneralReply>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_VerifyVeriBlockPoPTx<WithStreamedUnaryMethod_CheckSignatureVeriBlockPoPTx<WithStreamedUnaryMethod_CheckBitcoinTransactionForPoPData<WithStreamedUnaryMethod_CheckBitcoinMerklePathVeriBlockPoPTx<WithStreamedUnaryMethod_CheckBitcoinBlocksVeriBlockPoPTx<WithStreamedUnaryMethod_VerifyVeriBlockPublication<WithStreamedUnaryMethod_CheckBlocksVeriBlockPublication<WithStreamedUnaryMethod_CheckMerklePathVeriBlockPublication<WithStreamedUnaryMethod_VerifyVeriBlockTransaction<WithStreamedUnaryMethod_CheckSignatureVeriBlockTransaction<WithStreamedUnaryMethod_VerifyVeriBlockBlock<WithStreamedUnaryMethod_CheckProofOfWorkVeriBlockBlock<WithStreamedUnaryMethod_CheckMaximumDriftVeriBlockBlock<WithStreamedUnaryMethod_VerifyBitcoinBlock<WithStreamedUnaryMethod_CheckProofOfWorkBitcoinBlock<WithStreamedUnaryMethod_CheckMaximumDriftBitcoinBlock<WithStreamedUnaryMethod_VerifyAltPublication<WithStreamedUnaryMethod_CheckMerklePathAltPublication<WithStreamedUnaryMethod_CheckBlocksAltPublication<Service > > > > > > > > > > > > > > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_VerifyVeriBlockPoPTx<WithStreamedUnaryMethod_CheckSignatureVeriBlockPoPTx<WithStreamedUnaryMethod_CheckBitcoinTransactionForPoPData<WithStreamedUnaryMethod_CheckBitcoinMerklePathVeriBlockPoPTx<WithStreamedUnaryMethod_CheckBitcoinBlocksVeriBlockPoPTx<WithStreamedUnaryMethod_VerifyVeriBlockPublication<WithStreamedUnaryMethod_CheckBlocksVeriBlockPublication<WithStreamedUnaryMethod_CheckMerklePathVeriBlockPublication<WithStreamedUnaryMethod_VerifyVeriBlockTransaction<WithStreamedUnaryMethod_CheckSignatureVeriBlockTransaction<WithStreamedUnaryMethod_VerifyVeriBlockBlock<WithStreamedUnaryMethod_CheckProofOfWorkVeriBlockBlock<WithStreamedUnaryMethod_CheckMaximumDriftVeriBlockBlock<WithStreamedUnaryMethod_VerifyBitcoinBlock<WithStreamedUnaryMethod_CheckProofOfWorkBitcoinBlock<WithStreamedUnaryMethod_CheckMaximumDriftBitcoinBlock<WithStreamedUnaryMethod_VerifyAltPublication<WithStreamedUnaryMethod_CheckMerklePathAltPublication<WithStreamedUnaryMethod_CheckBlocksAltPublication<Service > > > > > > > > > > > > > > > > > > > StreamedService;
};

}  // namespace VeriBlock


#endif  // GRPC_integration_2eproto__INCLUDED
