// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: integration.proto

#include "integration.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_integration_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Address_integration_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_integration_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AltChainBlock_integration_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_integration_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_AltPublication_integration_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_integration_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BitcoinBlock_integration_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_integration_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BitcoinTransaction_integration_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_integration_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BlockIndex_integration_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_integration_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_CalculatorConfig_integration_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_integration_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Coin_integration_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_integration_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FlatScoreRoundConfig_integration_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_integration_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GeneralReply_integration_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_integration_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MerklePath_integration_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_integration_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NetworkByte_integration_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_integration_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Output_integration_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_integration_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PopEndorsement_integration_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_integration_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PublicationData_integration_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_integration_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RelativeScoreConfig_integration_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_integration_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RewardCurveConfig_integration_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_integration_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RewardEndorsement_integration_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_integration_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RewardOutput_integration_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_integration_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RoundRatioConfig_integration_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_integration_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_VeriBlockBlock_integration_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_integration_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_VeriBlockMerklePath_integration_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_integration_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_VeriBlockPoPTransaction_integration_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_integration_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_VeriBlockPublication_integration_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_integration_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_VeriBlockTransaction_integration_2eproto;
namespace VeriBlock {
class PublicationDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PublicationData> _instance;
} _PublicationData_default_instance_;
class BitcoinBlockDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BitcoinBlock> _instance;
} _BitcoinBlock_default_instance_;
class BitcoinTransactionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BitcoinTransaction> _instance;
} _BitcoinTransaction_default_instance_;
class VeriBlockBlockDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VeriBlockBlock> _instance;
} _VeriBlockBlock_default_instance_;
class NetworkByteDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NetworkByte> _instance;
} _NetworkByte_default_instance_;
class VeriBlockTransactionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VeriBlockTransaction> _instance;
} _VeriBlockTransaction_default_instance_;
class AddressDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Address> _instance;
} _Address_default_instance_;
class CoinDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Coin> _instance;
} _Coin_default_instance_;
class OutputDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Output> _instance;
} _Output_default_instance_;
class AltPublicationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AltPublication> _instance;
} _AltPublication_default_instance_;
class VeriBlockPoPTransactionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VeriBlockPoPTransaction> _instance;
} _VeriBlockPoPTransaction_default_instance_;
class VeriBlockPublicationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VeriBlockPublication> _instance;
} _VeriBlockPublication_default_instance_;
class EmptyRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EmptyRequest> _instance;
} _EmptyRequest_default_instance_;
class GeneralReplyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GeneralReply> _instance;
} _GeneralReply_default_instance_;
class BlockIndexDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BlockIndex> _instance;
} _BlockIndex_default_instance_;
class AddPayloadsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AddPayloadsRequest> _instance;
} _AddPayloadsRequest_default_instance_;
class AddTemporaryPayloadsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AddTemporaryPayloadsRequest> _instance;
} _AddTemporaryPayloadsRequest_default_instance_;
class SimplifyVTBsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SimplifyVTBsRequest> _instance;
} _SimplifyVTBsRequest_default_instance_;
class SimplifyVTBsReplyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SimplifyVTBsReply> _instance;
} _SimplifyVTBsReply_default_instance_;
class GetMainVBKHeightOfATVReplyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetMainVBKHeightOfATVReply> _instance;
} _GetMainVBKHeightOfATVReply_default_instance_;
class RemovePayloadsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RemovePayloadsRequest> _instance;
} _RemovePayloadsRequest_default_instance_;
class AltChainConfigRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AltChainConfigRequest> _instance;
} _AltChainConfigRequest_default_instance_;
class GetLastKnownBlocksRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetLastKnownBlocksRequest> _instance;
} _GetLastKnownBlocksRequest_default_instance_;
class GetLastKnownVBKBlocksReplyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetLastKnownVBKBlocksReply> _instance;
} _GetLastKnownVBKBlocksReply_default_instance_;
class GetLastKnownBTCBlocksReplyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetLastKnownBTCBlocksReply> _instance;
} _GetLastKnownBTCBlocksReply_default_instance_;
class RoundRatioConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RoundRatioConfig> _instance;
} _RoundRatioConfig_default_instance_;
class RewardCurveConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RewardCurveConfig> _instance;
} _RewardCurveConfig_default_instance_;
class RelativeScoreConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RelativeScoreConfig> _instance;
} _RelativeScoreConfig_default_instance_;
class FlatScoreRoundConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FlatScoreRoundConfig> _instance;
} _FlatScoreRoundConfig_default_instance_;
class CalculatorConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CalculatorConfig> _instance;
} _CalculatorConfig_default_instance_;
class SetCalculatorRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SetCalculatorRequest> _instance;
} _SetCalculatorRequest_default_instance_;
class GetCalculatorReplyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetCalculatorReply> _instance;
} _GetCalculatorReply_default_instance_;
class RewardOutputDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RewardOutput> _instance;
} _RewardOutput_default_instance_;
class PopEndorsementDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PopEndorsement> _instance;
} _PopEndorsement_default_instance_;
class RewardEndorsementDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RewardEndorsement> _instance;
} _RewardEndorsement_default_instance_;
class RewardsCalculateScoreRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RewardsCalculateScoreRequest> _instance;
} _RewardsCalculateScoreRequest_default_instance_;
class RewardsCalculateScoreReplyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RewardsCalculateScoreReply> _instance;
} _RewardsCalculateScoreReply_default_instance_;
class RewardsCalculateOutputsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RewardsCalculateOutputsRequest> _instance;
} _RewardsCalculateOutputsRequest_default_instance_;
class RewardsCalculateOutputsReplyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RewardsCalculateOutputsReply> _instance;
} _RewardsCalculateOutputsReply_default_instance_;
class BytesArrayRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BytesArrayRequest> _instance;
} _BytesArrayRequest_default_instance_;
class BytesArrayReplyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BytesArrayReply> _instance;
} _BytesArrayReply_default_instance_;
class MerklePathDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MerklePath> _instance;
} _MerklePath_default_instance_;
class MerklePathRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MerklePathRequest> _instance;
} _MerklePathRequest_default_instance_;
class VeriBlockMerklePathDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VeriBlockMerklePath> _instance;
} _VeriBlockMerklePath_default_instance_;
class AltPublicationReplyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AltPublicationReply> _instance;
} _AltPublicationReply_default_instance_;
class PublicationDataReplyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PublicationDataReply> _instance;
} _PublicationDataReply_default_instance_;
class BitcoinTransactionReplyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BitcoinTransactionReply> _instance;
} _BitcoinTransactionReply_default_instance_;
class VeriBlockBlockReplyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VeriBlockBlockReply> _instance;
} _VeriBlockBlockReply_default_instance_;
class VeriBlockTransactionReplyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VeriBlockTransactionReply> _instance;
} _VeriBlockTransactionReply_default_instance_;
class VeriBlockPublicationReplyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VeriBlockPublicationReply> _instance;
} _VeriBlockPublicationReply_default_instance_;
class VeriBlockPoPTransactionReplyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VeriBlockPoPTransactionReply> _instance;
} _VeriBlockPoPTransactionReply_default_instance_;
class OutputReplyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OutputReply> _instance;
} _OutputReply_default_instance_;
class AddressReplyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AddressReply> _instance;
} _AddressReply_default_instance_;
class BitcoinBlockReplyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BitcoinBlockReply> _instance;
} _BitcoinBlockReply_default_instance_;
class VeriBlockMerklePathReplyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VeriBlockMerklePathReply> _instance;
} _VeriBlockMerklePathReply_default_instance_;
class MerklePathReplyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MerklePathReply> _instance;
} _MerklePathReply_default_instance_;
class AltChainBlockDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AltChainBlock> _instance;
} _AltChainBlock_default_instance_;
class TwoBranchesRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TwoBranchesRequest> _instance;
} _TwoBranchesRequest_default_instance_;
class CompareReplyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CompareReply> _instance;
} _CompareReply_default_instance_;
class ForkresolutionConfigRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ForkresolutionConfigRequest> _instance;
} _ForkresolutionConfigRequest_default_instance_;
}  // namespace VeriBlock
static void InitDefaultsscc_info_AddPayloadsRequest_integration_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::VeriBlock::_AddPayloadsRequest_default_instance_;
    new (ptr) ::VeriBlock::AddPayloadsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::VeriBlock::AddPayloadsRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_AddPayloadsRequest_integration_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsscc_info_AddPayloadsRequest_integration_2eproto}, {
      &scc_info_BlockIndex_integration_2eproto.base,
      &scc_info_VeriBlockPublication_integration_2eproto.base,
      &scc_info_AltPublication_integration_2eproto.base,}};

static void InitDefaultsscc_info_AddTemporaryPayloadsRequest_integration_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::VeriBlock::_AddTemporaryPayloadsRequest_default_instance_;
    new (ptr) ::VeriBlock::AddTemporaryPayloadsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::VeriBlock::AddTemporaryPayloadsRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_AddTemporaryPayloadsRequest_integration_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_AddTemporaryPayloadsRequest_integration_2eproto}, {
      &scc_info_VeriBlockPublication_integration_2eproto.base,
      &scc_info_AltPublication_integration_2eproto.base,}};

static void InitDefaultsscc_info_Address_integration_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::VeriBlock::_Address_default_instance_;
    new (ptr) ::VeriBlock::Address();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::VeriBlock::Address::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Address_integration_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_Address_integration_2eproto}, {}};

static void InitDefaultsscc_info_AddressReply_integration_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::VeriBlock::_AddressReply_default_instance_;
    new (ptr) ::VeriBlock::AddressReply();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::VeriBlock::AddressReply::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_AddressReply_integration_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_AddressReply_integration_2eproto}, {
      &scc_info_GeneralReply_integration_2eproto.base,
      &scc_info_Address_integration_2eproto.base,}};

static void InitDefaultsscc_info_AltChainBlock_integration_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::VeriBlock::_AltChainBlock_default_instance_;
    new (ptr) ::VeriBlock::AltChainBlock();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::VeriBlock::AltChainBlock::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AltChainBlock_integration_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_AltChainBlock_integration_2eproto}, {
      &scc_info_BlockIndex_integration_2eproto.base,}};

static void InitDefaultsscc_info_AltChainConfigRequest_integration_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::VeriBlock::_AltChainConfigRequest_default_instance_;
    new (ptr) ::VeriBlock::AltChainConfigRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::VeriBlock::AltChainConfigRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AltChainConfigRequest_integration_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_AltChainConfigRequest_integration_2eproto}, {}};

static void InitDefaultsscc_info_AltPublication_integration_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::VeriBlock::_AltPublication_default_instance_;
    new (ptr) ::VeriBlock::AltPublication();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::VeriBlock::AltPublication::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_AltPublication_integration_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_AltPublication_integration_2eproto}, {
      &scc_info_VeriBlockTransaction_integration_2eproto.base,
      &scc_info_VeriBlockBlock_integration_2eproto.base,}};

static void InitDefaultsscc_info_AltPublicationReply_integration_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::VeriBlock::_AltPublicationReply_default_instance_;
    new (ptr) ::VeriBlock::AltPublicationReply();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::VeriBlock::AltPublicationReply::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_AltPublicationReply_integration_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_AltPublicationReply_integration_2eproto}, {
      &scc_info_GeneralReply_integration_2eproto.base,
      &scc_info_AltPublication_integration_2eproto.base,}};

static void InitDefaultsscc_info_BitcoinBlock_integration_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::VeriBlock::_BitcoinBlock_default_instance_;
    new (ptr) ::VeriBlock::BitcoinBlock();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::VeriBlock::BitcoinBlock::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BitcoinBlock_integration_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_BitcoinBlock_integration_2eproto}, {}};

static void InitDefaultsscc_info_BitcoinBlockReply_integration_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::VeriBlock::_BitcoinBlockReply_default_instance_;
    new (ptr) ::VeriBlock::BitcoinBlockReply();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::VeriBlock::BitcoinBlockReply::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_BitcoinBlockReply_integration_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_BitcoinBlockReply_integration_2eproto}, {
      &scc_info_GeneralReply_integration_2eproto.base,
      &scc_info_BitcoinBlock_integration_2eproto.base,}};

static void InitDefaultsscc_info_BitcoinTransaction_integration_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::VeriBlock::_BitcoinTransaction_default_instance_;
    new (ptr) ::VeriBlock::BitcoinTransaction();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::VeriBlock::BitcoinTransaction::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BitcoinTransaction_integration_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_BitcoinTransaction_integration_2eproto}, {}};

static void InitDefaultsscc_info_BitcoinTransactionReply_integration_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::VeriBlock::_BitcoinTransactionReply_default_instance_;
    new (ptr) ::VeriBlock::BitcoinTransactionReply();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::VeriBlock::BitcoinTransactionReply::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_BitcoinTransactionReply_integration_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_BitcoinTransactionReply_integration_2eproto}, {
      &scc_info_GeneralReply_integration_2eproto.base,
      &scc_info_BitcoinTransaction_integration_2eproto.base,}};

static void InitDefaultsscc_info_BlockIndex_integration_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::VeriBlock::_BlockIndex_default_instance_;
    new (ptr) ::VeriBlock::BlockIndex();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::VeriBlock::BlockIndex::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BlockIndex_integration_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_BlockIndex_integration_2eproto}, {}};

static void InitDefaultsscc_info_BytesArrayReply_integration_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::VeriBlock::_BytesArrayReply_default_instance_;
    new (ptr) ::VeriBlock::BytesArrayReply();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::VeriBlock::BytesArrayReply::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_BytesArrayReply_integration_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_BytesArrayReply_integration_2eproto}, {
      &scc_info_GeneralReply_integration_2eproto.base,}};

static void InitDefaultsscc_info_BytesArrayRequest_integration_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::VeriBlock::_BytesArrayRequest_default_instance_;
    new (ptr) ::VeriBlock::BytesArrayRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::VeriBlock::BytesArrayRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BytesArrayRequest_integration_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_BytesArrayRequest_integration_2eproto}, {}};

static void InitDefaultsscc_info_CalculatorConfig_integration_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::VeriBlock::_CalculatorConfig_default_instance_;
    new (ptr) ::VeriBlock::CalculatorConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::VeriBlock::CalculatorConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_CalculatorConfig_integration_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, InitDefaultsscc_info_CalculatorConfig_integration_2eproto}, {
      &scc_info_RoundRatioConfig_integration_2eproto.base,
      &scc_info_RewardCurveConfig_integration_2eproto.base,
      &scc_info_RelativeScoreConfig_integration_2eproto.base,
      &scc_info_FlatScoreRoundConfig_integration_2eproto.base,}};

static void InitDefaultsscc_info_Coin_integration_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::VeriBlock::_Coin_default_instance_;
    new (ptr) ::VeriBlock::Coin();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::VeriBlock::Coin::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Coin_integration_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_Coin_integration_2eproto}, {}};

static void InitDefaultsscc_info_CompareReply_integration_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::VeriBlock::_CompareReply_default_instance_;
    new (ptr) ::VeriBlock::CompareReply();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::VeriBlock::CompareReply::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CompareReply_integration_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_CompareReply_integration_2eproto}, {
      &scc_info_GeneralReply_integration_2eproto.base,}};

static void InitDefaultsscc_info_EmptyRequest_integration_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::VeriBlock::_EmptyRequest_default_instance_;
    new (ptr) ::VeriBlock::EmptyRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::VeriBlock::EmptyRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EmptyRequest_integration_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_EmptyRequest_integration_2eproto}, {}};

static void InitDefaultsscc_info_FlatScoreRoundConfig_integration_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::VeriBlock::_FlatScoreRoundConfig_default_instance_;
    new (ptr) ::VeriBlock::FlatScoreRoundConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::VeriBlock::FlatScoreRoundConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FlatScoreRoundConfig_integration_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_FlatScoreRoundConfig_integration_2eproto}, {}};

static void InitDefaultsscc_info_ForkresolutionConfigRequest_integration_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::VeriBlock::_ForkresolutionConfigRequest_default_instance_;
    new (ptr) ::VeriBlock::ForkresolutionConfigRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::VeriBlock::ForkresolutionConfigRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ForkresolutionConfigRequest_integration_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ForkresolutionConfigRequest_integration_2eproto}, {}};

static void InitDefaultsscc_info_GeneralReply_integration_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::VeriBlock::_GeneralReply_default_instance_;
    new (ptr) ::VeriBlock::GeneralReply();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::VeriBlock::GeneralReply::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GeneralReply_integration_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_GeneralReply_integration_2eproto}, {}};

static void InitDefaultsscc_info_GetCalculatorReply_integration_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::VeriBlock::_GetCalculatorReply_default_instance_;
    new (ptr) ::VeriBlock::GetCalculatorReply();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::VeriBlock::GetCalculatorReply::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_GetCalculatorReply_integration_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_GetCalculatorReply_integration_2eproto}, {
      &scc_info_GeneralReply_integration_2eproto.base,
      &scc_info_CalculatorConfig_integration_2eproto.base,}};

static void InitDefaultsscc_info_GetLastKnownBTCBlocksReply_integration_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::VeriBlock::_GetLastKnownBTCBlocksReply_default_instance_;
    new (ptr) ::VeriBlock::GetLastKnownBTCBlocksReply();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::VeriBlock::GetLastKnownBTCBlocksReply::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetLastKnownBTCBlocksReply_integration_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_GetLastKnownBTCBlocksReply_integration_2eproto}, {
      &scc_info_GeneralReply_integration_2eproto.base,}};

static void InitDefaultsscc_info_GetLastKnownBlocksRequest_integration_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::VeriBlock::_GetLastKnownBlocksRequest_default_instance_;
    new (ptr) ::VeriBlock::GetLastKnownBlocksRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::VeriBlock::GetLastKnownBlocksRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetLastKnownBlocksRequest_integration_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_GetLastKnownBlocksRequest_integration_2eproto}, {}};

static void InitDefaultsscc_info_GetLastKnownVBKBlocksReply_integration_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::VeriBlock::_GetLastKnownVBKBlocksReply_default_instance_;
    new (ptr) ::VeriBlock::GetLastKnownVBKBlocksReply();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::VeriBlock::GetLastKnownVBKBlocksReply::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetLastKnownVBKBlocksReply_integration_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_GetLastKnownVBKBlocksReply_integration_2eproto}, {
      &scc_info_GeneralReply_integration_2eproto.base,}};

static void InitDefaultsscc_info_GetMainVBKHeightOfATVReply_integration_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::VeriBlock::_GetMainVBKHeightOfATVReply_default_instance_;
    new (ptr) ::VeriBlock::GetMainVBKHeightOfATVReply();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::VeriBlock::GetMainVBKHeightOfATVReply::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetMainVBKHeightOfATVReply_integration_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_GetMainVBKHeightOfATVReply_integration_2eproto}, {
      &scc_info_GeneralReply_integration_2eproto.base,}};

static void InitDefaultsscc_info_MerklePath_integration_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::VeriBlock::_MerklePath_default_instance_;
    new (ptr) ::VeriBlock::MerklePath();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::VeriBlock::MerklePath::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MerklePath_integration_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_MerklePath_integration_2eproto}, {}};

static void InitDefaultsscc_info_MerklePathReply_integration_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::VeriBlock::_MerklePathReply_default_instance_;
    new (ptr) ::VeriBlock::MerklePathReply();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::VeriBlock::MerklePathReply::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_MerklePathReply_integration_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_MerklePathReply_integration_2eproto}, {
      &scc_info_GeneralReply_integration_2eproto.base,
      &scc_info_MerklePath_integration_2eproto.base,}};

static void InitDefaultsscc_info_MerklePathRequest_integration_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::VeriBlock::_MerklePathRequest_default_instance_;
    new (ptr) ::VeriBlock::MerklePathRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::VeriBlock::MerklePathRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MerklePathRequest_integration_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_MerklePathRequest_integration_2eproto}, {}};

static void InitDefaultsscc_info_NetworkByte_integration_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::VeriBlock::_NetworkByte_default_instance_;
    new (ptr) ::VeriBlock::NetworkByte();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::VeriBlock::NetworkByte::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NetworkByte_integration_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_NetworkByte_integration_2eproto}, {}};

static void InitDefaultsscc_info_Output_integration_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::VeriBlock::_Output_default_instance_;
    new (ptr) ::VeriBlock::Output();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::VeriBlock::Output::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Output_integration_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_Output_integration_2eproto}, {
      &scc_info_Address_integration_2eproto.base,
      &scc_info_Coin_integration_2eproto.base,}};

static void InitDefaultsscc_info_OutputReply_integration_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::VeriBlock::_OutputReply_default_instance_;
    new (ptr) ::VeriBlock::OutputReply();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::VeriBlock::OutputReply::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_OutputReply_integration_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_OutputReply_integration_2eproto}, {
      &scc_info_GeneralReply_integration_2eproto.base,
      &scc_info_Output_integration_2eproto.base,}};

static void InitDefaultsscc_info_PopEndorsement_integration_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::VeriBlock::_PopEndorsement_default_instance_;
    new (ptr) ::VeriBlock::PopEndorsement();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::VeriBlock::PopEndorsement::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PopEndorsement_integration_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_PopEndorsement_integration_2eproto}, {}};

static void InitDefaultsscc_info_PublicationData_integration_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::VeriBlock::_PublicationData_default_instance_;
    new (ptr) ::VeriBlock::PublicationData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::VeriBlock::PublicationData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PublicationData_integration_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_PublicationData_integration_2eproto}, {}};

static void InitDefaultsscc_info_PublicationDataReply_integration_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::VeriBlock::_PublicationDataReply_default_instance_;
    new (ptr) ::VeriBlock::PublicationDataReply();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::VeriBlock::PublicationDataReply::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_PublicationDataReply_integration_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_PublicationDataReply_integration_2eproto}, {
      &scc_info_GeneralReply_integration_2eproto.base,
      &scc_info_PublicationData_integration_2eproto.base,}};

static void InitDefaultsscc_info_RelativeScoreConfig_integration_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::VeriBlock::_RelativeScoreConfig_default_instance_;
    new (ptr) ::VeriBlock::RelativeScoreConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::VeriBlock::RelativeScoreConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RelativeScoreConfig_integration_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_RelativeScoreConfig_integration_2eproto}, {}};

static void InitDefaultsscc_info_RemovePayloadsRequest_integration_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::VeriBlock::_RemovePayloadsRequest_default_instance_;
    new (ptr) ::VeriBlock::RemovePayloadsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::VeriBlock::RemovePayloadsRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RemovePayloadsRequest_integration_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_RemovePayloadsRequest_integration_2eproto}, {
      &scc_info_BlockIndex_integration_2eproto.base,}};

static void InitDefaultsscc_info_RewardCurveConfig_integration_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::VeriBlock::_RewardCurveConfig_default_instance_;
    new (ptr) ::VeriBlock::RewardCurveConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::VeriBlock::RewardCurveConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RewardCurveConfig_integration_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_RewardCurveConfig_integration_2eproto}, {}};

static void InitDefaultsscc_info_RewardEndorsement_integration_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::VeriBlock::_RewardEndorsement_default_instance_;
    new (ptr) ::VeriBlock::RewardEndorsement();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::VeriBlock::RewardEndorsement::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RewardEndorsement_integration_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_RewardEndorsement_integration_2eproto}, {
      &scc_info_PopEndorsement_integration_2eproto.base,}};

static void InitDefaultsscc_info_RewardOutput_integration_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::VeriBlock::_RewardOutput_default_instance_;
    new (ptr) ::VeriBlock::RewardOutput();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::VeriBlock::RewardOutput::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RewardOutput_integration_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_RewardOutput_integration_2eproto}, {}};

static void InitDefaultsscc_info_RewardsCalculateOutputsReply_integration_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::VeriBlock::_RewardsCalculateOutputsReply_default_instance_;
    new (ptr) ::VeriBlock::RewardsCalculateOutputsReply();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::VeriBlock::RewardsCalculateOutputsReply::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_RewardsCalculateOutputsReply_integration_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_RewardsCalculateOutputsReply_integration_2eproto}, {
      &scc_info_GeneralReply_integration_2eproto.base,
      &scc_info_RewardOutput_integration_2eproto.base,}};

static void InitDefaultsscc_info_RewardsCalculateOutputsRequest_integration_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::VeriBlock::_RewardsCalculateOutputsRequest_default_instance_;
    new (ptr) ::VeriBlock::RewardsCalculateOutputsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::VeriBlock::RewardsCalculateOutputsRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RewardsCalculateOutputsRequest_integration_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_RewardsCalculateOutputsRequest_integration_2eproto}, {
      &scc_info_RewardEndorsement_integration_2eproto.base,}};

static void InitDefaultsscc_info_RewardsCalculateScoreReply_integration_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::VeriBlock::_RewardsCalculateScoreReply_default_instance_;
    new (ptr) ::VeriBlock::RewardsCalculateScoreReply();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::VeriBlock::RewardsCalculateScoreReply::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RewardsCalculateScoreReply_integration_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_RewardsCalculateScoreReply_integration_2eproto}, {
      &scc_info_GeneralReply_integration_2eproto.base,}};

static void InitDefaultsscc_info_RewardsCalculateScoreRequest_integration_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::VeriBlock::_RewardsCalculateScoreRequest_default_instance_;
    new (ptr) ::VeriBlock::RewardsCalculateScoreRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::VeriBlock::RewardsCalculateScoreRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RewardsCalculateScoreRequest_integration_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_RewardsCalculateScoreRequest_integration_2eproto}, {
      &scc_info_RewardEndorsement_integration_2eproto.base,}};

static void InitDefaultsscc_info_RoundRatioConfig_integration_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::VeriBlock::_RoundRatioConfig_default_instance_;
    new (ptr) ::VeriBlock::RoundRatioConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::VeriBlock::RoundRatioConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RoundRatioConfig_integration_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_RoundRatioConfig_integration_2eproto}, {}};

static void InitDefaultsscc_info_SetCalculatorRequest_integration_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::VeriBlock::_SetCalculatorRequest_default_instance_;
    new (ptr) ::VeriBlock::SetCalculatorRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::VeriBlock::SetCalculatorRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SetCalculatorRequest_integration_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_SetCalculatorRequest_integration_2eproto}, {
      &scc_info_CalculatorConfig_integration_2eproto.base,}};

static void InitDefaultsscc_info_SimplifyVTBsReply_integration_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::VeriBlock::_SimplifyVTBsReply_default_instance_;
    new (ptr) ::VeriBlock::SimplifyVTBsReply();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::VeriBlock::SimplifyVTBsReply::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SimplifyVTBsReply_integration_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_SimplifyVTBsReply_integration_2eproto}, {
      &scc_info_GeneralReply_integration_2eproto.base,
      &scc_info_VeriBlockPublication_integration_2eproto.base,}};

static void InitDefaultsscc_info_SimplifyVTBsRequest_integration_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::VeriBlock::_SimplifyVTBsRequest_default_instance_;
    new (ptr) ::VeriBlock::SimplifyVTBsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::VeriBlock::SimplifyVTBsRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SimplifyVTBsRequest_integration_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_SimplifyVTBsRequest_integration_2eproto}, {
      &scc_info_VeriBlockPublication_integration_2eproto.base,}};

static void InitDefaultsscc_info_TwoBranchesRequest_integration_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::VeriBlock::_TwoBranchesRequest_default_instance_;
    new (ptr) ::VeriBlock::TwoBranchesRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::VeriBlock::TwoBranchesRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TwoBranchesRequest_integration_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_TwoBranchesRequest_integration_2eproto}, {
      &scc_info_AltChainBlock_integration_2eproto.base,}};

static void InitDefaultsscc_info_VeriBlockBlock_integration_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::VeriBlock::_VeriBlockBlock_default_instance_;
    new (ptr) ::VeriBlock::VeriBlockBlock();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::VeriBlock::VeriBlockBlock::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_VeriBlockBlock_integration_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_VeriBlockBlock_integration_2eproto}, {}};

static void InitDefaultsscc_info_VeriBlockBlockReply_integration_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::VeriBlock::_VeriBlockBlockReply_default_instance_;
    new (ptr) ::VeriBlock::VeriBlockBlockReply();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::VeriBlock::VeriBlockBlockReply::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_VeriBlockBlockReply_integration_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_VeriBlockBlockReply_integration_2eproto}, {
      &scc_info_GeneralReply_integration_2eproto.base,
      &scc_info_VeriBlockBlock_integration_2eproto.base,}};

static void InitDefaultsscc_info_VeriBlockMerklePath_integration_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::VeriBlock::_VeriBlockMerklePath_default_instance_;
    new (ptr) ::VeriBlock::VeriBlockMerklePath();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::VeriBlock::VeriBlockMerklePath::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_VeriBlockMerklePath_integration_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_VeriBlockMerklePath_integration_2eproto}, {}};

static void InitDefaultsscc_info_VeriBlockMerklePathReply_integration_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::VeriBlock::_VeriBlockMerklePathReply_default_instance_;
    new (ptr) ::VeriBlock::VeriBlockMerklePathReply();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::VeriBlock::VeriBlockMerklePathReply::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_VeriBlockMerklePathReply_integration_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_VeriBlockMerklePathReply_integration_2eproto}, {
      &scc_info_GeneralReply_integration_2eproto.base,
      &scc_info_VeriBlockMerklePath_integration_2eproto.base,}};

static void InitDefaultsscc_info_VeriBlockPoPTransaction_integration_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::VeriBlock::_VeriBlockPoPTransaction_default_instance_;
    new (ptr) ::VeriBlock::VeriBlockPoPTransaction();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::VeriBlock::VeriBlockPoPTransaction::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_VeriBlockPoPTransaction_integration_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 5, InitDefaultsscc_info_VeriBlockPoPTransaction_integration_2eproto}, {
      &scc_info_Address_integration_2eproto.base,
      &scc_info_VeriBlockBlock_integration_2eproto.base,
      &scc_info_BitcoinTransaction_integration_2eproto.base,
      &scc_info_BitcoinBlock_integration_2eproto.base,
      &scc_info_NetworkByte_integration_2eproto.base,}};

static void InitDefaultsscc_info_VeriBlockPoPTransactionReply_integration_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::VeriBlock::_VeriBlockPoPTransactionReply_default_instance_;
    new (ptr) ::VeriBlock::VeriBlockPoPTransactionReply();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::VeriBlock::VeriBlockPoPTransactionReply::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_VeriBlockPoPTransactionReply_integration_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_VeriBlockPoPTransactionReply_integration_2eproto}, {
      &scc_info_GeneralReply_integration_2eproto.base,
      &scc_info_VeriBlockPoPTransaction_integration_2eproto.base,}};

static void InitDefaultsscc_info_VeriBlockPublication_integration_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::VeriBlock::_VeriBlockPublication_default_instance_;
    new (ptr) ::VeriBlock::VeriBlockPublication();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::VeriBlock::VeriBlockPublication::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_VeriBlockPublication_integration_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_VeriBlockPublication_integration_2eproto}, {
      &scc_info_VeriBlockPoPTransaction_integration_2eproto.base,
      &scc_info_VeriBlockBlock_integration_2eproto.base,}};

static void InitDefaultsscc_info_VeriBlockPublicationReply_integration_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::VeriBlock::_VeriBlockPublicationReply_default_instance_;
    new (ptr) ::VeriBlock::VeriBlockPublicationReply();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::VeriBlock::VeriBlockPublicationReply::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_VeriBlockPublicationReply_integration_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_VeriBlockPublicationReply_integration_2eproto}, {
      &scc_info_GeneralReply_integration_2eproto.base,
      &scc_info_VeriBlockPublication_integration_2eproto.base,}};

static void InitDefaultsscc_info_VeriBlockTransaction_integration_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::VeriBlock::_VeriBlockTransaction_default_instance_;
    new (ptr) ::VeriBlock::VeriBlockTransaction();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::VeriBlock::VeriBlockTransaction::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_VeriBlockTransaction_integration_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 5, InitDefaultsscc_info_VeriBlockTransaction_integration_2eproto}, {
      &scc_info_Address_integration_2eproto.base,
      &scc_info_Coin_integration_2eproto.base,
      &scc_info_Output_integration_2eproto.base,
      &scc_info_PublicationData_integration_2eproto.base,
      &scc_info_NetworkByte_integration_2eproto.base,}};

static void InitDefaultsscc_info_VeriBlockTransactionReply_integration_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::VeriBlock::_VeriBlockTransactionReply_default_instance_;
    new (ptr) ::VeriBlock::VeriBlockTransactionReply();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::VeriBlock::VeriBlockTransactionReply::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_VeriBlockTransactionReply_integration_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_VeriBlockTransactionReply_integration_2eproto}, {
      &scc_info_GeneralReply_integration_2eproto.base,
      &scc_info_VeriBlockTransaction_integration_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_integration_2eproto[60];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_integration_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_integration_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_integration_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::VeriBlock::PublicationData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::VeriBlock::PublicationData, identifier_),
  PROTOBUF_FIELD_OFFSET(::VeriBlock::PublicationData, header_),
  PROTOBUF_FIELD_OFFSET(::VeriBlock::PublicationData, payoutinfo_),
  PROTOBUF_FIELD_OFFSET(::VeriBlock::PublicationData, veriblockcontext_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::VeriBlock::BitcoinBlock, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::VeriBlock::BitcoinBlock, version_),
  PROTOBUF_FIELD_OFFSET(::VeriBlock::BitcoinBlock, previousblock_),
  PROTOBUF_FIELD_OFFSET(::VeriBlock::BitcoinBlock, merkleroot_),
  PROTOBUF_FIELD_OFFSET(::VeriBlock::BitcoinBlock, timestamp_),
  PROTOBUF_FIELD_OFFSET(::VeriBlock::BitcoinBlock, bits_),
  PROTOBUF_FIELD_OFFSET(::VeriBlock::BitcoinBlock, nonce_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::VeriBlock::BitcoinTransaction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::VeriBlock::BitcoinTransaction, raw_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::VeriBlock::VeriBlockBlock, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::VeriBlock::VeriBlockBlock, height_),
  PROTOBUF_FIELD_OFFSET(::VeriBlock::VeriBlockBlock, version_),
  PROTOBUF_FIELD_OFFSET(::VeriBlock::VeriBlockBlock, previousblock_),
  PROTOBUF_FIELD_OFFSET(::VeriBlock::VeriBlockBlock, previouskeystone_),
  PROTOBUF_FIELD_OFFSET(::VeriBlock::VeriBlockBlock, secondpreviouskeystone_),
  PROTOBUF_FIELD_OFFSET(::VeriBlock::VeriBlockBlock, merkleroot_),
  PROTOBUF_FIELD_OFFSET(::VeriBlock::VeriBlockBlock, timestamp_),
  PROTOBUF_FIELD_OFFSET(::VeriBlock::VeriBlockBlock, difficulty_),
  PROTOBUF_FIELD_OFFSET(::VeriBlock::VeriBlockBlock, nonce_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::VeriBlock::NetworkByte, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::VeriBlock::NetworkByte, byteexists_),
  PROTOBUF_FIELD_OFFSET(::VeriBlock::NetworkByte, networkbyte_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::VeriBlock::VeriBlockTransaction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::VeriBlock::VeriBlockTransaction, id_),
  PROTOBUF_FIELD_OFFSET(::VeriBlock::VeriBlockTransaction, type_),
  PROTOBUF_FIELD_OFFSET(::VeriBlock::VeriBlockTransaction, sourceaddress_),
  PROTOBUF_FIELD_OFFSET(::VeriBlock::VeriBlockTransaction, sourceamount_),
  PROTOBUF_FIELD_OFFSET(::VeriBlock::VeriBlockTransaction, outputs_),
  PROTOBUF_FIELD_OFFSET(::VeriBlock::VeriBlockTransaction, signatureindex_),
  PROTOBUF_FIELD_OFFSET(::VeriBlock::VeriBlockTransaction, data_),
  PROTOBUF_FIELD_OFFSET(::VeriBlock::VeriBlockTransaction, publicationdata_),
  PROTOBUF_FIELD_OFFSET(::VeriBlock::VeriBlockTransaction, signature_),
  PROTOBUF_FIELD_OFFSET(::VeriBlock::VeriBlockTransaction, publickey_),
  PROTOBUF_FIELD_OFFSET(::VeriBlock::VeriBlockTransaction, networkbyte_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::VeriBlock::Address, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::VeriBlock::Address, address_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::VeriBlock::Coin, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::VeriBlock::Coin, atomicunits_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::VeriBlock::Output, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::VeriBlock::Output, address_),
  PROTOBUF_FIELD_OFFSET(::VeriBlock::Output, amount_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::VeriBlock::AltPublication, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::VeriBlock::AltPublication, transaction_),
  PROTOBUF_FIELD_OFFSET(::VeriBlock::AltPublication, merklepath_),
  PROTOBUF_FIELD_OFFSET(::VeriBlock::AltPublication, containingblock_),
  PROTOBUF_FIELD_OFFSET(::VeriBlock::AltPublication, context_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::VeriBlock::VeriBlockPoPTransaction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::VeriBlock::VeriBlockPoPTransaction, id_),
  PROTOBUF_FIELD_OFFSET(::VeriBlock::VeriBlockPoPTransaction, address_),
  PROTOBUF_FIELD_OFFSET(::VeriBlock::VeriBlockPoPTransaction, publishedblock_),
  PROTOBUF_FIELD_OFFSET(::VeriBlock::VeriBlockPoPTransaction, bitcointransaction_),
  PROTOBUF_FIELD_OFFSET(::VeriBlock::VeriBlockPoPTransaction, merklepath_),
  PROTOBUF_FIELD_OFFSET(::VeriBlock::VeriBlockPoPTransaction, blockofproof_),
  PROTOBUF_FIELD_OFFSET(::VeriBlock::VeriBlockPoPTransaction, blockofproofcontext_),
  PROTOBUF_FIELD_OFFSET(::VeriBlock::VeriBlockPoPTransaction, signature_),
  PROTOBUF_FIELD_OFFSET(::VeriBlock::VeriBlockPoPTransaction, publickey_),
  PROTOBUF_FIELD_OFFSET(::VeriBlock::VeriBlockPoPTransaction, networkbyte_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::VeriBlock::VeriBlockPublication, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::VeriBlock::VeriBlockPublication, transaction_),
  PROTOBUF_FIELD_OFFSET(::VeriBlock::VeriBlockPublication, merklepath_),
  PROTOBUF_FIELD_OFFSET(::VeriBlock::VeriBlockPublication, containingblock_),
  PROTOBUF_FIELD_OFFSET(::VeriBlock::VeriBlockPublication, context_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::VeriBlock::EmptyRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::VeriBlock::GeneralReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::VeriBlock::GeneralReply, result_),
  PROTOBUF_FIELD_OFFSET(::VeriBlock::GeneralReply, resultmessage_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::VeriBlock::BlockIndex, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::VeriBlock::BlockIndex, height_),
  PROTOBUF_FIELD_OFFSET(::VeriBlock::BlockIndex, hash_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::VeriBlock::AddPayloadsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::VeriBlock::AddPayloadsRequest, blockindex_),
  PROTOBUF_FIELD_OFFSET(::VeriBlock::AddPayloadsRequest, veriblockpublications_),
  PROTOBUF_FIELD_OFFSET(::VeriBlock::AddPayloadsRequest, altpublications_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::VeriBlock::AddTemporaryPayloadsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::VeriBlock::AddTemporaryPayloadsRequest, veriblockpublications_),
  PROTOBUF_FIELD_OFFSET(::VeriBlock::AddTemporaryPayloadsRequest, altpublications_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::VeriBlock::SimplifyVTBsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::VeriBlock::SimplifyVTBsRequest, veriblockpublications_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::VeriBlock::SimplifyVTBsReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::VeriBlock::SimplifyVTBsReply, result_),
  PROTOBUF_FIELD_OFFSET(::VeriBlock::SimplifyVTBsReply, veriblockpublications_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::VeriBlock::GetMainVBKHeightOfATVReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::VeriBlock::GetMainVBKHeightOfATVReply, result_),
  PROTOBUF_FIELD_OFFSET(::VeriBlock::GetMainVBKHeightOfATVReply, height_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::VeriBlock::RemovePayloadsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::VeriBlock::RemovePayloadsRequest, blockindex_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::VeriBlock::AltChainConfigRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::VeriBlock::AltChainConfigRequest, keystoneinterval_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::VeriBlock::GetLastKnownBlocksRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::VeriBlock::GetLastKnownBlocksRequest, maxblockcount_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::VeriBlock::GetLastKnownVBKBlocksReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::VeriBlock::GetLastKnownVBKBlocksReply, result_),
  PROTOBUF_FIELD_OFFSET(::VeriBlock::GetLastKnownVBKBlocksReply, blocks_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::VeriBlock::GetLastKnownBTCBlocksReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::VeriBlock::GetLastKnownBTCBlocksReply, result_),
  PROTOBUF_FIELD_OFFSET(::VeriBlock::GetLastKnownBTCBlocksReply, blocks_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::VeriBlock::RoundRatioConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::VeriBlock::RoundRatioConfig, roundratio_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::VeriBlock::RewardCurveConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::VeriBlock::RewardCurveConfig, startofdecreasingline_),
  PROTOBUF_FIELD_OFFSET(::VeriBlock::RewardCurveConfig, widthofdecreasinglinenormal_),
  PROTOBUF_FIELD_OFFSET(::VeriBlock::RewardCurveConfig, widthofdecreasinglinekeystone_),
  PROTOBUF_FIELD_OFFSET(::VeriBlock::RewardCurveConfig, aboveintendedpayoutmultipliernormal_),
  PROTOBUF_FIELD_OFFSET(::VeriBlock::RewardCurveConfig, aboveintendedpayoutmultiplierkeystone_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::VeriBlock::RelativeScoreConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::VeriBlock::RelativeScoreConfig, score_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::VeriBlock::FlatScoreRoundConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::VeriBlock::FlatScoreRoundConfig, round_),
  PROTOBUF_FIELD_OFFSET(::VeriBlock::FlatScoreRoundConfig, active_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::VeriBlock::CalculatorConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::VeriBlock::CalculatorConfig, basicreward_),
  PROTOBUF_FIELD_OFFSET(::VeriBlock::CalculatorConfig, payoutrounds_),
  PROTOBUF_FIELD_OFFSET(::VeriBlock::CalculatorConfig, keystoneround_),
  PROTOBUF_FIELD_OFFSET(::VeriBlock::CalculatorConfig, roundratios_),
  PROTOBUF_FIELD_OFFSET(::VeriBlock::CalculatorConfig, rewardcurve_),
  PROTOBUF_FIELD_OFFSET(::VeriBlock::CalculatorConfig, maxrewardthresholdnormal_),
  PROTOBUF_FIELD_OFFSET(::VeriBlock::CalculatorConfig, maxrewardthresholdkeystone_),
  PROTOBUF_FIELD_OFFSET(::VeriBlock::CalculatorConfig, relativescorelookuptable_),
  PROTOBUF_FIELD_OFFSET(::VeriBlock::CalculatorConfig, flatscoreround_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::VeriBlock::SetCalculatorRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::VeriBlock::SetCalculatorRequest, calculator_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::VeriBlock::GetCalculatorReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::VeriBlock::GetCalculatorReply, result_),
  PROTOBUF_FIELD_OFFSET(::VeriBlock::GetCalculatorReply, calculator_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::VeriBlock::RewardOutput, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::VeriBlock::RewardOutput, address_),
  PROTOBUF_FIELD_OFFSET(::VeriBlock::RewardOutput, reward_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::VeriBlock::PopEndorsement, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::VeriBlock::PopEndorsement, address_),
  PROTOBUF_FIELD_OFFSET(::VeriBlock::PopEndorsement, txid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::VeriBlock::RewardEndorsement, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::VeriBlock::RewardEndorsement, blockvbkheight_),
  PROTOBUF_FIELD_OFFSET(::VeriBlock::RewardEndorsement, endorsementsinblock_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::VeriBlock::RewardsCalculateScoreRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::VeriBlock::RewardsCalculateScoreRequest, endorsementsforblock_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::VeriBlock::RewardsCalculateScoreReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::VeriBlock::RewardsCalculateScoreReply, result_),
  PROTOBUF_FIELD_OFFSET(::VeriBlock::RewardsCalculateScoreReply, score_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::VeriBlock::RewardsCalculateOutputsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::VeriBlock::RewardsCalculateOutputsRequest, blockaltheight_),
  PROTOBUF_FIELD_OFFSET(::VeriBlock::RewardsCalculateOutputsRequest, endorsementsforblock_),
  PROTOBUF_FIELD_OFFSET(::VeriBlock::RewardsCalculateOutputsRequest, difficulty_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::VeriBlock::RewardsCalculateOutputsReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::VeriBlock::RewardsCalculateOutputsReply, result_),
  PROTOBUF_FIELD_OFFSET(::VeriBlock::RewardsCalculateOutputsReply, totalreward_),
  PROTOBUF_FIELD_OFFSET(::VeriBlock::RewardsCalculateOutputsReply, blockreward_),
  PROTOBUF_FIELD_OFFSET(::VeriBlock::RewardsCalculateOutputsReply, outputs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::VeriBlock::BytesArrayRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::VeriBlock::BytesArrayRequest, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::VeriBlock::BytesArrayReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::VeriBlock::BytesArrayReply, result_),
  PROTOBUF_FIELD_OFFSET(::VeriBlock::BytesArrayReply, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::VeriBlock::MerklePath, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::VeriBlock::MerklePath, merklepath_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::VeriBlock::MerklePathRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::VeriBlock::MerklePathRequest, data_),
  PROTOBUF_FIELD_OFFSET(::VeriBlock::MerklePathRequest, subject_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::VeriBlock::VeriBlockMerklePath, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::VeriBlock::VeriBlockMerklePath, merklepath_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::VeriBlock::AltPublicationReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::VeriBlock::AltPublicationReply, result_),
  PROTOBUF_FIELD_OFFSET(::VeriBlock::AltPublicationReply, publication_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::VeriBlock::PublicationDataReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::VeriBlock::PublicationDataReply, result_),
  PROTOBUF_FIELD_OFFSET(::VeriBlock::PublicationDataReply, publication_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::VeriBlock::BitcoinTransactionReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::VeriBlock::BitcoinTransactionReply, result_),
  PROTOBUF_FIELD_OFFSET(::VeriBlock::BitcoinTransactionReply, transaction_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::VeriBlock::VeriBlockBlockReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::VeriBlock::VeriBlockBlockReply, result_),
  PROTOBUF_FIELD_OFFSET(::VeriBlock::VeriBlockBlockReply, block_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::VeriBlock::VeriBlockTransactionReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::VeriBlock::VeriBlockTransactionReply, result_),
  PROTOBUF_FIELD_OFFSET(::VeriBlock::VeriBlockTransactionReply, transaction_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::VeriBlock::VeriBlockPublicationReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::VeriBlock::VeriBlockPublicationReply, result_),
  PROTOBUF_FIELD_OFFSET(::VeriBlock::VeriBlockPublicationReply, publication_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::VeriBlock::VeriBlockPoPTransactionReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::VeriBlock::VeriBlockPoPTransactionReply, result_),
  PROTOBUF_FIELD_OFFSET(::VeriBlock::VeriBlockPoPTransactionReply, transaction_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::VeriBlock::OutputReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::VeriBlock::OutputReply, result_),
  PROTOBUF_FIELD_OFFSET(::VeriBlock::OutputReply, output_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::VeriBlock::AddressReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::VeriBlock::AddressReply, result_),
  PROTOBUF_FIELD_OFFSET(::VeriBlock::AddressReply, address_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::VeriBlock::BitcoinBlockReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::VeriBlock::BitcoinBlockReply, result_),
  PROTOBUF_FIELD_OFFSET(::VeriBlock::BitcoinBlockReply, block_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::VeriBlock::VeriBlockMerklePathReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::VeriBlock::VeriBlockMerklePathReply, result_),
  PROTOBUF_FIELD_OFFSET(::VeriBlock::VeriBlockMerklePathReply, merklepath_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::VeriBlock::MerklePathReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::VeriBlock::MerklePathReply, result_),
  PROTOBUF_FIELD_OFFSET(::VeriBlock::MerklePathReply, merklepath_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::VeriBlock::AltChainBlock, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::VeriBlock::AltChainBlock, blockindex_),
  PROTOBUF_FIELD_OFFSET(::VeriBlock::AltChainBlock, timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::VeriBlock::TwoBranchesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::VeriBlock::TwoBranchesRequest, leftfork_),
  PROTOBUF_FIELD_OFFSET(::VeriBlock::TwoBranchesRequest, rightfork_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::VeriBlock::CompareReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::VeriBlock::CompareReply, result_),
  PROTOBUF_FIELD_OFFSET(::VeriBlock::CompareReply, comparingsresult_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::VeriBlock::ForkresolutionConfigRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::VeriBlock::ForkresolutionConfigRequest, keystonefinalitydelay_),
  PROTOBUF_FIELD_OFFSET(::VeriBlock::ForkresolutionConfigRequest, amnestyperiod_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::VeriBlock::PublicationData)},
  { 9, -1, sizeof(::VeriBlock::BitcoinBlock)},
  { 20, -1, sizeof(::VeriBlock::BitcoinTransaction)},
  { 26, -1, sizeof(::VeriBlock::VeriBlockBlock)},
  { 40, -1, sizeof(::VeriBlock::NetworkByte)},
  { 47, -1, sizeof(::VeriBlock::VeriBlockTransaction)},
  { 63, -1, sizeof(::VeriBlock::Address)},
  { 69, -1, sizeof(::VeriBlock::Coin)},
  { 75, -1, sizeof(::VeriBlock::Output)},
  { 82, -1, sizeof(::VeriBlock::AltPublication)},
  { 91, -1, sizeof(::VeriBlock::VeriBlockPoPTransaction)},
  { 106, -1, sizeof(::VeriBlock::VeriBlockPublication)},
  { 115, -1, sizeof(::VeriBlock::EmptyRequest)},
  { 120, -1, sizeof(::VeriBlock::GeneralReply)},
  { 127, -1, sizeof(::VeriBlock::BlockIndex)},
  { 134, -1, sizeof(::VeriBlock::AddPayloadsRequest)},
  { 142, -1, sizeof(::VeriBlock::AddTemporaryPayloadsRequest)},
  { 149, -1, sizeof(::VeriBlock::SimplifyVTBsRequest)},
  { 155, -1, sizeof(::VeriBlock::SimplifyVTBsReply)},
  { 162, -1, sizeof(::VeriBlock::GetMainVBKHeightOfATVReply)},
  { 169, -1, sizeof(::VeriBlock::RemovePayloadsRequest)},
  { 175, -1, sizeof(::VeriBlock::AltChainConfigRequest)},
  { 181, -1, sizeof(::VeriBlock::GetLastKnownBlocksRequest)},
  { 187, -1, sizeof(::VeriBlock::GetLastKnownVBKBlocksReply)},
  { 194, -1, sizeof(::VeriBlock::GetLastKnownBTCBlocksReply)},
  { 201, -1, sizeof(::VeriBlock::RoundRatioConfig)},
  { 207, -1, sizeof(::VeriBlock::RewardCurveConfig)},
  { 217, -1, sizeof(::VeriBlock::RelativeScoreConfig)},
  { 223, -1, sizeof(::VeriBlock::FlatScoreRoundConfig)},
  { 230, -1, sizeof(::VeriBlock::CalculatorConfig)},
  { 244, -1, sizeof(::VeriBlock::SetCalculatorRequest)},
  { 250, -1, sizeof(::VeriBlock::GetCalculatorReply)},
  { 257, -1, sizeof(::VeriBlock::RewardOutput)},
  { 264, -1, sizeof(::VeriBlock::PopEndorsement)},
  { 271, -1, sizeof(::VeriBlock::RewardEndorsement)},
  { 278, -1, sizeof(::VeriBlock::RewardsCalculateScoreRequest)},
  { 284, -1, sizeof(::VeriBlock::RewardsCalculateScoreReply)},
  { 291, -1, sizeof(::VeriBlock::RewardsCalculateOutputsRequest)},
  { 299, -1, sizeof(::VeriBlock::RewardsCalculateOutputsReply)},
  { 308, -1, sizeof(::VeriBlock::BytesArrayRequest)},
  { 314, -1, sizeof(::VeriBlock::BytesArrayReply)},
  { 321, -1, sizeof(::VeriBlock::MerklePath)},
  { 327, -1, sizeof(::VeriBlock::MerklePathRequest)},
  { 334, -1, sizeof(::VeriBlock::VeriBlockMerklePath)},
  { 340, -1, sizeof(::VeriBlock::AltPublicationReply)},
  { 347, -1, sizeof(::VeriBlock::PublicationDataReply)},
  { 354, -1, sizeof(::VeriBlock::BitcoinTransactionReply)},
  { 361, -1, sizeof(::VeriBlock::VeriBlockBlockReply)},
  { 368, -1, sizeof(::VeriBlock::VeriBlockTransactionReply)},
  { 375, -1, sizeof(::VeriBlock::VeriBlockPublicationReply)},
  { 382, -1, sizeof(::VeriBlock::VeriBlockPoPTransactionReply)},
  { 389, -1, sizeof(::VeriBlock::OutputReply)},
  { 396, -1, sizeof(::VeriBlock::AddressReply)},
  { 403, -1, sizeof(::VeriBlock::BitcoinBlockReply)},
  { 410, -1, sizeof(::VeriBlock::VeriBlockMerklePathReply)},
  { 417, -1, sizeof(::VeriBlock::MerklePathReply)},
  { 424, -1, sizeof(::VeriBlock::AltChainBlock)},
  { 431, -1, sizeof(::VeriBlock::TwoBranchesRequest)},
  { 438, -1, sizeof(::VeriBlock::CompareReply)},
  { 445, -1, sizeof(::VeriBlock::ForkresolutionConfigRequest)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::VeriBlock::_PublicationData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::VeriBlock::_BitcoinBlock_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::VeriBlock::_BitcoinTransaction_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::VeriBlock::_VeriBlockBlock_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::VeriBlock::_NetworkByte_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::VeriBlock::_VeriBlockTransaction_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::VeriBlock::_Address_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::VeriBlock::_Coin_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::VeriBlock::_Output_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::VeriBlock::_AltPublication_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::VeriBlock::_VeriBlockPoPTransaction_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::VeriBlock::_VeriBlockPublication_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::VeriBlock::_EmptyRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::VeriBlock::_GeneralReply_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::VeriBlock::_BlockIndex_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::VeriBlock::_AddPayloadsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::VeriBlock::_AddTemporaryPayloadsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::VeriBlock::_SimplifyVTBsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::VeriBlock::_SimplifyVTBsReply_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::VeriBlock::_GetMainVBKHeightOfATVReply_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::VeriBlock::_RemovePayloadsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::VeriBlock::_AltChainConfigRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::VeriBlock::_GetLastKnownBlocksRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::VeriBlock::_GetLastKnownVBKBlocksReply_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::VeriBlock::_GetLastKnownBTCBlocksReply_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::VeriBlock::_RoundRatioConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::VeriBlock::_RewardCurveConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::VeriBlock::_RelativeScoreConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::VeriBlock::_FlatScoreRoundConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::VeriBlock::_CalculatorConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::VeriBlock::_SetCalculatorRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::VeriBlock::_GetCalculatorReply_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::VeriBlock::_RewardOutput_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::VeriBlock::_PopEndorsement_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::VeriBlock::_RewardEndorsement_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::VeriBlock::_RewardsCalculateScoreRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::VeriBlock::_RewardsCalculateScoreReply_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::VeriBlock::_RewardsCalculateOutputsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::VeriBlock::_RewardsCalculateOutputsReply_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::VeriBlock::_BytesArrayRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::VeriBlock::_BytesArrayReply_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::VeriBlock::_MerklePath_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::VeriBlock::_MerklePathRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::VeriBlock::_VeriBlockMerklePath_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::VeriBlock::_AltPublicationReply_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::VeriBlock::_PublicationDataReply_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::VeriBlock::_BitcoinTransactionReply_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::VeriBlock::_VeriBlockBlockReply_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::VeriBlock::_VeriBlockTransactionReply_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::VeriBlock::_VeriBlockPublicationReply_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::VeriBlock::_VeriBlockPoPTransactionReply_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::VeriBlock::_OutputReply_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::VeriBlock::_AddressReply_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::VeriBlock::_BitcoinBlockReply_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::VeriBlock::_VeriBlockMerklePathReply_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::VeriBlock::_MerklePathReply_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::VeriBlock::_AltChainBlock_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::VeriBlock::_TwoBranchesRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::VeriBlock::_CompareReply_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::VeriBlock::_ForkresolutionConfigRequest_default_instance_),
};

const char descriptor_table_protodef_integration_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\021integration.proto\022\tVeriBlock\032 google/p"
  "rotobuf/descriptor.proto\"u\n\017PublicationD"
  "ata\022\022\n\nidentifier\030\001 \001(\003\022\024\n\006header\030\002 \001(\014B"
  "\004\200\265\030\001\022\030\n\npayoutInfo\030\003 \001(\014B\004\200\265\030\001\022\036\n\020verib"
  "lockContext\030\004 \001(\014B\004\200\265\030\001\"\206\001\n\014BitcoinBlock"
  "\022\017\n\007version\030\001 \001(\005\022\033\n\rpreviousBlock\030\002 \001(\014"
  "B\004\200\265\030\001\022\030\n\nmerkleRoot\030\003 \001(\014B\004\200\265\030\001\022\021\n\ttime"
  "stamp\030\004 \001(\005\022\014\n\004bits\030\005 \001(\005\022\r\n\005nonce\030\006 \001(\005"
  "\"!\n\022BitcoinTransaction\022\013\n\003raw\030\001 \001(\014\"\344\001\n\016"
  "VeriBlockBlock\022\016\n\006height\030\001 \001(\005\022\017\n\007versio"
  "n\030\002 \001(\005\022\033\n\rpreviousBlock\030\003 \001(\014B\004\200\265\030\001\022\036\n\020"
  "previousKeystone\030\004 \001(\014B\004\200\265\030\001\022$\n\026secondPr"
  "eviousKeystone\030\005 \001(\014B\004\200\265\030\001\022\030\n\nmerkleRoot"
  "\030\006 \001(\014B\004\200\265\030\001\022\021\n\ttimestamp\030\007 \001(\005\022\022\n\ndiffi"
  "culty\030\010 \001(\005\022\r\n\005nonce\030\t \001(\005\"6\n\013NetworkByt"
  "e\022\022\n\nbyteExists\030\001 \001(\010\022\023\n\013networkByte\030\002 \001"
  "(\005\"\354\002\n\024VeriBlockTransaction\022\020\n\002id\030\001 \001(\014B"
  "\004\200\265\030\001\022\014\n\004type\030\002 \001(\005\022)\n\rsourceAddress\030\003 \001"
  "(\0132\022.VeriBlock.Address\022%\n\014sourceAmount\030\004"
  " \001(\0132\017.VeriBlock.Coin\022\"\n\007outputs\030\005 \003(\0132\021"
  ".VeriBlock.Output\022\026\n\016signatureIndex\030\006 \001("
  "\003\022\022\n\004data\030\007 \001(\014B\004\200\265\030\001\0223\n\017publicationData"
  "\030\010 \001(\0132\032.VeriBlock.PublicationData\022\027\n\tsi"
  "gnature\030\t \001(\014B\004\200\265\030\001\022\027\n\tpublicKey\030\n \001(\014B\004"
  "\200\265\030\001\022+\n\013networkByte\030\013 \001(\0132\026.VeriBlock.Ne"
  "tworkByte\"\032\n\007Address\022\017\n\007address\030\001 \001(\t\"\033\n"
  "\004Coin\022\023\n\013atomicUnits\030\001 \001(\003\"N\n\006Output\022#\n\007"
  "address\030\001 \001(\0132\022.VeriBlock.Address\022\037\n\006amo"
  "unt\030\002 \001(\0132\017.VeriBlock.Coin\"\272\001\n\016AltPublic"
  "ation\0224\n\013transaction\030\001 \001(\0132\037.VeriBlock.V"
  "eriBlockTransaction\022\022\n\nmerklePath\030\002 \001(\t\022"
  "2\n\017containingBlock\030\003 \001(\0132\031.VeriBlock.Ver"
  "iBlockBlock\022*\n\007context\030\004 \003(\0132\031.VeriBlock"
  ".VeriBlockBlock\"\226\003\n\027VeriBlockPoPTransact"
  "ion\022\020\n\002id\030\001 \001(\014B\004\200\265\030\001\022#\n\007address\030\002 \001(\0132\022"
  ".VeriBlock.Address\0221\n\016publishedBlock\030\003 \001"
  "(\0132\031.VeriBlock.VeriBlockBlock\0229\n\022bitcoin"
  "Transaction\030\004 \001(\0132\035.VeriBlock.BitcoinTra"
  "nsaction\022\022\n\nmerklePath\030\005 \001(\t\022-\n\014blockOfP"
  "roof\030\006 \001(\0132\027.VeriBlock.BitcoinBlock\0224\n\023b"
  "lockOfProofContext\030\007 \003(\0132\027.VeriBlock.Bit"
  "coinBlock\022\027\n\tsignature\030\010 \001(\014B\004\200\265\030\001\022\027\n\tpu"
  "blicKey\030\t \001(\014B\004\200\265\030\001\022+\n\013networkByte\030\n \001(\013"
  "2\026.VeriBlock.NetworkByte\"\303\001\n\024VeriBlockPu"
  "blication\0227\n\013transaction\030\001 \001(\0132\".VeriBlo"
  "ck.VeriBlockPoPTransaction\022\022\n\nmerklePath"
  "\030\002 \001(\t\0222\n\017containingBlock\030\003 \001(\0132\031.VeriBl"
  "ock.VeriBlockBlock\022*\n\007context\030\004 \003(\0132\031.Ve"
  "riBlock.VeriBlockBlock\"\016\n\014EmptyRequest\"5"
  "\n\014GeneralReply\022\016\n\006result\030\001 \001(\010\022\025\n\rresult"
  "Message\030\002 \001(\t\"*\n\nBlockIndex\022\016\n\006height\030\001 "
  "\001(\003\022\014\n\004hash\030\002 \001(\t\"\263\001\n\022AddPayloadsRequest"
  "\022)\n\nblockIndex\030\001 \001(\0132\025.VeriBlock.BlockIn"
  "dex\022>\n\025veriblockPublications\030\002 \003(\0132\037.Ver"
  "iBlock.VeriBlockPublication\0222\n\017altPublic"
  "ations\030\003 \003(\0132\031.VeriBlock.AltPublication\""
  "\221\001\n\033AddTemporaryPayloadsRequest\022>\n\025verib"
  "lockPublications\030\001 \003(\0132\037.VeriBlock.VeriB"
  "lockPublication\0222\n\017altPublications\030\002 \003(\013"
  "2\031.VeriBlock.AltPublication\"U\n\023SimplifyV"
  "TBsRequest\022>\n\025veriblockPublications\030\001 \003("
  "\0132\037.VeriBlock.VeriBlockPublication\"|\n\021Si"
  "mplifyVTBsReply\022\'\n\006result\030\001 \001(\0132\027.VeriBl"
  "ock.GeneralReply\022>\n\025veriblockPublication"
  "s\030\002 \003(\0132\037.VeriBlock.VeriBlockPublication"
  "\"U\n\032GetMainVBKHeightOfATVReply\022\'\n\006result"
  "\030\001 \001(\0132\027.VeriBlock.GeneralReply\022\016\n\006heigh"
  "t\030\002 \001(\005\"B\n\025RemovePayloadsRequest\022)\n\nbloc"
  "kIndex\030\001 \001(\0132\025.VeriBlock.BlockIndex\"1\n\025A"
  "ltChainConfigRequest\022\030\n\020keystoneInterval"
  "\030\001 \001(\005\"2\n\031GetLastKnownBlocksRequest\022\025\n\rm"
  "axBlockCount\030\001 \001(\005\"[\n\032GetLastKnownVBKBlo"
  "cksReply\022\'\n\006result\030\001 \001(\0132\027.VeriBlock.Gen"
  "eralReply\022\024\n\006blocks\030\002 \003(\014B\004\200\265\030\001\"[\n\032GetLa"
  "stKnownBTCBlocksReply\022\'\n\006result\030\001 \001(\0132\027."
  "VeriBlock.GeneralReply\022\024\n\006blocks\030\002 \003(\014B\004"
  "\200\265\030\001\"&\n\020RoundRatioConfig\022\022\n\nroundRatio\030\001"
  " \003(\t\"\332\001\n\021RewardCurveConfig\022\035\n\025startOfDec"
  "reasingLine\030\001 \001(\t\022#\n\033widthOfDecreasingLi"
  "neNormal\030\002 \001(\t\022%\n\035widthOfDecreasingLineK"
  "eystone\030\003 \001(\t\022+\n#aboveIntendedPayoutMult"
  "iplierNormal\030\004 \001(\t\022-\n%aboveIntendedPayou"
  "tMultiplierKeystone\030\005 \001(\t\"$\n\023RelativeSco"
  "reConfig\022\r\n\005score\030\001 \003(\t\"5\n\024FlatScoreRoun"
  "dConfig\022\r\n\005round\030\001 \001(\005\022\016\n\006active\030\002 \001(\010\"\372"
  "\002\n\020CalculatorConfig\022\023\n\013basicReward\030\001 \001(\t"
  "\022\024\n\014payoutRounds\030\002 \001(\005\022\025\n\rkeystoneRound\030"
  "\003 \001(\005\0220\n\013roundRatios\030\005 \001(\0132\033.VeriBlock.R"
  "oundRatioConfig\0221\n\013rewardCurve\030\006 \001(\0132\034.V"
  "eriBlock.RewardCurveConfig\022 \n\030maxRewardT"
  "hresholdNormal\030\007 \001(\t\022\"\n\032maxRewardThresho"
  "ldKeystone\030\010 \001(\t\022@\n\030relativeScoreLookupT"
  "able\030\t \001(\0132\036.VeriBlock.RelativeScoreConf"
  "ig\0227\n\016flatScoreRound\030\n \001(\0132\037.VeriBlock.F"
  "latScoreRoundConfig\"G\n\024SetCalculatorRequ"
  "est\022/\n\ncalculator\030\001 \001(\0132\033.VeriBlock.Calc"
  "ulatorConfig\"n\n\022GetCalculatorReply\022\'\n\006re"
  "sult\030\001 \001(\0132\027.VeriBlock.GeneralReply\022/\n\nc"
  "alculator\030\002 \001(\0132\033.VeriBlock.CalculatorCo"
  "nfig\"/\n\014RewardOutput\022\017\n\007address\030\001 \001(\t\022\016\n"
  "\006reward\030\002 \001(\t\"/\n\016PopEndorsement\022\017\n\007addre"
  "ss\030\001 \001(\t\022\014\n\004txid\030\002 \001(\t\"c\n\021RewardEndorsem"
  "ent\022\026\n\016blockVbkHeight\030\001 \001(\005\0226\n\023endorseme"
  "ntsInBlock\030\002 \003(\0132\031.VeriBlock.PopEndorsem"
  "ent\"Z\n\034RewardsCalculateScoreRequest\022:\n\024e"
  "ndorsementsForBlock\030\001 \003(\0132\034.VeriBlock.Re"
  "wardEndorsement\"T\n\032RewardsCalculateScore"
  "Reply\022\'\n\006result\030\001 \001(\0132\027.VeriBlock.Genera"
  "lReply\022\r\n\005score\030\002 \001(\t\"\210\001\n\036RewardsCalcula"
  "teOutputsRequest\022\026\n\016blockAltHeight\030\001 \001(\005"
  "\022:\n\024endorsementsForBlock\030\002 \003(\0132\034.VeriBlo"
  "ck.RewardEndorsement\022\022\n\ndifficulty\030\003 \001(\t"
  "\"\233\001\n\034RewardsCalculateOutputsReply\022\'\n\006res"
  "ult\030\001 \001(\0132\027.VeriBlock.GeneralReply\022\023\n\013to"
  "talReward\030\002 \001(\t\022\023\n\013blockReward\030\003 \001(\t\022(\n\007"
  "outputs\030\004 \003(\0132\027.VeriBlock.RewardOutput\"!"
  "\n\021BytesArrayRequest\022\014\n\004data\030\001 \001(\014\"H\n\017Byt"
  "esArrayReply\022\'\n\006result\030\001 \001(\0132\027.VeriBlock"
  ".GeneralReply\022\014\n\004data\030\002 \001(\014\" \n\nMerklePat"
  "h\022\022\n\nmerklePath\030\001 \001(\t\"8\n\021MerklePathReque"
  "st\022\014\n\004data\030\001 \001(\014\022\025\n\007subject\030\002 \001(\014B\004\200\265\030\001\""
  ")\n\023VeriBlockMerklePath\022\022\n\nmerklePath\030\001 \001"
  "(\t\"n\n\023AltPublicationReply\022\'\n\006result\030\001 \001("
  "\0132\027.VeriBlock.GeneralReply\022.\n\013publicatio"
  "n\030\002 \001(\0132\031.VeriBlock.AltPublication\"p\n\024Pu"
  "blicationDataReply\022\'\n\006result\030\001 \001(\0132\027.Ver"
  "iBlock.GeneralReply\022/\n\013publication\030\002 \001(\013"
  "2\032.VeriBlock.PublicationData\"v\n\027BitcoinT"
  "ransactionReply\022\'\n\006result\030\001 \001(\0132\027.VeriBl"
  "ock.GeneralReply\0222\n\013transaction\030\002 \001(\0132\035."
  "VeriBlock.BitcoinTransaction\"h\n\023VeriBloc"
  "kBlockReply\022\'\n\006result\030\001 \001(\0132\027.VeriBlock."
  "GeneralReply\022(\n\005block\030\002 \001(\0132\031.VeriBlock."
  "VeriBlockBlock\"z\n\031VeriBlockTransactionRe"
  "ply\022\'\n\006result\030\001 \001(\0132\027.VeriBlock.GeneralR"
  "eply\0224\n\013transaction\030\002 \001(\0132\037.VeriBlock.Ve"
  "riBlockTransaction\"z\n\031VeriBlockPublicati"
  "onReply\022\'\n\006result\030\001 \001(\0132\027.VeriBlock.Gene"
  "ralReply\0224\n\013publication\030\002 \001(\0132\037.VeriBloc"
  "k.VeriBlockPublication\"\200\001\n\034VeriBlockPoPT"
  "ransactionReply\022\'\n\006result\030\001 \001(\0132\027.VeriBl"
  "ock.GeneralReply\0227\n\013transaction\030\002 \001(\0132\"."
  "VeriBlock.VeriBlockPoPTransaction\"Y\n\013Out"
  "putReply\022\'\n\006result\030\001 \001(\0132\027.VeriBlock.Gen"
  "eralReply\022!\n\006output\030\002 \001(\0132\021.VeriBlock.Ou"
  "tput\"\\\n\014AddressReply\022\'\n\006result\030\001 \001(\0132\027.V"
  "eriBlock.GeneralReply\022#\n\007address\030\002 \001(\0132\022"
  ".VeriBlock.Address\"d\n\021BitcoinBlockReply\022"
  "\'\n\006result\030\001 \001(\0132\027.VeriBlock.GeneralReply"
  "\022&\n\005block\030\002 \001(\0132\027.VeriBlock.BitcoinBlock"
  "\"w\n\030VeriBlockMerklePathReply\022\'\n\006result\030\001"
  " \001(\0132\027.VeriBlock.GeneralReply\0222\n\nmerkleP"
  "ath\030\002 \001(\0132\036.VeriBlock.VeriBlockMerklePat"
  "h\"e\n\017MerklePathReply\022\'\n\006result\030\001 \001(\0132\027.V"
  "eriBlock.GeneralReply\022)\n\nmerklePath\030\002 \001("
  "\0132\025.VeriBlock.MerklePath\"M\n\rAltChainBloc"
  "k\022)\n\nblockIndex\030\001 \001(\0132\025.VeriBlock.BlockI"
  "ndex\022\021\n\ttimestamp\030\002 \001(\005\"m\n\022TwoBranchesRe"
  "quest\022*\n\010leftFork\030\001 \003(\0132\030.VeriBlock.AltC"
  "hainBlock\022+\n\trightFork\030\002 \003(\0132\030.VeriBlock"
  ".AltChainBlock\"Q\n\014CompareReply\022\'\n\006result"
  "\030\001 \001(\0132\027.VeriBlock.GeneralReply\022\030\n\020compa"
  "ringsResult\030\002 \001(\005\"S\n\033ForkresolutionConfi"
  "gRequest\022\035\n\025keystoneFinalityDelay\030\001 \001(\005\022"
  "\025\n\ramnestyPeriod\030\002 \001(\0052\364\t\n\022IntegrationSe"
  "rvice\022C\n\rResetSecurity\022\027.VeriBlock.Empty"
  "Request\032\027.VeriBlock.GeneralReply\"\000\022K\n\023Ad"
  "dGenesisVeriBlock\022\031.VeriBlock.VeriBlockB"
  "lock\032\027.VeriBlock.GeneralReply\"\000\022G\n\021AddGe"
  "nesisBitcoin\022\027.VeriBlock.BitcoinBlock\032\027."
  "VeriBlock.GeneralReply\"\000\022G\n\013AddPayloads\022"
  "\035.VeriBlock.AddPayloadsRequest\032\027.VeriBlo"
  "ck.GeneralReply\"\000\022M\n\016RemovePayloads\022 .Ve"
  "riBlock.RemovePayloadsRequest\032\027.VeriBloc"
  "k.GeneralReply\"\000\022Y\n\024AddTemporaryPayloads"
  "\022&.VeriBlock.AddTemporaryPayloadsRequest"
  "\032\027.VeriBlock.GeneralReply\"\000\022L\n\026ClearTemp"
  "oraryPayloads\022\027.VeriBlock.EmptyRequest\032\027"
  ".VeriBlock.GeneralReply\"\000\022N\n\014SimplifyVTB"
  "s\022\036.VeriBlock.SimplifyVTBsRequest\032\034.Veri"
  "Block.SimplifyVTBsReply\"\000\022K\n\023CheckATVAga"
  "instView\022\031.VeriBlock.AltPublication\032\027.Ve"
  "riBlock.GeneralReply\"\000\022P\n\022CheckVTBIntern"
  "ally\022\037.VeriBlock.VeriBlockPublication\032\027."
  "VeriBlock.GeneralReply\"\000\022J\n\022CheckATVInte"
  "rnally\022\031.VeriBlock.AltPublication\032\027.Veri"
  "Block.GeneralReply\"\000\022[\n\025GetMainVBKHeight"
  "OfATV\022\031.VeriBlock.AltPublication\032%.VeriB"
  "lock.GetMainVBKHeightOfATVReply\"\000\022Z\n\033Set"
  "AltChainParametersConfig\022 .VeriBlock.Alt"
  "ChainConfigRequest\032\027.VeriBlock.GeneralRe"
  "ply\"\000\022f\n\025GetLastKnownVBKBlocks\022$.VeriBlo"
  "ck.GetLastKnownBlocksRequest\032%.VeriBlock"
  ".GetLastKnownVBKBlocksReply\"\000\022f\n\025GetLast"
  "KnownBTCBlocks\022$.VeriBlock.GetLastKnownB"
  "locksRequest\032%.VeriBlock.GetLastKnownBTC"
  "BlocksReply\"\0002\310\003\n\016RewardsService\022B\n\014Rese"
  "tRewards\022\027.VeriBlock.EmptyRequest\032\027.Veri"
  "Block.GeneralReply\"\000\022I\n\rGetCalculator\022\027."
  "VeriBlock.EmptyRequest\032\035.VeriBlock.GetCa"
  "lculatorReply\"\000\022K\n\rSetCalculator\022\037.VeriB"
  "lock.SetCalculatorRequest\032\027.VeriBlock.Ge"
  "neralReply\"\000\022i\n\025RewardsCalculateScore\022\'."
  "VeriBlock.RewardsCalculateScoreRequest\032%"
  ".VeriBlock.RewardsCalculateScoreReply\"\000\022"
  "o\n\027RewardsCalculateOutputs\022).VeriBlock.R"
  "ewardsCalculateOutputsRequest\032\'.VeriBloc"
  "k.RewardsCalculateOutputsReply\"\0002\263\010\n\022Des"
  "erializeService\022U\n\023ParseAltPublication\022\034"
  ".VeriBlock.BytesArrayRequest\032\036.VeriBlock"
  ".AltPublicationReply\"\000\022W\n\024ParsePublicati"
  "onData\022\034.VeriBlock.BytesArrayRequest\032\037.V"
  "eriBlock.PublicationDataReply\"\000\022]\n\027Parse"
  "BitcoinTransaction\022\034.VeriBlock.BytesArra"
  "yRequest\032\".VeriBlock.BitcoinTransactionR"
  "eply\"\000\022U\n\023ParseVeriBlockBlock\022\034.VeriBloc"
  "k.BytesArrayRequest\032\036.VeriBlock.VeriBloc"
  "kBlockReply\"\000\022a\n\031ParseVeriBlockTransacti"
  "on\022\034.VeriBlock.BytesArrayRequest\032$.VeriB"
  "lock.VeriBlockTransactionReply\"\000\022a\n\031Pars"
  "eVeriBlockPublication\022\034.VeriBlock.BytesA"
  "rrayRequest\032$.VeriBlock.VeriBlockPublica"
  "tionReply\"\000\022^\n\023ParseVeriBlockPopTx\022\034.Ver"
  "iBlock.BytesArrayRequest\032\'.VeriBlock.Ver"
  "iBlockPoPTransactionReply\"\000\022E\n\013ParseOutp"
  "ut\022\034.VeriBlock.BytesArrayRequest\032\026.VeriB"
  "lock.OutputReply\"\000\022G\n\014ParseAddress\022\034.Ver"
  "iBlock.BytesArrayRequest\032\027.VeriBlock.Add"
  "ressReply\"\000\022Q\n\021ParseBitcoinBlock\022\034.VeriB"
  "lock.BytesArrayRequest\032\034.VeriBlock.Bitco"
  "inBlockReply\"\000\022_\n\030ParseVeriBlockMerklePa"
  "th\022\034.VeriBlock.BytesArrayRequest\032#.VeriB"
  "lock.VeriBlockMerklePathReply\"\000\022M\n\017Parse"
  "MerklePath\022\034.VeriBlock.MerklePathRequest"
  "\032\032.VeriBlock.MerklePathReply\"\0002\215\010\n\020Seria"
  "lizeService\022R\n\027SerializeAltPublication\022\031"
  ".VeriBlock.AltPublication\032\032.VeriBlock.By"
  "tesArrayReply\"\000\022T\n\030SerializePublicationD"
  "ata\022\032.VeriBlock.PublicationData\032\032.VeriBl"
  "ock.BytesArrayReply\"\000\022Z\n\033SerializeBitcoi"
  "nTransaction\022\035.VeriBlock.BitcoinTransact"
  "ion\032\032.VeriBlock.BytesArrayReply\"\000\022R\n\027Ser"
  "ializeVeriBlockBlock\022\031.VeriBlock.VeriBlo"
  "ckBlock\032\032.VeriBlock.BytesArrayReply\"\000\022^\n"
  "\035SerializeVeriBlockTransaction\022\037.VeriBlo"
  "ck.VeriBlockTransaction\032\032.VeriBlock.Byte"
  "sArrayReply\"\000\022^\n\035SerializeVeriBlockPubli"
  "cation\022\037.VeriBlock.VeriBlockPublication\032"
  "\032.VeriBlock.BytesArrayReply\"\000\022[\n\027Seriali"
  "zeVeriBlockPopTx\022\".VeriBlock.VeriBlockPo"
  "PTransaction\032\032.VeriBlock.BytesArrayReply"
  "\"\000\022B\n\017SerializeOutput\022\021.VeriBlock.Output"
  "\032\032.VeriBlock.BytesArrayReply\"\000\022D\n\020Serial"
  "izeAddress\022\022.VeriBlock.Address\032\032.VeriBlo"
  "ck.BytesArrayReply\"\000\022N\n\025SerializeBitcoin"
  "Block\022\027.VeriBlock.BitcoinBlock\032\032.VeriBlo"
  "ck.BytesArrayReply\"\000\022\\\n\034SerializeVeriBlo"
  "ckMerklePath\022\036.VeriBlock.VeriBlockMerkle"
  "Path\032\032.VeriBlock.BytesArrayReply\"\000\022J\n\023Se"
  "rializeMerklePath\022\025.VeriBlock.MerklePath"
  "\032\032.VeriBlock.BytesArrayReply\"\0002\271\r\n\021Valid"
  "ationService\022U\n\024VerifyVeriBlockPoPTx\022\".V"
  "eriBlock.VeriBlockPoPTransaction\032\027.VeriB"
  "lock.GeneralReply\"\000\022]\n\034CheckSignatureVer"
  "iBlockPoPTx\022\".VeriBlock.VeriBlockPoPTran"
  "saction\032\027.VeriBlock.GeneralReply\"\000\022b\n!Ch"
  "eckBitcoinTransactionForPoPData\022\".VeriBl"
  "ock.VeriBlockPoPTransaction\032\027.VeriBlock."
  "GeneralReply\"\000\022e\n$CheckBitcoinMerklePath"
  "VeriBlockPoPTx\022\".VeriBlock.VeriBlockPoPT"
  "ransaction\032\027.VeriBlock.GeneralReply\"\000\022a\n"
  " CheckBitcoinBlocksVeriBlockPoPTx\022\".Veri"
  "Block.VeriBlockPoPTransaction\032\027.VeriBloc"
  "k.GeneralReply\"\000\022X\n\032VerifyVeriBlockPubli"
  "cation\022\037.VeriBlock.VeriBlockPublication\032"
  "\027.VeriBlock.GeneralReply\"\000\022]\n\037CheckBlock"
  "sVeriBlockPublication\022\037.VeriBlock.VeriBl"
  "ockPublication\032\027.VeriBlock.GeneralReply\""
  "\000\022a\n#CheckMerklePathVeriBlockPublication"
  "\022\037.VeriBlock.VeriBlockPublication\032\027.Veri"
  "Block.GeneralReply\"\000\022X\n\032VerifyVeriBlockT"
  "ransaction\022\037.VeriBlock.VeriBlockTransact"
  "ion\032\027.VeriBlock.GeneralReply\"\000\022`\n\"CheckS"
  "ignatureVeriBlockTransaction\022\037.VeriBlock"
  ".VeriBlockTransaction\032\027.VeriBlock.Genera"
  "lReply\"\000\022L\n\024VerifyVeriBlockBlock\022\031.VeriB"
  "lock.VeriBlockBlock\032\027.VeriBlock.GeneralR"
  "eply\"\000\022V\n\036CheckProofOfWorkVeriBlockBlock"
  "\022\031.VeriBlock.VeriBlockBlock\032\027.VeriBlock."
  "GeneralReply\"\000\022W\n\037CheckMaximumDriftVeriB"
  "lockBlock\022\031.VeriBlock.VeriBlockBlock\032\027.V"
  "eriBlock.GeneralReply\"\000\022H\n\022VerifyBitcoin"
  "Block\022\027.VeriBlock.BitcoinBlock\032\027.VeriBlo"
  "ck.GeneralReply\"\000\022R\n\034CheckProofOfWorkBit"
  "coinBlock\022\027.VeriBlock.BitcoinBlock\032\027.Ver"
  "iBlock.GeneralReply\"\000\022S\n\035CheckMaximumDri"
  "ftBitcoinBlock\022\027.VeriBlock.BitcoinBlock\032"
  "\027.VeriBlock.GeneralReply\"\000\022L\n\024VerifyAltP"
  "ublication\022\031.VeriBlock.AltPublication\032\027."
  "VeriBlock.GeneralReply\"\000\022U\n\035CheckMerkleP"
  "athAltPublication\022\031.VeriBlock.AltPublica"
  "tion\032\027.VeriBlock.GeneralReply\"\000\022Q\n\031Check"
  "BlocksAltPublication\022\031.VeriBlock.AltPubl"
  "ication\032\027.VeriBlock.GeneralReply\"\0002\305\001\n\025F"
  "orkresolutionService\022N\n\022CompareTwoBranch"
  "es\022\035.VeriBlock.TwoBranchesRequest\032\027.Veri"
  "Block.CompareReply\"\000\022\\\n\027SetForkresolutio"
  "nConfig\022&.VeriBlock.ForkresolutionConfig"
  "Request\032\027.VeriBlock.GeneralReply\"\000:4\n\013he"
  "x_encoded\022\035.google.protobuf.FieldOptions"
  "\030\320\206\003 \001(\010:8\n\017address_encoded\022\035.google.pro"
  "tobuf.FieldOptions\030\321\206\003 \001(\010:6\n\rascii_enco"
  "ded\022\035.google.protobuf.FieldOptions\030\322\206\003 \001"
  "(\010:5\n\014utf8_encoded\022\035.google.protobuf.Fie"
  "ldOptions\030\323\206\003 \001(\010B,\n\024integration.api.grp"
  "cB\021VeriBlockMessages\210\001\001b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_integration_2eproto_deps[1] = {
  &::descriptor_table_google_2fprotobuf_2fdescriptor_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_integration_2eproto_sccs[60] = {
  &scc_info_AddPayloadsRequest_integration_2eproto.base,
  &scc_info_AddTemporaryPayloadsRequest_integration_2eproto.base,
  &scc_info_Address_integration_2eproto.base,
  &scc_info_AddressReply_integration_2eproto.base,
  &scc_info_AltChainBlock_integration_2eproto.base,
  &scc_info_AltChainConfigRequest_integration_2eproto.base,
  &scc_info_AltPublication_integration_2eproto.base,
  &scc_info_AltPublicationReply_integration_2eproto.base,
  &scc_info_BitcoinBlock_integration_2eproto.base,
  &scc_info_BitcoinBlockReply_integration_2eproto.base,
  &scc_info_BitcoinTransaction_integration_2eproto.base,
  &scc_info_BitcoinTransactionReply_integration_2eproto.base,
  &scc_info_BlockIndex_integration_2eproto.base,
  &scc_info_BytesArrayReply_integration_2eproto.base,
  &scc_info_BytesArrayRequest_integration_2eproto.base,
  &scc_info_CalculatorConfig_integration_2eproto.base,
  &scc_info_Coin_integration_2eproto.base,
  &scc_info_CompareReply_integration_2eproto.base,
  &scc_info_EmptyRequest_integration_2eproto.base,
  &scc_info_FlatScoreRoundConfig_integration_2eproto.base,
  &scc_info_ForkresolutionConfigRequest_integration_2eproto.base,
  &scc_info_GeneralReply_integration_2eproto.base,
  &scc_info_GetCalculatorReply_integration_2eproto.base,
  &scc_info_GetLastKnownBTCBlocksReply_integration_2eproto.base,
  &scc_info_GetLastKnownBlocksRequest_integration_2eproto.base,
  &scc_info_GetLastKnownVBKBlocksReply_integration_2eproto.base,
  &scc_info_GetMainVBKHeightOfATVReply_integration_2eproto.base,
  &scc_info_MerklePath_integration_2eproto.base,
  &scc_info_MerklePathReply_integration_2eproto.base,
  &scc_info_MerklePathRequest_integration_2eproto.base,
  &scc_info_NetworkByte_integration_2eproto.base,
  &scc_info_Output_integration_2eproto.base,
  &scc_info_OutputReply_integration_2eproto.base,
  &scc_info_PopEndorsement_integration_2eproto.base,
  &scc_info_PublicationData_integration_2eproto.base,
  &scc_info_PublicationDataReply_integration_2eproto.base,
  &scc_info_RelativeScoreConfig_integration_2eproto.base,
  &scc_info_RemovePayloadsRequest_integration_2eproto.base,
  &scc_info_RewardCurveConfig_integration_2eproto.base,
  &scc_info_RewardEndorsement_integration_2eproto.base,
  &scc_info_RewardOutput_integration_2eproto.base,
  &scc_info_RewardsCalculateOutputsReply_integration_2eproto.base,
  &scc_info_RewardsCalculateOutputsRequest_integration_2eproto.base,
  &scc_info_RewardsCalculateScoreReply_integration_2eproto.base,
  &scc_info_RewardsCalculateScoreRequest_integration_2eproto.base,
  &scc_info_RoundRatioConfig_integration_2eproto.base,
  &scc_info_SetCalculatorRequest_integration_2eproto.base,
  &scc_info_SimplifyVTBsReply_integration_2eproto.base,
  &scc_info_SimplifyVTBsRequest_integration_2eproto.base,
  &scc_info_TwoBranchesRequest_integration_2eproto.base,
  &scc_info_VeriBlockBlock_integration_2eproto.base,
  &scc_info_VeriBlockBlockReply_integration_2eproto.base,
  &scc_info_VeriBlockMerklePath_integration_2eproto.base,
  &scc_info_VeriBlockMerklePathReply_integration_2eproto.base,
  &scc_info_VeriBlockPoPTransaction_integration_2eproto.base,
  &scc_info_VeriBlockPoPTransactionReply_integration_2eproto.base,
  &scc_info_VeriBlockPublication_integration_2eproto.base,
  &scc_info_VeriBlockPublicationReply_integration_2eproto.base,
  &scc_info_VeriBlockTransaction_integration_2eproto.base,
  &scc_info_VeriBlockTransactionReply_integration_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_integration_2eproto_once;
static bool descriptor_table_integration_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_integration_2eproto = {
  &descriptor_table_integration_2eproto_initialized, descriptor_table_protodef_integration_2eproto, "integration.proto", 12631,
  &descriptor_table_integration_2eproto_once, descriptor_table_integration_2eproto_sccs, descriptor_table_integration_2eproto_deps, 60, 1,
  schemas, file_default_instances, TableStruct_integration_2eproto::offsets,
  file_level_metadata_integration_2eproto, 60, file_level_enum_descriptors_integration_2eproto, file_level_service_descriptors_integration_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_integration_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_integration_2eproto), true);
namespace VeriBlock {

// ===================================================================

void PublicationData::InitAsDefaultInstance() {
}
class PublicationData::_Internal {
 public:
};

PublicationData::PublicationData()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:VeriBlock.PublicationData)
}
PublicationData::PublicationData(const PublicationData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  header_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.header().empty()) {
    header_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.header_);
  }
  payoutinfo_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.payoutinfo().empty()) {
    payoutinfo_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.payoutinfo_);
  }
  veriblockcontext_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.veriblockcontext().empty()) {
    veriblockcontext_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.veriblockcontext_);
  }
  identifier_ = from.identifier_;
  // @@protoc_insertion_point(copy_constructor:VeriBlock.PublicationData)
}

void PublicationData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PublicationData_integration_2eproto.base);
  header_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  payoutinfo_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  veriblockcontext_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  identifier_ = PROTOBUF_LONGLONG(0);
}

PublicationData::~PublicationData() {
  // @@protoc_insertion_point(destructor:VeriBlock.PublicationData)
  SharedDtor();
}

void PublicationData::SharedDtor() {
  header_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  payoutinfo_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  veriblockcontext_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PublicationData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PublicationData& PublicationData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PublicationData_integration_2eproto.base);
  return *internal_default_instance();
}


void PublicationData::Clear() {
// @@protoc_insertion_point(message_clear_start:VeriBlock.PublicationData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  header_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  payoutinfo_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  veriblockcontext_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  identifier_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PublicationData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 identifier = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          identifier_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes header = 2 [(.VeriBlock.hex_encoded) = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_header(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes payoutInfo = 3 [(.VeriBlock.hex_encoded) = true];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_payoutinfo(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes veriblockContext = 4 [(.VeriBlock.hex_encoded) = true];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_veriblockcontext(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PublicationData::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:VeriBlock.PublicationData)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 identifier = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &identifier_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes header = 2 [(.VeriBlock.hex_encoded) = true];
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes payoutInfo = 3 [(.VeriBlock.hex_encoded) = true];
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_payoutinfo()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes veriblockContext = 4 [(.VeriBlock.hex_encoded) = true];
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_veriblockcontext()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:VeriBlock.PublicationData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:VeriBlock.PublicationData)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PublicationData::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:VeriBlock.PublicationData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 identifier = 1;
  if (this->identifier() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(1, this->identifier(), output);
  }

  // bytes header = 2 [(.VeriBlock.hex_encoded) = true];
  if (this->header().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->header(), output);
  }

  // bytes payoutInfo = 3 [(.VeriBlock.hex_encoded) = true];
  if (this->payoutinfo().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->payoutinfo(), output);
  }

  // bytes veriblockContext = 4 [(.VeriBlock.hex_encoded) = true];
  if (this->veriblockcontext().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->veriblockcontext(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:VeriBlock.PublicationData)
}

::PROTOBUF_NAMESPACE_ID::uint8* PublicationData::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:VeriBlock.PublicationData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 identifier = 1;
  if (this->identifier() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->identifier(), target);
  }

  // bytes header = 2 [(.VeriBlock.hex_encoded) = true];
  if (this->header().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        2, this->header(), target);
  }

  // bytes payoutInfo = 3 [(.VeriBlock.hex_encoded) = true];
  if (this->payoutinfo().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        3, this->payoutinfo(), target);
  }

  // bytes veriblockContext = 4 [(.VeriBlock.hex_encoded) = true];
  if (this->veriblockcontext().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        4, this->veriblockcontext(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:VeriBlock.PublicationData)
  return target;
}

size_t PublicationData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:VeriBlock.PublicationData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes header = 2 [(.VeriBlock.hex_encoded) = true];
  if (this->header().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->header());
  }

  // bytes payoutInfo = 3 [(.VeriBlock.hex_encoded) = true];
  if (this->payoutinfo().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->payoutinfo());
  }

  // bytes veriblockContext = 4 [(.VeriBlock.hex_encoded) = true];
  if (this->veriblockcontext().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->veriblockcontext());
  }

  // int64 identifier = 1;
  if (this->identifier() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->identifier());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PublicationData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:VeriBlock.PublicationData)
  GOOGLE_DCHECK_NE(&from, this);
  const PublicationData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PublicationData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:VeriBlock.PublicationData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:VeriBlock.PublicationData)
    MergeFrom(*source);
  }
}

void PublicationData::MergeFrom(const PublicationData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:VeriBlock.PublicationData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.header().size() > 0) {

    header_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.header_);
  }
  if (from.payoutinfo().size() > 0) {

    payoutinfo_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.payoutinfo_);
  }
  if (from.veriblockcontext().size() > 0) {

    veriblockcontext_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.veriblockcontext_);
  }
  if (from.identifier() != 0) {
    set_identifier(from.identifier());
  }
}

void PublicationData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:VeriBlock.PublicationData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PublicationData::CopyFrom(const PublicationData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:VeriBlock.PublicationData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PublicationData::IsInitialized() const {
  return true;
}

void PublicationData::InternalSwap(PublicationData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  header_.Swap(&other->header_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  payoutinfo_.Swap(&other->payoutinfo_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  veriblockcontext_.Swap(&other->veriblockcontext_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(identifier_, other->identifier_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PublicationData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BitcoinBlock::InitAsDefaultInstance() {
}
class BitcoinBlock::_Internal {
 public:
};

BitcoinBlock::BitcoinBlock()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:VeriBlock.BitcoinBlock)
}
BitcoinBlock::BitcoinBlock(const BitcoinBlock& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  previousblock_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.previousblock().empty()) {
    previousblock_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.previousblock_);
  }
  merkleroot_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.merkleroot().empty()) {
    merkleroot_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.merkleroot_);
  }
  ::memcpy(&version_, &from.version_,
    static_cast<size_t>(reinterpret_cast<char*>(&nonce_) -
    reinterpret_cast<char*>(&version_)) + sizeof(nonce_));
  // @@protoc_insertion_point(copy_constructor:VeriBlock.BitcoinBlock)
}

void BitcoinBlock::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BitcoinBlock_integration_2eproto.base);
  previousblock_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  merkleroot_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&version_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&nonce_) -
      reinterpret_cast<char*>(&version_)) + sizeof(nonce_));
}

BitcoinBlock::~BitcoinBlock() {
  // @@protoc_insertion_point(destructor:VeriBlock.BitcoinBlock)
  SharedDtor();
}

void BitcoinBlock::SharedDtor() {
  previousblock_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  merkleroot_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void BitcoinBlock::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BitcoinBlock& BitcoinBlock::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BitcoinBlock_integration_2eproto.base);
  return *internal_default_instance();
}


void BitcoinBlock::Clear() {
// @@protoc_insertion_point(message_clear_start:VeriBlock.BitcoinBlock)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  previousblock_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  merkleroot_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&version_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&nonce_) -
      reinterpret_cast<char*>(&version_)) + sizeof(nonce_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* BitcoinBlock::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes previousBlock = 2 [(.VeriBlock.hex_encoded) = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_previousblock(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes merkleRoot = 3 [(.VeriBlock.hex_encoded) = true];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_merkleroot(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 timestamp = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 bits = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          bits_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 nonce = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          nonce_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool BitcoinBlock::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:VeriBlock.BitcoinBlock)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 version = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes previousBlock = 2 [(.VeriBlock.hex_encoded) = true];
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_previousblock()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes merkleRoot = 3 [(.VeriBlock.hex_encoded) = true];
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_merkleroot()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 timestamp = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 bits = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &bits_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 nonce = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &nonce_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:VeriBlock.BitcoinBlock)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:VeriBlock.BitcoinBlock)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void BitcoinBlock::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:VeriBlock.BitcoinBlock)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 version = 1;
  if (this->version() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->version(), output);
  }

  // bytes previousBlock = 2 [(.VeriBlock.hex_encoded) = true];
  if (this->previousblock().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->previousblock(), output);
  }

  // bytes merkleRoot = 3 [(.VeriBlock.hex_encoded) = true];
  if (this->merkleroot().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->merkleroot(), output);
  }

  // int32 timestamp = 4;
  if (this->timestamp() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(4, this->timestamp(), output);
  }

  // int32 bits = 5;
  if (this->bits() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(5, this->bits(), output);
  }

  // int32 nonce = 6;
  if (this->nonce() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(6, this->nonce(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:VeriBlock.BitcoinBlock)
}

::PROTOBUF_NAMESPACE_ID::uint8* BitcoinBlock::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:VeriBlock.BitcoinBlock)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 version = 1;
  if (this->version() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->version(), target);
  }

  // bytes previousBlock = 2 [(.VeriBlock.hex_encoded) = true];
  if (this->previousblock().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        2, this->previousblock(), target);
  }

  // bytes merkleRoot = 3 [(.VeriBlock.hex_encoded) = true];
  if (this->merkleroot().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        3, this->merkleroot(), target);
  }

  // int32 timestamp = 4;
  if (this->timestamp() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->timestamp(), target);
  }

  // int32 bits = 5;
  if (this->bits() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->bits(), target);
  }

  // int32 nonce = 6;
  if (this->nonce() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->nonce(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:VeriBlock.BitcoinBlock)
  return target;
}

size_t BitcoinBlock::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:VeriBlock.BitcoinBlock)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes previousBlock = 2 [(.VeriBlock.hex_encoded) = true];
  if (this->previousblock().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->previousblock());
  }

  // bytes merkleRoot = 3 [(.VeriBlock.hex_encoded) = true];
  if (this->merkleroot().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->merkleroot());
  }

  // int32 version = 1;
  if (this->version() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->version());
  }

  // int32 timestamp = 4;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->timestamp());
  }

  // int32 bits = 5;
  if (this->bits() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->bits());
  }

  // int32 nonce = 6;
  if (this->nonce() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->nonce());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BitcoinBlock::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:VeriBlock.BitcoinBlock)
  GOOGLE_DCHECK_NE(&from, this);
  const BitcoinBlock* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BitcoinBlock>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:VeriBlock.BitcoinBlock)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:VeriBlock.BitcoinBlock)
    MergeFrom(*source);
  }
}

void BitcoinBlock::MergeFrom(const BitcoinBlock& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:VeriBlock.BitcoinBlock)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.previousblock().size() > 0) {

    previousblock_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.previousblock_);
  }
  if (from.merkleroot().size() > 0) {

    merkleroot_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.merkleroot_);
  }
  if (from.version() != 0) {
    set_version(from.version());
  }
  if (from.timestamp() != 0) {
    set_timestamp(from.timestamp());
  }
  if (from.bits() != 0) {
    set_bits(from.bits());
  }
  if (from.nonce() != 0) {
    set_nonce(from.nonce());
  }
}

void BitcoinBlock::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:VeriBlock.BitcoinBlock)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BitcoinBlock::CopyFrom(const BitcoinBlock& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:VeriBlock.BitcoinBlock)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BitcoinBlock::IsInitialized() const {
  return true;
}

void BitcoinBlock::InternalSwap(BitcoinBlock* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  previousblock_.Swap(&other->previousblock_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  merkleroot_.Swap(&other->merkleroot_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(version_, other->version_);
  swap(timestamp_, other->timestamp_);
  swap(bits_, other->bits_);
  swap(nonce_, other->nonce_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BitcoinBlock::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BitcoinTransaction::InitAsDefaultInstance() {
}
class BitcoinTransaction::_Internal {
 public:
};

BitcoinTransaction::BitcoinTransaction()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:VeriBlock.BitcoinTransaction)
}
BitcoinTransaction::BitcoinTransaction(const BitcoinTransaction& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  raw_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.raw().empty()) {
    raw_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.raw_);
  }
  // @@protoc_insertion_point(copy_constructor:VeriBlock.BitcoinTransaction)
}

void BitcoinTransaction::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BitcoinTransaction_integration_2eproto.base);
  raw_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

BitcoinTransaction::~BitcoinTransaction() {
  // @@protoc_insertion_point(destructor:VeriBlock.BitcoinTransaction)
  SharedDtor();
}

void BitcoinTransaction::SharedDtor() {
  raw_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void BitcoinTransaction::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BitcoinTransaction& BitcoinTransaction::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BitcoinTransaction_integration_2eproto.base);
  return *internal_default_instance();
}


void BitcoinTransaction::Clear() {
// @@protoc_insertion_point(message_clear_start:VeriBlock.BitcoinTransaction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  raw_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* BitcoinTransaction::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes raw = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_raw(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool BitcoinTransaction::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:VeriBlock.BitcoinTransaction)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes raw = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_raw()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:VeriBlock.BitcoinTransaction)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:VeriBlock.BitcoinTransaction)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void BitcoinTransaction::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:VeriBlock.BitcoinTransaction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes raw = 1;
  if (this->raw().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->raw(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:VeriBlock.BitcoinTransaction)
}

::PROTOBUF_NAMESPACE_ID::uint8* BitcoinTransaction::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:VeriBlock.BitcoinTransaction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes raw = 1;
  if (this->raw().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        1, this->raw(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:VeriBlock.BitcoinTransaction)
  return target;
}

size_t BitcoinTransaction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:VeriBlock.BitcoinTransaction)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes raw = 1;
  if (this->raw().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->raw());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BitcoinTransaction::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:VeriBlock.BitcoinTransaction)
  GOOGLE_DCHECK_NE(&from, this);
  const BitcoinTransaction* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BitcoinTransaction>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:VeriBlock.BitcoinTransaction)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:VeriBlock.BitcoinTransaction)
    MergeFrom(*source);
  }
}

void BitcoinTransaction::MergeFrom(const BitcoinTransaction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:VeriBlock.BitcoinTransaction)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.raw().size() > 0) {

    raw_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.raw_);
  }
}

void BitcoinTransaction::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:VeriBlock.BitcoinTransaction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BitcoinTransaction::CopyFrom(const BitcoinTransaction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:VeriBlock.BitcoinTransaction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BitcoinTransaction::IsInitialized() const {
  return true;
}

void BitcoinTransaction::InternalSwap(BitcoinTransaction* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  raw_.Swap(&other->raw_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata BitcoinTransaction::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void VeriBlockBlock::InitAsDefaultInstance() {
}
class VeriBlockBlock::_Internal {
 public:
};

VeriBlockBlock::VeriBlockBlock()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:VeriBlock.VeriBlockBlock)
}
VeriBlockBlock::VeriBlockBlock(const VeriBlockBlock& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  previousblock_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.previousblock().empty()) {
    previousblock_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.previousblock_);
  }
  previouskeystone_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.previouskeystone().empty()) {
    previouskeystone_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.previouskeystone_);
  }
  secondpreviouskeystone_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.secondpreviouskeystone().empty()) {
    secondpreviouskeystone_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.secondpreviouskeystone_);
  }
  merkleroot_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.merkleroot().empty()) {
    merkleroot_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.merkleroot_);
  }
  ::memcpy(&height_, &from.height_,
    static_cast<size_t>(reinterpret_cast<char*>(&nonce_) -
    reinterpret_cast<char*>(&height_)) + sizeof(nonce_));
  // @@protoc_insertion_point(copy_constructor:VeriBlock.VeriBlockBlock)
}

void VeriBlockBlock::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_VeriBlockBlock_integration_2eproto.base);
  previousblock_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  previouskeystone_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  secondpreviouskeystone_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  merkleroot_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&height_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&nonce_) -
      reinterpret_cast<char*>(&height_)) + sizeof(nonce_));
}

VeriBlockBlock::~VeriBlockBlock() {
  // @@protoc_insertion_point(destructor:VeriBlock.VeriBlockBlock)
  SharedDtor();
}

void VeriBlockBlock::SharedDtor() {
  previousblock_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  previouskeystone_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  secondpreviouskeystone_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  merkleroot_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void VeriBlockBlock::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VeriBlockBlock& VeriBlockBlock::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_VeriBlockBlock_integration_2eproto.base);
  return *internal_default_instance();
}


void VeriBlockBlock::Clear() {
// @@protoc_insertion_point(message_clear_start:VeriBlock.VeriBlockBlock)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  previousblock_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  previouskeystone_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  secondpreviouskeystone_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  merkleroot_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&height_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&nonce_) -
      reinterpret_cast<char*>(&height_)) + sizeof(nonce_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* VeriBlockBlock::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 height = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 version = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes previousBlock = 3 [(.VeriBlock.hex_encoded) = true];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_previousblock(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes previousKeystone = 4 [(.VeriBlock.hex_encoded) = true];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_previouskeystone(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes secondPreviousKeystone = 5 [(.VeriBlock.hex_encoded) = true];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_secondpreviouskeystone(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes merkleRoot = 6 [(.VeriBlock.hex_encoded) = true];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_merkleroot(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 timestamp = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 difficulty = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          difficulty_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 nonce = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          nonce_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool VeriBlockBlock::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:VeriBlock.VeriBlockBlock)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 height = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 version = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes previousBlock = 3 [(.VeriBlock.hex_encoded) = true];
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_previousblock()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes previousKeystone = 4 [(.VeriBlock.hex_encoded) = true];
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_previouskeystone()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes secondPreviousKeystone = 5 [(.VeriBlock.hex_encoded) = true];
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_secondpreviouskeystone()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes merkleRoot = 6 [(.VeriBlock.hex_encoded) = true];
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_merkleroot()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 timestamp = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 difficulty = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (64 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &difficulty_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 nonce = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (72 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &nonce_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:VeriBlock.VeriBlockBlock)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:VeriBlock.VeriBlockBlock)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void VeriBlockBlock::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:VeriBlock.VeriBlockBlock)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 height = 1;
  if (this->height() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->height(), output);
  }

  // int32 version = 2;
  if (this->version() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->version(), output);
  }

  // bytes previousBlock = 3 [(.VeriBlock.hex_encoded) = true];
  if (this->previousblock().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->previousblock(), output);
  }

  // bytes previousKeystone = 4 [(.VeriBlock.hex_encoded) = true];
  if (this->previouskeystone().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->previouskeystone(), output);
  }

  // bytes secondPreviousKeystone = 5 [(.VeriBlock.hex_encoded) = true];
  if (this->secondpreviouskeystone().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->secondpreviouskeystone(), output);
  }

  // bytes merkleRoot = 6 [(.VeriBlock.hex_encoded) = true];
  if (this->merkleroot().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->merkleroot(), output);
  }

  // int32 timestamp = 7;
  if (this->timestamp() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(7, this->timestamp(), output);
  }

  // int32 difficulty = 8;
  if (this->difficulty() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(8, this->difficulty(), output);
  }

  // int32 nonce = 9;
  if (this->nonce() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(9, this->nonce(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:VeriBlock.VeriBlockBlock)
}

::PROTOBUF_NAMESPACE_ID::uint8* VeriBlockBlock::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:VeriBlock.VeriBlockBlock)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 height = 1;
  if (this->height() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->height(), target);
  }

  // int32 version = 2;
  if (this->version() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->version(), target);
  }

  // bytes previousBlock = 3 [(.VeriBlock.hex_encoded) = true];
  if (this->previousblock().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        3, this->previousblock(), target);
  }

  // bytes previousKeystone = 4 [(.VeriBlock.hex_encoded) = true];
  if (this->previouskeystone().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        4, this->previouskeystone(), target);
  }

  // bytes secondPreviousKeystone = 5 [(.VeriBlock.hex_encoded) = true];
  if (this->secondpreviouskeystone().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        5, this->secondpreviouskeystone(), target);
  }

  // bytes merkleRoot = 6 [(.VeriBlock.hex_encoded) = true];
  if (this->merkleroot().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        6, this->merkleroot(), target);
  }

  // int32 timestamp = 7;
  if (this->timestamp() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->timestamp(), target);
  }

  // int32 difficulty = 8;
  if (this->difficulty() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->difficulty(), target);
  }

  // int32 nonce = 9;
  if (this->nonce() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->nonce(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:VeriBlock.VeriBlockBlock)
  return target;
}

size_t VeriBlockBlock::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:VeriBlock.VeriBlockBlock)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes previousBlock = 3 [(.VeriBlock.hex_encoded) = true];
  if (this->previousblock().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->previousblock());
  }

  // bytes previousKeystone = 4 [(.VeriBlock.hex_encoded) = true];
  if (this->previouskeystone().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->previouskeystone());
  }

  // bytes secondPreviousKeystone = 5 [(.VeriBlock.hex_encoded) = true];
  if (this->secondpreviouskeystone().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->secondpreviouskeystone());
  }

  // bytes merkleRoot = 6 [(.VeriBlock.hex_encoded) = true];
  if (this->merkleroot().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->merkleroot());
  }

  // int32 height = 1;
  if (this->height() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->height());
  }

  // int32 version = 2;
  if (this->version() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->version());
  }

  // int32 timestamp = 7;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->timestamp());
  }

  // int32 difficulty = 8;
  if (this->difficulty() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->difficulty());
  }

  // int32 nonce = 9;
  if (this->nonce() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->nonce());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VeriBlockBlock::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:VeriBlock.VeriBlockBlock)
  GOOGLE_DCHECK_NE(&from, this);
  const VeriBlockBlock* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VeriBlockBlock>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:VeriBlock.VeriBlockBlock)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:VeriBlock.VeriBlockBlock)
    MergeFrom(*source);
  }
}

void VeriBlockBlock::MergeFrom(const VeriBlockBlock& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:VeriBlock.VeriBlockBlock)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.previousblock().size() > 0) {

    previousblock_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.previousblock_);
  }
  if (from.previouskeystone().size() > 0) {

    previouskeystone_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.previouskeystone_);
  }
  if (from.secondpreviouskeystone().size() > 0) {

    secondpreviouskeystone_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.secondpreviouskeystone_);
  }
  if (from.merkleroot().size() > 0) {

    merkleroot_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.merkleroot_);
  }
  if (from.height() != 0) {
    set_height(from.height());
  }
  if (from.version() != 0) {
    set_version(from.version());
  }
  if (from.timestamp() != 0) {
    set_timestamp(from.timestamp());
  }
  if (from.difficulty() != 0) {
    set_difficulty(from.difficulty());
  }
  if (from.nonce() != 0) {
    set_nonce(from.nonce());
  }
}

void VeriBlockBlock::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:VeriBlock.VeriBlockBlock)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VeriBlockBlock::CopyFrom(const VeriBlockBlock& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:VeriBlock.VeriBlockBlock)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VeriBlockBlock::IsInitialized() const {
  return true;
}

void VeriBlockBlock::InternalSwap(VeriBlockBlock* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  previousblock_.Swap(&other->previousblock_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  previouskeystone_.Swap(&other->previouskeystone_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  secondpreviouskeystone_.Swap(&other->secondpreviouskeystone_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  merkleroot_.Swap(&other->merkleroot_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(height_, other->height_);
  swap(version_, other->version_);
  swap(timestamp_, other->timestamp_);
  swap(difficulty_, other->difficulty_);
  swap(nonce_, other->nonce_);
}

::PROTOBUF_NAMESPACE_ID::Metadata VeriBlockBlock::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void NetworkByte::InitAsDefaultInstance() {
}
class NetworkByte::_Internal {
 public:
};

NetworkByte::NetworkByte()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:VeriBlock.NetworkByte)
}
NetworkByte::NetworkByte(const NetworkByte& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&byteexists_, &from.byteexists_,
    static_cast<size_t>(reinterpret_cast<char*>(&networkbyte_) -
    reinterpret_cast<char*>(&byteexists_)) + sizeof(networkbyte_));
  // @@protoc_insertion_point(copy_constructor:VeriBlock.NetworkByte)
}

void NetworkByte::SharedCtor() {
  ::memset(&byteexists_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&networkbyte_) -
      reinterpret_cast<char*>(&byteexists_)) + sizeof(networkbyte_));
}

NetworkByte::~NetworkByte() {
  // @@protoc_insertion_point(destructor:VeriBlock.NetworkByte)
  SharedDtor();
}

void NetworkByte::SharedDtor() {
}

void NetworkByte::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NetworkByte& NetworkByte::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NetworkByte_integration_2eproto.base);
  return *internal_default_instance();
}


void NetworkByte::Clear() {
// @@protoc_insertion_point(message_clear_start:VeriBlock.NetworkByte)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&byteexists_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&networkbyte_) -
      reinterpret_cast<char*>(&byteexists_)) + sizeof(networkbyte_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* NetworkByte::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool byteExists = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          byteexists_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 networkByte = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          networkbyte_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool NetworkByte::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:VeriBlock.NetworkByte)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool byteExists = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &byteexists_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 networkByte = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &networkbyte_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:VeriBlock.NetworkByte)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:VeriBlock.NetworkByte)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void NetworkByte::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:VeriBlock.NetworkByte)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool byteExists = 1;
  if (this->byteexists() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(1, this->byteexists(), output);
  }

  // int32 networkByte = 2;
  if (this->networkbyte() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->networkbyte(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:VeriBlock.NetworkByte)
}

::PROTOBUF_NAMESPACE_ID::uint8* NetworkByte::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:VeriBlock.NetworkByte)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool byteExists = 1;
  if (this->byteexists() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->byteexists(), target);
  }

  // int32 networkByte = 2;
  if (this->networkbyte() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->networkbyte(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:VeriBlock.NetworkByte)
  return target;
}

size_t NetworkByte::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:VeriBlock.NetworkByte)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool byteExists = 1;
  if (this->byteexists() != 0) {
    total_size += 1 + 1;
  }

  // int32 networkByte = 2;
  if (this->networkbyte() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->networkbyte());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NetworkByte::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:VeriBlock.NetworkByte)
  GOOGLE_DCHECK_NE(&from, this);
  const NetworkByte* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NetworkByte>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:VeriBlock.NetworkByte)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:VeriBlock.NetworkByte)
    MergeFrom(*source);
  }
}

void NetworkByte::MergeFrom(const NetworkByte& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:VeriBlock.NetworkByte)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.byteexists() != 0) {
    set_byteexists(from.byteexists());
  }
  if (from.networkbyte() != 0) {
    set_networkbyte(from.networkbyte());
  }
}

void NetworkByte::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:VeriBlock.NetworkByte)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetworkByte::CopyFrom(const NetworkByte& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:VeriBlock.NetworkByte)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetworkByte::IsInitialized() const {
  return true;
}

void NetworkByte::InternalSwap(NetworkByte* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(byteexists_, other->byteexists_);
  swap(networkbyte_, other->networkbyte_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NetworkByte::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void VeriBlockTransaction::InitAsDefaultInstance() {
  ::VeriBlock::_VeriBlockTransaction_default_instance_._instance.get_mutable()->sourceaddress_ = const_cast< ::VeriBlock::Address*>(
      ::VeriBlock::Address::internal_default_instance());
  ::VeriBlock::_VeriBlockTransaction_default_instance_._instance.get_mutable()->sourceamount_ = const_cast< ::VeriBlock::Coin*>(
      ::VeriBlock::Coin::internal_default_instance());
  ::VeriBlock::_VeriBlockTransaction_default_instance_._instance.get_mutable()->publicationdata_ = const_cast< ::VeriBlock::PublicationData*>(
      ::VeriBlock::PublicationData::internal_default_instance());
  ::VeriBlock::_VeriBlockTransaction_default_instance_._instance.get_mutable()->networkbyte_ = const_cast< ::VeriBlock::NetworkByte*>(
      ::VeriBlock::NetworkByte::internal_default_instance());
}
class VeriBlockTransaction::_Internal {
 public:
  static const ::VeriBlock::Address& sourceaddress(const VeriBlockTransaction* msg);
  static const ::VeriBlock::Coin& sourceamount(const VeriBlockTransaction* msg);
  static const ::VeriBlock::PublicationData& publicationdata(const VeriBlockTransaction* msg);
  static const ::VeriBlock::NetworkByte& networkbyte(const VeriBlockTransaction* msg);
};

const ::VeriBlock::Address&
VeriBlockTransaction::_Internal::sourceaddress(const VeriBlockTransaction* msg) {
  return *msg->sourceaddress_;
}
const ::VeriBlock::Coin&
VeriBlockTransaction::_Internal::sourceamount(const VeriBlockTransaction* msg) {
  return *msg->sourceamount_;
}
const ::VeriBlock::PublicationData&
VeriBlockTransaction::_Internal::publicationdata(const VeriBlockTransaction* msg) {
  return *msg->publicationdata_;
}
const ::VeriBlock::NetworkByte&
VeriBlockTransaction::_Internal::networkbyte(const VeriBlockTransaction* msg) {
  return *msg->networkbyte_;
}
VeriBlockTransaction::VeriBlockTransaction()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:VeriBlock.VeriBlockTransaction)
}
VeriBlockTransaction::VeriBlockTransaction(const VeriBlockTransaction& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      outputs_(from.outputs_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.id().empty()) {
    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.data().empty()) {
    data_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  signature_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.signature().empty()) {
    signature_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.signature_);
  }
  publickey_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.publickey().empty()) {
    publickey_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.publickey_);
  }
  if (from.has_sourceaddress()) {
    sourceaddress_ = new ::VeriBlock::Address(*from.sourceaddress_);
  } else {
    sourceaddress_ = nullptr;
  }
  if (from.has_sourceamount()) {
    sourceamount_ = new ::VeriBlock::Coin(*from.sourceamount_);
  } else {
    sourceamount_ = nullptr;
  }
  if (from.has_publicationdata()) {
    publicationdata_ = new ::VeriBlock::PublicationData(*from.publicationdata_);
  } else {
    publicationdata_ = nullptr;
  }
  if (from.has_networkbyte()) {
    networkbyte_ = new ::VeriBlock::NetworkByte(*from.networkbyte_);
  } else {
    networkbyte_ = nullptr;
  }
  ::memcpy(&signatureindex_, &from.signatureindex_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&signatureindex_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:VeriBlock.VeriBlockTransaction)
}

void VeriBlockTransaction::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_VeriBlockTransaction_integration_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  signature_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  publickey_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&sourceaddress_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&sourceaddress_)) + sizeof(type_));
}

VeriBlockTransaction::~VeriBlockTransaction() {
  // @@protoc_insertion_point(destructor:VeriBlock.VeriBlockTransaction)
  SharedDtor();
}

void VeriBlockTransaction::SharedDtor() {
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  signature_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  publickey_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete sourceaddress_;
  if (this != internal_default_instance()) delete sourceamount_;
  if (this != internal_default_instance()) delete publicationdata_;
  if (this != internal_default_instance()) delete networkbyte_;
}

void VeriBlockTransaction::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VeriBlockTransaction& VeriBlockTransaction::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_VeriBlockTransaction_integration_2eproto.base);
  return *internal_default_instance();
}


void VeriBlockTransaction::Clear() {
// @@protoc_insertion_point(message_clear_start:VeriBlock.VeriBlockTransaction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  outputs_.Clear();
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  data_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  signature_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  publickey_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && sourceaddress_ != nullptr) {
    delete sourceaddress_;
  }
  sourceaddress_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && sourceamount_ != nullptr) {
    delete sourceamount_;
  }
  sourceamount_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && publicationdata_ != nullptr) {
    delete publicationdata_;
  }
  publicationdata_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && networkbyte_ != nullptr) {
    delete networkbyte_;
  }
  networkbyte_ = nullptr;
  ::memset(&signatureindex_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&signatureindex_)) + sizeof(type_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* VeriBlockTransaction::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes id = 1 [(.VeriBlock.hex_encoded) = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_id(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .VeriBlock.Address sourceAddress = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_sourceaddress(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .VeriBlock.Coin sourceAmount = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_sourceamount(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .VeriBlock.Output outputs = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_outputs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 42);
        } else goto handle_unusual;
        continue;
      // int64 signatureIndex = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          signatureindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes data = 7 [(.VeriBlock.hex_encoded) = true];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_data(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .VeriBlock.PublicationData publicationData = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(mutable_publicationdata(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes signature = 9 [(.VeriBlock.hex_encoded) = true];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_signature(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes publicKey = 10 [(.VeriBlock.hex_encoded) = true];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_publickey(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .VeriBlock.NetworkByte networkByte = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(mutable_networkbyte(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool VeriBlockTransaction::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:VeriBlock.VeriBlockTransaction)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes id = 1 [(.VeriBlock.hex_encoded) = true];
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 type = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .VeriBlock.Address sourceAddress = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_sourceaddress()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .VeriBlock.Coin sourceAmount = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_sourceamount()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .VeriBlock.Output outputs = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_outputs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 signatureIndex = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &signatureindex_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes data = 7 [(.VeriBlock.hex_encoded) = true];
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .VeriBlock.PublicationData publicationData = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (66 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_publicationdata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes signature = 9 [(.VeriBlock.hex_encoded) = true];
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (74 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_signature()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes publicKey = 10 [(.VeriBlock.hex_encoded) = true];
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (82 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_publickey()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .VeriBlock.NetworkByte networkByte = 11;
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (90 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_networkbyte()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:VeriBlock.VeriBlockTransaction)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:VeriBlock.VeriBlockTransaction)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void VeriBlockTransaction::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:VeriBlock.VeriBlockTransaction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes id = 1 [(.VeriBlock.hex_encoded) = true];
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->id(), output);
  }

  // int32 type = 2;
  if (this->type() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  // .VeriBlock.Address sourceAddress = 3;
  if (this->has_sourceaddress()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, _Internal::sourceaddress(this), output);
  }

  // .VeriBlock.Coin sourceAmount = 4;
  if (this->has_sourceamount()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, _Internal::sourceamount(this), output);
  }

  // repeated .VeriBlock.Output outputs = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->outputs_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      5,
      this->outputs(static_cast<int>(i)),
      output);
  }

  // int64 signatureIndex = 6;
  if (this->signatureindex() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(6, this->signatureindex(), output);
  }

  // bytes data = 7 [(.VeriBlock.hex_encoded) = true];
  if (this->data().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      7, this->data(), output);
  }

  // .VeriBlock.PublicationData publicationData = 8;
  if (this->has_publicationdata()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, _Internal::publicationdata(this), output);
  }

  // bytes signature = 9 [(.VeriBlock.hex_encoded) = true];
  if (this->signature().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      9, this->signature(), output);
  }

  // bytes publicKey = 10 [(.VeriBlock.hex_encoded) = true];
  if (this->publickey().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      10, this->publickey(), output);
  }

  // .VeriBlock.NetworkByte networkByte = 11;
  if (this->has_networkbyte()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, _Internal::networkbyte(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:VeriBlock.VeriBlockTransaction)
}

::PROTOBUF_NAMESPACE_ID::uint8* VeriBlockTransaction::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:VeriBlock.VeriBlockTransaction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes id = 1 [(.VeriBlock.hex_encoded) = true];
  if (this->id().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        1, this->id(), target);
  }

  // int32 type = 2;
  if (this->type() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  // .VeriBlock.Address sourceAddress = 3;
  if (this->has_sourceaddress()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, _Internal::sourceaddress(this), target);
  }

  // .VeriBlock.Coin sourceAmount = 4;
  if (this->has_sourceamount()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, _Internal::sourceamount(this), target);
  }

  // repeated .VeriBlock.Output outputs = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->outputs_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->outputs(static_cast<int>(i)), target);
  }

  // int64 signatureIndex = 6;
  if (this->signatureindex() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(6, this->signatureindex(), target);
  }

  // bytes data = 7 [(.VeriBlock.hex_encoded) = true];
  if (this->data().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        7, this->data(), target);
  }

  // .VeriBlock.PublicationData publicationData = 8;
  if (this->has_publicationdata()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, _Internal::publicationdata(this), target);
  }

  // bytes signature = 9 [(.VeriBlock.hex_encoded) = true];
  if (this->signature().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        9, this->signature(), target);
  }

  // bytes publicKey = 10 [(.VeriBlock.hex_encoded) = true];
  if (this->publickey().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        10, this->publickey(), target);
  }

  // .VeriBlock.NetworkByte networkByte = 11;
  if (this->has_networkbyte()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        11, _Internal::networkbyte(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:VeriBlock.VeriBlockTransaction)
  return target;
}

size_t VeriBlockTransaction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:VeriBlock.VeriBlockTransaction)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .VeriBlock.Output outputs = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->outputs_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->outputs(static_cast<int>(i)));
    }
  }

  // bytes id = 1 [(.VeriBlock.hex_encoded) = true];
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->id());
  }

  // bytes data = 7 [(.VeriBlock.hex_encoded) = true];
  if (this->data().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->data());
  }

  // bytes signature = 9 [(.VeriBlock.hex_encoded) = true];
  if (this->signature().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->signature());
  }

  // bytes publicKey = 10 [(.VeriBlock.hex_encoded) = true];
  if (this->publickey().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->publickey());
  }

  // .VeriBlock.Address sourceAddress = 3;
  if (this->has_sourceaddress()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sourceaddress_);
  }

  // .VeriBlock.Coin sourceAmount = 4;
  if (this->has_sourceamount()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sourceamount_);
  }

  // .VeriBlock.PublicationData publicationData = 8;
  if (this->has_publicationdata()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *publicationdata_);
  }

  // .VeriBlock.NetworkByte networkByte = 11;
  if (this->has_networkbyte()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *networkbyte_);
  }

  // int64 signatureIndex = 6;
  if (this->signatureindex() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->signatureindex());
  }

  // int32 type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->type());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VeriBlockTransaction::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:VeriBlock.VeriBlockTransaction)
  GOOGLE_DCHECK_NE(&from, this);
  const VeriBlockTransaction* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VeriBlockTransaction>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:VeriBlock.VeriBlockTransaction)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:VeriBlock.VeriBlockTransaction)
    MergeFrom(*source);
  }
}

void VeriBlockTransaction::MergeFrom(const VeriBlockTransaction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:VeriBlock.VeriBlockTransaction)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  outputs_.MergeFrom(from.outputs_);
  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.data().size() > 0) {

    data_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  if (from.signature().size() > 0) {

    signature_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.signature_);
  }
  if (from.publickey().size() > 0) {

    publickey_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.publickey_);
  }
  if (from.has_sourceaddress()) {
    mutable_sourceaddress()->::VeriBlock::Address::MergeFrom(from.sourceaddress());
  }
  if (from.has_sourceamount()) {
    mutable_sourceamount()->::VeriBlock::Coin::MergeFrom(from.sourceamount());
  }
  if (from.has_publicationdata()) {
    mutable_publicationdata()->::VeriBlock::PublicationData::MergeFrom(from.publicationdata());
  }
  if (from.has_networkbyte()) {
    mutable_networkbyte()->::VeriBlock::NetworkByte::MergeFrom(from.networkbyte());
  }
  if (from.signatureindex() != 0) {
    set_signatureindex(from.signatureindex());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void VeriBlockTransaction::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:VeriBlock.VeriBlockTransaction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VeriBlockTransaction::CopyFrom(const VeriBlockTransaction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:VeriBlock.VeriBlockTransaction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VeriBlockTransaction::IsInitialized() const {
  return true;
}

void VeriBlockTransaction::InternalSwap(VeriBlockTransaction* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&outputs_)->InternalSwap(CastToBase(&other->outputs_));
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  data_.Swap(&other->data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  signature_.Swap(&other->signature_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  publickey_.Swap(&other->publickey_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(sourceaddress_, other->sourceaddress_);
  swap(sourceamount_, other->sourceamount_);
  swap(publicationdata_, other->publicationdata_);
  swap(networkbyte_, other->networkbyte_);
  swap(signatureindex_, other->signatureindex_);
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata VeriBlockTransaction::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Address::InitAsDefaultInstance() {
}
class Address::_Internal {
 public:
};

Address::Address()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:VeriBlock.Address)
}
Address::Address(const Address& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.address().empty()) {
    address_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.address_);
  }
  // @@protoc_insertion_point(copy_constructor:VeriBlock.Address)
}

void Address::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Address_integration_2eproto.base);
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Address::~Address() {
  // @@protoc_insertion_point(destructor:VeriBlock.Address)
  SharedDtor();
}

void Address::SharedDtor() {
  address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Address::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Address& Address::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Address_integration_2eproto.base);
  return *internal_default_instance();
}


void Address::Clear() {
// @@protoc_insertion_point(message_clear_start:VeriBlock.Address)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  address_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Address::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_address(), ptr, ctx, "VeriBlock.Address.address");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Address::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:VeriBlock.Address)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string address = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_address()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->address().data(), static_cast<int>(this->address().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "VeriBlock.Address.address"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:VeriBlock.Address)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:VeriBlock.Address)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Address::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:VeriBlock.Address)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string address = 1;
  if (this->address().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->address().data(), static_cast<int>(this->address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "VeriBlock.Address.address");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->address(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:VeriBlock.Address)
}

::PROTOBUF_NAMESPACE_ID::uint8* Address::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:VeriBlock.Address)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string address = 1;
  if (this->address().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->address().data(), static_cast<int>(this->address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "VeriBlock.Address.address");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->address(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:VeriBlock.Address)
  return target;
}

size_t Address::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:VeriBlock.Address)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string address = 1;
  if (this->address().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->address());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Address::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:VeriBlock.Address)
  GOOGLE_DCHECK_NE(&from, this);
  const Address* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Address>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:VeriBlock.Address)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:VeriBlock.Address)
    MergeFrom(*source);
  }
}

void Address::MergeFrom(const Address& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:VeriBlock.Address)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.address().size() > 0) {

    address_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.address_);
  }
}

void Address::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:VeriBlock.Address)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Address::CopyFrom(const Address& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:VeriBlock.Address)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Address::IsInitialized() const {
  return true;
}

void Address::InternalSwap(Address* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  address_.Swap(&other->address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata Address::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Coin::InitAsDefaultInstance() {
}
class Coin::_Internal {
 public:
};

Coin::Coin()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:VeriBlock.Coin)
}
Coin::Coin(const Coin& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  atomicunits_ = from.atomicunits_;
  // @@protoc_insertion_point(copy_constructor:VeriBlock.Coin)
}

void Coin::SharedCtor() {
  atomicunits_ = PROTOBUF_LONGLONG(0);
}

Coin::~Coin() {
  // @@protoc_insertion_point(destructor:VeriBlock.Coin)
  SharedDtor();
}

void Coin::SharedDtor() {
}

void Coin::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Coin& Coin::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Coin_integration_2eproto.base);
  return *internal_default_instance();
}


void Coin::Clear() {
// @@protoc_insertion_point(message_clear_start:VeriBlock.Coin)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  atomicunits_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Coin::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 atomicUnits = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          atomicunits_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Coin::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:VeriBlock.Coin)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 atomicUnits = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &atomicunits_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:VeriBlock.Coin)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:VeriBlock.Coin)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Coin::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:VeriBlock.Coin)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 atomicUnits = 1;
  if (this->atomicunits() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(1, this->atomicunits(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:VeriBlock.Coin)
}

::PROTOBUF_NAMESPACE_ID::uint8* Coin::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:VeriBlock.Coin)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 atomicUnits = 1;
  if (this->atomicunits() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->atomicunits(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:VeriBlock.Coin)
  return target;
}

size_t Coin::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:VeriBlock.Coin)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 atomicUnits = 1;
  if (this->atomicunits() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->atomicunits());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Coin::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:VeriBlock.Coin)
  GOOGLE_DCHECK_NE(&from, this);
  const Coin* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Coin>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:VeriBlock.Coin)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:VeriBlock.Coin)
    MergeFrom(*source);
  }
}

void Coin::MergeFrom(const Coin& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:VeriBlock.Coin)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.atomicunits() != 0) {
    set_atomicunits(from.atomicunits());
  }
}

void Coin::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:VeriBlock.Coin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Coin::CopyFrom(const Coin& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:VeriBlock.Coin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Coin::IsInitialized() const {
  return true;
}

void Coin::InternalSwap(Coin* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(atomicunits_, other->atomicunits_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Coin::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Output::InitAsDefaultInstance() {
  ::VeriBlock::_Output_default_instance_._instance.get_mutable()->address_ = const_cast< ::VeriBlock::Address*>(
      ::VeriBlock::Address::internal_default_instance());
  ::VeriBlock::_Output_default_instance_._instance.get_mutable()->amount_ = const_cast< ::VeriBlock::Coin*>(
      ::VeriBlock::Coin::internal_default_instance());
}
class Output::_Internal {
 public:
  static const ::VeriBlock::Address& address(const Output* msg);
  static const ::VeriBlock::Coin& amount(const Output* msg);
};

const ::VeriBlock::Address&
Output::_Internal::address(const Output* msg) {
  return *msg->address_;
}
const ::VeriBlock::Coin&
Output::_Internal::amount(const Output* msg) {
  return *msg->amount_;
}
Output::Output()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:VeriBlock.Output)
}
Output::Output(const Output& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_address()) {
    address_ = new ::VeriBlock::Address(*from.address_);
  } else {
    address_ = nullptr;
  }
  if (from.has_amount()) {
    amount_ = new ::VeriBlock::Coin(*from.amount_);
  } else {
    amount_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:VeriBlock.Output)
}

void Output::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Output_integration_2eproto.base);
  ::memset(&address_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&amount_) -
      reinterpret_cast<char*>(&address_)) + sizeof(amount_));
}

Output::~Output() {
  // @@protoc_insertion_point(destructor:VeriBlock.Output)
  SharedDtor();
}

void Output::SharedDtor() {
  if (this != internal_default_instance()) delete address_;
  if (this != internal_default_instance()) delete amount_;
}

void Output::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Output& Output::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Output_integration_2eproto.base);
  return *internal_default_instance();
}


void Output::Clear() {
// @@protoc_insertion_point(message_clear_start:VeriBlock.Output)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && address_ != nullptr) {
    delete address_;
  }
  address_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && amount_ != nullptr) {
    delete amount_;
  }
  amount_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Output::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .VeriBlock.Address address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_address(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .VeriBlock.Coin amount = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_amount(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Output::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:VeriBlock.Output)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .VeriBlock.Address address = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_address()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .VeriBlock.Coin amount = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_amount()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:VeriBlock.Output)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:VeriBlock.Output)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Output::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:VeriBlock.Output)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .VeriBlock.Address address = 1;
  if (this->has_address()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::address(this), output);
  }

  // .VeriBlock.Coin amount = 2;
  if (this->has_amount()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, _Internal::amount(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:VeriBlock.Output)
}

::PROTOBUF_NAMESPACE_ID::uint8* Output::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:VeriBlock.Output)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .VeriBlock.Address address = 1;
  if (this->has_address()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::address(this), target);
  }

  // .VeriBlock.Coin amount = 2;
  if (this->has_amount()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::amount(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:VeriBlock.Output)
  return target;
}

size_t Output::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:VeriBlock.Output)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .VeriBlock.Address address = 1;
  if (this->has_address()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *address_);
  }

  // .VeriBlock.Coin amount = 2;
  if (this->has_amount()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *amount_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Output::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:VeriBlock.Output)
  GOOGLE_DCHECK_NE(&from, this);
  const Output* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Output>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:VeriBlock.Output)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:VeriBlock.Output)
    MergeFrom(*source);
  }
}

void Output::MergeFrom(const Output& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:VeriBlock.Output)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_address()) {
    mutable_address()->::VeriBlock::Address::MergeFrom(from.address());
  }
  if (from.has_amount()) {
    mutable_amount()->::VeriBlock::Coin::MergeFrom(from.amount());
  }
}

void Output::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:VeriBlock.Output)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Output::CopyFrom(const Output& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:VeriBlock.Output)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Output::IsInitialized() const {
  return true;
}

void Output::InternalSwap(Output* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(address_, other->address_);
  swap(amount_, other->amount_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Output::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AltPublication::InitAsDefaultInstance() {
  ::VeriBlock::_AltPublication_default_instance_._instance.get_mutable()->transaction_ = const_cast< ::VeriBlock::VeriBlockTransaction*>(
      ::VeriBlock::VeriBlockTransaction::internal_default_instance());
  ::VeriBlock::_AltPublication_default_instance_._instance.get_mutable()->containingblock_ = const_cast< ::VeriBlock::VeriBlockBlock*>(
      ::VeriBlock::VeriBlockBlock::internal_default_instance());
}
class AltPublication::_Internal {
 public:
  static const ::VeriBlock::VeriBlockTransaction& transaction(const AltPublication* msg);
  static const ::VeriBlock::VeriBlockBlock& containingblock(const AltPublication* msg);
};

const ::VeriBlock::VeriBlockTransaction&
AltPublication::_Internal::transaction(const AltPublication* msg) {
  return *msg->transaction_;
}
const ::VeriBlock::VeriBlockBlock&
AltPublication::_Internal::containingblock(const AltPublication* msg) {
  return *msg->containingblock_;
}
AltPublication::AltPublication()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:VeriBlock.AltPublication)
}
AltPublication::AltPublication(const AltPublication& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      context_(from.context_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  merklepath_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.merklepath().empty()) {
    merklepath_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.merklepath_);
  }
  if (from.has_transaction()) {
    transaction_ = new ::VeriBlock::VeriBlockTransaction(*from.transaction_);
  } else {
    transaction_ = nullptr;
  }
  if (from.has_containingblock()) {
    containingblock_ = new ::VeriBlock::VeriBlockBlock(*from.containingblock_);
  } else {
    containingblock_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:VeriBlock.AltPublication)
}

void AltPublication::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AltPublication_integration_2eproto.base);
  merklepath_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&transaction_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&containingblock_) -
      reinterpret_cast<char*>(&transaction_)) + sizeof(containingblock_));
}

AltPublication::~AltPublication() {
  // @@protoc_insertion_point(destructor:VeriBlock.AltPublication)
  SharedDtor();
}

void AltPublication::SharedDtor() {
  merklepath_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete transaction_;
  if (this != internal_default_instance()) delete containingblock_;
}

void AltPublication::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AltPublication& AltPublication::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AltPublication_integration_2eproto.base);
  return *internal_default_instance();
}


void AltPublication::Clear() {
// @@protoc_insertion_point(message_clear_start:VeriBlock.AltPublication)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  context_.Clear();
  merklepath_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && transaction_ != nullptr) {
    delete transaction_;
  }
  transaction_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && containingblock_ != nullptr) {
    delete containingblock_;
  }
  containingblock_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AltPublication::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .VeriBlock.VeriBlockTransaction transaction = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_transaction(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string merklePath = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_merklepath(), ptr, ctx, "VeriBlock.AltPublication.merklePath");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .VeriBlock.VeriBlockBlock containingBlock = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_containingblock(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .VeriBlock.VeriBlockBlock context = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_context(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 34);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AltPublication::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:VeriBlock.AltPublication)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .VeriBlock.VeriBlockTransaction transaction = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_transaction()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string merklePath = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_merklepath()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->merklepath().data(), static_cast<int>(this->merklepath().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "VeriBlock.AltPublication.merklePath"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .VeriBlock.VeriBlockBlock containingBlock = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_containingblock()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .VeriBlock.VeriBlockBlock context = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_context()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:VeriBlock.AltPublication)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:VeriBlock.AltPublication)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AltPublication::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:VeriBlock.AltPublication)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .VeriBlock.VeriBlockTransaction transaction = 1;
  if (this->has_transaction()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::transaction(this), output);
  }

  // string merklePath = 2;
  if (this->merklepath().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->merklepath().data(), static_cast<int>(this->merklepath().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "VeriBlock.AltPublication.merklePath");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->merklepath(), output);
  }

  // .VeriBlock.VeriBlockBlock containingBlock = 3;
  if (this->has_containingblock()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, _Internal::containingblock(this), output);
  }

  // repeated .VeriBlock.VeriBlockBlock context = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->context_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->context(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:VeriBlock.AltPublication)
}

::PROTOBUF_NAMESPACE_ID::uint8* AltPublication::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:VeriBlock.AltPublication)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .VeriBlock.VeriBlockTransaction transaction = 1;
  if (this->has_transaction()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::transaction(this), target);
  }

  // string merklePath = 2;
  if (this->merklepath().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->merklepath().data(), static_cast<int>(this->merklepath().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "VeriBlock.AltPublication.merklePath");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->merklepath(), target);
  }

  // .VeriBlock.VeriBlockBlock containingBlock = 3;
  if (this->has_containingblock()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, _Internal::containingblock(this), target);
  }

  // repeated .VeriBlock.VeriBlockBlock context = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->context_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->context(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:VeriBlock.AltPublication)
  return target;
}

size_t AltPublication::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:VeriBlock.AltPublication)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .VeriBlock.VeriBlockBlock context = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->context_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->context(static_cast<int>(i)));
    }
  }

  // string merklePath = 2;
  if (this->merklepath().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->merklepath());
  }

  // .VeriBlock.VeriBlockTransaction transaction = 1;
  if (this->has_transaction()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *transaction_);
  }

  // .VeriBlock.VeriBlockBlock containingBlock = 3;
  if (this->has_containingblock()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *containingblock_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AltPublication::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:VeriBlock.AltPublication)
  GOOGLE_DCHECK_NE(&from, this);
  const AltPublication* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AltPublication>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:VeriBlock.AltPublication)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:VeriBlock.AltPublication)
    MergeFrom(*source);
  }
}

void AltPublication::MergeFrom(const AltPublication& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:VeriBlock.AltPublication)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  context_.MergeFrom(from.context_);
  if (from.merklepath().size() > 0) {

    merklepath_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.merklepath_);
  }
  if (from.has_transaction()) {
    mutable_transaction()->::VeriBlock::VeriBlockTransaction::MergeFrom(from.transaction());
  }
  if (from.has_containingblock()) {
    mutable_containingblock()->::VeriBlock::VeriBlockBlock::MergeFrom(from.containingblock());
  }
}

void AltPublication::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:VeriBlock.AltPublication)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AltPublication::CopyFrom(const AltPublication& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:VeriBlock.AltPublication)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AltPublication::IsInitialized() const {
  return true;
}

void AltPublication::InternalSwap(AltPublication* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&context_)->InternalSwap(CastToBase(&other->context_));
  merklepath_.Swap(&other->merklepath_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(transaction_, other->transaction_);
  swap(containingblock_, other->containingblock_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AltPublication::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void VeriBlockPoPTransaction::InitAsDefaultInstance() {
  ::VeriBlock::_VeriBlockPoPTransaction_default_instance_._instance.get_mutable()->address_ = const_cast< ::VeriBlock::Address*>(
      ::VeriBlock::Address::internal_default_instance());
  ::VeriBlock::_VeriBlockPoPTransaction_default_instance_._instance.get_mutable()->publishedblock_ = const_cast< ::VeriBlock::VeriBlockBlock*>(
      ::VeriBlock::VeriBlockBlock::internal_default_instance());
  ::VeriBlock::_VeriBlockPoPTransaction_default_instance_._instance.get_mutable()->bitcointransaction_ = const_cast< ::VeriBlock::BitcoinTransaction*>(
      ::VeriBlock::BitcoinTransaction::internal_default_instance());
  ::VeriBlock::_VeriBlockPoPTransaction_default_instance_._instance.get_mutable()->blockofproof_ = const_cast< ::VeriBlock::BitcoinBlock*>(
      ::VeriBlock::BitcoinBlock::internal_default_instance());
  ::VeriBlock::_VeriBlockPoPTransaction_default_instance_._instance.get_mutable()->networkbyte_ = const_cast< ::VeriBlock::NetworkByte*>(
      ::VeriBlock::NetworkByte::internal_default_instance());
}
class VeriBlockPoPTransaction::_Internal {
 public:
  static const ::VeriBlock::Address& address(const VeriBlockPoPTransaction* msg);
  static const ::VeriBlock::VeriBlockBlock& publishedblock(const VeriBlockPoPTransaction* msg);
  static const ::VeriBlock::BitcoinTransaction& bitcointransaction(const VeriBlockPoPTransaction* msg);
  static const ::VeriBlock::BitcoinBlock& blockofproof(const VeriBlockPoPTransaction* msg);
  static const ::VeriBlock::NetworkByte& networkbyte(const VeriBlockPoPTransaction* msg);
};

const ::VeriBlock::Address&
VeriBlockPoPTransaction::_Internal::address(const VeriBlockPoPTransaction* msg) {
  return *msg->address_;
}
const ::VeriBlock::VeriBlockBlock&
VeriBlockPoPTransaction::_Internal::publishedblock(const VeriBlockPoPTransaction* msg) {
  return *msg->publishedblock_;
}
const ::VeriBlock::BitcoinTransaction&
VeriBlockPoPTransaction::_Internal::bitcointransaction(const VeriBlockPoPTransaction* msg) {
  return *msg->bitcointransaction_;
}
const ::VeriBlock::BitcoinBlock&
VeriBlockPoPTransaction::_Internal::blockofproof(const VeriBlockPoPTransaction* msg) {
  return *msg->blockofproof_;
}
const ::VeriBlock::NetworkByte&
VeriBlockPoPTransaction::_Internal::networkbyte(const VeriBlockPoPTransaction* msg) {
  return *msg->networkbyte_;
}
VeriBlockPoPTransaction::VeriBlockPoPTransaction()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:VeriBlock.VeriBlockPoPTransaction)
}
VeriBlockPoPTransaction::VeriBlockPoPTransaction(const VeriBlockPoPTransaction& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      blockofproofcontext_(from.blockofproofcontext_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.id().empty()) {
    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  merklepath_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.merklepath().empty()) {
    merklepath_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.merklepath_);
  }
  signature_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.signature().empty()) {
    signature_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.signature_);
  }
  publickey_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.publickey().empty()) {
    publickey_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.publickey_);
  }
  if (from.has_address()) {
    address_ = new ::VeriBlock::Address(*from.address_);
  } else {
    address_ = nullptr;
  }
  if (from.has_publishedblock()) {
    publishedblock_ = new ::VeriBlock::VeriBlockBlock(*from.publishedblock_);
  } else {
    publishedblock_ = nullptr;
  }
  if (from.has_bitcointransaction()) {
    bitcointransaction_ = new ::VeriBlock::BitcoinTransaction(*from.bitcointransaction_);
  } else {
    bitcointransaction_ = nullptr;
  }
  if (from.has_blockofproof()) {
    blockofproof_ = new ::VeriBlock::BitcoinBlock(*from.blockofproof_);
  } else {
    blockofproof_ = nullptr;
  }
  if (from.has_networkbyte()) {
    networkbyte_ = new ::VeriBlock::NetworkByte(*from.networkbyte_);
  } else {
    networkbyte_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:VeriBlock.VeriBlockPoPTransaction)
}

void VeriBlockPoPTransaction::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_VeriBlockPoPTransaction_integration_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  merklepath_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  signature_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  publickey_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&address_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&networkbyte_) -
      reinterpret_cast<char*>(&address_)) + sizeof(networkbyte_));
}

VeriBlockPoPTransaction::~VeriBlockPoPTransaction() {
  // @@protoc_insertion_point(destructor:VeriBlock.VeriBlockPoPTransaction)
  SharedDtor();
}

void VeriBlockPoPTransaction::SharedDtor() {
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  merklepath_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  signature_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  publickey_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete address_;
  if (this != internal_default_instance()) delete publishedblock_;
  if (this != internal_default_instance()) delete bitcointransaction_;
  if (this != internal_default_instance()) delete blockofproof_;
  if (this != internal_default_instance()) delete networkbyte_;
}

void VeriBlockPoPTransaction::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VeriBlockPoPTransaction& VeriBlockPoPTransaction::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_VeriBlockPoPTransaction_integration_2eproto.base);
  return *internal_default_instance();
}


void VeriBlockPoPTransaction::Clear() {
// @@protoc_insertion_point(message_clear_start:VeriBlock.VeriBlockPoPTransaction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  blockofproofcontext_.Clear();
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  merklepath_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  signature_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  publickey_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && address_ != nullptr) {
    delete address_;
  }
  address_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && publishedblock_ != nullptr) {
    delete publishedblock_;
  }
  publishedblock_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && bitcointransaction_ != nullptr) {
    delete bitcointransaction_;
  }
  bitcointransaction_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && blockofproof_ != nullptr) {
    delete blockofproof_;
  }
  blockofproof_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && networkbyte_ != nullptr) {
    delete networkbyte_;
  }
  networkbyte_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* VeriBlockPoPTransaction::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes id = 1 [(.VeriBlock.hex_encoded) = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_id(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .VeriBlock.Address address = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_address(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .VeriBlock.VeriBlockBlock publishedBlock = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_publishedblock(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .VeriBlock.BitcoinTransaction bitcoinTransaction = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_bitcointransaction(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string merklePath = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_merklepath(), ptr, ctx, "VeriBlock.VeriBlockPoPTransaction.merklePath");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .VeriBlock.BitcoinBlock blockOfProof = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(mutable_blockofproof(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .VeriBlock.BitcoinBlock blockOfProofContext = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_blockofproofcontext(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 58);
        } else goto handle_unusual;
        continue;
      // bytes signature = 8 [(.VeriBlock.hex_encoded) = true];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_signature(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes publicKey = 9 [(.VeriBlock.hex_encoded) = true];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_publickey(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .VeriBlock.NetworkByte networkByte = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(mutable_networkbyte(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool VeriBlockPoPTransaction::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:VeriBlock.VeriBlockPoPTransaction)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes id = 1 [(.VeriBlock.hex_encoded) = true];
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .VeriBlock.Address address = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_address()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .VeriBlock.VeriBlockBlock publishedBlock = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_publishedblock()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .VeriBlock.BitcoinTransaction bitcoinTransaction = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_bitcointransaction()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string merklePath = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_merklepath()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->merklepath().data(), static_cast<int>(this->merklepath().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "VeriBlock.VeriBlockPoPTransaction.merklePath"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .VeriBlock.BitcoinBlock blockOfProof = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_blockofproof()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .VeriBlock.BitcoinBlock blockOfProofContext = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_blockofproofcontext()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes signature = 8 [(.VeriBlock.hex_encoded) = true];
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (66 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_signature()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes publicKey = 9 [(.VeriBlock.hex_encoded) = true];
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (74 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_publickey()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .VeriBlock.NetworkByte networkByte = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (82 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_networkbyte()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:VeriBlock.VeriBlockPoPTransaction)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:VeriBlock.VeriBlockPoPTransaction)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void VeriBlockPoPTransaction::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:VeriBlock.VeriBlockPoPTransaction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes id = 1 [(.VeriBlock.hex_encoded) = true];
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->id(), output);
  }

  // .VeriBlock.Address address = 2;
  if (this->has_address()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, _Internal::address(this), output);
  }

  // .VeriBlock.VeriBlockBlock publishedBlock = 3;
  if (this->has_publishedblock()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, _Internal::publishedblock(this), output);
  }

  // .VeriBlock.BitcoinTransaction bitcoinTransaction = 4;
  if (this->has_bitcointransaction()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, _Internal::bitcointransaction(this), output);
  }

  // string merklePath = 5;
  if (this->merklepath().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->merklepath().data(), static_cast<int>(this->merklepath().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "VeriBlock.VeriBlockPoPTransaction.merklePath");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->merklepath(), output);
  }

  // .VeriBlock.BitcoinBlock blockOfProof = 6;
  if (this->has_blockofproof()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, _Internal::blockofproof(this), output);
  }

  // repeated .VeriBlock.BitcoinBlock blockOfProofContext = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->blockofproofcontext_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      7,
      this->blockofproofcontext(static_cast<int>(i)),
      output);
  }

  // bytes signature = 8 [(.VeriBlock.hex_encoded) = true];
  if (this->signature().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      8, this->signature(), output);
  }

  // bytes publicKey = 9 [(.VeriBlock.hex_encoded) = true];
  if (this->publickey().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      9, this->publickey(), output);
  }

  // .VeriBlock.NetworkByte networkByte = 10;
  if (this->has_networkbyte()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, _Internal::networkbyte(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:VeriBlock.VeriBlockPoPTransaction)
}

::PROTOBUF_NAMESPACE_ID::uint8* VeriBlockPoPTransaction::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:VeriBlock.VeriBlockPoPTransaction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes id = 1 [(.VeriBlock.hex_encoded) = true];
  if (this->id().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        1, this->id(), target);
  }

  // .VeriBlock.Address address = 2;
  if (this->has_address()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::address(this), target);
  }

  // .VeriBlock.VeriBlockBlock publishedBlock = 3;
  if (this->has_publishedblock()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, _Internal::publishedblock(this), target);
  }

  // .VeriBlock.BitcoinTransaction bitcoinTransaction = 4;
  if (this->has_bitcointransaction()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, _Internal::bitcointransaction(this), target);
  }

  // string merklePath = 5;
  if (this->merklepath().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->merklepath().data(), static_cast<int>(this->merklepath().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "VeriBlock.VeriBlockPoPTransaction.merklePath");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        5, this->merklepath(), target);
  }

  // .VeriBlock.BitcoinBlock blockOfProof = 6;
  if (this->has_blockofproof()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, _Internal::blockofproof(this), target);
  }

  // repeated .VeriBlock.BitcoinBlock blockOfProofContext = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->blockofproofcontext_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, this->blockofproofcontext(static_cast<int>(i)), target);
  }

  // bytes signature = 8 [(.VeriBlock.hex_encoded) = true];
  if (this->signature().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        8, this->signature(), target);
  }

  // bytes publicKey = 9 [(.VeriBlock.hex_encoded) = true];
  if (this->publickey().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        9, this->publickey(), target);
  }

  // .VeriBlock.NetworkByte networkByte = 10;
  if (this->has_networkbyte()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, _Internal::networkbyte(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:VeriBlock.VeriBlockPoPTransaction)
  return target;
}

size_t VeriBlockPoPTransaction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:VeriBlock.VeriBlockPoPTransaction)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .VeriBlock.BitcoinBlock blockOfProofContext = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->blockofproofcontext_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->blockofproofcontext(static_cast<int>(i)));
    }
  }

  // bytes id = 1 [(.VeriBlock.hex_encoded) = true];
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->id());
  }

  // string merklePath = 5;
  if (this->merklepath().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->merklepath());
  }

  // bytes signature = 8 [(.VeriBlock.hex_encoded) = true];
  if (this->signature().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->signature());
  }

  // bytes publicKey = 9 [(.VeriBlock.hex_encoded) = true];
  if (this->publickey().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->publickey());
  }

  // .VeriBlock.Address address = 2;
  if (this->has_address()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *address_);
  }

  // .VeriBlock.VeriBlockBlock publishedBlock = 3;
  if (this->has_publishedblock()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *publishedblock_);
  }

  // .VeriBlock.BitcoinTransaction bitcoinTransaction = 4;
  if (this->has_bitcointransaction()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *bitcointransaction_);
  }

  // .VeriBlock.BitcoinBlock blockOfProof = 6;
  if (this->has_blockofproof()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *blockofproof_);
  }

  // .VeriBlock.NetworkByte networkByte = 10;
  if (this->has_networkbyte()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *networkbyte_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VeriBlockPoPTransaction::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:VeriBlock.VeriBlockPoPTransaction)
  GOOGLE_DCHECK_NE(&from, this);
  const VeriBlockPoPTransaction* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VeriBlockPoPTransaction>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:VeriBlock.VeriBlockPoPTransaction)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:VeriBlock.VeriBlockPoPTransaction)
    MergeFrom(*source);
  }
}

void VeriBlockPoPTransaction::MergeFrom(const VeriBlockPoPTransaction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:VeriBlock.VeriBlockPoPTransaction)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  blockofproofcontext_.MergeFrom(from.blockofproofcontext_);
  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.merklepath().size() > 0) {

    merklepath_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.merklepath_);
  }
  if (from.signature().size() > 0) {

    signature_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.signature_);
  }
  if (from.publickey().size() > 0) {

    publickey_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.publickey_);
  }
  if (from.has_address()) {
    mutable_address()->::VeriBlock::Address::MergeFrom(from.address());
  }
  if (from.has_publishedblock()) {
    mutable_publishedblock()->::VeriBlock::VeriBlockBlock::MergeFrom(from.publishedblock());
  }
  if (from.has_bitcointransaction()) {
    mutable_bitcointransaction()->::VeriBlock::BitcoinTransaction::MergeFrom(from.bitcointransaction());
  }
  if (from.has_blockofproof()) {
    mutable_blockofproof()->::VeriBlock::BitcoinBlock::MergeFrom(from.blockofproof());
  }
  if (from.has_networkbyte()) {
    mutable_networkbyte()->::VeriBlock::NetworkByte::MergeFrom(from.networkbyte());
  }
}

void VeriBlockPoPTransaction::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:VeriBlock.VeriBlockPoPTransaction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VeriBlockPoPTransaction::CopyFrom(const VeriBlockPoPTransaction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:VeriBlock.VeriBlockPoPTransaction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VeriBlockPoPTransaction::IsInitialized() const {
  return true;
}

void VeriBlockPoPTransaction::InternalSwap(VeriBlockPoPTransaction* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&blockofproofcontext_)->InternalSwap(CastToBase(&other->blockofproofcontext_));
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  merklepath_.Swap(&other->merklepath_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  signature_.Swap(&other->signature_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  publickey_.Swap(&other->publickey_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(address_, other->address_);
  swap(publishedblock_, other->publishedblock_);
  swap(bitcointransaction_, other->bitcointransaction_);
  swap(blockofproof_, other->blockofproof_);
  swap(networkbyte_, other->networkbyte_);
}

::PROTOBUF_NAMESPACE_ID::Metadata VeriBlockPoPTransaction::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void VeriBlockPublication::InitAsDefaultInstance() {
  ::VeriBlock::_VeriBlockPublication_default_instance_._instance.get_mutable()->transaction_ = const_cast< ::VeriBlock::VeriBlockPoPTransaction*>(
      ::VeriBlock::VeriBlockPoPTransaction::internal_default_instance());
  ::VeriBlock::_VeriBlockPublication_default_instance_._instance.get_mutable()->containingblock_ = const_cast< ::VeriBlock::VeriBlockBlock*>(
      ::VeriBlock::VeriBlockBlock::internal_default_instance());
}
class VeriBlockPublication::_Internal {
 public:
  static const ::VeriBlock::VeriBlockPoPTransaction& transaction(const VeriBlockPublication* msg);
  static const ::VeriBlock::VeriBlockBlock& containingblock(const VeriBlockPublication* msg);
};

const ::VeriBlock::VeriBlockPoPTransaction&
VeriBlockPublication::_Internal::transaction(const VeriBlockPublication* msg) {
  return *msg->transaction_;
}
const ::VeriBlock::VeriBlockBlock&
VeriBlockPublication::_Internal::containingblock(const VeriBlockPublication* msg) {
  return *msg->containingblock_;
}
VeriBlockPublication::VeriBlockPublication()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:VeriBlock.VeriBlockPublication)
}
VeriBlockPublication::VeriBlockPublication(const VeriBlockPublication& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      context_(from.context_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  merklepath_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.merklepath().empty()) {
    merklepath_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.merklepath_);
  }
  if (from.has_transaction()) {
    transaction_ = new ::VeriBlock::VeriBlockPoPTransaction(*from.transaction_);
  } else {
    transaction_ = nullptr;
  }
  if (from.has_containingblock()) {
    containingblock_ = new ::VeriBlock::VeriBlockBlock(*from.containingblock_);
  } else {
    containingblock_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:VeriBlock.VeriBlockPublication)
}

void VeriBlockPublication::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_VeriBlockPublication_integration_2eproto.base);
  merklepath_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&transaction_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&containingblock_) -
      reinterpret_cast<char*>(&transaction_)) + sizeof(containingblock_));
}

VeriBlockPublication::~VeriBlockPublication() {
  // @@protoc_insertion_point(destructor:VeriBlock.VeriBlockPublication)
  SharedDtor();
}

void VeriBlockPublication::SharedDtor() {
  merklepath_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete transaction_;
  if (this != internal_default_instance()) delete containingblock_;
}

void VeriBlockPublication::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VeriBlockPublication& VeriBlockPublication::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_VeriBlockPublication_integration_2eproto.base);
  return *internal_default_instance();
}


void VeriBlockPublication::Clear() {
// @@protoc_insertion_point(message_clear_start:VeriBlock.VeriBlockPublication)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  context_.Clear();
  merklepath_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && transaction_ != nullptr) {
    delete transaction_;
  }
  transaction_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && containingblock_ != nullptr) {
    delete containingblock_;
  }
  containingblock_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* VeriBlockPublication::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .VeriBlock.VeriBlockPoPTransaction transaction = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_transaction(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string merklePath = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_merklepath(), ptr, ctx, "VeriBlock.VeriBlockPublication.merklePath");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .VeriBlock.VeriBlockBlock containingBlock = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_containingblock(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .VeriBlock.VeriBlockBlock context = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_context(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 34);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool VeriBlockPublication::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:VeriBlock.VeriBlockPublication)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .VeriBlock.VeriBlockPoPTransaction transaction = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_transaction()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string merklePath = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_merklepath()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->merklepath().data(), static_cast<int>(this->merklepath().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "VeriBlock.VeriBlockPublication.merklePath"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .VeriBlock.VeriBlockBlock containingBlock = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_containingblock()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .VeriBlock.VeriBlockBlock context = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_context()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:VeriBlock.VeriBlockPublication)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:VeriBlock.VeriBlockPublication)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void VeriBlockPublication::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:VeriBlock.VeriBlockPublication)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .VeriBlock.VeriBlockPoPTransaction transaction = 1;
  if (this->has_transaction()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::transaction(this), output);
  }

  // string merklePath = 2;
  if (this->merklepath().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->merklepath().data(), static_cast<int>(this->merklepath().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "VeriBlock.VeriBlockPublication.merklePath");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->merklepath(), output);
  }

  // .VeriBlock.VeriBlockBlock containingBlock = 3;
  if (this->has_containingblock()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, _Internal::containingblock(this), output);
  }

  // repeated .VeriBlock.VeriBlockBlock context = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->context_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->context(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:VeriBlock.VeriBlockPublication)
}

::PROTOBUF_NAMESPACE_ID::uint8* VeriBlockPublication::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:VeriBlock.VeriBlockPublication)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .VeriBlock.VeriBlockPoPTransaction transaction = 1;
  if (this->has_transaction()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::transaction(this), target);
  }

  // string merklePath = 2;
  if (this->merklepath().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->merklepath().data(), static_cast<int>(this->merklepath().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "VeriBlock.VeriBlockPublication.merklePath");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->merklepath(), target);
  }

  // .VeriBlock.VeriBlockBlock containingBlock = 3;
  if (this->has_containingblock()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, _Internal::containingblock(this), target);
  }

  // repeated .VeriBlock.VeriBlockBlock context = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->context_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->context(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:VeriBlock.VeriBlockPublication)
  return target;
}

size_t VeriBlockPublication::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:VeriBlock.VeriBlockPublication)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .VeriBlock.VeriBlockBlock context = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->context_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->context(static_cast<int>(i)));
    }
  }

  // string merklePath = 2;
  if (this->merklepath().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->merklepath());
  }

  // .VeriBlock.VeriBlockPoPTransaction transaction = 1;
  if (this->has_transaction()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *transaction_);
  }

  // .VeriBlock.VeriBlockBlock containingBlock = 3;
  if (this->has_containingblock()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *containingblock_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VeriBlockPublication::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:VeriBlock.VeriBlockPublication)
  GOOGLE_DCHECK_NE(&from, this);
  const VeriBlockPublication* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VeriBlockPublication>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:VeriBlock.VeriBlockPublication)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:VeriBlock.VeriBlockPublication)
    MergeFrom(*source);
  }
}

void VeriBlockPublication::MergeFrom(const VeriBlockPublication& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:VeriBlock.VeriBlockPublication)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  context_.MergeFrom(from.context_);
  if (from.merklepath().size() > 0) {

    merklepath_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.merklepath_);
  }
  if (from.has_transaction()) {
    mutable_transaction()->::VeriBlock::VeriBlockPoPTransaction::MergeFrom(from.transaction());
  }
  if (from.has_containingblock()) {
    mutable_containingblock()->::VeriBlock::VeriBlockBlock::MergeFrom(from.containingblock());
  }
}

void VeriBlockPublication::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:VeriBlock.VeriBlockPublication)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VeriBlockPublication::CopyFrom(const VeriBlockPublication& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:VeriBlock.VeriBlockPublication)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VeriBlockPublication::IsInitialized() const {
  return true;
}

void VeriBlockPublication::InternalSwap(VeriBlockPublication* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&context_)->InternalSwap(CastToBase(&other->context_));
  merklepath_.Swap(&other->merklepath_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(transaction_, other->transaction_);
  swap(containingblock_, other->containingblock_);
}

::PROTOBUF_NAMESPACE_ID::Metadata VeriBlockPublication::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void EmptyRequest::InitAsDefaultInstance() {
}
class EmptyRequest::_Internal {
 public:
};

EmptyRequest::EmptyRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:VeriBlock.EmptyRequest)
}
EmptyRequest::EmptyRequest(const EmptyRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:VeriBlock.EmptyRequest)
}

void EmptyRequest::SharedCtor() {
}

EmptyRequest::~EmptyRequest() {
  // @@protoc_insertion_point(destructor:VeriBlock.EmptyRequest)
  SharedDtor();
}

void EmptyRequest::SharedDtor() {
}

void EmptyRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EmptyRequest& EmptyRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EmptyRequest_integration_2eproto.base);
  return *internal_default_instance();
}


void EmptyRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:VeriBlock.EmptyRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* EmptyRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool EmptyRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:VeriBlock.EmptyRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:VeriBlock.EmptyRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:VeriBlock.EmptyRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void EmptyRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:VeriBlock.EmptyRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:VeriBlock.EmptyRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* EmptyRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:VeriBlock.EmptyRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:VeriBlock.EmptyRequest)
  return target;
}

size_t EmptyRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:VeriBlock.EmptyRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EmptyRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:VeriBlock.EmptyRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const EmptyRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EmptyRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:VeriBlock.EmptyRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:VeriBlock.EmptyRequest)
    MergeFrom(*source);
  }
}

void EmptyRequest::MergeFrom(const EmptyRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:VeriBlock.EmptyRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void EmptyRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:VeriBlock.EmptyRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EmptyRequest::CopyFrom(const EmptyRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:VeriBlock.EmptyRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EmptyRequest::IsInitialized() const {
  return true;
}

void EmptyRequest::InternalSwap(EmptyRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EmptyRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GeneralReply::InitAsDefaultInstance() {
}
class GeneralReply::_Internal {
 public:
};

GeneralReply::GeneralReply()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:VeriBlock.GeneralReply)
}
GeneralReply::GeneralReply(const GeneralReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  resultmessage_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.resultmessage().empty()) {
    resultmessage_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.resultmessage_);
  }
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:VeriBlock.GeneralReply)
}

void GeneralReply::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GeneralReply_integration_2eproto.base);
  resultmessage_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  result_ = false;
}

GeneralReply::~GeneralReply() {
  // @@protoc_insertion_point(destructor:VeriBlock.GeneralReply)
  SharedDtor();
}

void GeneralReply::SharedDtor() {
  resultmessage_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GeneralReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GeneralReply& GeneralReply::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GeneralReply_integration_2eproto.base);
  return *internal_default_instance();
}


void GeneralReply::Clear() {
// @@protoc_insertion_point(message_clear_start:VeriBlock.GeneralReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  resultmessage_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  result_ = false;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GeneralReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string resultMessage = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_resultmessage(), ptr, ctx, "VeriBlock.GeneralReply.resultMessage");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GeneralReply::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:VeriBlock.GeneralReply)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool result = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string resultMessage = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_resultmessage()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->resultmessage().data(), static_cast<int>(this->resultmessage().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "VeriBlock.GeneralReply.resultMessage"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:VeriBlock.GeneralReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:VeriBlock.GeneralReply)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GeneralReply::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:VeriBlock.GeneralReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool result = 1;
  if (this->result() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(1, this->result(), output);
  }

  // string resultMessage = 2;
  if (this->resultmessage().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->resultmessage().data(), static_cast<int>(this->resultmessage().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "VeriBlock.GeneralReply.resultMessage");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->resultmessage(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:VeriBlock.GeneralReply)
}

::PROTOBUF_NAMESPACE_ID::uint8* GeneralReply::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:VeriBlock.GeneralReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool result = 1;
  if (this->result() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->result(), target);
  }

  // string resultMessage = 2;
  if (this->resultmessage().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->resultmessage().data(), static_cast<int>(this->resultmessage().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "VeriBlock.GeneralReply.resultMessage");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->resultmessage(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:VeriBlock.GeneralReply)
  return target;
}

size_t GeneralReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:VeriBlock.GeneralReply)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string resultMessage = 2;
  if (this->resultmessage().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->resultmessage());
  }

  // bool result = 1;
  if (this->result() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GeneralReply::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:VeriBlock.GeneralReply)
  GOOGLE_DCHECK_NE(&from, this);
  const GeneralReply* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GeneralReply>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:VeriBlock.GeneralReply)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:VeriBlock.GeneralReply)
    MergeFrom(*source);
  }
}

void GeneralReply::MergeFrom(const GeneralReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:VeriBlock.GeneralReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.resultmessage().size() > 0) {

    resultmessage_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.resultmessage_);
  }
  if (from.result() != 0) {
    set_result(from.result());
  }
}

void GeneralReply::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:VeriBlock.GeneralReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GeneralReply::CopyFrom(const GeneralReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:VeriBlock.GeneralReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GeneralReply::IsInitialized() const {
  return true;
}

void GeneralReply::InternalSwap(GeneralReply* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  resultmessage_.Swap(&other->resultmessage_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GeneralReply::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BlockIndex::InitAsDefaultInstance() {
}
class BlockIndex::_Internal {
 public:
};

BlockIndex::BlockIndex()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:VeriBlock.BlockIndex)
}
BlockIndex::BlockIndex(const BlockIndex& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.hash().empty()) {
    hash_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.hash_);
  }
  height_ = from.height_;
  // @@protoc_insertion_point(copy_constructor:VeriBlock.BlockIndex)
}

void BlockIndex::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BlockIndex_integration_2eproto.base);
  hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  height_ = PROTOBUF_LONGLONG(0);
}

BlockIndex::~BlockIndex() {
  // @@protoc_insertion_point(destructor:VeriBlock.BlockIndex)
  SharedDtor();
}

void BlockIndex::SharedDtor() {
  hash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void BlockIndex::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BlockIndex& BlockIndex::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BlockIndex_integration_2eproto.base);
  return *internal_default_instance();
}


void BlockIndex::Clear() {
// @@protoc_insertion_point(message_clear_start:VeriBlock.BlockIndex)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  hash_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  height_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* BlockIndex::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 height = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string hash = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_hash(), ptr, ctx, "VeriBlock.BlockIndex.hash");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool BlockIndex::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:VeriBlock.BlockIndex)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 height = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string hash = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_hash()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->hash().data(), static_cast<int>(this->hash().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "VeriBlock.BlockIndex.hash"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:VeriBlock.BlockIndex)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:VeriBlock.BlockIndex)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void BlockIndex::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:VeriBlock.BlockIndex)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 height = 1;
  if (this->height() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(1, this->height(), output);
  }

  // string hash = 2;
  if (this->hash().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->hash().data(), static_cast<int>(this->hash().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "VeriBlock.BlockIndex.hash");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->hash(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:VeriBlock.BlockIndex)
}

::PROTOBUF_NAMESPACE_ID::uint8* BlockIndex::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:VeriBlock.BlockIndex)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 height = 1;
  if (this->height() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->height(), target);
  }

  // string hash = 2;
  if (this->hash().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->hash().data(), static_cast<int>(this->hash().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "VeriBlock.BlockIndex.hash");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->hash(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:VeriBlock.BlockIndex)
  return target;
}

size_t BlockIndex::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:VeriBlock.BlockIndex)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string hash = 2;
  if (this->hash().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->hash());
  }

  // int64 height = 1;
  if (this->height() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->height());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BlockIndex::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:VeriBlock.BlockIndex)
  GOOGLE_DCHECK_NE(&from, this);
  const BlockIndex* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BlockIndex>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:VeriBlock.BlockIndex)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:VeriBlock.BlockIndex)
    MergeFrom(*source);
  }
}

void BlockIndex::MergeFrom(const BlockIndex& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:VeriBlock.BlockIndex)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.hash().size() > 0) {

    hash_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.hash_);
  }
  if (from.height() != 0) {
    set_height(from.height());
  }
}

void BlockIndex::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:VeriBlock.BlockIndex)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlockIndex::CopyFrom(const BlockIndex& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:VeriBlock.BlockIndex)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlockIndex::IsInitialized() const {
  return true;
}

void BlockIndex::InternalSwap(BlockIndex* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  hash_.Swap(&other->hash_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(height_, other->height_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BlockIndex::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AddPayloadsRequest::InitAsDefaultInstance() {
  ::VeriBlock::_AddPayloadsRequest_default_instance_._instance.get_mutable()->blockindex_ = const_cast< ::VeriBlock::BlockIndex*>(
      ::VeriBlock::BlockIndex::internal_default_instance());
}
class AddPayloadsRequest::_Internal {
 public:
  static const ::VeriBlock::BlockIndex& blockindex(const AddPayloadsRequest* msg);
};

const ::VeriBlock::BlockIndex&
AddPayloadsRequest::_Internal::blockindex(const AddPayloadsRequest* msg) {
  return *msg->blockindex_;
}
AddPayloadsRequest::AddPayloadsRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:VeriBlock.AddPayloadsRequest)
}
AddPayloadsRequest::AddPayloadsRequest(const AddPayloadsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      veriblockpublications_(from.veriblockpublications_),
      altpublications_(from.altpublications_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_blockindex()) {
    blockindex_ = new ::VeriBlock::BlockIndex(*from.blockindex_);
  } else {
    blockindex_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:VeriBlock.AddPayloadsRequest)
}

void AddPayloadsRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AddPayloadsRequest_integration_2eproto.base);
  blockindex_ = nullptr;
}

AddPayloadsRequest::~AddPayloadsRequest() {
  // @@protoc_insertion_point(destructor:VeriBlock.AddPayloadsRequest)
  SharedDtor();
}

void AddPayloadsRequest::SharedDtor() {
  if (this != internal_default_instance()) delete blockindex_;
}

void AddPayloadsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AddPayloadsRequest& AddPayloadsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AddPayloadsRequest_integration_2eproto.base);
  return *internal_default_instance();
}


void AddPayloadsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:VeriBlock.AddPayloadsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  veriblockpublications_.Clear();
  altpublications_.Clear();
  if (GetArenaNoVirtual() == nullptr && blockindex_ != nullptr) {
    delete blockindex_;
  }
  blockindex_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AddPayloadsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .VeriBlock.BlockIndex blockIndex = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_blockindex(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .VeriBlock.VeriBlockPublication veriblockPublications = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_veriblockpublications(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      // repeated .VeriBlock.AltPublication altPublications = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_altpublications(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 26);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AddPayloadsRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:VeriBlock.AddPayloadsRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .VeriBlock.BlockIndex blockIndex = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_blockindex()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .VeriBlock.VeriBlockPublication veriblockPublications = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_veriblockpublications()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .VeriBlock.AltPublication altPublications = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_altpublications()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:VeriBlock.AddPayloadsRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:VeriBlock.AddPayloadsRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AddPayloadsRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:VeriBlock.AddPayloadsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .VeriBlock.BlockIndex blockIndex = 1;
  if (this->has_blockindex()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::blockindex(this), output);
  }

  // repeated .VeriBlock.VeriBlockPublication veriblockPublications = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->veriblockpublications_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->veriblockpublications(static_cast<int>(i)),
      output);
  }

  // repeated .VeriBlock.AltPublication altPublications = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->altpublications_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->altpublications(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:VeriBlock.AddPayloadsRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* AddPayloadsRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:VeriBlock.AddPayloadsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .VeriBlock.BlockIndex blockIndex = 1;
  if (this->has_blockindex()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::blockindex(this), target);
  }

  // repeated .VeriBlock.VeriBlockPublication veriblockPublications = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->veriblockpublications_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->veriblockpublications(static_cast<int>(i)), target);
  }

  // repeated .VeriBlock.AltPublication altPublications = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->altpublications_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->altpublications(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:VeriBlock.AddPayloadsRequest)
  return target;
}

size_t AddPayloadsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:VeriBlock.AddPayloadsRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .VeriBlock.VeriBlockPublication veriblockPublications = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->veriblockpublications_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->veriblockpublications(static_cast<int>(i)));
    }
  }

  // repeated .VeriBlock.AltPublication altPublications = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->altpublications_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->altpublications(static_cast<int>(i)));
    }
  }

  // .VeriBlock.BlockIndex blockIndex = 1;
  if (this->has_blockindex()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *blockindex_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AddPayloadsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:VeriBlock.AddPayloadsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const AddPayloadsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AddPayloadsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:VeriBlock.AddPayloadsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:VeriBlock.AddPayloadsRequest)
    MergeFrom(*source);
  }
}

void AddPayloadsRequest::MergeFrom(const AddPayloadsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:VeriBlock.AddPayloadsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  veriblockpublications_.MergeFrom(from.veriblockpublications_);
  altpublications_.MergeFrom(from.altpublications_);
  if (from.has_blockindex()) {
    mutable_blockindex()->::VeriBlock::BlockIndex::MergeFrom(from.blockindex());
  }
}

void AddPayloadsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:VeriBlock.AddPayloadsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddPayloadsRequest::CopyFrom(const AddPayloadsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:VeriBlock.AddPayloadsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddPayloadsRequest::IsInitialized() const {
  return true;
}

void AddPayloadsRequest::InternalSwap(AddPayloadsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&veriblockpublications_)->InternalSwap(CastToBase(&other->veriblockpublications_));
  CastToBase(&altpublications_)->InternalSwap(CastToBase(&other->altpublications_));
  swap(blockindex_, other->blockindex_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AddPayloadsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AddTemporaryPayloadsRequest::InitAsDefaultInstance() {
}
class AddTemporaryPayloadsRequest::_Internal {
 public:
};

AddTemporaryPayloadsRequest::AddTemporaryPayloadsRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:VeriBlock.AddTemporaryPayloadsRequest)
}
AddTemporaryPayloadsRequest::AddTemporaryPayloadsRequest(const AddTemporaryPayloadsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      veriblockpublications_(from.veriblockpublications_),
      altpublications_(from.altpublications_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:VeriBlock.AddTemporaryPayloadsRequest)
}

void AddTemporaryPayloadsRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AddTemporaryPayloadsRequest_integration_2eproto.base);
}

AddTemporaryPayloadsRequest::~AddTemporaryPayloadsRequest() {
  // @@protoc_insertion_point(destructor:VeriBlock.AddTemporaryPayloadsRequest)
  SharedDtor();
}

void AddTemporaryPayloadsRequest::SharedDtor() {
}

void AddTemporaryPayloadsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AddTemporaryPayloadsRequest& AddTemporaryPayloadsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AddTemporaryPayloadsRequest_integration_2eproto.base);
  return *internal_default_instance();
}


void AddTemporaryPayloadsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:VeriBlock.AddTemporaryPayloadsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  veriblockpublications_.Clear();
  altpublications_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AddTemporaryPayloadsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .VeriBlock.VeriBlockPublication veriblockPublications = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_veriblockpublications(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      // repeated .VeriBlock.AltPublication altPublications = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_altpublications(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AddTemporaryPayloadsRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:VeriBlock.AddTemporaryPayloadsRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .VeriBlock.VeriBlockPublication veriblockPublications = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_veriblockpublications()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .VeriBlock.AltPublication altPublications = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_altpublications()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:VeriBlock.AddTemporaryPayloadsRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:VeriBlock.AddTemporaryPayloadsRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AddTemporaryPayloadsRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:VeriBlock.AddTemporaryPayloadsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .VeriBlock.VeriBlockPublication veriblockPublications = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->veriblockpublications_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->veriblockpublications(static_cast<int>(i)),
      output);
  }

  // repeated .VeriBlock.AltPublication altPublications = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->altpublications_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->altpublications(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:VeriBlock.AddTemporaryPayloadsRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* AddTemporaryPayloadsRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:VeriBlock.AddTemporaryPayloadsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .VeriBlock.VeriBlockPublication veriblockPublications = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->veriblockpublications_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->veriblockpublications(static_cast<int>(i)), target);
  }

  // repeated .VeriBlock.AltPublication altPublications = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->altpublications_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->altpublications(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:VeriBlock.AddTemporaryPayloadsRequest)
  return target;
}

size_t AddTemporaryPayloadsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:VeriBlock.AddTemporaryPayloadsRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .VeriBlock.VeriBlockPublication veriblockPublications = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->veriblockpublications_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->veriblockpublications(static_cast<int>(i)));
    }
  }

  // repeated .VeriBlock.AltPublication altPublications = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->altpublications_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->altpublications(static_cast<int>(i)));
    }
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AddTemporaryPayloadsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:VeriBlock.AddTemporaryPayloadsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const AddTemporaryPayloadsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AddTemporaryPayloadsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:VeriBlock.AddTemporaryPayloadsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:VeriBlock.AddTemporaryPayloadsRequest)
    MergeFrom(*source);
  }
}

void AddTemporaryPayloadsRequest::MergeFrom(const AddTemporaryPayloadsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:VeriBlock.AddTemporaryPayloadsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  veriblockpublications_.MergeFrom(from.veriblockpublications_);
  altpublications_.MergeFrom(from.altpublications_);
}

void AddTemporaryPayloadsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:VeriBlock.AddTemporaryPayloadsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddTemporaryPayloadsRequest::CopyFrom(const AddTemporaryPayloadsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:VeriBlock.AddTemporaryPayloadsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddTemporaryPayloadsRequest::IsInitialized() const {
  return true;
}

void AddTemporaryPayloadsRequest::InternalSwap(AddTemporaryPayloadsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&veriblockpublications_)->InternalSwap(CastToBase(&other->veriblockpublications_));
  CastToBase(&altpublications_)->InternalSwap(CastToBase(&other->altpublications_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AddTemporaryPayloadsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SimplifyVTBsRequest::InitAsDefaultInstance() {
}
class SimplifyVTBsRequest::_Internal {
 public:
};

SimplifyVTBsRequest::SimplifyVTBsRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:VeriBlock.SimplifyVTBsRequest)
}
SimplifyVTBsRequest::SimplifyVTBsRequest(const SimplifyVTBsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      veriblockpublications_(from.veriblockpublications_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:VeriBlock.SimplifyVTBsRequest)
}

void SimplifyVTBsRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SimplifyVTBsRequest_integration_2eproto.base);
}

SimplifyVTBsRequest::~SimplifyVTBsRequest() {
  // @@protoc_insertion_point(destructor:VeriBlock.SimplifyVTBsRequest)
  SharedDtor();
}

void SimplifyVTBsRequest::SharedDtor() {
}

void SimplifyVTBsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SimplifyVTBsRequest& SimplifyVTBsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SimplifyVTBsRequest_integration_2eproto.base);
  return *internal_default_instance();
}


void SimplifyVTBsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:VeriBlock.SimplifyVTBsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  veriblockpublications_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SimplifyVTBsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .VeriBlock.VeriBlockPublication veriblockPublications = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_veriblockpublications(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SimplifyVTBsRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:VeriBlock.SimplifyVTBsRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .VeriBlock.VeriBlockPublication veriblockPublications = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_veriblockpublications()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:VeriBlock.SimplifyVTBsRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:VeriBlock.SimplifyVTBsRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SimplifyVTBsRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:VeriBlock.SimplifyVTBsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .VeriBlock.VeriBlockPublication veriblockPublications = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->veriblockpublications_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->veriblockpublications(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:VeriBlock.SimplifyVTBsRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* SimplifyVTBsRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:VeriBlock.SimplifyVTBsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .VeriBlock.VeriBlockPublication veriblockPublications = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->veriblockpublications_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->veriblockpublications(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:VeriBlock.SimplifyVTBsRequest)
  return target;
}

size_t SimplifyVTBsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:VeriBlock.SimplifyVTBsRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .VeriBlock.VeriBlockPublication veriblockPublications = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->veriblockpublications_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->veriblockpublications(static_cast<int>(i)));
    }
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SimplifyVTBsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:VeriBlock.SimplifyVTBsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SimplifyVTBsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SimplifyVTBsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:VeriBlock.SimplifyVTBsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:VeriBlock.SimplifyVTBsRequest)
    MergeFrom(*source);
  }
}

void SimplifyVTBsRequest::MergeFrom(const SimplifyVTBsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:VeriBlock.SimplifyVTBsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  veriblockpublications_.MergeFrom(from.veriblockpublications_);
}

void SimplifyVTBsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:VeriBlock.SimplifyVTBsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SimplifyVTBsRequest::CopyFrom(const SimplifyVTBsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:VeriBlock.SimplifyVTBsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SimplifyVTBsRequest::IsInitialized() const {
  return true;
}

void SimplifyVTBsRequest::InternalSwap(SimplifyVTBsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&veriblockpublications_)->InternalSwap(CastToBase(&other->veriblockpublications_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SimplifyVTBsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SimplifyVTBsReply::InitAsDefaultInstance() {
  ::VeriBlock::_SimplifyVTBsReply_default_instance_._instance.get_mutable()->result_ = const_cast< ::VeriBlock::GeneralReply*>(
      ::VeriBlock::GeneralReply::internal_default_instance());
}
class SimplifyVTBsReply::_Internal {
 public:
  static const ::VeriBlock::GeneralReply& result(const SimplifyVTBsReply* msg);
};

const ::VeriBlock::GeneralReply&
SimplifyVTBsReply::_Internal::result(const SimplifyVTBsReply* msg) {
  return *msg->result_;
}
SimplifyVTBsReply::SimplifyVTBsReply()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:VeriBlock.SimplifyVTBsReply)
}
SimplifyVTBsReply::SimplifyVTBsReply(const SimplifyVTBsReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      veriblockpublications_(from.veriblockpublications_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_result()) {
    result_ = new ::VeriBlock::GeneralReply(*from.result_);
  } else {
    result_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:VeriBlock.SimplifyVTBsReply)
}

void SimplifyVTBsReply::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SimplifyVTBsReply_integration_2eproto.base);
  result_ = nullptr;
}

SimplifyVTBsReply::~SimplifyVTBsReply() {
  // @@protoc_insertion_point(destructor:VeriBlock.SimplifyVTBsReply)
  SharedDtor();
}

void SimplifyVTBsReply::SharedDtor() {
  if (this != internal_default_instance()) delete result_;
}

void SimplifyVTBsReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SimplifyVTBsReply& SimplifyVTBsReply::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SimplifyVTBsReply_integration_2eproto.base);
  return *internal_default_instance();
}


void SimplifyVTBsReply::Clear() {
// @@protoc_insertion_point(message_clear_start:VeriBlock.SimplifyVTBsReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  veriblockpublications_.Clear();
  if (GetArenaNoVirtual() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SimplifyVTBsReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .VeriBlock.GeneralReply result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_result(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .VeriBlock.VeriBlockPublication veriblockPublications = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_veriblockpublications(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SimplifyVTBsReply::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:VeriBlock.SimplifyVTBsReply)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .VeriBlock.GeneralReply result = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_result()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .VeriBlock.VeriBlockPublication veriblockPublications = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_veriblockpublications()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:VeriBlock.SimplifyVTBsReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:VeriBlock.SimplifyVTBsReply)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SimplifyVTBsReply::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:VeriBlock.SimplifyVTBsReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .VeriBlock.GeneralReply result = 1;
  if (this->has_result()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::result(this), output);
  }

  // repeated .VeriBlock.VeriBlockPublication veriblockPublications = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->veriblockpublications_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->veriblockpublications(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:VeriBlock.SimplifyVTBsReply)
}

::PROTOBUF_NAMESPACE_ID::uint8* SimplifyVTBsReply::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:VeriBlock.SimplifyVTBsReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .VeriBlock.GeneralReply result = 1;
  if (this->has_result()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::result(this), target);
  }

  // repeated .VeriBlock.VeriBlockPublication veriblockPublications = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->veriblockpublications_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->veriblockpublications(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:VeriBlock.SimplifyVTBsReply)
  return target;
}

size_t SimplifyVTBsReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:VeriBlock.SimplifyVTBsReply)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .VeriBlock.VeriBlockPublication veriblockPublications = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->veriblockpublications_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->veriblockpublications(static_cast<int>(i)));
    }
  }

  // .VeriBlock.GeneralReply result = 1;
  if (this->has_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *result_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SimplifyVTBsReply::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:VeriBlock.SimplifyVTBsReply)
  GOOGLE_DCHECK_NE(&from, this);
  const SimplifyVTBsReply* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SimplifyVTBsReply>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:VeriBlock.SimplifyVTBsReply)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:VeriBlock.SimplifyVTBsReply)
    MergeFrom(*source);
  }
}

void SimplifyVTBsReply::MergeFrom(const SimplifyVTBsReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:VeriBlock.SimplifyVTBsReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  veriblockpublications_.MergeFrom(from.veriblockpublications_);
  if (from.has_result()) {
    mutable_result()->::VeriBlock::GeneralReply::MergeFrom(from.result());
  }
}

void SimplifyVTBsReply::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:VeriBlock.SimplifyVTBsReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SimplifyVTBsReply::CopyFrom(const SimplifyVTBsReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:VeriBlock.SimplifyVTBsReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SimplifyVTBsReply::IsInitialized() const {
  return true;
}

void SimplifyVTBsReply::InternalSwap(SimplifyVTBsReply* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&veriblockpublications_)->InternalSwap(CastToBase(&other->veriblockpublications_));
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SimplifyVTBsReply::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetMainVBKHeightOfATVReply::InitAsDefaultInstance() {
  ::VeriBlock::_GetMainVBKHeightOfATVReply_default_instance_._instance.get_mutable()->result_ = const_cast< ::VeriBlock::GeneralReply*>(
      ::VeriBlock::GeneralReply::internal_default_instance());
}
class GetMainVBKHeightOfATVReply::_Internal {
 public:
  static const ::VeriBlock::GeneralReply& result(const GetMainVBKHeightOfATVReply* msg);
};

const ::VeriBlock::GeneralReply&
GetMainVBKHeightOfATVReply::_Internal::result(const GetMainVBKHeightOfATVReply* msg) {
  return *msg->result_;
}
GetMainVBKHeightOfATVReply::GetMainVBKHeightOfATVReply()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:VeriBlock.GetMainVBKHeightOfATVReply)
}
GetMainVBKHeightOfATVReply::GetMainVBKHeightOfATVReply(const GetMainVBKHeightOfATVReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_result()) {
    result_ = new ::VeriBlock::GeneralReply(*from.result_);
  } else {
    result_ = nullptr;
  }
  height_ = from.height_;
  // @@protoc_insertion_point(copy_constructor:VeriBlock.GetMainVBKHeightOfATVReply)
}

void GetMainVBKHeightOfATVReply::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetMainVBKHeightOfATVReply_integration_2eproto.base);
  ::memset(&result_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&height_) -
      reinterpret_cast<char*>(&result_)) + sizeof(height_));
}

GetMainVBKHeightOfATVReply::~GetMainVBKHeightOfATVReply() {
  // @@protoc_insertion_point(destructor:VeriBlock.GetMainVBKHeightOfATVReply)
  SharedDtor();
}

void GetMainVBKHeightOfATVReply::SharedDtor() {
  if (this != internal_default_instance()) delete result_;
}

void GetMainVBKHeightOfATVReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetMainVBKHeightOfATVReply& GetMainVBKHeightOfATVReply::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetMainVBKHeightOfATVReply_integration_2eproto.base);
  return *internal_default_instance();
}


void GetMainVBKHeightOfATVReply::Clear() {
// @@protoc_insertion_point(message_clear_start:VeriBlock.GetMainVBKHeightOfATVReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
  height_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GetMainVBKHeightOfATVReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .VeriBlock.GeneralReply result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_result(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 height = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GetMainVBKHeightOfATVReply::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:VeriBlock.GetMainVBKHeightOfATVReply)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .VeriBlock.GeneralReply result = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_result()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 height = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:VeriBlock.GetMainVBKHeightOfATVReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:VeriBlock.GetMainVBKHeightOfATVReply)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GetMainVBKHeightOfATVReply::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:VeriBlock.GetMainVBKHeightOfATVReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .VeriBlock.GeneralReply result = 1;
  if (this->has_result()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::result(this), output);
  }

  // int32 height = 2;
  if (this->height() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->height(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:VeriBlock.GetMainVBKHeightOfATVReply)
}

::PROTOBUF_NAMESPACE_ID::uint8* GetMainVBKHeightOfATVReply::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:VeriBlock.GetMainVBKHeightOfATVReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .VeriBlock.GeneralReply result = 1;
  if (this->has_result()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::result(this), target);
  }

  // int32 height = 2;
  if (this->height() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->height(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:VeriBlock.GetMainVBKHeightOfATVReply)
  return target;
}

size_t GetMainVBKHeightOfATVReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:VeriBlock.GetMainVBKHeightOfATVReply)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .VeriBlock.GeneralReply result = 1;
  if (this->has_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *result_);
  }

  // int32 height = 2;
  if (this->height() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->height());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetMainVBKHeightOfATVReply::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:VeriBlock.GetMainVBKHeightOfATVReply)
  GOOGLE_DCHECK_NE(&from, this);
  const GetMainVBKHeightOfATVReply* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetMainVBKHeightOfATVReply>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:VeriBlock.GetMainVBKHeightOfATVReply)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:VeriBlock.GetMainVBKHeightOfATVReply)
    MergeFrom(*source);
  }
}

void GetMainVBKHeightOfATVReply::MergeFrom(const GetMainVBKHeightOfATVReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:VeriBlock.GetMainVBKHeightOfATVReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_result()) {
    mutable_result()->::VeriBlock::GeneralReply::MergeFrom(from.result());
  }
  if (from.height() != 0) {
    set_height(from.height());
  }
}

void GetMainVBKHeightOfATVReply::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:VeriBlock.GetMainVBKHeightOfATVReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetMainVBKHeightOfATVReply::CopyFrom(const GetMainVBKHeightOfATVReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:VeriBlock.GetMainVBKHeightOfATVReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetMainVBKHeightOfATVReply::IsInitialized() const {
  return true;
}

void GetMainVBKHeightOfATVReply::InternalSwap(GetMainVBKHeightOfATVReply* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(result_, other->result_);
  swap(height_, other->height_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetMainVBKHeightOfATVReply::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RemovePayloadsRequest::InitAsDefaultInstance() {
  ::VeriBlock::_RemovePayloadsRequest_default_instance_._instance.get_mutable()->blockindex_ = const_cast< ::VeriBlock::BlockIndex*>(
      ::VeriBlock::BlockIndex::internal_default_instance());
}
class RemovePayloadsRequest::_Internal {
 public:
  static const ::VeriBlock::BlockIndex& blockindex(const RemovePayloadsRequest* msg);
};

const ::VeriBlock::BlockIndex&
RemovePayloadsRequest::_Internal::blockindex(const RemovePayloadsRequest* msg) {
  return *msg->blockindex_;
}
RemovePayloadsRequest::RemovePayloadsRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:VeriBlock.RemovePayloadsRequest)
}
RemovePayloadsRequest::RemovePayloadsRequest(const RemovePayloadsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_blockindex()) {
    blockindex_ = new ::VeriBlock::BlockIndex(*from.blockindex_);
  } else {
    blockindex_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:VeriBlock.RemovePayloadsRequest)
}

void RemovePayloadsRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RemovePayloadsRequest_integration_2eproto.base);
  blockindex_ = nullptr;
}

RemovePayloadsRequest::~RemovePayloadsRequest() {
  // @@protoc_insertion_point(destructor:VeriBlock.RemovePayloadsRequest)
  SharedDtor();
}

void RemovePayloadsRequest::SharedDtor() {
  if (this != internal_default_instance()) delete blockindex_;
}

void RemovePayloadsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RemovePayloadsRequest& RemovePayloadsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RemovePayloadsRequest_integration_2eproto.base);
  return *internal_default_instance();
}


void RemovePayloadsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:VeriBlock.RemovePayloadsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && blockindex_ != nullptr) {
    delete blockindex_;
  }
  blockindex_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RemovePayloadsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .VeriBlock.BlockIndex blockIndex = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_blockindex(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RemovePayloadsRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:VeriBlock.RemovePayloadsRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .VeriBlock.BlockIndex blockIndex = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_blockindex()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:VeriBlock.RemovePayloadsRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:VeriBlock.RemovePayloadsRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RemovePayloadsRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:VeriBlock.RemovePayloadsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .VeriBlock.BlockIndex blockIndex = 1;
  if (this->has_blockindex()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::blockindex(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:VeriBlock.RemovePayloadsRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* RemovePayloadsRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:VeriBlock.RemovePayloadsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .VeriBlock.BlockIndex blockIndex = 1;
  if (this->has_blockindex()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::blockindex(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:VeriBlock.RemovePayloadsRequest)
  return target;
}

size_t RemovePayloadsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:VeriBlock.RemovePayloadsRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .VeriBlock.BlockIndex blockIndex = 1;
  if (this->has_blockindex()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *blockindex_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RemovePayloadsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:VeriBlock.RemovePayloadsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const RemovePayloadsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RemovePayloadsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:VeriBlock.RemovePayloadsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:VeriBlock.RemovePayloadsRequest)
    MergeFrom(*source);
  }
}

void RemovePayloadsRequest::MergeFrom(const RemovePayloadsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:VeriBlock.RemovePayloadsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_blockindex()) {
    mutable_blockindex()->::VeriBlock::BlockIndex::MergeFrom(from.blockindex());
  }
}

void RemovePayloadsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:VeriBlock.RemovePayloadsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RemovePayloadsRequest::CopyFrom(const RemovePayloadsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:VeriBlock.RemovePayloadsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemovePayloadsRequest::IsInitialized() const {
  return true;
}

void RemovePayloadsRequest::InternalSwap(RemovePayloadsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(blockindex_, other->blockindex_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RemovePayloadsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AltChainConfigRequest::InitAsDefaultInstance() {
}
class AltChainConfigRequest::_Internal {
 public:
};

AltChainConfigRequest::AltChainConfigRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:VeriBlock.AltChainConfigRequest)
}
AltChainConfigRequest::AltChainConfigRequest(const AltChainConfigRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  keystoneinterval_ = from.keystoneinterval_;
  // @@protoc_insertion_point(copy_constructor:VeriBlock.AltChainConfigRequest)
}

void AltChainConfigRequest::SharedCtor() {
  keystoneinterval_ = 0;
}

AltChainConfigRequest::~AltChainConfigRequest() {
  // @@protoc_insertion_point(destructor:VeriBlock.AltChainConfigRequest)
  SharedDtor();
}

void AltChainConfigRequest::SharedDtor() {
}

void AltChainConfigRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AltChainConfigRequest& AltChainConfigRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AltChainConfigRequest_integration_2eproto.base);
  return *internal_default_instance();
}


void AltChainConfigRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:VeriBlock.AltChainConfigRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  keystoneinterval_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AltChainConfigRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 keystoneInterval = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          keystoneinterval_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AltChainConfigRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:VeriBlock.AltChainConfigRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 keystoneInterval = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &keystoneinterval_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:VeriBlock.AltChainConfigRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:VeriBlock.AltChainConfigRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AltChainConfigRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:VeriBlock.AltChainConfigRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 keystoneInterval = 1;
  if (this->keystoneinterval() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->keystoneinterval(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:VeriBlock.AltChainConfigRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* AltChainConfigRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:VeriBlock.AltChainConfigRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 keystoneInterval = 1;
  if (this->keystoneinterval() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->keystoneinterval(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:VeriBlock.AltChainConfigRequest)
  return target;
}

size_t AltChainConfigRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:VeriBlock.AltChainConfigRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 keystoneInterval = 1;
  if (this->keystoneinterval() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->keystoneinterval());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AltChainConfigRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:VeriBlock.AltChainConfigRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const AltChainConfigRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AltChainConfigRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:VeriBlock.AltChainConfigRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:VeriBlock.AltChainConfigRequest)
    MergeFrom(*source);
  }
}

void AltChainConfigRequest::MergeFrom(const AltChainConfigRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:VeriBlock.AltChainConfigRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.keystoneinterval() != 0) {
    set_keystoneinterval(from.keystoneinterval());
  }
}

void AltChainConfigRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:VeriBlock.AltChainConfigRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AltChainConfigRequest::CopyFrom(const AltChainConfigRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:VeriBlock.AltChainConfigRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AltChainConfigRequest::IsInitialized() const {
  return true;
}

void AltChainConfigRequest::InternalSwap(AltChainConfigRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(keystoneinterval_, other->keystoneinterval_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AltChainConfigRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetLastKnownBlocksRequest::InitAsDefaultInstance() {
}
class GetLastKnownBlocksRequest::_Internal {
 public:
};

GetLastKnownBlocksRequest::GetLastKnownBlocksRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:VeriBlock.GetLastKnownBlocksRequest)
}
GetLastKnownBlocksRequest::GetLastKnownBlocksRequest(const GetLastKnownBlocksRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  maxblockcount_ = from.maxblockcount_;
  // @@protoc_insertion_point(copy_constructor:VeriBlock.GetLastKnownBlocksRequest)
}

void GetLastKnownBlocksRequest::SharedCtor() {
  maxblockcount_ = 0;
}

GetLastKnownBlocksRequest::~GetLastKnownBlocksRequest() {
  // @@protoc_insertion_point(destructor:VeriBlock.GetLastKnownBlocksRequest)
  SharedDtor();
}

void GetLastKnownBlocksRequest::SharedDtor() {
}

void GetLastKnownBlocksRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetLastKnownBlocksRequest& GetLastKnownBlocksRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetLastKnownBlocksRequest_integration_2eproto.base);
  return *internal_default_instance();
}


void GetLastKnownBlocksRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:VeriBlock.GetLastKnownBlocksRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  maxblockcount_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GetLastKnownBlocksRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 maxBlockCount = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          maxblockcount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GetLastKnownBlocksRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:VeriBlock.GetLastKnownBlocksRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 maxBlockCount = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxblockcount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:VeriBlock.GetLastKnownBlocksRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:VeriBlock.GetLastKnownBlocksRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GetLastKnownBlocksRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:VeriBlock.GetLastKnownBlocksRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 maxBlockCount = 1;
  if (this->maxblockcount() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->maxblockcount(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:VeriBlock.GetLastKnownBlocksRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* GetLastKnownBlocksRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:VeriBlock.GetLastKnownBlocksRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 maxBlockCount = 1;
  if (this->maxblockcount() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->maxblockcount(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:VeriBlock.GetLastKnownBlocksRequest)
  return target;
}

size_t GetLastKnownBlocksRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:VeriBlock.GetLastKnownBlocksRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 maxBlockCount = 1;
  if (this->maxblockcount() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->maxblockcount());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetLastKnownBlocksRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:VeriBlock.GetLastKnownBlocksRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetLastKnownBlocksRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetLastKnownBlocksRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:VeriBlock.GetLastKnownBlocksRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:VeriBlock.GetLastKnownBlocksRequest)
    MergeFrom(*source);
  }
}

void GetLastKnownBlocksRequest::MergeFrom(const GetLastKnownBlocksRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:VeriBlock.GetLastKnownBlocksRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.maxblockcount() != 0) {
    set_maxblockcount(from.maxblockcount());
  }
}

void GetLastKnownBlocksRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:VeriBlock.GetLastKnownBlocksRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetLastKnownBlocksRequest::CopyFrom(const GetLastKnownBlocksRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:VeriBlock.GetLastKnownBlocksRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetLastKnownBlocksRequest::IsInitialized() const {
  return true;
}

void GetLastKnownBlocksRequest::InternalSwap(GetLastKnownBlocksRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(maxblockcount_, other->maxblockcount_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetLastKnownBlocksRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetLastKnownVBKBlocksReply::InitAsDefaultInstance() {
  ::VeriBlock::_GetLastKnownVBKBlocksReply_default_instance_._instance.get_mutable()->result_ = const_cast< ::VeriBlock::GeneralReply*>(
      ::VeriBlock::GeneralReply::internal_default_instance());
}
class GetLastKnownVBKBlocksReply::_Internal {
 public:
  static const ::VeriBlock::GeneralReply& result(const GetLastKnownVBKBlocksReply* msg);
};

const ::VeriBlock::GeneralReply&
GetLastKnownVBKBlocksReply::_Internal::result(const GetLastKnownVBKBlocksReply* msg) {
  return *msg->result_;
}
GetLastKnownVBKBlocksReply::GetLastKnownVBKBlocksReply()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:VeriBlock.GetLastKnownVBKBlocksReply)
}
GetLastKnownVBKBlocksReply::GetLastKnownVBKBlocksReply(const GetLastKnownVBKBlocksReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      blocks_(from.blocks_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_result()) {
    result_ = new ::VeriBlock::GeneralReply(*from.result_);
  } else {
    result_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:VeriBlock.GetLastKnownVBKBlocksReply)
}

void GetLastKnownVBKBlocksReply::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetLastKnownVBKBlocksReply_integration_2eproto.base);
  result_ = nullptr;
}

GetLastKnownVBKBlocksReply::~GetLastKnownVBKBlocksReply() {
  // @@protoc_insertion_point(destructor:VeriBlock.GetLastKnownVBKBlocksReply)
  SharedDtor();
}

void GetLastKnownVBKBlocksReply::SharedDtor() {
  if (this != internal_default_instance()) delete result_;
}

void GetLastKnownVBKBlocksReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetLastKnownVBKBlocksReply& GetLastKnownVBKBlocksReply::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetLastKnownVBKBlocksReply_integration_2eproto.base);
  return *internal_default_instance();
}


void GetLastKnownVBKBlocksReply::Clear() {
// @@protoc_insertion_point(message_clear_start:VeriBlock.GetLastKnownVBKBlocksReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  blocks_.Clear();
  if (GetArenaNoVirtual() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GetLastKnownVBKBlocksReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .VeriBlock.GeneralReply result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_result(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated bytes blocks = 2 [(.VeriBlock.hex_encoded) = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(add_blocks(), ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GetLastKnownVBKBlocksReply::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:VeriBlock.GetLastKnownVBKBlocksReply)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .VeriBlock.GeneralReply result = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_result()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated bytes blocks = 2 [(.VeriBlock.hex_encoded) = true];
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->add_blocks()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:VeriBlock.GetLastKnownVBKBlocksReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:VeriBlock.GetLastKnownVBKBlocksReply)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GetLastKnownVBKBlocksReply::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:VeriBlock.GetLastKnownVBKBlocksReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .VeriBlock.GeneralReply result = 1;
  if (this->has_result()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::result(this), output);
  }

  // repeated bytes blocks = 2 [(.VeriBlock.hex_encoded) = true];
  for (int i = 0, n = this->blocks_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytes(
      2, this->blocks(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:VeriBlock.GetLastKnownVBKBlocksReply)
}

::PROTOBUF_NAMESPACE_ID::uint8* GetLastKnownVBKBlocksReply::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:VeriBlock.GetLastKnownVBKBlocksReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .VeriBlock.GeneralReply result = 1;
  if (this->has_result()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::result(this), target);
  }

  // repeated bytes blocks = 2 [(.VeriBlock.hex_encoded) = true];
  for (int i = 0, n = this->blocks_size(); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteBytesToArray(2, this->blocks(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:VeriBlock.GetLastKnownVBKBlocksReply)
  return target;
}

size_t GetLastKnownVBKBlocksReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:VeriBlock.GetLastKnownVBKBlocksReply)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes blocks = 2 [(.VeriBlock.hex_encoded) = true];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->blocks_size());
  for (int i = 0, n = this->blocks_size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      this->blocks(i));
  }

  // .VeriBlock.GeneralReply result = 1;
  if (this->has_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *result_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetLastKnownVBKBlocksReply::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:VeriBlock.GetLastKnownVBKBlocksReply)
  GOOGLE_DCHECK_NE(&from, this);
  const GetLastKnownVBKBlocksReply* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetLastKnownVBKBlocksReply>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:VeriBlock.GetLastKnownVBKBlocksReply)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:VeriBlock.GetLastKnownVBKBlocksReply)
    MergeFrom(*source);
  }
}

void GetLastKnownVBKBlocksReply::MergeFrom(const GetLastKnownVBKBlocksReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:VeriBlock.GetLastKnownVBKBlocksReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  blocks_.MergeFrom(from.blocks_);
  if (from.has_result()) {
    mutable_result()->::VeriBlock::GeneralReply::MergeFrom(from.result());
  }
}

void GetLastKnownVBKBlocksReply::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:VeriBlock.GetLastKnownVBKBlocksReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetLastKnownVBKBlocksReply::CopyFrom(const GetLastKnownVBKBlocksReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:VeriBlock.GetLastKnownVBKBlocksReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetLastKnownVBKBlocksReply::IsInitialized() const {
  return true;
}

void GetLastKnownVBKBlocksReply::InternalSwap(GetLastKnownVBKBlocksReply* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  blocks_.InternalSwap(CastToBase(&other->blocks_));
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetLastKnownVBKBlocksReply::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetLastKnownBTCBlocksReply::InitAsDefaultInstance() {
  ::VeriBlock::_GetLastKnownBTCBlocksReply_default_instance_._instance.get_mutable()->result_ = const_cast< ::VeriBlock::GeneralReply*>(
      ::VeriBlock::GeneralReply::internal_default_instance());
}
class GetLastKnownBTCBlocksReply::_Internal {
 public:
  static const ::VeriBlock::GeneralReply& result(const GetLastKnownBTCBlocksReply* msg);
};

const ::VeriBlock::GeneralReply&
GetLastKnownBTCBlocksReply::_Internal::result(const GetLastKnownBTCBlocksReply* msg) {
  return *msg->result_;
}
GetLastKnownBTCBlocksReply::GetLastKnownBTCBlocksReply()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:VeriBlock.GetLastKnownBTCBlocksReply)
}
GetLastKnownBTCBlocksReply::GetLastKnownBTCBlocksReply(const GetLastKnownBTCBlocksReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      blocks_(from.blocks_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_result()) {
    result_ = new ::VeriBlock::GeneralReply(*from.result_);
  } else {
    result_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:VeriBlock.GetLastKnownBTCBlocksReply)
}

void GetLastKnownBTCBlocksReply::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetLastKnownBTCBlocksReply_integration_2eproto.base);
  result_ = nullptr;
}

GetLastKnownBTCBlocksReply::~GetLastKnownBTCBlocksReply() {
  // @@protoc_insertion_point(destructor:VeriBlock.GetLastKnownBTCBlocksReply)
  SharedDtor();
}

void GetLastKnownBTCBlocksReply::SharedDtor() {
  if (this != internal_default_instance()) delete result_;
}

void GetLastKnownBTCBlocksReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetLastKnownBTCBlocksReply& GetLastKnownBTCBlocksReply::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetLastKnownBTCBlocksReply_integration_2eproto.base);
  return *internal_default_instance();
}


void GetLastKnownBTCBlocksReply::Clear() {
// @@protoc_insertion_point(message_clear_start:VeriBlock.GetLastKnownBTCBlocksReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  blocks_.Clear();
  if (GetArenaNoVirtual() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GetLastKnownBTCBlocksReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .VeriBlock.GeneralReply result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_result(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated bytes blocks = 2 [(.VeriBlock.hex_encoded) = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(add_blocks(), ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GetLastKnownBTCBlocksReply::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:VeriBlock.GetLastKnownBTCBlocksReply)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .VeriBlock.GeneralReply result = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_result()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated bytes blocks = 2 [(.VeriBlock.hex_encoded) = true];
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->add_blocks()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:VeriBlock.GetLastKnownBTCBlocksReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:VeriBlock.GetLastKnownBTCBlocksReply)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GetLastKnownBTCBlocksReply::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:VeriBlock.GetLastKnownBTCBlocksReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .VeriBlock.GeneralReply result = 1;
  if (this->has_result()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::result(this), output);
  }

  // repeated bytes blocks = 2 [(.VeriBlock.hex_encoded) = true];
  for (int i = 0, n = this->blocks_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytes(
      2, this->blocks(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:VeriBlock.GetLastKnownBTCBlocksReply)
}

::PROTOBUF_NAMESPACE_ID::uint8* GetLastKnownBTCBlocksReply::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:VeriBlock.GetLastKnownBTCBlocksReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .VeriBlock.GeneralReply result = 1;
  if (this->has_result()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::result(this), target);
  }

  // repeated bytes blocks = 2 [(.VeriBlock.hex_encoded) = true];
  for (int i = 0, n = this->blocks_size(); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteBytesToArray(2, this->blocks(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:VeriBlock.GetLastKnownBTCBlocksReply)
  return target;
}

size_t GetLastKnownBTCBlocksReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:VeriBlock.GetLastKnownBTCBlocksReply)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes blocks = 2 [(.VeriBlock.hex_encoded) = true];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->blocks_size());
  for (int i = 0, n = this->blocks_size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      this->blocks(i));
  }

  // .VeriBlock.GeneralReply result = 1;
  if (this->has_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *result_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetLastKnownBTCBlocksReply::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:VeriBlock.GetLastKnownBTCBlocksReply)
  GOOGLE_DCHECK_NE(&from, this);
  const GetLastKnownBTCBlocksReply* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetLastKnownBTCBlocksReply>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:VeriBlock.GetLastKnownBTCBlocksReply)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:VeriBlock.GetLastKnownBTCBlocksReply)
    MergeFrom(*source);
  }
}

void GetLastKnownBTCBlocksReply::MergeFrom(const GetLastKnownBTCBlocksReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:VeriBlock.GetLastKnownBTCBlocksReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  blocks_.MergeFrom(from.blocks_);
  if (from.has_result()) {
    mutable_result()->::VeriBlock::GeneralReply::MergeFrom(from.result());
  }
}

void GetLastKnownBTCBlocksReply::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:VeriBlock.GetLastKnownBTCBlocksReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetLastKnownBTCBlocksReply::CopyFrom(const GetLastKnownBTCBlocksReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:VeriBlock.GetLastKnownBTCBlocksReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetLastKnownBTCBlocksReply::IsInitialized() const {
  return true;
}

void GetLastKnownBTCBlocksReply::InternalSwap(GetLastKnownBTCBlocksReply* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  blocks_.InternalSwap(CastToBase(&other->blocks_));
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetLastKnownBTCBlocksReply::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RoundRatioConfig::InitAsDefaultInstance() {
}
class RoundRatioConfig::_Internal {
 public:
};

RoundRatioConfig::RoundRatioConfig()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:VeriBlock.RoundRatioConfig)
}
RoundRatioConfig::RoundRatioConfig(const RoundRatioConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      roundratio_(from.roundratio_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:VeriBlock.RoundRatioConfig)
}

void RoundRatioConfig::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RoundRatioConfig_integration_2eproto.base);
}

RoundRatioConfig::~RoundRatioConfig() {
  // @@protoc_insertion_point(destructor:VeriBlock.RoundRatioConfig)
  SharedDtor();
}

void RoundRatioConfig::SharedDtor() {
}

void RoundRatioConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RoundRatioConfig& RoundRatioConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RoundRatioConfig_integration_2eproto.base);
  return *internal_default_instance();
}


void RoundRatioConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:VeriBlock.RoundRatioConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  roundratio_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RoundRatioConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string roundRatio = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(add_roundratio(), ptr, ctx, "VeriBlock.RoundRatioConfig.roundRatio");
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RoundRatioConfig::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:VeriBlock.RoundRatioConfig)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string roundRatio = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->add_roundratio()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->roundratio(this->roundratio_size() - 1).data(),
            static_cast<int>(this->roundratio(this->roundratio_size() - 1).length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "VeriBlock.RoundRatioConfig.roundRatio"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:VeriBlock.RoundRatioConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:VeriBlock.RoundRatioConfig)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RoundRatioConfig::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:VeriBlock.RoundRatioConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string roundRatio = 1;
  for (int i = 0, n = this->roundratio_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->roundratio(i).data(), static_cast<int>(this->roundratio(i).length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "VeriBlock.RoundRatioConfig.roundRatio");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteString(
      1, this->roundratio(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:VeriBlock.RoundRatioConfig)
}

::PROTOBUF_NAMESPACE_ID::uint8* RoundRatioConfig::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:VeriBlock.RoundRatioConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string roundRatio = 1;
  for (int i = 0, n = this->roundratio_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->roundratio(i).data(), static_cast<int>(this->roundratio(i).length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "VeriBlock.RoundRatioConfig.roundRatio");
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteStringToArray(1, this->roundratio(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:VeriBlock.RoundRatioConfig)
  return target;
}

size_t RoundRatioConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:VeriBlock.RoundRatioConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string roundRatio = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->roundratio_size());
  for (int i = 0, n = this->roundratio_size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      this->roundratio(i));
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RoundRatioConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:VeriBlock.RoundRatioConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const RoundRatioConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RoundRatioConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:VeriBlock.RoundRatioConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:VeriBlock.RoundRatioConfig)
    MergeFrom(*source);
  }
}

void RoundRatioConfig::MergeFrom(const RoundRatioConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:VeriBlock.RoundRatioConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  roundratio_.MergeFrom(from.roundratio_);
}

void RoundRatioConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:VeriBlock.RoundRatioConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoundRatioConfig::CopyFrom(const RoundRatioConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:VeriBlock.RoundRatioConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoundRatioConfig::IsInitialized() const {
  return true;
}

void RoundRatioConfig::InternalSwap(RoundRatioConfig* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  roundratio_.InternalSwap(CastToBase(&other->roundratio_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RoundRatioConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RewardCurveConfig::InitAsDefaultInstance() {
}
class RewardCurveConfig::_Internal {
 public:
};

RewardCurveConfig::RewardCurveConfig()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:VeriBlock.RewardCurveConfig)
}
RewardCurveConfig::RewardCurveConfig(const RewardCurveConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  startofdecreasingline_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.startofdecreasingline().empty()) {
    startofdecreasingline_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.startofdecreasingline_);
  }
  widthofdecreasinglinenormal_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.widthofdecreasinglinenormal().empty()) {
    widthofdecreasinglinenormal_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.widthofdecreasinglinenormal_);
  }
  widthofdecreasinglinekeystone_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.widthofdecreasinglinekeystone().empty()) {
    widthofdecreasinglinekeystone_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.widthofdecreasinglinekeystone_);
  }
  aboveintendedpayoutmultipliernormal_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.aboveintendedpayoutmultipliernormal().empty()) {
    aboveintendedpayoutmultipliernormal_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.aboveintendedpayoutmultipliernormal_);
  }
  aboveintendedpayoutmultiplierkeystone_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.aboveintendedpayoutmultiplierkeystone().empty()) {
    aboveintendedpayoutmultiplierkeystone_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.aboveintendedpayoutmultiplierkeystone_);
  }
  // @@protoc_insertion_point(copy_constructor:VeriBlock.RewardCurveConfig)
}

void RewardCurveConfig::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RewardCurveConfig_integration_2eproto.base);
  startofdecreasingline_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  widthofdecreasinglinenormal_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  widthofdecreasinglinekeystone_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  aboveintendedpayoutmultipliernormal_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  aboveintendedpayoutmultiplierkeystone_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

RewardCurveConfig::~RewardCurveConfig() {
  // @@protoc_insertion_point(destructor:VeriBlock.RewardCurveConfig)
  SharedDtor();
}

void RewardCurveConfig::SharedDtor() {
  startofdecreasingline_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  widthofdecreasinglinenormal_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  widthofdecreasinglinekeystone_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  aboveintendedpayoutmultipliernormal_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  aboveintendedpayoutmultiplierkeystone_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RewardCurveConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RewardCurveConfig& RewardCurveConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RewardCurveConfig_integration_2eproto.base);
  return *internal_default_instance();
}


void RewardCurveConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:VeriBlock.RewardCurveConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  startofdecreasingline_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  widthofdecreasinglinenormal_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  widthofdecreasinglinekeystone_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  aboveintendedpayoutmultipliernormal_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  aboveintendedpayoutmultiplierkeystone_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RewardCurveConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string startOfDecreasingLine = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_startofdecreasingline(), ptr, ctx, "VeriBlock.RewardCurveConfig.startOfDecreasingLine");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string widthOfDecreasingLineNormal = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_widthofdecreasinglinenormal(), ptr, ctx, "VeriBlock.RewardCurveConfig.widthOfDecreasingLineNormal");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string widthOfDecreasingLineKeystone = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_widthofdecreasinglinekeystone(), ptr, ctx, "VeriBlock.RewardCurveConfig.widthOfDecreasingLineKeystone");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string aboveIntendedPayoutMultiplierNormal = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_aboveintendedpayoutmultipliernormal(), ptr, ctx, "VeriBlock.RewardCurveConfig.aboveIntendedPayoutMultiplierNormal");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string aboveIntendedPayoutMultiplierKeystone = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_aboveintendedpayoutmultiplierkeystone(), ptr, ctx, "VeriBlock.RewardCurveConfig.aboveIntendedPayoutMultiplierKeystone");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RewardCurveConfig::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:VeriBlock.RewardCurveConfig)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string startOfDecreasingLine = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_startofdecreasingline()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->startofdecreasingline().data(), static_cast<int>(this->startofdecreasingline().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "VeriBlock.RewardCurveConfig.startOfDecreasingLine"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string widthOfDecreasingLineNormal = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_widthofdecreasinglinenormal()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->widthofdecreasinglinenormal().data(), static_cast<int>(this->widthofdecreasinglinenormal().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "VeriBlock.RewardCurveConfig.widthOfDecreasingLineNormal"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string widthOfDecreasingLineKeystone = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_widthofdecreasinglinekeystone()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->widthofdecreasinglinekeystone().data(), static_cast<int>(this->widthofdecreasinglinekeystone().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "VeriBlock.RewardCurveConfig.widthOfDecreasingLineKeystone"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string aboveIntendedPayoutMultiplierNormal = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_aboveintendedpayoutmultipliernormal()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->aboveintendedpayoutmultipliernormal().data(), static_cast<int>(this->aboveintendedpayoutmultipliernormal().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "VeriBlock.RewardCurveConfig.aboveIntendedPayoutMultiplierNormal"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string aboveIntendedPayoutMultiplierKeystone = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_aboveintendedpayoutmultiplierkeystone()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->aboveintendedpayoutmultiplierkeystone().data(), static_cast<int>(this->aboveintendedpayoutmultiplierkeystone().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "VeriBlock.RewardCurveConfig.aboveIntendedPayoutMultiplierKeystone"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:VeriBlock.RewardCurveConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:VeriBlock.RewardCurveConfig)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RewardCurveConfig::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:VeriBlock.RewardCurveConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string startOfDecreasingLine = 1;
  if (this->startofdecreasingline().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->startofdecreasingline().data(), static_cast<int>(this->startofdecreasingline().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "VeriBlock.RewardCurveConfig.startOfDecreasingLine");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->startofdecreasingline(), output);
  }

  // string widthOfDecreasingLineNormal = 2;
  if (this->widthofdecreasinglinenormal().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->widthofdecreasinglinenormal().data(), static_cast<int>(this->widthofdecreasinglinenormal().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "VeriBlock.RewardCurveConfig.widthOfDecreasingLineNormal");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->widthofdecreasinglinenormal(), output);
  }

  // string widthOfDecreasingLineKeystone = 3;
  if (this->widthofdecreasinglinekeystone().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->widthofdecreasinglinekeystone().data(), static_cast<int>(this->widthofdecreasinglinekeystone().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "VeriBlock.RewardCurveConfig.widthOfDecreasingLineKeystone");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->widthofdecreasinglinekeystone(), output);
  }

  // string aboveIntendedPayoutMultiplierNormal = 4;
  if (this->aboveintendedpayoutmultipliernormal().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->aboveintendedpayoutmultipliernormal().data(), static_cast<int>(this->aboveintendedpayoutmultipliernormal().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "VeriBlock.RewardCurveConfig.aboveIntendedPayoutMultiplierNormal");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->aboveintendedpayoutmultipliernormal(), output);
  }

  // string aboveIntendedPayoutMultiplierKeystone = 5;
  if (this->aboveintendedpayoutmultiplierkeystone().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->aboveintendedpayoutmultiplierkeystone().data(), static_cast<int>(this->aboveintendedpayoutmultiplierkeystone().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "VeriBlock.RewardCurveConfig.aboveIntendedPayoutMultiplierKeystone");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->aboveintendedpayoutmultiplierkeystone(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:VeriBlock.RewardCurveConfig)
}

::PROTOBUF_NAMESPACE_ID::uint8* RewardCurveConfig::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:VeriBlock.RewardCurveConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string startOfDecreasingLine = 1;
  if (this->startofdecreasingline().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->startofdecreasingline().data(), static_cast<int>(this->startofdecreasingline().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "VeriBlock.RewardCurveConfig.startOfDecreasingLine");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->startofdecreasingline(), target);
  }

  // string widthOfDecreasingLineNormal = 2;
  if (this->widthofdecreasinglinenormal().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->widthofdecreasinglinenormal().data(), static_cast<int>(this->widthofdecreasinglinenormal().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "VeriBlock.RewardCurveConfig.widthOfDecreasingLineNormal");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->widthofdecreasinglinenormal(), target);
  }

  // string widthOfDecreasingLineKeystone = 3;
  if (this->widthofdecreasinglinekeystone().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->widthofdecreasinglinekeystone().data(), static_cast<int>(this->widthofdecreasinglinekeystone().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "VeriBlock.RewardCurveConfig.widthOfDecreasingLineKeystone");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        3, this->widthofdecreasinglinekeystone(), target);
  }

  // string aboveIntendedPayoutMultiplierNormal = 4;
  if (this->aboveintendedpayoutmultipliernormal().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->aboveintendedpayoutmultipliernormal().data(), static_cast<int>(this->aboveintendedpayoutmultipliernormal().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "VeriBlock.RewardCurveConfig.aboveIntendedPayoutMultiplierNormal");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        4, this->aboveintendedpayoutmultipliernormal(), target);
  }

  // string aboveIntendedPayoutMultiplierKeystone = 5;
  if (this->aboveintendedpayoutmultiplierkeystone().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->aboveintendedpayoutmultiplierkeystone().data(), static_cast<int>(this->aboveintendedpayoutmultiplierkeystone().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "VeriBlock.RewardCurveConfig.aboveIntendedPayoutMultiplierKeystone");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        5, this->aboveintendedpayoutmultiplierkeystone(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:VeriBlock.RewardCurveConfig)
  return target;
}

size_t RewardCurveConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:VeriBlock.RewardCurveConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string startOfDecreasingLine = 1;
  if (this->startofdecreasingline().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->startofdecreasingline());
  }

  // string widthOfDecreasingLineNormal = 2;
  if (this->widthofdecreasinglinenormal().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->widthofdecreasinglinenormal());
  }

  // string widthOfDecreasingLineKeystone = 3;
  if (this->widthofdecreasinglinekeystone().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->widthofdecreasinglinekeystone());
  }

  // string aboveIntendedPayoutMultiplierNormal = 4;
  if (this->aboveintendedpayoutmultipliernormal().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->aboveintendedpayoutmultipliernormal());
  }

  // string aboveIntendedPayoutMultiplierKeystone = 5;
  if (this->aboveintendedpayoutmultiplierkeystone().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->aboveintendedpayoutmultiplierkeystone());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RewardCurveConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:VeriBlock.RewardCurveConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const RewardCurveConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RewardCurveConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:VeriBlock.RewardCurveConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:VeriBlock.RewardCurveConfig)
    MergeFrom(*source);
  }
}

void RewardCurveConfig::MergeFrom(const RewardCurveConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:VeriBlock.RewardCurveConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.startofdecreasingline().size() > 0) {

    startofdecreasingline_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.startofdecreasingline_);
  }
  if (from.widthofdecreasinglinenormal().size() > 0) {

    widthofdecreasinglinenormal_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.widthofdecreasinglinenormal_);
  }
  if (from.widthofdecreasinglinekeystone().size() > 0) {

    widthofdecreasinglinekeystone_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.widthofdecreasinglinekeystone_);
  }
  if (from.aboveintendedpayoutmultipliernormal().size() > 0) {

    aboveintendedpayoutmultipliernormal_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.aboveintendedpayoutmultipliernormal_);
  }
  if (from.aboveintendedpayoutmultiplierkeystone().size() > 0) {

    aboveintendedpayoutmultiplierkeystone_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.aboveintendedpayoutmultiplierkeystone_);
  }
}

void RewardCurveConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:VeriBlock.RewardCurveConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RewardCurveConfig::CopyFrom(const RewardCurveConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:VeriBlock.RewardCurveConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RewardCurveConfig::IsInitialized() const {
  return true;
}

void RewardCurveConfig::InternalSwap(RewardCurveConfig* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  startofdecreasingline_.Swap(&other->startofdecreasingline_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  widthofdecreasinglinenormal_.Swap(&other->widthofdecreasinglinenormal_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  widthofdecreasinglinekeystone_.Swap(&other->widthofdecreasinglinekeystone_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  aboveintendedpayoutmultipliernormal_.Swap(&other->aboveintendedpayoutmultipliernormal_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  aboveintendedpayoutmultiplierkeystone_.Swap(&other->aboveintendedpayoutmultiplierkeystone_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata RewardCurveConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RelativeScoreConfig::InitAsDefaultInstance() {
}
class RelativeScoreConfig::_Internal {
 public:
};

RelativeScoreConfig::RelativeScoreConfig()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:VeriBlock.RelativeScoreConfig)
}
RelativeScoreConfig::RelativeScoreConfig(const RelativeScoreConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      score_(from.score_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:VeriBlock.RelativeScoreConfig)
}

void RelativeScoreConfig::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RelativeScoreConfig_integration_2eproto.base);
}

RelativeScoreConfig::~RelativeScoreConfig() {
  // @@protoc_insertion_point(destructor:VeriBlock.RelativeScoreConfig)
  SharedDtor();
}

void RelativeScoreConfig::SharedDtor() {
}

void RelativeScoreConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RelativeScoreConfig& RelativeScoreConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RelativeScoreConfig_integration_2eproto.base);
  return *internal_default_instance();
}


void RelativeScoreConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:VeriBlock.RelativeScoreConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  score_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RelativeScoreConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string score = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(add_score(), ptr, ctx, "VeriBlock.RelativeScoreConfig.score");
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RelativeScoreConfig::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:VeriBlock.RelativeScoreConfig)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string score = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->add_score()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->score(this->score_size() - 1).data(),
            static_cast<int>(this->score(this->score_size() - 1).length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "VeriBlock.RelativeScoreConfig.score"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:VeriBlock.RelativeScoreConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:VeriBlock.RelativeScoreConfig)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RelativeScoreConfig::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:VeriBlock.RelativeScoreConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string score = 1;
  for (int i = 0, n = this->score_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->score(i).data(), static_cast<int>(this->score(i).length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "VeriBlock.RelativeScoreConfig.score");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteString(
      1, this->score(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:VeriBlock.RelativeScoreConfig)
}

::PROTOBUF_NAMESPACE_ID::uint8* RelativeScoreConfig::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:VeriBlock.RelativeScoreConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string score = 1;
  for (int i = 0, n = this->score_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->score(i).data(), static_cast<int>(this->score(i).length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "VeriBlock.RelativeScoreConfig.score");
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteStringToArray(1, this->score(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:VeriBlock.RelativeScoreConfig)
  return target;
}

size_t RelativeScoreConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:VeriBlock.RelativeScoreConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string score = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->score_size());
  for (int i = 0, n = this->score_size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      this->score(i));
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RelativeScoreConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:VeriBlock.RelativeScoreConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const RelativeScoreConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RelativeScoreConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:VeriBlock.RelativeScoreConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:VeriBlock.RelativeScoreConfig)
    MergeFrom(*source);
  }
}

void RelativeScoreConfig::MergeFrom(const RelativeScoreConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:VeriBlock.RelativeScoreConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  score_.MergeFrom(from.score_);
}

void RelativeScoreConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:VeriBlock.RelativeScoreConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RelativeScoreConfig::CopyFrom(const RelativeScoreConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:VeriBlock.RelativeScoreConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RelativeScoreConfig::IsInitialized() const {
  return true;
}

void RelativeScoreConfig::InternalSwap(RelativeScoreConfig* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  score_.InternalSwap(CastToBase(&other->score_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RelativeScoreConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FlatScoreRoundConfig::InitAsDefaultInstance() {
}
class FlatScoreRoundConfig::_Internal {
 public:
};

FlatScoreRoundConfig::FlatScoreRoundConfig()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:VeriBlock.FlatScoreRoundConfig)
}
FlatScoreRoundConfig::FlatScoreRoundConfig(const FlatScoreRoundConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&round_, &from.round_,
    static_cast<size_t>(reinterpret_cast<char*>(&active_) -
    reinterpret_cast<char*>(&round_)) + sizeof(active_));
  // @@protoc_insertion_point(copy_constructor:VeriBlock.FlatScoreRoundConfig)
}

void FlatScoreRoundConfig::SharedCtor() {
  ::memset(&round_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&active_) -
      reinterpret_cast<char*>(&round_)) + sizeof(active_));
}

FlatScoreRoundConfig::~FlatScoreRoundConfig() {
  // @@protoc_insertion_point(destructor:VeriBlock.FlatScoreRoundConfig)
  SharedDtor();
}

void FlatScoreRoundConfig::SharedDtor() {
}

void FlatScoreRoundConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FlatScoreRoundConfig& FlatScoreRoundConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FlatScoreRoundConfig_integration_2eproto.base);
  return *internal_default_instance();
}


void FlatScoreRoundConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:VeriBlock.FlatScoreRoundConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&round_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&active_) -
      reinterpret_cast<char*>(&round_)) + sizeof(active_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* FlatScoreRoundConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 round = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          round_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool active = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          active_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool FlatScoreRoundConfig::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:VeriBlock.FlatScoreRoundConfig)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 round = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &round_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool active = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &active_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:VeriBlock.FlatScoreRoundConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:VeriBlock.FlatScoreRoundConfig)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void FlatScoreRoundConfig::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:VeriBlock.FlatScoreRoundConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 round = 1;
  if (this->round() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->round(), output);
  }

  // bool active = 2;
  if (this->active() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(2, this->active(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:VeriBlock.FlatScoreRoundConfig)
}

::PROTOBUF_NAMESPACE_ID::uint8* FlatScoreRoundConfig::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:VeriBlock.FlatScoreRoundConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 round = 1;
  if (this->round() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->round(), target);
  }

  // bool active = 2;
  if (this->active() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->active(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:VeriBlock.FlatScoreRoundConfig)
  return target;
}

size_t FlatScoreRoundConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:VeriBlock.FlatScoreRoundConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 round = 1;
  if (this->round() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->round());
  }

  // bool active = 2;
  if (this->active() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FlatScoreRoundConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:VeriBlock.FlatScoreRoundConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const FlatScoreRoundConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FlatScoreRoundConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:VeriBlock.FlatScoreRoundConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:VeriBlock.FlatScoreRoundConfig)
    MergeFrom(*source);
  }
}

void FlatScoreRoundConfig::MergeFrom(const FlatScoreRoundConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:VeriBlock.FlatScoreRoundConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.round() != 0) {
    set_round(from.round());
  }
  if (from.active() != 0) {
    set_active(from.active());
  }
}

void FlatScoreRoundConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:VeriBlock.FlatScoreRoundConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FlatScoreRoundConfig::CopyFrom(const FlatScoreRoundConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:VeriBlock.FlatScoreRoundConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FlatScoreRoundConfig::IsInitialized() const {
  return true;
}

void FlatScoreRoundConfig::InternalSwap(FlatScoreRoundConfig* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(round_, other->round_);
  swap(active_, other->active_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FlatScoreRoundConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CalculatorConfig::InitAsDefaultInstance() {
  ::VeriBlock::_CalculatorConfig_default_instance_._instance.get_mutable()->roundratios_ = const_cast< ::VeriBlock::RoundRatioConfig*>(
      ::VeriBlock::RoundRatioConfig::internal_default_instance());
  ::VeriBlock::_CalculatorConfig_default_instance_._instance.get_mutable()->rewardcurve_ = const_cast< ::VeriBlock::RewardCurveConfig*>(
      ::VeriBlock::RewardCurveConfig::internal_default_instance());
  ::VeriBlock::_CalculatorConfig_default_instance_._instance.get_mutable()->relativescorelookuptable_ = const_cast< ::VeriBlock::RelativeScoreConfig*>(
      ::VeriBlock::RelativeScoreConfig::internal_default_instance());
  ::VeriBlock::_CalculatorConfig_default_instance_._instance.get_mutable()->flatscoreround_ = const_cast< ::VeriBlock::FlatScoreRoundConfig*>(
      ::VeriBlock::FlatScoreRoundConfig::internal_default_instance());
}
class CalculatorConfig::_Internal {
 public:
  static const ::VeriBlock::RoundRatioConfig& roundratios(const CalculatorConfig* msg);
  static const ::VeriBlock::RewardCurveConfig& rewardcurve(const CalculatorConfig* msg);
  static const ::VeriBlock::RelativeScoreConfig& relativescorelookuptable(const CalculatorConfig* msg);
  static const ::VeriBlock::FlatScoreRoundConfig& flatscoreround(const CalculatorConfig* msg);
};

const ::VeriBlock::RoundRatioConfig&
CalculatorConfig::_Internal::roundratios(const CalculatorConfig* msg) {
  return *msg->roundratios_;
}
const ::VeriBlock::RewardCurveConfig&
CalculatorConfig::_Internal::rewardcurve(const CalculatorConfig* msg) {
  return *msg->rewardcurve_;
}
const ::VeriBlock::RelativeScoreConfig&
CalculatorConfig::_Internal::relativescorelookuptable(const CalculatorConfig* msg) {
  return *msg->relativescorelookuptable_;
}
const ::VeriBlock::FlatScoreRoundConfig&
CalculatorConfig::_Internal::flatscoreround(const CalculatorConfig* msg) {
  return *msg->flatscoreround_;
}
CalculatorConfig::CalculatorConfig()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:VeriBlock.CalculatorConfig)
}
CalculatorConfig::CalculatorConfig(const CalculatorConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  basicreward_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.basicreward().empty()) {
    basicreward_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.basicreward_);
  }
  maxrewardthresholdnormal_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.maxrewardthresholdnormal().empty()) {
    maxrewardthresholdnormal_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.maxrewardthresholdnormal_);
  }
  maxrewardthresholdkeystone_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.maxrewardthresholdkeystone().empty()) {
    maxrewardthresholdkeystone_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.maxrewardthresholdkeystone_);
  }
  if (from.has_roundratios()) {
    roundratios_ = new ::VeriBlock::RoundRatioConfig(*from.roundratios_);
  } else {
    roundratios_ = nullptr;
  }
  if (from.has_rewardcurve()) {
    rewardcurve_ = new ::VeriBlock::RewardCurveConfig(*from.rewardcurve_);
  } else {
    rewardcurve_ = nullptr;
  }
  if (from.has_relativescorelookuptable()) {
    relativescorelookuptable_ = new ::VeriBlock::RelativeScoreConfig(*from.relativescorelookuptable_);
  } else {
    relativescorelookuptable_ = nullptr;
  }
  if (from.has_flatscoreround()) {
    flatscoreround_ = new ::VeriBlock::FlatScoreRoundConfig(*from.flatscoreround_);
  } else {
    flatscoreround_ = nullptr;
  }
  ::memcpy(&payoutrounds_, &from.payoutrounds_,
    static_cast<size_t>(reinterpret_cast<char*>(&keystoneround_) -
    reinterpret_cast<char*>(&payoutrounds_)) + sizeof(keystoneround_));
  // @@protoc_insertion_point(copy_constructor:VeriBlock.CalculatorConfig)
}

void CalculatorConfig::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CalculatorConfig_integration_2eproto.base);
  basicreward_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  maxrewardthresholdnormal_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  maxrewardthresholdkeystone_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&roundratios_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&keystoneround_) -
      reinterpret_cast<char*>(&roundratios_)) + sizeof(keystoneround_));
}

CalculatorConfig::~CalculatorConfig() {
  // @@protoc_insertion_point(destructor:VeriBlock.CalculatorConfig)
  SharedDtor();
}

void CalculatorConfig::SharedDtor() {
  basicreward_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  maxrewardthresholdnormal_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  maxrewardthresholdkeystone_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete roundratios_;
  if (this != internal_default_instance()) delete rewardcurve_;
  if (this != internal_default_instance()) delete relativescorelookuptable_;
  if (this != internal_default_instance()) delete flatscoreround_;
}

void CalculatorConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CalculatorConfig& CalculatorConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CalculatorConfig_integration_2eproto.base);
  return *internal_default_instance();
}


void CalculatorConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:VeriBlock.CalculatorConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  basicreward_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  maxrewardthresholdnormal_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  maxrewardthresholdkeystone_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && roundratios_ != nullptr) {
    delete roundratios_;
  }
  roundratios_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && rewardcurve_ != nullptr) {
    delete rewardcurve_;
  }
  rewardcurve_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && relativescorelookuptable_ != nullptr) {
    delete relativescorelookuptable_;
  }
  relativescorelookuptable_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && flatscoreround_ != nullptr) {
    delete flatscoreround_;
  }
  flatscoreround_ = nullptr;
  ::memset(&payoutrounds_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&keystoneround_) -
      reinterpret_cast<char*>(&payoutrounds_)) + sizeof(keystoneround_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CalculatorConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string basicReward = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_basicreward(), ptr, ctx, "VeriBlock.CalculatorConfig.basicReward");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 payoutRounds = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          payoutrounds_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 keystoneRound = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          keystoneround_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .VeriBlock.RoundRatioConfig roundRatios = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(mutable_roundratios(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .VeriBlock.RewardCurveConfig rewardCurve = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(mutable_rewardcurve(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string maxRewardThresholdNormal = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_maxrewardthresholdnormal(), ptr, ctx, "VeriBlock.CalculatorConfig.maxRewardThresholdNormal");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string maxRewardThresholdKeystone = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_maxrewardthresholdkeystone(), ptr, ctx, "VeriBlock.CalculatorConfig.maxRewardThresholdKeystone");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .VeriBlock.RelativeScoreConfig relativeScoreLookupTable = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(mutable_relativescorelookuptable(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .VeriBlock.FlatScoreRoundConfig flatScoreRound = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(mutable_flatscoreround(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CalculatorConfig::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:VeriBlock.CalculatorConfig)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string basicReward = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_basicreward()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->basicreward().data(), static_cast<int>(this->basicreward().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "VeriBlock.CalculatorConfig.basicReward"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 payoutRounds = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &payoutrounds_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 keystoneRound = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &keystoneround_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .VeriBlock.RoundRatioConfig roundRatios = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_roundratios()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .VeriBlock.RewardCurveConfig rewardCurve = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_rewardcurve()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string maxRewardThresholdNormal = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_maxrewardthresholdnormal()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->maxrewardthresholdnormal().data(), static_cast<int>(this->maxrewardthresholdnormal().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "VeriBlock.CalculatorConfig.maxRewardThresholdNormal"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string maxRewardThresholdKeystone = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (66 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_maxrewardthresholdkeystone()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->maxrewardthresholdkeystone().data(), static_cast<int>(this->maxrewardthresholdkeystone().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "VeriBlock.CalculatorConfig.maxRewardThresholdKeystone"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .VeriBlock.RelativeScoreConfig relativeScoreLookupTable = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (74 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_relativescorelookuptable()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .VeriBlock.FlatScoreRoundConfig flatScoreRound = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (82 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_flatscoreround()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:VeriBlock.CalculatorConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:VeriBlock.CalculatorConfig)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CalculatorConfig::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:VeriBlock.CalculatorConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string basicReward = 1;
  if (this->basicreward().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->basicreward().data(), static_cast<int>(this->basicreward().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "VeriBlock.CalculatorConfig.basicReward");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->basicreward(), output);
  }

  // int32 payoutRounds = 2;
  if (this->payoutrounds() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->payoutrounds(), output);
  }

  // int32 keystoneRound = 3;
  if (this->keystoneround() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(3, this->keystoneround(), output);
  }

  // .VeriBlock.RoundRatioConfig roundRatios = 5;
  if (this->has_roundratios()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, _Internal::roundratios(this), output);
  }

  // .VeriBlock.RewardCurveConfig rewardCurve = 6;
  if (this->has_rewardcurve()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, _Internal::rewardcurve(this), output);
  }

  // string maxRewardThresholdNormal = 7;
  if (this->maxrewardthresholdnormal().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->maxrewardthresholdnormal().data(), static_cast<int>(this->maxrewardthresholdnormal().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "VeriBlock.CalculatorConfig.maxRewardThresholdNormal");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->maxrewardthresholdnormal(), output);
  }

  // string maxRewardThresholdKeystone = 8;
  if (this->maxrewardthresholdkeystone().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->maxrewardthresholdkeystone().data(), static_cast<int>(this->maxrewardthresholdkeystone().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "VeriBlock.CalculatorConfig.maxRewardThresholdKeystone");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->maxrewardthresholdkeystone(), output);
  }

  // .VeriBlock.RelativeScoreConfig relativeScoreLookupTable = 9;
  if (this->has_relativescorelookuptable()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, _Internal::relativescorelookuptable(this), output);
  }

  // .VeriBlock.FlatScoreRoundConfig flatScoreRound = 10;
  if (this->has_flatscoreround()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, _Internal::flatscoreround(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:VeriBlock.CalculatorConfig)
}

::PROTOBUF_NAMESPACE_ID::uint8* CalculatorConfig::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:VeriBlock.CalculatorConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string basicReward = 1;
  if (this->basicreward().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->basicreward().data(), static_cast<int>(this->basicreward().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "VeriBlock.CalculatorConfig.basicReward");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->basicreward(), target);
  }

  // int32 payoutRounds = 2;
  if (this->payoutrounds() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->payoutrounds(), target);
  }

  // int32 keystoneRound = 3;
  if (this->keystoneround() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->keystoneround(), target);
  }

  // .VeriBlock.RoundRatioConfig roundRatios = 5;
  if (this->has_roundratios()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, _Internal::roundratios(this), target);
  }

  // .VeriBlock.RewardCurveConfig rewardCurve = 6;
  if (this->has_rewardcurve()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, _Internal::rewardcurve(this), target);
  }

  // string maxRewardThresholdNormal = 7;
  if (this->maxrewardthresholdnormal().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->maxrewardthresholdnormal().data(), static_cast<int>(this->maxrewardthresholdnormal().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "VeriBlock.CalculatorConfig.maxRewardThresholdNormal");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        7, this->maxrewardthresholdnormal(), target);
  }

  // string maxRewardThresholdKeystone = 8;
  if (this->maxrewardthresholdkeystone().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->maxrewardthresholdkeystone().data(), static_cast<int>(this->maxrewardthresholdkeystone().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "VeriBlock.CalculatorConfig.maxRewardThresholdKeystone");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        8, this->maxrewardthresholdkeystone(), target);
  }

  // .VeriBlock.RelativeScoreConfig relativeScoreLookupTable = 9;
  if (this->has_relativescorelookuptable()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, _Internal::relativescorelookuptable(this), target);
  }

  // .VeriBlock.FlatScoreRoundConfig flatScoreRound = 10;
  if (this->has_flatscoreround()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, _Internal::flatscoreround(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:VeriBlock.CalculatorConfig)
  return target;
}

size_t CalculatorConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:VeriBlock.CalculatorConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string basicReward = 1;
  if (this->basicreward().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->basicreward());
  }

  // string maxRewardThresholdNormal = 7;
  if (this->maxrewardthresholdnormal().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->maxrewardthresholdnormal());
  }

  // string maxRewardThresholdKeystone = 8;
  if (this->maxrewardthresholdkeystone().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->maxrewardthresholdkeystone());
  }

  // .VeriBlock.RoundRatioConfig roundRatios = 5;
  if (this->has_roundratios()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *roundratios_);
  }

  // .VeriBlock.RewardCurveConfig rewardCurve = 6;
  if (this->has_rewardcurve()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *rewardcurve_);
  }

  // .VeriBlock.RelativeScoreConfig relativeScoreLookupTable = 9;
  if (this->has_relativescorelookuptable()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *relativescorelookuptable_);
  }

  // .VeriBlock.FlatScoreRoundConfig flatScoreRound = 10;
  if (this->has_flatscoreround()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *flatscoreround_);
  }

  // int32 payoutRounds = 2;
  if (this->payoutrounds() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->payoutrounds());
  }

  // int32 keystoneRound = 3;
  if (this->keystoneround() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->keystoneround());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CalculatorConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:VeriBlock.CalculatorConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const CalculatorConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CalculatorConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:VeriBlock.CalculatorConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:VeriBlock.CalculatorConfig)
    MergeFrom(*source);
  }
}

void CalculatorConfig::MergeFrom(const CalculatorConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:VeriBlock.CalculatorConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.basicreward().size() > 0) {

    basicreward_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.basicreward_);
  }
  if (from.maxrewardthresholdnormal().size() > 0) {

    maxrewardthresholdnormal_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.maxrewardthresholdnormal_);
  }
  if (from.maxrewardthresholdkeystone().size() > 0) {

    maxrewardthresholdkeystone_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.maxrewardthresholdkeystone_);
  }
  if (from.has_roundratios()) {
    mutable_roundratios()->::VeriBlock::RoundRatioConfig::MergeFrom(from.roundratios());
  }
  if (from.has_rewardcurve()) {
    mutable_rewardcurve()->::VeriBlock::RewardCurveConfig::MergeFrom(from.rewardcurve());
  }
  if (from.has_relativescorelookuptable()) {
    mutable_relativescorelookuptable()->::VeriBlock::RelativeScoreConfig::MergeFrom(from.relativescorelookuptable());
  }
  if (from.has_flatscoreround()) {
    mutable_flatscoreround()->::VeriBlock::FlatScoreRoundConfig::MergeFrom(from.flatscoreround());
  }
  if (from.payoutrounds() != 0) {
    set_payoutrounds(from.payoutrounds());
  }
  if (from.keystoneround() != 0) {
    set_keystoneround(from.keystoneround());
  }
}

void CalculatorConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:VeriBlock.CalculatorConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CalculatorConfig::CopyFrom(const CalculatorConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:VeriBlock.CalculatorConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CalculatorConfig::IsInitialized() const {
  return true;
}

void CalculatorConfig::InternalSwap(CalculatorConfig* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  basicreward_.Swap(&other->basicreward_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  maxrewardthresholdnormal_.Swap(&other->maxrewardthresholdnormal_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  maxrewardthresholdkeystone_.Swap(&other->maxrewardthresholdkeystone_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(roundratios_, other->roundratios_);
  swap(rewardcurve_, other->rewardcurve_);
  swap(relativescorelookuptable_, other->relativescorelookuptable_);
  swap(flatscoreround_, other->flatscoreround_);
  swap(payoutrounds_, other->payoutrounds_);
  swap(keystoneround_, other->keystoneround_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CalculatorConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SetCalculatorRequest::InitAsDefaultInstance() {
  ::VeriBlock::_SetCalculatorRequest_default_instance_._instance.get_mutable()->calculator_ = const_cast< ::VeriBlock::CalculatorConfig*>(
      ::VeriBlock::CalculatorConfig::internal_default_instance());
}
class SetCalculatorRequest::_Internal {
 public:
  static const ::VeriBlock::CalculatorConfig& calculator(const SetCalculatorRequest* msg);
};

const ::VeriBlock::CalculatorConfig&
SetCalculatorRequest::_Internal::calculator(const SetCalculatorRequest* msg) {
  return *msg->calculator_;
}
SetCalculatorRequest::SetCalculatorRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:VeriBlock.SetCalculatorRequest)
}
SetCalculatorRequest::SetCalculatorRequest(const SetCalculatorRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_calculator()) {
    calculator_ = new ::VeriBlock::CalculatorConfig(*from.calculator_);
  } else {
    calculator_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:VeriBlock.SetCalculatorRequest)
}

void SetCalculatorRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SetCalculatorRequest_integration_2eproto.base);
  calculator_ = nullptr;
}

SetCalculatorRequest::~SetCalculatorRequest() {
  // @@protoc_insertion_point(destructor:VeriBlock.SetCalculatorRequest)
  SharedDtor();
}

void SetCalculatorRequest::SharedDtor() {
  if (this != internal_default_instance()) delete calculator_;
}

void SetCalculatorRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SetCalculatorRequest& SetCalculatorRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SetCalculatorRequest_integration_2eproto.base);
  return *internal_default_instance();
}


void SetCalculatorRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:VeriBlock.SetCalculatorRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && calculator_ != nullptr) {
    delete calculator_;
  }
  calculator_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SetCalculatorRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .VeriBlock.CalculatorConfig calculator = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_calculator(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SetCalculatorRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:VeriBlock.SetCalculatorRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .VeriBlock.CalculatorConfig calculator = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_calculator()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:VeriBlock.SetCalculatorRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:VeriBlock.SetCalculatorRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SetCalculatorRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:VeriBlock.SetCalculatorRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .VeriBlock.CalculatorConfig calculator = 1;
  if (this->has_calculator()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::calculator(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:VeriBlock.SetCalculatorRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* SetCalculatorRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:VeriBlock.SetCalculatorRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .VeriBlock.CalculatorConfig calculator = 1;
  if (this->has_calculator()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::calculator(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:VeriBlock.SetCalculatorRequest)
  return target;
}

size_t SetCalculatorRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:VeriBlock.SetCalculatorRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .VeriBlock.CalculatorConfig calculator = 1;
  if (this->has_calculator()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *calculator_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetCalculatorRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:VeriBlock.SetCalculatorRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SetCalculatorRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SetCalculatorRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:VeriBlock.SetCalculatorRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:VeriBlock.SetCalculatorRequest)
    MergeFrom(*source);
  }
}

void SetCalculatorRequest::MergeFrom(const SetCalculatorRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:VeriBlock.SetCalculatorRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_calculator()) {
    mutable_calculator()->::VeriBlock::CalculatorConfig::MergeFrom(from.calculator());
  }
}

void SetCalculatorRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:VeriBlock.SetCalculatorRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetCalculatorRequest::CopyFrom(const SetCalculatorRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:VeriBlock.SetCalculatorRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetCalculatorRequest::IsInitialized() const {
  return true;
}

void SetCalculatorRequest::InternalSwap(SetCalculatorRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(calculator_, other->calculator_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetCalculatorRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetCalculatorReply::InitAsDefaultInstance() {
  ::VeriBlock::_GetCalculatorReply_default_instance_._instance.get_mutable()->result_ = const_cast< ::VeriBlock::GeneralReply*>(
      ::VeriBlock::GeneralReply::internal_default_instance());
  ::VeriBlock::_GetCalculatorReply_default_instance_._instance.get_mutable()->calculator_ = const_cast< ::VeriBlock::CalculatorConfig*>(
      ::VeriBlock::CalculatorConfig::internal_default_instance());
}
class GetCalculatorReply::_Internal {
 public:
  static const ::VeriBlock::GeneralReply& result(const GetCalculatorReply* msg);
  static const ::VeriBlock::CalculatorConfig& calculator(const GetCalculatorReply* msg);
};

const ::VeriBlock::GeneralReply&
GetCalculatorReply::_Internal::result(const GetCalculatorReply* msg) {
  return *msg->result_;
}
const ::VeriBlock::CalculatorConfig&
GetCalculatorReply::_Internal::calculator(const GetCalculatorReply* msg) {
  return *msg->calculator_;
}
GetCalculatorReply::GetCalculatorReply()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:VeriBlock.GetCalculatorReply)
}
GetCalculatorReply::GetCalculatorReply(const GetCalculatorReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_result()) {
    result_ = new ::VeriBlock::GeneralReply(*from.result_);
  } else {
    result_ = nullptr;
  }
  if (from.has_calculator()) {
    calculator_ = new ::VeriBlock::CalculatorConfig(*from.calculator_);
  } else {
    calculator_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:VeriBlock.GetCalculatorReply)
}

void GetCalculatorReply::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetCalculatorReply_integration_2eproto.base);
  ::memset(&result_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&calculator_) -
      reinterpret_cast<char*>(&result_)) + sizeof(calculator_));
}

GetCalculatorReply::~GetCalculatorReply() {
  // @@protoc_insertion_point(destructor:VeriBlock.GetCalculatorReply)
  SharedDtor();
}

void GetCalculatorReply::SharedDtor() {
  if (this != internal_default_instance()) delete result_;
  if (this != internal_default_instance()) delete calculator_;
}

void GetCalculatorReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetCalculatorReply& GetCalculatorReply::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetCalculatorReply_integration_2eproto.base);
  return *internal_default_instance();
}


void GetCalculatorReply::Clear() {
// @@protoc_insertion_point(message_clear_start:VeriBlock.GetCalculatorReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && calculator_ != nullptr) {
    delete calculator_;
  }
  calculator_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GetCalculatorReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .VeriBlock.GeneralReply result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_result(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .VeriBlock.CalculatorConfig calculator = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_calculator(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GetCalculatorReply::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:VeriBlock.GetCalculatorReply)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .VeriBlock.GeneralReply result = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_result()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .VeriBlock.CalculatorConfig calculator = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_calculator()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:VeriBlock.GetCalculatorReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:VeriBlock.GetCalculatorReply)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GetCalculatorReply::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:VeriBlock.GetCalculatorReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .VeriBlock.GeneralReply result = 1;
  if (this->has_result()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::result(this), output);
  }

  // .VeriBlock.CalculatorConfig calculator = 2;
  if (this->has_calculator()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, _Internal::calculator(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:VeriBlock.GetCalculatorReply)
}

::PROTOBUF_NAMESPACE_ID::uint8* GetCalculatorReply::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:VeriBlock.GetCalculatorReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .VeriBlock.GeneralReply result = 1;
  if (this->has_result()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::result(this), target);
  }

  // .VeriBlock.CalculatorConfig calculator = 2;
  if (this->has_calculator()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::calculator(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:VeriBlock.GetCalculatorReply)
  return target;
}

size_t GetCalculatorReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:VeriBlock.GetCalculatorReply)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .VeriBlock.GeneralReply result = 1;
  if (this->has_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *result_);
  }

  // .VeriBlock.CalculatorConfig calculator = 2;
  if (this->has_calculator()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *calculator_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetCalculatorReply::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:VeriBlock.GetCalculatorReply)
  GOOGLE_DCHECK_NE(&from, this);
  const GetCalculatorReply* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetCalculatorReply>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:VeriBlock.GetCalculatorReply)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:VeriBlock.GetCalculatorReply)
    MergeFrom(*source);
  }
}

void GetCalculatorReply::MergeFrom(const GetCalculatorReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:VeriBlock.GetCalculatorReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_result()) {
    mutable_result()->::VeriBlock::GeneralReply::MergeFrom(from.result());
  }
  if (from.has_calculator()) {
    mutable_calculator()->::VeriBlock::CalculatorConfig::MergeFrom(from.calculator());
  }
}

void GetCalculatorReply::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:VeriBlock.GetCalculatorReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetCalculatorReply::CopyFrom(const GetCalculatorReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:VeriBlock.GetCalculatorReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetCalculatorReply::IsInitialized() const {
  return true;
}

void GetCalculatorReply::InternalSwap(GetCalculatorReply* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(result_, other->result_);
  swap(calculator_, other->calculator_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetCalculatorReply::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RewardOutput::InitAsDefaultInstance() {
}
class RewardOutput::_Internal {
 public:
};

RewardOutput::RewardOutput()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:VeriBlock.RewardOutput)
}
RewardOutput::RewardOutput(const RewardOutput& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.address().empty()) {
    address_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.address_);
  }
  reward_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.reward().empty()) {
    reward_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.reward_);
  }
  // @@protoc_insertion_point(copy_constructor:VeriBlock.RewardOutput)
}

void RewardOutput::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RewardOutput_integration_2eproto.base);
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  reward_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

RewardOutput::~RewardOutput() {
  // @@protoc_insertion_point(destructor:VeriBlock.RewardOutput)
  SharedDtor();
}

void RewardOutput::SharedDtor() {
  address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  reward_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RewardOutput::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RewardOutput& RewardOutput::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RewardOutput_integration_2eproto.base);
  return *internal_default_instance();
}


void RewardOutput::Clear() {
// @@protoc_insertion_point(message_clear_start:VeriBlock.RewardOutput)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  address_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  reward_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RewardOutput::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_address(), ptr, ctx, "VeriBlock.RewardOutput.address");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string reward = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_reward(), ptr, ctx, "VeriBlock.RewardOutput.reward");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RewardOutput::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:VeriBlock.RewardOutput)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string address = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_address()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->address().data(), static_cast<int>(this->address().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "VeriBlock.RewardOutput.address"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string reward = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_reward()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->reward().data(), static_cast<int>(this->reward().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "VeriBlock.RewardOutput.reward"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:VeriBlock.RewardOutput)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:VeriBlock.RewardOutput)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RewardOutput::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:VeriBlock.RewardOutput)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string address = 1;
  if (this->address().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->address().data(), static_cast<int>(this->address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "VeriBlock.RewardOutput.address");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->address(), output);
  }

  // string reward = 2;
  if (this->reward().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->reward().data(), static_cast<int>(this->reward().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "VeriBlock.RewardOutput.reward");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->reward(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:VeriBlock.RewardOutput)
}

::PROTOBUF_NAMESPACE_ID::uint8* RewardOutput::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:VeriBlock.RewardOutput)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string address = 1;
  if (this->address().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->address().data(), static_cast<int>(this->address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "VeriBlock.RewardOutput.address");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->address(), target);
  }

  // string reward = 2;
  if (this->reward().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->reward().data(), static_cast<int>(this->reward().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "VeriBlock.RewardOutput.reward");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->reward(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:VeriBlock.RewardOutput)
  return target;
}

size_t RewardOutput::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:VeriBlock.RewardOutput)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string address = 1;
  if (this->address().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->address());
  }

  // string reward = 2;
  if (this->reward().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->reward());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RewardOutput::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:VeriBlock.RewardOutput)
  GOOGLE_DCHECK_NE(&from, this);
  const RewardOutput* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RewardOutput>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:VeriBlock.RewardOutput)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:VeriBlock.RewardOutput)
    MergeFrom(*source);
  }
}

void RewardOutput::MergeFrom(const RewardOutput& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:VeriBlock.RewardOutput)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.address().size() > 0) {

    address_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.address_);
  }
  if (from.reward().size() > 0) {

    reward_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.reward_);
  }
}

void RewardOutput::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:VeriBlock.RewardOutput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RewardOutput::CopyFrom(const RewardOutput& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:VeriBlock.RewardOutput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RewardOutput::IsInitialized() const {
  return true;
}

void RewardOutput::InternalSwap(RewardOutput* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  address_.Swap(&other->address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  reward_.Swap(&other->reward_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata RewardOutput::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PopEndorsement::InitAsDefaultInstance() {
}
class PopEndorsement::_Internal {
 public:
};

PopEndorsement::PopEndorsement()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:VeriBlock.PopEndorsement)
}
PopEndorsement::PopEndorsement(const PopEndorsement& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.address().empty()) {
    address_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.address_);
  }
  txid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.txid().empty()) {
    txid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.txid_);
  }
  // @@protoc_insertion_point(copy_constructor:VeriBlock.PopEndorsement)
}

void PopEndorsement::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PopEndorsement_integration_2eproto.base);
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  txid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

PopEndorsement::~PopEndorsement() {
  // @@protoc_insertion_point(destructor:VeriBlock.PopEndorsement)
  SharedDtor();
}

void PopEndorsement::SharedDtor() {
  address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  txid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PopEndorsement::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PopEndorsement& PopEndorsement::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PopEndorsement_integration_2eproto.base);
  return *internal_default_instance();
}


void PopEndorsement::Clear() {
// @@protoc_insertion_point(message_clear_start:VeriBlock.PopEndorsement)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  address_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  txid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PopEndorsement::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_address(), ptr, ctx, "VeriBlock.PopEndorsement.address");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string txid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_txid(), ptr, ctx, "VeriBlock.PopEndorsement.txid");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PopEndorsement::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:VeriBlock.PopEndorsement)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string address = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_address()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->address().data(), static_cast<int>(this->address().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "VeriBlock.PopEndorsement.address"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string txid = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_txid()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->txid().data(), static_cast<int>(this->txid().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "VeriBlock.PopEndorsement.txid"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:VeriBlock.PopEndorsement)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:VeriBlock.PopEndorsement)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PopEndorsement::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:VeriBlock.PopEndorsement)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string address = 1;
  if (this->address().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->address().data(), static_cast<int>(this->address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "VeriBlock.PopEndorsement.address");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->address(), output);
  }

  // string txid = 2;
  if (this->txid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->txid().data(), static_cast<int>(this->txid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "VeriBlock.PopEndorsement.txid");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->txid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:VeriBlock.PopEndorsement)
}

::PROTOBUF_NAMESPACE_ID::uint8* PopEndorsement::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:VeriBlock.PopEndorsement)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string address = 1;
  if (this->address().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->address().data(), static_cast<int>(this->address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "VeriBlock.PopEndorsement.address");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->address(), target);
  }

  // string txid = 2;
  if (this->txid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->txid().data(), static_cast<int>(this->txid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "VeriBlock.PopEndorsement.txid");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->txid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:VeriBlock.PopEndorsement)
  return target;
}

size_t PopEndorsement::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:VeriBlock.PopEndorsement)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string address = 1;
  if (this->address().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->address());
  }

  // string txid = 2;
  if (this->txid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->txid());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PopEndorsement::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:VeriBlock.PopEndorsement)
  GOOGLE_DCHECK_NE(&from, this);
  const PopEndorsement* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PopEndorsement>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:VeriBlock.PopEndorsement)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:VeriBlock.PopEndorsement)
    MergeFrom(*source);
  }
}

void PopEndorsement::MergeFrom(const PopEndorsement& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:VeriBlock.PopEndorsement)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.address().size() > 0) {

    address_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.address_);
  }
  if (from.txid().size() > 0) {

    txid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.txid_);
  }
}

void PopEndorsement::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:VeriBlock.PopEndorsement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PopEndorsement::CopyFrom(const PopEndorsement& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:VeriBlock.PopEndorsement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PopEndorsement::IsInitialized() const {
  return true;
}

void PopEndorsement::InternalSwap(PopEndorsement* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  address_.Swap(&other->address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  txid_.Swap(&other->txid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata PopEndorsement::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RewardEndorsement::InitAsDefaultInstance() {
}
class RewardEndorsement::_Internal {
 public:
};

RewardEndorsement::RewardEndorsement()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:VeriBlock.RewardEndorsement)
}
RewardEndorsement::RewardEndorsement(const RewardEndorsement& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      endorsementsinblock_(from.endorsementsinblock_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  blockvbkheight_ = from.blockvbkheight_;
  // @@protoc_insertion_point(copy_constructor:VeriBlock.RewardEndorsement)
}

void RewardEndorsement::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RewardEndorsement_integration_2eproto.base);
  blockvbkheight_ = 0;
}

RewardEndorsement::~RewardEndorsement() {
  // @@protoc_insertion_point(destructor:VeriBlock.RewardEndorsement)
  SharedDtor();
}

void RewardEndorsement::SharedDtor() {
}

void RewardEndorsement::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RewardEndorsement& RewardEndorsement::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RewardEndorsement_integration_2eproto.base);
  return *internal_default_instance();
}


void RewardEndorsement::Clear() {
// @@protoc_insertion_point(message_clear_start:VeriBlock.RewardEndorsement)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  endorsementsinblock_.Clear();
  blockvbkheight_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RewardEndorsement::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 blockVbkHeight = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          blockvbkheight_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .VeriBlock.PopEndorsement endorsementsInBlock = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_endorsementsinblock(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RewardEndorsement::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:VeriBlock.RewardEndorsement)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 blockVbkHeight = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &blockvbkheight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .VeriBlock.PopEndorsement endorsementsInBlock = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_endorsementsinblock()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:VeriBlock.RewardEndorsement)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:VeriBlock.RewardEndorsement)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RewardEndorsement::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:VeriBlock.RewardEndorsement)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 blockVbkHeight = 1;
  if (this->blockvbkheight() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->blockvbkheight(), output);
  }

  // repeated .VeriBlock.PopEndorsement endorsementsInBlock = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->endorsementsinblock_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->endorsementsinblock(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:VeriBlock.RewardEndorsement)
}

::PROTOBUF_NAMESPACE_ID::uint8* RewardEndorsement::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:VeriBlock.RewardEndorsement)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 blockVbkHeight = 1;
  if (this->blockvbkheight() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->blockvbkheight(), target);
  }

  // repeated .VeriBlock.PopEndorsement endorsementsInBlock = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->endorsementsinblock_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->endorsementsinblock(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:VeriBlock.RewardEndorsement)
  return target;
}

size_t RewardEndorsement::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:VeriBlock.RewardEndorsement)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .VeriBlock.PopEndorsement endorsementsInBlock = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->endorsementsinblock_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->endorsementsinblock(static_cast<int>(i)));
    }
  }

  // int32 blockVbkHeight = 1;
  if (this->blockvbkheight() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->blockvbkheight());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RewardEndorsement::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:VeriBlock.RewardEndorsement)
  GOOGLE_DCHECK_NE(&from, this);
  const RewardEndorsement* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RewardEndorsement>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:VeriBlock.RewardEndorsement)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:VeriBlock.RewardEndorsement)
    MergeFrom(*source);
  }
}

void RewardEndorsement::MergeFrom(const RewardEndorsement& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:VeriBlock.RewardEndorsement)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  endorsementsinblock_.MergeFrom(from.endorsementsinblock_);
  if (from.blockvbkheight() != 0) {
    set_blockvbkheight(from.blockvbkheight());
  }
}

void RewardEndorsement::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:VeriBlock.RewardEndorsement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RewardEndorsement::CopyFrom(const RewardEndorsement& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:VeriBlock.RewardEndorsement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RewardEndorsement::IsInitialized() const {
  return true;
}

void RewardEndorsement::InternalSwap(RewardEndorsement* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&endorsementsinblock_)->InternalSwap(CastToBase(&other->endorsementsinblock_));
  swap(blockvbkheight_, other->blockvbkheight_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RewardEndorsement::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RewardsCalculateScoreRequest::InitAsDefaultInstance() {
}
class RewardsCalculateScoreRequest::_Internal {
 public:
};

RewardsCalculateScoreRequest::RewardsCalculateScoreRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:VeriBlock.RewardsCalculateScoreRequest)
}
RewardsCalculateScoreRequest::RewardsCalculateScoreRequest(const RewardsCalculateScoreRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      endorsementsforblock_(from.endorsementsforblock_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:VeriBlock.RewardsCalculateScoreRequest)
}

void RewardsCalculateScoreRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RewardsCalculateScoreRequest_integration_2eproto.base);
}

RewardsCalculateScoreRequest::~RewardsCalculateScoreRequest() {
  // @@protoc_insertion_point(destructor:VeriBlock.RewardsCalculateScoreRequest)
  SharedDtor();
}

void RewardsCalculateScoreRequest::SharedDtor() {
}

void RewardsCalculateScoreRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RewardsCalculateScoreRequest& RewardsCalculateScoreRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RewardsCalculateScoreRequest_integration_2eproto.base);
  return *internal_default_instance();
}


void RewardsCalculateScoreRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:VeriBlock.RewardsCalculateScoreRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  endorsementsforblock_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RewardsCalculateScoreRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .VeriBlock.RewardEndorsement endorsementsForBlock = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_endorsementsforblock(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RewardsCalculateScoreRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:VeriBlock.RewardsCalculateScoreRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .VeriBlock.RewardEndorsement endorsementsForBlock = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_endorsementsforblock()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:VeriBlock.RewardsCalculateScoreRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:VeriBlock.RewardsCalculateScoreRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RewardsCalculateScoreRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:VeriBlock.RewardsCalculateScoreRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .VeriBlock.RewardEndorsement endorsementsForBlock = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->endorsementsforblock_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->endorsementsforblock(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:VeriBlock.RewardsCalculateScoreRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* RewardsCalculateScoreRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:VeriBlock.RewardsCalculateScoreRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .VeriBlock.RewardEndorsement endorsementsForBlock = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->endorsementsforblock_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->endorsementsforblock(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:VeriBlock.RewardsCalculateScoreRequest)
  return target;
}

size_t RewardsCalculateScoreRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:VeriBlock.RewardsCalculateScoreRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .VeriBlock.RewardEndorsement endorsementsForBlock = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->endorsementsforblock_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->endorsementsforblock(static_cast<int>(i)));
    }
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RewardsCalculateScoreRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:VeriBlock.RewardsCalculateScoreRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const RewardsCalculateScoreRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RewardsCalculateScoreRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:VeriBlock.RewardsCalculateScoreRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:VeriBlock.RewardsCalculateScoreRequest)
    MergeFrom(*source);
  }
}

void RewardsCalculateScoreRequest::MergeFrom(const RewardsCalculateScoreRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:VeriBlock.RewardsCalculateScoreRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  endorsementsforblock_.MergeFrom(from.endorsementsforblock_);
}

void RewardsCalculateScoreRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:VeriBlock.RewardsCalculateScoreRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RewardsCalculateScoreRequest::CopyFrom(const RewardsCalculateScoreRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:VeriBlock.RewardsCalculateScoreRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RewardsCalculateScoreRequest::IsInitialized() const {
  return true;
}

void RewardsCalculateScoreRequest::InternalSwap(RewardsCalculateScoreRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&endorsementsforblock_)->InternalSwap(CastToBase(&other->endorsementsforblock_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RewardsCalculateScoreRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RewardsCalculateScoreReply::InitAsDefaultInstance() {
  ::VeriBlock::_RewardsCalculateScoreReply_default_instance_._instance.get_mutable()->result_ = const_cast< ::VeriBlock::GeneralReply*>(
      ::VeriBlock::GeneralReply::internal_default_instance());
}
class RewardsCalculateScoreReply::_Internal {
 public:
  static const ::VeriBlock::GeneralReply& result(const RewardsCalculateScoreReply* msg);
};

const ::VeriBlock::GeneralReply&
RewardsCalculateScoreReply::_Internal::result(const RewardsCalculateScoreReply* msg) {
  return *msg->result_;
}
RewardsCalculateScoreReply::RewardsCalculateScoreReply()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:VeriBlock.RewardsCalculateScoreReply)
}
RewardsCalculateScoreReply::RewardsCalculateScoreReply(const RewardsCalculateScoreReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  score_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.score().empty()) {
    score_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.score_);
  }
  if (from.has_result()) {
    result_ = new ::VeriBlock::GeneralReply(*from.result_);
  } else {
    result_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:VeriBlock.RewardsCalculateScoreReply)
}

void RewardsCalculateScoreReply::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RewardsCalculateScoreReply_integration_2eproto.base);
  score_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  result_ = nullptr;
}

RewardsCalculateScoreReply::~RewardsCalculateScoreReply() {
  // @@protoc_insertion_point(destructor:VeriBlock.RewardsCalculateScoreReply)
  SharedDtor();
}

void RewardsCalculateScoreReply::SharedDtor() {
  score_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete result_;
}

void RewardsCalculateScoreReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RewardsCalculateScoreReply& RewardsCalculateScoreReply::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RewardsCalculateScoreReply_integration_2eproto.base);
  return *internal_default_instance();
}


void RewardsCalculateScoreReply::Clear() {
// @@protoc_insertion_point(message_clear_start:VeriBlock.RewardsCalculateScoreReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  score_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RewardsCalculateScoreReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .VeriBlock.GeneralReply result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_result(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string score = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_score(), ptr, ctx, "VeriBlock.RewardsCalculateScoreReply.score");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RewardsCalculateScoreReply::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:VeriBlock.RewardsCalculateScoreReply)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .VeriBlock.GeneralReply result = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_result()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string score = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_score()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->score().data(), static_cast<int>(this->score().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "VeriBlock.RewardsCalculateScoreReply.score"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:VeriBlock.RewardsCalculateScoreReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:VeriBlock.RewardsCalculateScoreReply)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RewardsCalculateScoreReply::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:VeriBlock.RewardsCalculateScoreReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .VeriBlock.GeneralReply result = 1;
  if (this->has_result()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::result(this), output);
  }

  // string score = 2;
  if (this->score().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->score().data(), static_cast<int>(this->score().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "VeriBlock.RewardsCalculateScoreReply.score");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->score(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:VeriBlock.RewardsCalculateScoreReply)
}

::PROTOBUF_NAMESPACE_ID::uint8* RewardsCalculateScoreReply::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:VeriBlock.RewardsCalculateScoreReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .VeriBlock.GeneralReply result = 1;
  if (this->has_result()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::result(this), target);
  }

  // string score = 2;
  if (this->score().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->score().data(), static_cast<int>(this->score().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "VeriBlock.RewardsCalculateScoreReply.score");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->score(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:VeriBlock.RewardsCalculateScoreReply)
  return target;
}

size_t RewardsCalculateScoreReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:VeriBlock.RewardsCalculateScoreReply)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string score = 2;
  if (this->score().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->score());
  }

  // .VeriBlock.GeneralReply result = 1;
  if (this->has_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *result_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RewardsCalculateScoreReply::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:VeriBlock.RewardsCalculateScoreReply)
  GOOGLE_DCHECK_NE(&from, this);
  const RewardsCalculateScoreReply* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RewardsCalculateScoreReply>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:VeriBlock.RewardsCalculateScoreReply)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:VeriBlock.RewardsCalculateScoreReply)
    MergeFrom(*source);
  }
}

void RewardsCalculateScoreReply::MergeFrom(const RewardsCalculateScoreReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:VeriBlock.RewardsCalculateScoreReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.score().size() > 0) {

    score_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.score_);
  }
  if (from.has_result()) {
    mutable_result()->::VeriBlock::GeneralReply::MergeFrom(from.result());
  }
}

void RewardsCalculateScoreReply::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:VeriBlock.RewardsCalculateScoreReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RewardsCalculateScoreReply::CopyFrom(const RewardsCalculateScoreReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:VeriBlock.RewardsCalculateScoreReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RewardsCalculateScoreReply::IsInitialized() const {
  return true;
}

void RewardsCalculateScoreReply::InternalSwap(RewardsCalculateScoreReply* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  score_.Swap(&other->score_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RewardsCalculateScoreReply::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RewardsCalculateOutputsRequest::InitAsDefaultInstance() {
}
class RewardsCalculateOutputsRequest::_Internal {
 public:
};

RewardsCalculateOutputsRequest::RewardsCalculateOutputsRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:VeriBlock.RewardsCalculateOutputsRequest)
}
RewardsCalculateOutputsRequest::RewardsCalculateOutputsRequest(const RewardsCalculateOutputsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      endorsementsforblock_(from.endorsementsforblock_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  difficulty_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.difficulty().empty()) {
    difficulty_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.difficulty_);
  }
  blockaltheight_ = from.blockaltheight_;
  // @@protoc_insertion_point(copy_constructor:VeriBlock.RewardsCalculateOutputsRequest)
}

void RewardsCalculateOutputsRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RewardsCalculateOutputsRequest_integration_2eproto.base);
  difficulty_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  blockaltheight_ = 0;
}

RewardsCalculateOutputsRequest::~RewardsCalculateOutputsRequest() {
  // @@protoc_insertion_point(destructor:VeriBlock.RewardsCalculateOutputsRequest)
  SharedDtor();
}

void RewardsCalculateOutputsRequest::SharedDtor() {
  difficulty_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RewardsCalculateOutputsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RewardsCalculateOutputsRequest& RewardsCalculateOutputsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RewardsCalculateOutputsRequest_integration_2eproto.base);
  return *internal_default_instance();
}


void RewardsCalculateOutputsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:VeriBlock.RewardsCalculateOutputsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  endorsementsforblock_.Clear();
  difficulty_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  blockaltheight_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RewardsCalculateOutputsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 blockAltHeight = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          blockaltheight_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .VeriBlock.RewardEndorsement endorsementsForBlock = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_endorsementsforblock(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      // string difficulty = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_difficulty(), ptr, ctx, "VeriBlock.RewardsCalculateOutputsRequest.difficulty");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RewardsCalculateOutputsRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:VeriBlock.RewardsCalculateOutputsRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 blockAltHeight = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &blockaltheight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .VeriBlock.RewardEndorsement endorsementsForBlock = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_endorsementsforblock()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string difficulty = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_difficulty()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->difficulty().data(), static_cast<int>(this->difficulty().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "VeriBlock.RewardsCalculateOutputsRequest.difficulty"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:VeriBlock.RewardsCalculateOutputsRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:VeriBlock.RewardsCalculateOutputsRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RewardsCalculateOutputsRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:VeriBlock.RewardsCalculateOutputsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 blockAltHeight = 1;
  if (this->blockaltheight() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->blockaltheight(), output);
  }

  // repeated .VeriBlock.RewardEndorsement endorsementsForBlock = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->endorsementsforblock_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->endorsementsforblock(static_cast<int>(i)),
      output);
  }

  // string difficulty = 3;
  if (this->difficulty().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->difficulty().data(), static_cast<int>(this->difficulty().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "VeriBlock.RewardsCalculateOutputsRequest.difficulty");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->difficulty(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:VeriBlock.RewardsCalculateOutputsRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* RewardsCalculateOutputsRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:VeriBlock.RewardsCalculateOutputsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 blockAltHeight = 1;
  if (this->blockaltheight() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->blockaltheight(), target);
  }

  // repeated .VeriBlock.RewardEndorsement endorsementsForBlock = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->endorsementsforblock_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->endorsementsforblock(static_cast<int>(i)), target);
  }

  // string difficulty = 3;
  if (this->difficulty().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->difficulty().data(), static_cast<int>(this->difficulty().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "VeriBlock.RewardsCalculateOutputsRequest.difficulty");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        3, this->difficulty(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:VeriBlock.RewardsCalculateOutputsRequest)
  return target;
}

size_t RewardsCalculateOutputsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:VeriBlock.RewardsCalculateOutputsRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .VeriBlock.RewardEndorsement endorsementsForBlock = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->endorsementsforblock_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->endorsementsforblock(static_cast<int>(i)));
    }
  }

  // string difficulty = 3;
  if (this->difficulty().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->difficulty());
  }

  // int32 blockAltHeight = 1;
  if (this->blockaltheight() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->blockaltheight());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RewardsCalculateOutputsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:VeriBlock.RewardsCalculateOutputsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const RewardsCalculateOutputsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RewardsCalculateOutputsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:VeriBlock.RewardsCalculateOutputsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:VeriBlock.RewardsCalculateOutputsRequest)
    MergeFrom(*source);
  }
}

void RewardsCalculateOutputsRequest::MergeFrom(const RewardsCalculateOutputsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:VeriBlock.RewardsCalculateOutputsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  endorsementsforblock_.MergeFrom(from.endorsementsforblock_);
  if (from.difficulty().size() > 0) {

    difficulty_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.difficulty_);
  }
  if (from.blockaltheight() != 0) {
    set_blockaltheight(from.blockaltheight());
  }
}

void RewardsCalculateOutputsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:VeriBlock.RewardsCalculateOutputsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RewardsCalculateOutputsRequest::CopyFrom(const RewardsCalculateOutputsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:VeriBlock.RewardsCalculateOutputsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RewardsCalculateOutputsRequest::IsInitialized() const {
  return true;
}

void RewardsCalculateOutputsRequest::InternalSwap(RewardsCalculateOutputsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&endorsementsforblock_)->InternalSwap(CastToBase(&other->endorsementsforblock_));
  difficulty_.Swap(&other->difficulty_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(blockaltheight_, other->blockaltheight_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RewardsCalculateOutputsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RewardsCalculateOutputsReply::InitAsDefaultInstance() {
  ::VeriBlock::_RewardsCalculateOutputsReply_default_instance_._instance.get_mutable()->result_ = const_cast< ::VeriBlock::GeneralReply*>(
      ::VeriBlock::GeneralReply::internal_default_instance());
}
class RewardsCalculateOutputsReply::_Internal {
 public:
  static const ::VeriBlock::GeneralReply& result(const RewardsCalculateOutputsReply* msg);
};

const ::VeriBlock::GeneralReply&
RewardsCalculateOutputsReply::_Internal::result(const RewardsCalculateOutputsReply* msg) {
  return *msg->result_;
}
RewardsCalculateOutputsReply::RewardsCalculateOutputsReply()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:VeriBlock.RewardsCalculateOutputsReply)
}
RewardsCalculateOutputsReply::RewardsCalculateOutputsReply(const RewardsCalculateOutputsReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      outputs_(from.outputs_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  totalreward_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.totalreward().empty()) {
    totalreward_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.totalreward_);
  }
  blockreward_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.blockreward().empty()) {
    blockreward_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.blockreward_);
  }
  if (from.has_result()) {
    result_ = new ::VeriBlock::GeneralReply(*from.result_);
  } else {
    result_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:VeriBlock.RewardsCalculateOutputsReply)
}

void RewardsCalculateOutputsReply::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RewardsCalculateOutputsReply_integration_2eproto.base);
  totalreward_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  blockreward_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  result_ = nullptr;
}

RewardsCalculateOutputsReply::~RewardsCalculateOutputsReply() {
  // @@protoc_insertion_point(destructor:VeriBlock.RewardsCalculateOutputsReply)
  SharedDtor();
}

void RewardsCalculateOutputsReply::SharedDtor() {
  totalreward_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  blockreward_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete result_;
}

void RewardsCalculateOutputsReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RewardsCalculateOutputsReply& RewardsCalculateOutputsReply::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RewardsCalculateOutputsReply_integration_2eproto.base);
  return *internal_default_instance();
}


void RewardsCalculateOutputsReply::Clear() {
// @@protoc_insertion_point(message_clear_start:VeriBlock.RewardsCalculateOutputsReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  outputs_.Clear();
  totalreward_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  blockreward_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RewardsCalculateOutputsReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .VeriBlock.GeneralReply result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_result(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string totalReward = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_totalreward(), ptr, ctx, "VeriBlock.RewardsCalculateOutputsReply.totalReward");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string blockReward = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_blockreward(), ptr, ctx, "VeriBlock.RewardsCalculateOutputsReply.blockReward");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .VeriBlock.RewardOutput outputs = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_outputs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 34);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RewardsCalculateOutputsReply::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:VeriBlock.RewardsCalculateOutputsReply)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .VeriBlock.GeneralReply result = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_result()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string totalReward = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_totalreward()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->totalreward().data(), static_cast<int>(this->totalreward().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "VeriBlock.RewardsCalculateOutputsReply.totalReward"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string blockReward = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_blockreward()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->blockreward().data(), static_cast<int>(this->blockreward().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "VeriBlock.RewardsCalculateOutputsReply.blockReward"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .VeriBlock.RewardOutput outputs = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_outputs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:VeriBlock.RewardsCalculateOutputsReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:VeriBlock.RewardsCalculateOutputsReply)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RewardsCalculateOutputsReply::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:VeriBlock.RewardsCalculateOutputsReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .VeriBlock.GeneralReply result = 1;
  if (this->has_result()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::result(this), output);
  }

  // string totalReward = 2;
  if (this->totalreward().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->totalreward().data(), static_cast<int>(this->totalreward().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "VeriBlock.RewardsCalculateOutputsReply.totalReward");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->totalreward(), output);
  }

  // string blockReward = 3;
  if (this->blockreward().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->blockreward().data(), static_cast<int>(this->blockreward().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "VeriBlock.RewardsCalculateOutputsReply.blockReward");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->blockreward(), output);
  }

  // repeated .VeriBlock.RewardOutput outputs = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->outputs_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->outputs(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:VeriBlock.RewardsCalculateOutputsReply)
}

::PROTOBUF_NAMESPACE_ID::uint8* RewardsCalculateOutputsReply::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:VeriBlock.RewardsCalculateOutputsReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .VeriBlock.GeneralReply result = 1;
  if (this->has_result()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::result(this), target);
  }

  // string totalReward = 2;
  if (this->totalreward().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->totalreward().data(), static_cast<int>(this->totalreward().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "VeriBlock.RewardsCalculateOutputsReply.totalReward");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->totalreward(), target);
  }

  // string blockReward = 3;
  if (this->blockreward().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->blockreward().data(), static_cast<int>(this->blockreward().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "VeriBlock.RewardsCalculateOutputsReply.blockReward");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        3, this->blockreward(), target);
  }

  // repeated .VeriBlock.RewardOutput outputs = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->outputs_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->outputs(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:VeriBlock.RewardsCalculateOutputsReply)
  return target;
}

size_t RewardsCalculateOutputsReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:VeriBlock.RewardsCalculateOutputsReply)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .VeriBlock.RewardOutput outputs = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->outputs_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->outputs(static_cast<int>(i)));
    }
  }

  // string totalReward = 2;
  if (this->totalreward().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->totalreward());
  }

  // string blockReward = 3;
  if (this->blockreward().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->blockreward());
  }

  // .VeriBlock.GeneralReply result = 1;
  if (this->has_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *result_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RewardsCalculateOutputsReply::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:VeriBlock.RewardsCalculateOutputsReply)
  GOOGLE_DCHECK_NE(&from, this);
  const RewardsCalculateOutputsReply* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RewardsCalculateOutputsReply>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:VeriBlock.RewardsCalculateOutputsReply)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:VeriBlock.RewardsCalculateOutputsReply)
    MergeFrom(*source);
  }
}

void RewardsCalculateOutputsReply::MergeFrom(const RewardsCalculateOutputsReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:VeriBlock.RewardsCalculateOutputsReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  outputs_.MergeFrom(from.outputs_);
  if (from.totalreward().size() > 0) {

    totalreward_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.totalreward_);
  }
  if (from.blockreward().size() > 0) {

    blockreward_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.blockreward_);
  }
  if (from.has_result()) {
    mutable_result()->::VeriBlock::GeneralReply::MergeFrom(from.result());
  }
}

void RewardsCalculateOutputsReply::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:VeriBlock.RewardsCalculateOutputsReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RewardsCalculateOutputsReply::CopyFrom(const RewardsCalculateOutputsReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:VeriBlock.RewardsCalculateOutputsReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RewardsCalculateOutputsReply::IsInitialized() const {
  return true;
}

void RewardsCalculateOutputsReply::InternalSwap(RewardsCalculateOutputsReply* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&outputs_)->InternalSwap(CastToBase(&other->outputs_));
  totalreward_.Swap(&other->totalreward_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  blockreward_.Swap(&other->blockreward_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RewardsCalculateOutputsReply::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BytesArrayRequest::InitAsDefaultInstance() {
}
class BytesArrayRequest::_Internal {
 public:
};

BytesArrayRequest::BytesArrayRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:VeriBlock.BytesArrayRequest)
}
BytesArrayRequest::BytesArrayRequest(const BytesArrayRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.data().empty()) {
    data_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  // @@protoc_insertion_point(copy_constructor:VeriBlock.BytesArrayRequest)
}

void BytesArrayRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BytesArrayRequest_integration_2eproto.base);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

BytesArrayRequest::~BytesArrayRequest() {
  // @@protoc_insertion_point(destructor:VeriBlock.BytesArrayRequest)
  SharedDtor();
}

void BytesArrayRequest::SharedDtor() {
  data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void BytesArrayRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BytesArrayRequest& BytesArrayRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BytesArrayRequest_integration_2eproto.base);
  return *internal_default_instance();
}


void BytesArrayRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:VeriBlock.BytesArrayRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* BytesArrayRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_data(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool BytesArrayRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:VeriBlock.BytesArrayRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes data = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:VeriBlock.BytesArrayRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:VeriBlock.BytesArrayRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void BytesArrayRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:VeriBlock.BytesArrayRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes data = 1;
  if (this->data().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->data(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:VeriBlock.BytesArrayRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* BytesArrayRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:VeriBlock.BytesArrayRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes data = 1;
  if (this->data().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        1, this->data(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:VeriBlock.BytesArrayRequest)
  return target;
}

size_t BytesArrayRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:VeriBlock.BytesArrayRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes data = 1;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->data());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BytesArrayRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:VeriBlock.BytesArrayRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const BytesArrayRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BytesArrayRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:VeriBlock.BytesArrayRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:VeriBlock.BytesArrayRequest)
    MergeFrom(*source);
  }
}

void BytesArrayRequest::MergeFrom(const BytesArrayRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:VeriBlock.BytesArrayRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.data().size() > 0) {

    data_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
}

void BytesArrayRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:VeriBlock.BytesArrayRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BytesArrayRequest::CopyFrom(const BytesArrayRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:VeriBlock.BytesArrayRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BytesArrayRequest::IsInitialized() const {
  return true;
}

void BytesArrayRequest::InternalSwap(BytesArrayRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  data_.Swap(&other->data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata BytesArrayRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BytesArrayReply::InitAsDefaultInstance() {
  ::VeriBlock::_BytesArrayReply_default_instance_._instance.get_mutable()->result_ = const_cast< ::VeriBlock::GeneralReply*>(
      ::VeriBlock::GeneralReply::internal_default_instance());
}
class BytesArrayReply::_Internal {
 public:
  static const ::VeriBlock::GeneralReply& result(const BytesArrayReply* msg);
};

const ::VeriBlock::GeneralReply&
BytesArrayReply::_Internal::result(const BytesArrayReply* msg) {
  return *msg->result_;
}
BytesArrayReply::BytesArrayReply()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:VeriBlock.BytesArrayReply)
}
BytesArrayReply::BytesArrayReply(const BytesArrayReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.data().empty()) {
    data_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  if (from.has_result()) {
    result_ = new ::VeriBlock::GeneralReply(*from.result_);
  } else {
    result_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:VeriBlock.BytesArrayReply)
}

void BytesArrayReply::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BytesArrayReply_integration_2eproto.base);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  result_ = nullptr;
}

BytesArrayReply::~BytesArrayReply() {
  // @@protoc_insertion_point(destructor:VeriBlock.BytesArrayReply)
  SharedDtor();
}

void BytesArrayReply::SharedDtor() {
  data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete result_;
}

void BytesArrayReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BytesArrayReply& BytesArrayReply::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BytesArrayReply_integration_2eproto.base);
  return *internal_default_instance();
}


void BytesArrayReply::Clear() {
// @@protoc_insertion_point(message_clear_start:VeriBlock.BytesArrayReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* BytesArrayReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .VeriBlock.GeneralReply result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_result(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_data(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool BytesArrayReply::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:VeriBlock.BytesArrayReply)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .VeriBlock.GeneralReply result = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_result()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes data = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:VeriBlock.BytesArrayReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:VeriBlock.BytesArrayReply)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void BytesArrayReply::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:VeriBlock.BytesArrayReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .VeriBlock.GeneralReply result = 1;
  if (this->has_result()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::result(this), output);
  }

  // bytes data = 2;
  if (this->data().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->data(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:VeriBlock.BytesArrayReply)
}

::PROTOBUF_NAMESPACE_ID::uint8* BytesArrayReply::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:VeriBlock.BytesArrayReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .VeriBlock.GeneralReply result = 1;
  if (this->has_result()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::result(this), target);
  }

  // bytes data = 2;
  if (this->data().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        2, this->data(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:VeriBlock.BytesArrayReply)
  return target;
}

size_t BytesArrayReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:VeriBlock.BytesArrayReply)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes data = 2;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->data());
  }

  // .VeriBlock.GeneralReply result = 1;
  if (this->has_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *result_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BytesArrayReply::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:VeriBlock.BytesArrayReply)
  GOOGLE_DCHECK_NE(&from, this);
  const BytesArrayReply* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BytesArrayReply>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:VeriBlock.BytesArrayReply)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:VeriBlock.BytesArrayReply)
    MergeFrom(*source);
  }
}

void BytesArrayReply::MergeFrom(const BytesArrayReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:VeriBlock.BytesArrayReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.data().size() > 0) {

    data_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  if (from.has_result()) {
    mutable_result()->::VeriBlock::GeneralReply::MergeFrom(from.result());
  }
}

void BytesArrayReply::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:VeriBlock.BytesArrayReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BytesArrayReply::CopyFrom(const BytesArrayReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:VeriBlock.BytesArrayReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BytesArrayReply::IsInitialized() const {
  return true;
}

void BytesArrayReply::InternalSwap(BytesArrayReply* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  data_.Swap(&other->data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BytesArrayReply::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MerklePath::InitAsDefaultInstance() {
}
class MerklePath::_Internal {
 public:
};

MerklePath::MerklePath()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:VeriBlock.MerklePath)
}
MerklePath::MerklePath(const MerklePath& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  merklepath_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.merklepath().empty()) {
    merklepath_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.merklepath_);
  }
  // @@protoc_insertion_point(copy_constructor:VeriBlock.MerklePath)
}

void MerklePath::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MerklePath_integration_2eproto.base);
  merklepath_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

MerklePath::~MerklePath() {
  // @@protoc_insertion_point(destructor:VeriBlock.MerklePath)
  SharedDtor();
}

void MerklePath::SharedDtor() {
  merklepath_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MerklePath::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MerklePath& MerklePath::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MerklePath_integration_2eproto.base);
  return *internal_default_instance();
}


void MerklePath::Clear() {
// @@protoc_insertion_point(message_clear_start:VeriBlock.MerklePath)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  merklepath_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MerklePath::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string merklePath = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_merklepath(), ptr, ctx, "VeriBlock.MerklePath.merklePath");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MerklePath::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:VeriBlock.MerklePath)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string merklePath = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_merklepath()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->merklepath().data(), static_cast<int>(this->merklepath().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "VeriBlock.MerklePath.merklePath"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:VeriBlock.MerklePath)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:VeriBlock.MerklePath)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MerklePath::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:VeriBlock.MerklePath)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string merklePath = 1;
  if (this->merklepath().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->merklepath().data(), static_cast<int>(this->merklepath().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "VeriBlock.MerklePath.merklePath");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->merklepath(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:VeriBlock.MerklePath)
}

::PROTOBUF_NAMESPACE_ID::uint8* MerklePath::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:VeriBlock.MerklePath)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string merklePath = 1;
  if (this->merklepath().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->merklepath().data(), static_cast<int>(this->merklepath().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "VeriBlock.MerklePath.merklePath");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->merklepath(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:VeriBlock.MerklePath)
  return target;
}

size_t MerklePath::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:VeriBlock.MerklePath)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string merklePath = 1;
  if (this->merklepath().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->merklepath());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MerklePath::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:VeriBlock.MerklePath)
  GOOGLE_DCHECK_NE(&from, this);
  const MerklePath* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MerklePath>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:VeriBlock.MerklePath)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:VeriBlock.MerklePath)
    MergeFrom(*source);
  }
}

void MerklePath::MergeFrom(const MerklePath& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:VeriBlock.MerklePath)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.merklepath().size() > 0) {

    merklepath_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.merklepath_);
  }
}

void MerklePath::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:VeriBlock.MerklePath)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MerklePath::CopyFrom(const MerklePath& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:VeriBlock.MerklePath)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MerklePath::IsInitialized() const {
  return true;
}

void MerklePath::InternalSwap(MerklePath* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  merklepath_.Swap(&other->merklepath_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata MerklePath::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MerklePathRequest::InitAsDefaultInstance() {
}
class MerklePathRequest::_Internal {
 public:
};

MerklePathRequest::MerklePathRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:VeriBlock.MerklePathRequest)
}
MerklePathRequest::MerklePathRequest(const MerklePathRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.data().empty()) {
    data_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  subject_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.subject().empty()) {
    subject_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.subject_);
  }
  // @@protoc_insertion_point(copy_constructor:VeriBlock.MerklePathRequest)
}

void MerklePathRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MerklePathRequest_integration_2eproto.base);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  subject_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

MerklePathRequest::~MerklePathRequest() {
  // @@protoc_insertion_point(destructor:VeriBlock.MerklePathRequest)
  SharedDtor();
}

void MerklePathRequest::SharedDtor() {
  data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  subject_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MerklePathRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MerklePathRequest& MerklePathRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MerklePathRequest_integration_2eproto.base);
  return *internal_default_instance();
}


void MerklePathRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:VeriBlock.MerklePathRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  subject_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MerklePathRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_data(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes subject = 2 [(.VeriBlock.hex_encoded) = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_subject(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MerklePathRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:VeriBlock.MerklePathRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes data = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes subject = 2 [(.VeriBlock.hex_encoded) = true];
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_subject()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:VeriBlock.MerklePathRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:VeriBlock.MerklePathRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MerklePathRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:VeriBlock.MerklePathRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes data = 1;
  if (this->data().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->data(), output);
  }

  // bytes subject = 2 [(.VeriBlock.hex_encoded) = true];
  if (this->subject().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->subject(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:VeriBlock.MerklePathRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* MerklePathRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:VeriBlock.MerklePathRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes data = 1;
  if (this->data().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        1, this->data(), target);
  }

  // bytes subject = 2 [(.VeriBlock.hex_encoded) = true];
  if (this->subject().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        2, this->subject(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:VeriBlock.MerklePathRequest)
  return target;
}

size_t MerklePathRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:VeriBlock.MerklePathRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes data = 1;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->data());
  }

  // bytes subject = 2 [(.VeriBlock.hex_encoded) = true];
  if (this->subject().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->subject());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MerklePathRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:VeriBlock.MerklePathRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const MerklePathRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MerklePathRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:VeriBlock.MerklePathRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:VeriBlock.MerklePathRequest)
    MergeFrom(*source);
  }
}

void MerklePathRequest::MergeFrom(const MerklePathRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:VeriBlock.MerklePathRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.data().size() > 0) {

    data_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  if (from.subject().size() > 0) {

    subject_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.subject_);
  }
}

void MerklePathRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:VeriBlock.MerklePathRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MerklePathRequest::CopyFrom(const MerklePathRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:VeriBlock.MerklePathRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MerklePathRequest::IsInitialized() const {
  return true;
}

void MerklePathRequest::InternalSwap(MerklePathRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  data_.Swap(&other->data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  subject_.Swap(&other->subject_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata MerklePathRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void VeriBlockMerklePath::InitAsDefaultInstance() {
}
class VeriBlockMerklePath::_Internal {
 public:
};

VeriBlockMerklePath::VeriBlockMerklePath()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:VeriBlock.VeriBlockMerklePath)
}
VeriBlockMerklePath::VeriBlockMerklePath(const VeriBlockMerklePath& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  merklepath_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.merklepath().empty()) {
    merklepath_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.merklepath_);
  }
  // @@protoc_insertion_point(copy_constructor:VeriBlock.VeriBlockMerklePath)
}

void VeriBlockMerklePath::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_VeriBlockMerklePath_integration_2eproto.base);
  merklepath_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

VeriBlockMerklePath::~VeriBlockMerklePath() {
  // @@protoc_insertion_point(destructor:VeriBlock.VeriBlockMerklePath)
  SharedDtor();
}

void VeriBlockMerklePath::SharedDtor() {
  merklepath_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void VeriBlockMerklePath::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VeriBlockMerklePath& VeriBlockMerklePath::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_VeriBlockMerklePath_integration_2eproto.base);
  return *internal_default_instance();
}


void VeriBlockMerklePath::Clear() {
// @@protoc_insertion_point(message_clear_start:VeriBlock.VeriBlockMerklePath)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  merklepath_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* VeriBlockMerklePath::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string merklePath = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_merklepath(), ptr, ctx, "VeriBlock.VeriBlockMerklePath.merklePath");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool VeriBlockMerklePath::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:VeriBlock.VeriBlockMerklePath)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string merklePath = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_merklepath()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->merklepath().data(), static_cast<int>(this->merklepath().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "VeriBlock.VeriBlockMerklePath.merklePath"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:VeriBlock.VeriBlockMerklePath)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:VeriBlock.VeriBlockMerklePath)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void VeriBlockMerklePath::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:VeriBlock.VeriBlockMerklePath)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string merklePath = 1;
  if (this->merklepath().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->merklepath().data(), static_cast<int>(this->merklepath().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "VeriBlock.VeriBlockMerklePath.merklePath");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->merklepath(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:VeriBlock.VeriBlockMerklePath)
}

::PROTOBUF_NAMESPACE_ID::uint8* VeriBlockMerklePath::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:VeriBlock.VeriBlockMerklePath)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string merklePath = 1;
  if (this->merklepath().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->merklepath().data(), static_cast<int>(this->merklepath().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "VeriBlock.VeriBlockMerklePath.merklePath");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->merklepath(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:VeriBlock.VeriBlockMerklePath)
  return target;
}

size_t VeriBlockMerklePath::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:VeriBlock.VeriBlockMerklePath)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string merklePath = 1;
  if (this->merklepath().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->merklepath());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VeriBlockMerklePath::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:VeriBlock.VeriBlockMerklePath)
  GOOGLE_DCHECK_NE(&from, this);
  const VeriBlockMerklePath* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VeriBlockMerklePath>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:VeriBlock.VeriBlockMerklePath)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:VeriBlock.VeriBlockMerklePath)
    MergeFrom(*source);
  }
}

void VeriBlockMerklePath::MergeFrom(const VeriBlockMerklePath& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:VeriBlock.VeriBlockMerklePath)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.merklepath().size() > 0) {

    merklepath_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.merklepath_);
  }
}

void VeriBlockMerklePath::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:VeriBlock.VeriBlockMerklePath)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VeriBlockMerklePath::CopyFrom(const VeriBlockMerklePath& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:VeriBlock.VeriBlockMerklePath)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VeriBlockMerklePath::IsInitialized() const {
  return true;
}

void VeriBlockMerklePath::InternalSwap(VeriBlockMerklePath* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  merklepath_.Swap(&other->merklepath_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata VeriBlockMerklePath::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AltPublicationReply::InitAsDefaultInstance() {
  ::VeriBlock::_AltPublicationReply_default_instance_._instance.get_mutable()->result_ = const_cast< ::VeriBlock::GeneralReply*>(
      ::VeriBlock::GeneralReply::internal_default_instance());
  ::VeriBlock::_AltPublicationReply_default_instance_._instance.get_mutable()->publication_ = const_cast< ::VeriBlock::AltPublication*>(
      ::VeriBlock::AltPublication::internal_default_instance());
}
class AltPublicationReply::_Internal {
 public:
  static const ::VeriBlock::GeneralReply& result(const AltPublicationReply* msg);
  static const ::VeriBlock::AltPublication& publication(const AltPublicationReply* msg);
};

const ::VeriBlock::GeneralReply&
AltPublicationReply::_Internal::result(const AltPublicationReply* msg) {
  return *msg->result_;
}
const ::VeriBlock::AltPublication&
AltPublicationReply::_Internal::publication(const AltPublicationReply* msg) {
  return *msg->publication_;
}
AltPublicationReply::AltPublicationReply()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:VeriBlock.AltPublicationReply)
}
AltPublicationReply::AltPublicationReply(const AltPublicationReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_result()) {
    result_ = new ::VeriBlock::GeneralReply(*from.result_);
  } else {
    result_ = nullptr;
  }
  if (from.has_publication()) {
    publication_ = new ::VeriBlock::AltPublication(*from.publication_);
  } else {
    publication_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:VeriBlock.AltPublicationReply)
}

void AltPublicationReply::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AltPublicationReply_integration_2eproto.base);
  ::memset(&result_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&publication_) -
      reinterpret_cast<char*>(&result_)) + sizeof(publication_));
}

AltPublicationReply::~AltPublicationReply() {
  // @@protoc_insertion_point(destructor:VeriBlock.AltPublicationReply)
  SharedDtor();
}

void AltPublicationReply::SharedDtor() {
  if (this != internal_default_instance()) delete result_;
  if (this != internal_default_instance()) delete publication_;
}

void AltPublicationReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AltPublicationReply& AltPublicationReply::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AltPublicationReply_integration_2eproto.base);
  return *internal_default_instance();
}


void AltPublicationReply::Clear() {
// @@protoc_insertion_point(message_clear_start:VeriBlock.AltPublicationReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && publication_ != nullptr) {
    delete publication_;
  }
  publication_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AltPublicationReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .VeriBlock.GeneralReply result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_result(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .VeriBlock.AltPublication publication = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_publication(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AltPublicationReply::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:VeriBlock.AltPublicationReply)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .VeriBlock.GeneralReply result = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_result()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .VeriBlock.AltPublication publication = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_publication()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:VeriBlock.AltPublicationReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:VeriBlock.AltPublicationReply)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AltPublicationReply::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:VeriBlock.AltPublicationReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .VeriBlock.GeneralReply result = 1;
  if (this->has_result()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::result(this), output);
  }

  // .VeriBlock.AltPublication publication = 2;
  if (this->has_publication()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, _Internal::publication(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:VeriBlock.AltPublicationReply)
}

::PROTOBUF_NAMESPACE_ID::uint8* AltPublicationReply::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:VeriBlock.AltPublicationReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .VeriBlock.GeneralReply result = 1;
  if (this->has_result()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::result(this), target);
  }

  // .VeriBlock.AltPublication publication = 2;
  if (this->has_publication()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::publication(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:VeriBlock.AltPublicationReply)
  return target;
}

size_t AltPublicationReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:VeriBlock.AltPublicationReply)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .VeriBlock.GeneralReply result = 1;
  if (this->has_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *result_);
  }

  // .VeriBlock.AltPublication publication = 2;
  if (this->has_publication()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *publication_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AltPublicationReply::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:VeriBlock.AltPublicationReply)
  GOOGLE_DCHECK_NE(&from, this);
  const AltPublicationReply* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AltPublicationReply>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:VeriBlock.AltPublicationReply)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:VeriBlock.AltPublicationReply)
    MergeFrom(*source);
  }
}

void AltPublicationReply::MergeFrom(const AltPublicationReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:VeriBlock.AltPublicationReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_result()) {
    mutable_result()->::VeriBlock::GeneralReply::MergeFrom(from.result());
  }
  if (from.has_publication()) {
    mutable_publication()->::VeriBlock::AltPublication::MergeFrom(from.publication());
  }
}

void AltPublicationReply::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:VeriBlock.AltPublicationReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AltPublicationReply::CopyFrom(const AltPublicationReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:VeriBlock.AltPublicationReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AltPublicationReply::IsInitialized() const {
  return true;
}

void AltPublicationReply::InternalSwap(AltPublicationReply* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(result_, other->result_);
  swap(publication_, other->publication_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AltPublicationReply::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PublicationDataReply::InitAsDefaultInstance() {
  ::VeriBlock::_PublicationDataReply_default_instance_._instance.get_mutable()->result_ = const_cast< ::VeriBlock::GeneralReply*>(
      ::VeriBlock::GeneralReply::internal_default_instance());
  ::VeriBlock::_PublicationDataReply_default_instance_._instance.get_mutable()->publication_ = const_cast< ::VeriBlock::PublicationData*>(
      ::VeriBlock::PublicationData::internal_default_instance());
}
class PublicationDataReply::_Internal {
 public:
  static const ::VeriBlock::GeneralReply& result(const PublicationDataReply* msg);
  static const ::VeriBlock::PublicationData& publication(const PublicationDataReply* msg);
};

const ::VeriBlock::GeneralReply&
PublicationDataReply::_Internal::result(const PublicationDataReply* msg) {
  return *msg->result_;
}
const ::VeriBlock::PublicationData&
PublicationDataReply::_Internal::publication(const PublicationDataReply* msg) {
  return *msg->publication_;
}
PublicationDataReply::PublicationDataReply()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:VeriBlock.PublicationDataReply)
}
PublicationDataReply::PublicationDataReply(const PublicationDataReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_result()) {
    result_ = new ::VeriBlock::GeneralReply(*from.result_);
  } else {
    result_ = nullptr;
  }
  if (from.has_publication()) {
    publication_ = new ::VeriBlock::PublicationData(*from.publication_);
  } else {
    publication_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:VeriBlock.PublicationDataReply)
}

void PublicationDataReply::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PublicationDataReply_integration_2eproto.base);
  ::memset(&result_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&publication_) -
      reinterpret_cast<char*>(&result_)) + sizeof(publication_));
}

PublicationDataReply::~PublicationDataReply() {
  // @@protoc_insertion_point(destructor:VeriBlock.PublicationDataReply)
  SharedDtor();
}

void PublicationDataReply::SharedDtor() {
  if (this != internal_default_instance()) delete result_;
  if (this != internal_default_instance()) delete publication_;
}

void PublicationDataReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PublicationDataReply& PublicationDataReply::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PublicationDataReply_integration_2eproto.base);
  return *internal_default_instance();
}


void PublicationDataReply::Clear() {
// @@protoc_insertion_point(message_clear_start:VeriBlock.PublicationDataReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && publication_ != nullptr) {
    delete publication_;
  }
  publication_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PublicationDataReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .VeriBlock.GeneralReply result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_result(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .VeriBlock.PublicationData publication = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_publication(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PublicationDataReply::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:VeriBlock.PublicationDataReply)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .VeriBlock.GeneralReply result = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_result()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .VeriBlock.PublicationData publication = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_publication()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:VeriBlock.PublicationDataReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:VeriBlock.PublicationDataReply)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PublicationDataReply::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:VeriBlock.PublicationDataReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .VeriBlock.GeneralReply result = 1;
  if (this->has_result()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::result(this), output);
  }

  // .VeriBlock.PublicationData publication = 2;
  if (this->has_publication()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, _Internal::publication(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:VeriBlock.PublicationDataReply)
}

::PROTOBUF_NAMESPACE_ID::uint8* PublicationDataReply::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:VeriBlock.PublicationDataReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .VeriBlock.GeneralReply result = 1;
  if (this->has_result()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::result(this), target);
  }

  // .VeriBlock.PublicationData publication = 2;
  if (this->has_publication()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::publication(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:VeriBlock.PublicationDataReply)
  return target;
}

size_t PublicationDataReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:VeriBlock.PublicationDataReply)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .VeriBlock.GeneralReply result = 1;
  if (this->has_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *result_);
  }

  // .VeriBlock.PublicationData publication = 2;
  if (this->has_publication()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *publication_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PublicationDataReply::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:VeriBlock.PublicationDataReply)
  GOOGLE_DCHECK_NE(&from, this);
  const PublicationDataReply* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PublicationDataReply>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:VeriBlock.PublicationDataReply)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:VeriBlock.PublicationDataReply)
    MergeFrom(*source);
  }
}

void PublicationDataReply::MergeFrom(const PublicationDataReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:VeriBlock.PublicationDataReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_result()) {
    mutable_result()->::VeriBlock::GeneralReply::MergeFrom(from.result());
  }
  if (from.has_publication()) {
    mutable_publication()->::VeriBlock::PublicationData::MergeFrom(from.publication());
  }
}

void PublicationDataReply::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:VeriBlock.PublicationDataReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PublicationDataReply::CopyFrom(const PublicationDataReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:VeriBlock.PublicationDataReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PublicationDataReply::IsInitialized() const {
  return true;
}

void PublicationDataReply::InternalSwap(PublicationDataReply* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(result_, other->result_);
  swap(publication_, other->publication_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PublicationDataReply::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BitcoinTransactionReply::InitAsDefaultInstance() {
  ::VeriBlock::_BitcoinTransactionReply_default_instance_._instance.get_mutable()->result_ = const_cast< ::VeriBlock::GeneralReply*>(
      ::VeriBlock::GeneralReply::internal_default_instance());
  ::VeriBlock::_BitcoinTransactionReply_default_instance_._instance.get_mutable()->transaction_ = const_cast< ::VeriBlock::BitcoinTransaction*>(
      ::VeriBlock::BitcoinTransaction::internal_default_instance());
}
class BitcoinTransactionReply::_Internal {
 public:
  static const ::VeriBlock::GeneralReply& result(const BitcoinTransactionReply* msg);
  static const ::VeriBlock::BitcoinTransaction& transaction(const BitcoinTransactionReply* msg);
};

const ::VeriBlock::GeneralReply&
BitcoinTransactionReply::_Internal::result(const BitcoinTransactionReply* msg) {
  return *msg->result_;
}
const ::VeriBlock::BitcoinTransaction&
BitcoinTransactionReply::_Internal::transaction(const BitcoinTransactionReply* msg) {
  return *msg->transaction_;
}
BitcoinTransactionReply::BitcoinTransactionReply()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:VeriBlock.BitcoinTransactionReply)
}
BitcoinTransactionReply::BitcoinTransactionReply(const BitcoinTransactionReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_result()) {
    result_ = new ::VeriBlock::GeneralReply(*from.result_);
  } else {
    result_ = nullptr;
  }
  if (from.has_transaction()) {
    transaction_ = new ::VeriBlock::BitcoinTransaction(*from.transaction_);
  } else {
    transaction_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:VeriBlock.BitcoinTransactionReply)
}

void BitcoinTransactionReply::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BitcoinTransactionReply_integration_2eproto.base);
  ::memset(&result_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&transaction_) -
      reinterpret_cast<char*>(&result_)) + sizeof(transaction_));
}

BitcoinTransactionReply::~BitcoinTransactionReply() {
  // @@protoc_insertion_point(destructor:VeriBlock.BitcoinTransactionReply)
  SharedDtor();
}

void BitcoinTransactionReply::SharedDtor() {
  if (this != internal_default_instance()) delete result_;
  if (this != internal_default_instance()) delete transaction_;
}

void BitcoinTransactionReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BitcoinTransactionReply& BitcoinTransactionReply::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BitcoinTransactionReply_integration_2eproto.base);
  return *internal_default_instance();
}


void BitcoinTransactionReply::Clear() {
// @@protoc_insertion_point(message_clear_start:VeriBlock.BitcoinTransactionReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && transaction_ != nullptr) {
    delete transaction_;
  }
  transaction_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* BitcoinTransactionReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .VeriBlock.GeneralReply result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_result(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .VeriBlock.BitcoinTransaction transaction = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_transaction(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool BitcoinTransactionReply::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:VeriBlock.BitcoinTransactionReply)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .VeriBlock.GeneralReply result = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_result()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .VeriBlock.BitcoinTransaction transaction = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_transaction()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:VeriBlock.BitcoinTransactionReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:VeriBlock.BitcoinTransactionReply)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void BitcoinTransactionReply::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:VeriBlock.BitcoinTransactionReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .VeriBlock.GeneralReply result = 1;
  if (this->has_result()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::result(this), output);
  }

  // .VeriBlock.BitcoinTransaction transaction = 2;
  if (this->has_transaction()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, _Internal::transaction(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:VeriBlock.BitcoinTransactionReply)
}

::PROTOBUF_NAMESPACE_ID::uint8* BitcoinTransactionReply::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:VeriBlock.BitcoinTransactionReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .VeriBlock.GeneralReply result = 1;
  if (this->has_result()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::result(this), target);
  }

  // .VeriBlock.BitcoinTransaction transaction = 2;
  if (this->has_transaction()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::transaction(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:VeriBlock.BitcoinTransactionReply)
  return target;
}

size_t BitcoinTransactionReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:VeriBlock.BitcoinTransactionReply)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .VeriBlock.GeneralReply result = 1;
  if (this->has_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *result_);
  }

  // .VeriBlock.BitcoinTransaction transaction = 2;
  if (this->has_transaction()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *transaction_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BitcoinTransactionReply::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:VeriBlock.BitcoinTransactionReply)
  GOOGLE_DCHECK_NE(&from, this);
  const BitcoinTransactionReply* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BitcoinTransactionReply>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:VeriBlock.BitcoinTransactionReply)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:VeriBlock.BitcoinTransactionReply)
    MergeFrom(*source);
  }
}

void BitcoinTransactionReply::MergeFrom(const BitcoinTransactionReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:VeriBlock.BitcoinTransactionReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_result()) {
    mutable_result()->::VeriBlock::GeneralReply::MergeFrom(from.result());
  }
  if (from.has_transaction()) {
    mutable_transaction()->::VeriBlock::BitcoinTransaction::MergeFrom(from.transaction());
  }
}

void BitcoinTransactionReply::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:VeriBlock.BitcoinTransactionReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BitcoinTransactionReply::CopyFrom(const BitcoinTransactionReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:VeriBlock.BitcoinTransactionReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BitcoinTransactionReply::IsInitialized() const {
  return true;
}

void BitcoinTransactionReply::InternalSwap(BitcoinTransactionReply* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(result_, other->result_);
  swap(transaction_, other->transaction_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BitcoinTransactionReply::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void VeriBlockBlockReply::InitAsDefaultInstance() {
  ::VeriBlock::_VeriBlockBlockReply_default_instance_._instance.get_mutable()->result_ = const_cast< ::VeriBlock::GeneralReply*>(
      ::VeriBlock::GeneralReply::internal_default_instance());
  ::VeriBlock::_VeriBlockBlockReply_default_instance_._instance.get_mutable()->block_ = const_cast< ::VeriBlock::VeriBlockBlock*>(
      ::VeriBlock::VeriBlockBlock::internal_default_instance());
}
class VeriBlockBlockReply::_Internal {
 public:
  static const ::VeriBlock::GeneralReply& result(const VeriBlockBlockReply* msg);
  static const ::VeriBlock::VeriBlockBlock& block(const VeriBlockBlockReply* msg);
};

const ::VeriBlock::GeneralReply&
VeriBlockBlockReply::_Internal::result(const VeriBlockBlockReply* msg) {
  return *msg->result_;
}
const ::VeriBlock::VeriBlockBlock&
VeriBlockBlockReply::_Internal::block(const VeriBlockBlockReply* msg) {
  return *msg->block_;
}
VeriBlockBlockReply::VeriBlockBlockReply()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:VeriBlock.VeriBlockBlockReply)
}
VeriBlockBlockReply::VeriBlockBlockReply(const VeriBlockBlockReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_result()) {
    result_ = new ::VeriBlock::GeneralReply(*from.result_);
  } else {
    result_ = nullptr;
  }
  if (from.has_block()) {
    block_ = new ::VeriBlock::VeriBlockBlock(*from.block_);
  } else {
    block_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:VeriBlock.VeriBlockBlockReply)
}

void VeriBlockBlockReply::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_VeriBlockBlockReply_integration_2eproto.base);
  ::memset(&result_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&block_) -
      reinterpret_cast<char*>(&result_)) + sizeof(block_));
}

VeriBlockBlockReply::~VeriBlockBlockReply() {
  // @@protoc_insertion_point(destructor:VeriBlock.VeriBlockBlockReply)
  SharedDtor();
}

void VeriBlockBlockReply::SharedDtor() {
  if (this != internal_default_instance()) delete result_;
  if (this != internal_default_instance()) delete block_;
}

void VeriBlockBlockReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VeriBlockBlockReply& VeriBlockBlockReply::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_VeriBlockBlockReply_integration_2eproto.base);
  return *internal_default_instance();
}


void VeriBlockBlockReply::Clear() {
// @@protoc_insertion_point(message_clear_start:VeriBlock.VeriBlockBlockReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && block_ != nullptr) {
    delete block_;
  }
  block_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* VeriBlockBlockReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .VeriBlock.GeneralReply result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_result(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .VeriBlock.VeriBlockBlock block = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_block(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool VeriBlockBlockReply::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:VeriBlock.VeriBlockBlockReply)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .VeriBlock.GeneralReply result = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_result()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .VeriBlock.VeriBlockBlock block = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_block()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:VeriBlock.VeriBlockBlockReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:VeriBlock.VeriBlockBlockReply)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void VeriBlockBlockReply::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:VeriBlock.VeriBlockBlockReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .VeriBlock.GeneralReply result = 1;
  if (this->has_result()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::result(this), output);
  }

  // .VeriBlock.VeriBlockBlock block = 2;
  if (this->has_block()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, _Internal::block(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:VeriBlock.VeriBlockBlockReply)
}

::PROTOBUF_NAMESPACE_ID::uint8* VeriBlockBlockReply::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:VeriBlock.VeriBlockBlockReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .VeriBlock.GeneralReply result = 1;
  if (this->has_result()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::result(this), target);
  }

  // .VeriBlock.VeriBlockBlock block = 2;
  if (this->has_block()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::block(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:VeriBlock.VeriBlockBlockReply)
  return target;
}

size_t VeriBlockBlockReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:VeriBlock.VeriBlockBlockReply)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .VeriBlock.GeneralReply result = 1;
  if (this->has_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *result_);
  }

  // .VeriBlock.VeriBlockBlock block = 2;
  if (this->has_block()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *block_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VeriBlockBlockReply::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:VeriBlock.VeriBlockBlockReply)
  GOOGLE_DCHECK_NE(&from, this);
  const VeriBlockBlockReply* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VeriBlockBlockReply>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:VeriBlock.VeriBlockBlockReply)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:VeriBlock.VeriBlockBlockReply)
    MergeFrom(*source);
  }
}

void VeriBlockBlockReply::MergeFrom(const VeriBlockBlockReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:VeriBlock.VeriBlockBlockReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_result()) {
    mutable_result()->::VeriBlock::GeneralReply::MergeFrom(from.result());
  }
  if (from.has_block()) {
    mutable_block()->::VeriBlock::VeriBlockBlock::MergeFrom(from.block());
  }
}

void VeriBlockBlockReply::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:VeriBlock.VeriBlockBlockReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VeriBlockBlockReply::CopyFrom(const VeriBlockBlockReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:VeriBlock.VeriBlockBlockReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VeriBlockBlockReply::IsInitialized() const {
  return true;
}

void VeriBlockBlockReply::InternalSwap(VeriBlockBlockReply* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(result_, other->result_);
  swap(block_, other->block_);
}

::PROTOBUF_NAMESPACE_ID::Metadata VeriBlockBlockReply::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void VeriBlockTransactionReply::InitAsDefaultInstance() {
  ::VeriBlock::_VeriBlockTransactionReply_default_instance_._instance.get_mutable()->result_ = const_cast< ::VeriBlock::GeneralReply*>(
      ::VeriBlock::GeneralReply::internal_default_instance());
  ::VeriBlock::_VeriBlockTransactionReply_default_instance_._instance.get_mutable()->transaction_ = const_cast< ::VeriBlock::VeriBlockTransaction*>(
      ::VeriBlock::VeriBlockTransaction::internal_default_instance());
}
class VeriBlockTransactionReply::_Internal {
 public:
  static const ::VeriBlock::GeneralReply& result(const VeriBlockTransactionReply* msg);
  static const ::VeriBlock::VeriBlockTransaction& transaction(const VeriBlockTransactionReply* msg);
};

const ::VeriBlock::GeneralReply&
VeriBlockTransactionReply::_Internal::result(const VeriBlockTransactionReply* msg) {
  return *msg->result_;
}
const ::VeriBlock::VeriBlockTransaction&
VeriBlockTransactionReply::_Internal::transaction(const VeriBlockTransactionReply* msg) {
  return *msg->transaction_;
}
VeriBlockTransactionReply::VeriBlockTransactionReply()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:VeriBlock.VeriBlockTransactionReply)
}
VeriBlockTransactionReply::VeriBlockTransactionReply(const VeriBlockTransactionReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_result()) {
    result_ = new ::VeriBlock::GeneralReply(*from.result_);
  } else {
    result_ = nullptr;
  }
  if (from.has_transaction()) {
    transaction_ = new ::VeriBlock::VeriBlockTransaction(*from.transaction_);
  } else {
    transaction_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:VeriBlock.VeriBlockTransactionReply)
}

void VeriBlockTransactionReply::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_VeriBlockTransactionReply_integration_2eproto.base);
  ::memset(&result_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&transaction_) -
      reinterpret_cast<char*>(&result_)) + sizeof(transaction_));
}

VeriBlockTransactionReply::~VeriBlockTransactionReply() {
  // @@protoc_insertion_point(destructor:VeriBlock.VeriBlockTransactionReply)
  SharedDtor();
}

void VeriBlockTransactionReply::SharedDtor() {
  if (this != internal_default_instance()) delete result_;
  if (this != internal_default_instance()) delete transaction_;
}

void VeriBlockTransactionReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VeriBlockTransactionReply& VeriBlockTransactionReply::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_VeriBlockTransactionReply_integration_2eproto.base);
  return *internal_default_instance();
}


void VeriBlockTransactionReply::Clear() {
// @@protoc_insertion_point(message_clear_start:VeriBlock.VeriBlockTransactionReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && transaction_ != nullptr) {
    delete transaction_;
  }
  transaction_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* VeriBlockTransactionReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .VeriBlock.GeneralReply result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_result(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .VeriBlock.VeriBlockTransaction transaction = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_transaction(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool VeriBlockTransactionReply::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:VeriBlock.VeriBlockTransactionReply)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .VeriBlock.GeneralReply result = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_result()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .VeriBlock.VeriBlockTransaction transaction = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_transaction()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:VeriBlock.VeriBlockTransactionReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:VeriBlock.VeriBlockTransactionReply)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void VeriBlockTransactionReply::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:VeriBlock.VeriBlockTransactionReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .VeriBlock.GeneralReply result = 1;
  if (this->has_result()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::result(this), output);
  }

  // .VeriBlock.VeriBlockTransaction transaction = 2;
  if (this->has_transaction()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, _Internal::transaction(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:VeriBlock.VeriBlockTransactionReply)
}

::PROTOBUF_NAMESPACE_ID::uint8* VeriBlockTransactionReply::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:VeriBlock.VeriBlockTransactionReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .VeriBlock.GeneralReply result = 1;
  if (this->has_result()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::result(this), target);
  }

  // .VeriBlock.VeriBlockTransaction transaction = 2;
  if (this->has_transaction()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::transaction(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:VeriBlock.VeriBlockTransactionReply)
  return target;
}

size_t VeriBlockTransactionReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:VeriBlock.VeriBlockTransactionReply)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .VeriBlock.GeneralReply result = 1;
  if (this->has_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *result_);
  }

  // .VeriBlock.VeriBlockTransaction transaction = 2;
  if (this->has_transaction()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *transaction_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VeriBlockTransactionReply::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:VeriBlock.VeriBlockTransactionReply)
  GOOGLE_DCHECK_NE(&from, this);
  const VeriBlockTransactionReply* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VeriBlockTransactionReply>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:VeriBlock.VeriBlockTransactionReply)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:VeriBlock.VeriBlockTransactionReply)
    MergeFrom(*source);
  }
}

void VeriBlockTransactionReply::MergeFrom(const VeriBlockTransactionReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:VeriBlock.VeriBlockTransactionReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_result()) {
    mutable_result()->::VeriBlock::GeneralReply::MergeFrom(from.result());
  }
  if (from.has_transaction()) {
    mutable_transaction()->::VeriBlock::VeriBlockTransaction::MergeFrom(from.transaction());
  }
}

void VeriBlockTransactionReply::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:VeriBlock.VeriBlockTransactionReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VeriBlockTransactionReply::CopyFrom(const VeriBlockTransactionReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:VeriBlock.VeriBlockTransactionReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VeriBlockTransactionReply::IsInitialized() const {
  return true;
}

void VeriBlockTransactionReply::InternalSwap(VeriBlockTransactionReply* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(result_, other->result_);
  swap(transaction_, other->transaction_);
}

::PROTOBUF_NAMESPACE_ID::Metadata VeriBlockTransactionReply::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void VeriBlockPublicationReply::InitAsDefaultInstance() {
  ::VeriBlock::_VeriBlockPublicationReply_default_instance_._instance.get_mutable()->result_ = const_cast< ::VeriBlock::GeneralReply*>(
      ::VeriBlock::GeneralReply::internal_default_instance());
  ::VeriBlock::_VeriBlockPublicationReply_default_instance_._instance.get_mutable()->publication_ = const_cast< ::VeriBlock::VeriBlockPublication*>(
      ::VeriBlock::VeriBlockPublication::internal_default_instance());
}
class VeriBlockPublicationReply::_Internal {
 public:
  static const ::VeriBlock::GeneralReply& result(const VeriBlockPublicationReply* msg);
  static const ::VeriBlock::VeriBlockPublication& publication(const VeriBlockPublicationReply* msg);
};

const ::VeriBlock::GeneralReply&
VeriBlockPublicationReply::_Internal::result(const VeriBlockPublicationReply* msg) {
  return *msg->result_;
}
const ::VeriBlock::VeriBlockPublication&
VeriBlockPublicationReply::_Internal::publication(const VeriBlockPublicationReply* msg) {
  return *msg->publication_;
}
VeriBlockPublicationReply::VeriBlockPublicationReply()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:VeriBlock.VeriBlockPublicationReply)
}
VeriBlockPublicationReply::VeriBlockPublicationReply(const VeriBlockPublicationReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_result()) {
    result_ = new ::VeriBlock::GeneralReply(*from.result_);
  } else {
    result_ = nullptr;
  }
  if (from.has_publication()) {
    publication_ = new ::VeriBlock::VeriBlockPublication(*from.publication_);
  } else {
    publication_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:VeriBlock.VeriBlockPublicationReply)
}

void VeriBlockPublicationReply::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_VeriBlockPublicationReply_integration_2eproto.base);
  ::memset(&result_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&publication_) -
      reinterpret_cast<char*>(&result_)) + sizeof(publication_));
}

VeriBlockPublicationReply::~VeriBlockPublicationReply() {
  // @@protoc_insertion_point(destructor:VeriBlock.VeriBlockPublicationReply)
  SharedDtor();
}

void VeriBlockPublicationReply::SharedDtor() {
  if (this != internal_default_instance()) delete result_;
  if (this != internal_default_instance()) delete publication_;
}

void VeriBlockPublicationReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VeriBlockPublicationReply& VeriBlockPublicationReply::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_VeriBlockPublicationReply_integration_2eproto.base);
  return *internal_default_instance();
}


void VeriBlockPublicationReply::Clear() {
// @@protoc_insertion_point(message_clear_start:VeriBlock.VeriBlockPublicationReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && publication_ != nullptr) {
    delete publication_;
  }
  publication_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* VeriBlockPublicationReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .VeriBlock.GeneralReply result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_result(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .VeriBlock.VeriBlockPublication publication = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_publication(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool VeriBlockPublicationReply::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:VeriBlock.VeriBlockPublicationReply)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .VeriBlock.GeneralReply result = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_result()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .VeriBlock.VeriBlockPublication publication = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_publication()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:VeriBlock.VeriBlockPublicationReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:VeriBlock.VeriBlockPublicationReply)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void VeriBlockPublicationReply::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:VeriBlock.VeriBlockPublicationReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .VeriBlock.GeneralReply result = 1;
  if (this->has_result()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::result(this), output);
  }

  // .VeriBlock.VeriBlockPublication publication = 2;
  if (this->has_publication()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, _Internal::publication(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:VeriBlock.VeriBlockPublicationReply)
}

::PROTOBUF_NAMESPACE_ID::uint8* VeriBlockPublicationReply::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:VeriBlock.VeriBlockPublicationReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .VeriBlock.GeneralReply result = 1;
  if (this->has_result()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::result(this), target);
  }

  // .VeriBlock.VeriBlockPublication publication = 2;
  if (this->has_publication()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::publication(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:VeriBlock.VeriBlockPublicationReply)
  return target;
}

size_t VeriBlockPublicationReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:VeriBlock.VeriBlockPublicationReply)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .VeriBlock.GeneralReply result = 1;
  if (this->has_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *result_);
  }

  // .VeriBlock.VeriBlockPublication publication = 2;
  if (this->has_publication()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *publication_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VeriBlockPublicationReply::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:VeriBlock.VeriBlockPublicationReply)
  GOOGLE_DCHECK_NE(&from, this);
  const VeriBlockPublicationReply* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VeriBlockPublicationReply>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:VeriBlock.VeriBlockPublicationReply)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:VeriBlock.VeriBlockPublicationReply)
    MergeFrom(*source);
  }
}

void VeriBlockPublicationReply::MergeFrom(const VeriBlockPublicationReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:VeriBlock.VeriBlockPublicationReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_result()) {
    mutable_result()->::VeriBlock::GeneralReply::MergeFrom(from.result());
  }
  if (from.has_publication()) {
    mutable_publication()->::VeriBlock::VeriBlockPublication::MergeFrom(from.publication());
  }
}

void VeriBlockPublicationReply::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:VeriBlock.VeriBlockPublicationReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VeriBlockPublicationReply::CopyFrom(const VeriBlockPublicationReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:VeriBlock.VeriBlockPublicationReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VeriBlockPublicationReply::IsInitialized() const {
  return true;
}

void VeriBlockPublicationReply::InternalSwap(VeriBlockPublicationReply* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(result_, other->result_);
  swap(publication_, other->publication_);
}

::PROTOBUF_NAMESPACE_ID::Metadata VeriBlockPublicationReply::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void VeriBlockPoPTransactionReply::InitAsDefaultInstance() {
  ::VeriBlock::_VeriBlockPoPTransactionReply_default_instance_._instance.get_mutable()->result_ = const_cast< ::VeriBlock::GeneralReply*>(
      ::VeriBlock::GeneralReply::internal_default_instance());
  ::VeriBlock::_VeriBlockPoPTransactionReply_default_instance_._instance.get_mutable()->transaction_ = const_cast< ::VeriBlock::VeriBlockPoPTransaction*>(
      ::VeriBlock::VeriBlockPoPTransaction::internal_default_instance());
}
class VeriBlockPoPTransactionReply::_Internal {
 public:
  static const ::VeriBlock::GeneralReply& result(const VeriBlockPoPTransactionReply* msg);
  static const ::VeriBlock::VeriBlockPoPTransaction& transaction(const VeriBlockPoPTransactionReply* msg);
};

const ::VeriBlock::GeneralReply&
VeriBlockPoPTransactionReply::_Internal::result(const VeriBlockPoPTransactionReply* msg) {
  return *msg->result_;
}
const ::VeriBlock::VeriBlockPoPTransaction&
VeriBlockPoPTransactionReply::_Internal::transaction(const VeriBlockPoPTransactionReply* msg) {
  return *msg->transaction_;
}
VeriBlockPoPTransactionReply::VeriBlockPoPTransactionReply()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:VeriBlock.VeriBlockPoPTransactionReply)
}
VeriBlockPoPTransactionReply::VeriBlockPoPTransactionReply(const VeriBlockPoPTransactionReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_result()) {
    result_ = new ::VeriBlock::GeneralReply(*from.result_);
  } else {
    result_ = nullptr;
  }
  if (from.has_transaction()) {
    transaction_ = new ::VeriBlock::VeriBlockPoPTransaction(*from.transaction_);
  } else {
    transaction_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:VeriBlock.VeriBlockPoPTransactionReply)
}

void VeriBlockPoPTransactionReply::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_VeriBlockPoPTransactionReply_integration_2eproto.base);
  ::memset(&result_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&transaction_) -
      reinterpret_cast<char*>(&result_)) + sizeof(transaction_));
}

VeriBlockPoPTransactionReply::~VeriBlockPoPTransactionReply() {
  // @@protoc_insertion_point(destructor:VeriBlock.VeriBlockPoPTransactionReply)
  SharedDtor();
}

void VeriBlockPoPTransactionReply::SharedDtor() {
  if (this != internal_default_instance()) delete result_;
  if (this != internal_default_instance()) delete transaction_;
}

void VeriBlockPoPTransactionReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VeriBlockPoPTransactionReply& VeriBlockPoPTransactionReply::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_VeriBlockPoPTransactionReply_integration_2eproto.base);
  return *internal_default_instance();
}


void VeriBlockPoPTransactionReply::Clear() {
// @@protoc_insertion_point(message_clear_start:VeriBlock.VeriBlockPoPTransactionReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && transaction_ != nullptr) {
    delete transaction_;
  }
  transaction_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* VeriBlockPoPTransactionReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .VeriBlock.GeneralReply result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_result(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .VeriBlock.VeriBlockPoPTransaction transaction = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_transaction(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool VeriBlockPoPTransactionReply::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:VeriBlock.VeriBlockPoPTransactionReply)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .VeriBlock.GeneralReply result = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_result()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .VeriBlock.VeriBlockPoPTransaction transaction = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_transaction()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:VeriBlock.VeriBlockPoPTransactionReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:VeriBlock.VeriBlockPoPTransactionReply)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void VeriBlockPoPTransactionReply::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:VeriBlock.VeriBlockPoPTransactionReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .VeriBlock.GeneralReply result = 1;
  if (this->has_result()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::result(this), output);
  }

  // .VeriBlock.VeriBlockPoPTransaction transaction = 2;
  if (this->has_transaction()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, _Internal::transaction(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:VeriBlock.VeriBlockPoPTransactionReply)
}

::PROTOBUF_NAMESPACE_ID::uint8* VeriBlockPoPTransactionReply::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:VeriBlock.VeriBlockPoPTransactionReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .VeriBlock.GeneralReply result = 1;
  if (this->has_result()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::result(this), target);
  }

  // .VeriBlock.VeriBlockPoPTransaction transaction = 2;
  if (this->has_transaction()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::transaction(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:VeriBlock.VeriBlockPoPTransactionReply)
  return target;
}

size_t VeriBlockPoPTransactionReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:VeriBlock.VeriBlockPoPTransactionReply)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .VeriBlock.GeneralReply result = 1;
  if (this->has_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *result_);
  }

  // .VeriBlock.VeriBlockPoPTransaction transaction = 2;
  if (this->has_transaction()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *transaction_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VeriBlockPoPTransactionReply::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:VeriBlock.VeriBlockPoPTransactionReply)
  GOOGLE_DCHECK_NE(&from, this);
  const VeriBlockPoPTransactionReply* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VeriBlockPoPTransactionReply>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:VeriBlock.VeriBlockPoPTransactionReply)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:VeriBlock.VeriBlockPoPTransactionReply)
    MergeFrom(*source);
  }
}

void VeriBlockPoPTransactionReply::MergeFrom(const VeriBlockPoPTransactionReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:VeriBlock.VeriBlockPoPTransactionReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_result()) {
    mutable_result()->::VeriBlock::GeneralReply::MergeFrom(from.result());
  }
  if (from.has_transaction()) {
    mutable_transaction()->::VeriBlock::VeriBlockPoPTransaction::MergeFrom(from.transaction());
  }
}

void VeriBlockPoPTransactionReply::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:VeriBlock.VeriBlockPoPTransactionReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VeriBlockPoPTransactionReply::CopyFrom(const VeriBlockPoPTransactionReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:VeriBlock.VeriBlockPoPTransactionReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VeriBlockPoPTransactionReply::IsInitialized() const {
  return true;
}

void VeriBlockPoPTransactionReply::InternalSwap(VeriBlockPoPTransactionReply* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(result_, other->result_);
  swap(transaction_, other->transaction_);
}

::PROTOBUF_NAMESPACE_ID::Metadata VeriBlockPoPTransactionReply::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void OutputReply::InitAsDefaultInstance() {
  ::VeriBlock::_OutputReply_default_instance_._instance.get_mutable()->result_ = const_cast< ::VeriBlock::GeneralReply*>(
      ::VeriBlock::GeneralReply::internal_default_instance());
  ::VeriBlock::_OutputReply_default_instance_._instance.get_mutable()->output_ = const_cast< ::VeriBlock::Output*>(
      ::VeriBlock::Output::internal_default_instance());
}
class OutputReply::_Internal {
 public:
  static const ::VeriBlock::GeneralReply& result(const OutputReply* msg);
  static const ::VeriBlock::Output& output(const OutputReply* msg);
};

const ::VeriBlock::GeneralReply&
OutputReply::_Internal::result(const OutputReply* msg) {
  return *msg->result_;
}
const ::VeriBlock::Output&
OutputReply::_Internal::output(const OutputReply* msg) {
  return *msg->output_;
}
OutputReply::OutputReply()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:VeriBlock.OutputReply)
}
OutputReply::OutputReply(const OutputReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_result()) {
    result_ = new ::VeriBlock::GeneralReply(*from.result_);
  } else {
    result_ = nullptr;
  }
  if (from.has_output()) {
    output_ = new ::VeriBlock::Output(*from.output_);
  } else {
    output_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:VeriBlock.OutputReply)
}

void OutputReply::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_OutputReply_integration_2eproto.base);
  ::memset(&result_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&output_) -
      reinterpret_cast<char*>(&result_)) + sizeof(output_));
}

OutputReply::~OutputReply() {
  // @@protoc_insertion_point(destructor:VeriBlock.OutputReply)
  SharedDtor();
}

void OutputReply::SharedDtor() {
  if (this != internal_default_instance()) delete result_;
  if (this != internal_default_instance()) delete output_;
}

void OutputReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OutputReply& OutputReply::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OutputReply_integration_2eproto.base);
  return *internal_default_instance();
}


void OutputReply::Clear() {
// @@protoc_insertion_point(message_clear_start:VeriBlock.OutputReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && output_ != nullptr) {
    delete output_;
  }
  output_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* OutputReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .VeriBlock.GeneralReply result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_result(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .VeriBlock.Output output = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_output(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool OutputReply::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:VeriBlock.OutputReply)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .VeriBlock.GeneralReply result = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_result()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .VeriBlock.Output output = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_output()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:VeriBlock.OutputReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:VeriBlock.OutputReply)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void OutputReply::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:VeriBlock.OutputReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .VeriBlock.GeneralReply result = 1;
  if (this->has_result()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::result(this), output);
  }

  // .VeriBlock.Output output = 2;
  if (this->has_output()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, _Internal::output(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:VeriBlock.OutputReply)
}

::PROTOBUF_NAMESPACE_ID::uint8* OutputReply::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:VeriBlock.OutputReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .VeriBlock.GeneralReply result = 1;
  if (this->has_result()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::result(this), target);
  }

  // .VeriBlock.Output output = 2;
  if (this->has_output()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::output(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:VeriBlock.OutputReply)
  return target;
}

size_t OutputReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:VeriBlock.OutputReply)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .VeriBlock.GeneralReply result = 1;
  if (this->has_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *result_);
  }

  // .VeriBlock.Output output = 2;
  if (this->has_output()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *output_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OutputReply::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:VeriBlock.OutputReply)
  GOOGLE_DCHECK_NE(&from, this);
  const OutputReply* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OutputReply>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:VeriBlock.OutputReply)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:VeriBlock.OutputReply)
    MergeFrom(*source);
  }
}

void OutputReply::MergeFrom(const OutputReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:VeriBlock.OutputReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_result()) {
    mutable_result()->::VeriBlock::GeneralReply::MergeFrom(from.result());
  }
  if (from.has_output()) {
    mutable_output()->::VeriBlock::Output::MergeFrom(from.output());
  }
}

void OutputReply::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:VeriBlock.OutputReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OutputReply::CopyFrom(const OutputReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:VeriBlock.OutputReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OutputReply::IsInitialized() const {
  return true;
}

void OutputReply::InternalSwap(OutputReply* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(result_, other->result_);
  swap(output_, other->output_);
}

::PROTOBUF_NAMESPACE_ID::Metadata OutputReply::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AddressReply::InitAsDefaultInstance() {
  ::VeriBlock::_AddressReply_default_instance_._instance.get_mutable()->result_ = const_cast< ::VeriBlock::GeneralReply*>(
      ::VeriBlock::GeneralReply::internal_default_instance());
  ::VeriBlock::_AddressReply_default_instance_._instance.get_mutable()->address_ = const_cast< ::VeriBlock::Address*>(
      ::VeriBlock::Address::internal_default_instance());
}
class AddressReply::_Internal {
 public:
  static const ::VeriBlock::GeneralReply& result(const AddressReply* msg);
  static const ::VeriBlock::Address& address(const AddressReply* msg);
};

const ::VeriBlock::GeneralReply&
AddressReply::_Internal::result(const AddressReply* msg) {
  return *msg->result_;
}
const ::VeriBlock::Address&
AddressReply::_Internal::address(const AddressReply* msg) {
  return *msg->address_;
}
AddressReply::AddressReply()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:VeriBlock.AddressReply)
}
AddressReply::AddressReply(const AddressReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_result()) {
    result_ = new ::VeriBlock::GeneralReply(*from.result_);
  } else {
    result_ = nullptr;
  }
  if (from.has_address()) {
    address_ = new ::VeriBlock::Address(*from.address_);
  } else {
    address_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:VeriBlock.AddressReply)
}

void AddressReply::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AddressReply_integration_2eproto.base);
  ::memset(&result_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&address_) -
      reinterpret_cast<char*>(&result_)) + sizeof(address_));
}

AddressReply::~AddressReply() {
  // @@protoc_insertion_point(destructor:VeriBlock.AddressReply)
  SharedDtor();
}

void AddressReply::SharedDtor() {
  if (this != internal_default_instance()) delete result_;
  if (this != internal_default_instance()) delete address_;
}

void AddressReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AddressReply& AddressReply::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AddressReply_integration_2eproto.base);
  return *internal_default_instance();
}


void AddressReply::Clear() {
// @@protoc_insertion_point(message_clear_start:VeriBlock.AddressReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && address_ != nullptr) {
    delete address_;
  }
  address_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AddressReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .VeriBlock.GeneralReply result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_result(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .VeriBlock.Address address = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_address(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AddressReply::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:VeriBlock.AddressReply)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .VeriBlock.GeneralReply result = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_result()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .VeriBlock.Address address = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_address()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:VeriBlock.AddressReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:VeriBlock.AddressReply)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AddressReply::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:VeriBlock.AddressReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .VeriBlock.GeneralReply result = 1;
  if (this->has_result()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::result(this), output);
  }

  // .VeriBlock.Address address = 2;
  if (this->has_address()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, _Internal::address(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:VeriBlock.AddressReply)
}

::PROTOBUF_NAMESPACE_ID::uint8* AddressReply::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:VeriBlock.AddressReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .VeriBlock.GeneralReply result = 1;
  if (this->has_result()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::result(this), target);
  }

  // .VeriBlock.Address address = 2;
  if (this->has_address()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::address(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:VeriBlock.AddressReply)
  return target;
}

size_t AddressReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:VeriBlock.AddressReply)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .VeriBlock.GeneralReply result = 1;
  if (this->has_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *result_);
  }

  // .VeriBlock.Address address = 2;
  if (this->has_address()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *address_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AddressReply::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:VeriBlock.AddressReply)
  GOOGLE_DCHECK_NE(&from, this);
  const AddressReply* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AddressReply>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:VeriBlock.AddressReply)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:VeriBlock.AddressReply)
    MergeFrom(*source);
  }
}

void AddressReply::MergeFrom(const AddressReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:VeriBlock.AddressReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_result()) {
    mutable_result()->::VeriBlock::GeneralReply::MergeFrom(from.result());
  }
  if (from.has_address()) {
    mutable_address()->::VeriBlock::Address::MergeFrom(from.address());
  }
}

void AddressReply::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:VeriBlock.AddressReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddressReply::CopyFrom(const AddressReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:VeriBlock.AddressReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddressReply::IsInitialized() const {
  return true;
}

void AddressReply::InternalSwap(AddressReply* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(result_, other->result_);
  swap(address_, other->address_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AddressReply::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BitcoinBlockReply::InitAsDefaultInstance() {
  ::VeriBlock::_BitcoinBlockReply_default_instance_._instance.get_mutable()->result_ = const_cast< ::VeriBlock::GeneralReply*>(
      ::VeriBlock::GeneralReply::internal_default_instance());
  ::VeriBlock::_BitcoinBlockReply_default_instance_._instance.get_mutable()->block_ = const_cast< ::VeriBlock::BitcoinBlock*>(
      ::VeriBlock::BitcoinBlock::internal_default_instance());
}
class BitcoinBlockReply::_Internal {
 public:
  static const ::VeriBlock::GeneralReply& result(const BitcoinBlockReply* msg);
  static const ::VeriBlock::BitcoinBlock& block(const BitcoinBlockReply* msg);
};

const ::VeriBlock::GeneralReply&
BitcoinBlockReply::_Internal::result(const BitcoinBlockReply* msg) {
  return *msg->result_;
}
const ::VeriBlock::BitcoinBlock&
BitcoinBlockReply::_Internal::block(const BitcoinBlockReply* msg) {
  return *msg->block_;
}
BitcoinBlockReply::BitcoinBlockReply()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:VeriBlock.BitcoinBlockReply)
}
BitcoinBlockReply::BitcoinBlockReply(const BitcoinBlockReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_result()) {
    result_ = new ::VeriBlock::GeneralReply(*from.result_);
  } else {
    result_ = nullptr;
  }
  if (from.has_block()) {
    block_ = new ::VeriBlock::BitcoinBlock(*from.block_);
  } else {
    block_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:VeriBlock.BitcoinBlockReply)
}

void BitcoinBlockReply::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BitcoinBlockReply_integration_2eproto.base);
  ::memset(&result_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&block_) -
      reinterpret_cast<char*>(&result_)) + sizeof(block_));
}

BitcoinBlockReply::~BitcoinBlockReply() {
  // @@protoc_insertion_point(destructor:VeriBlock.BitcoinBlockReply)
  SharedDtor();
}

void BitcoinBlockReply::SharedDtor() {
  if (this != internal_default_instance()) delete result_;
  if (this != internal_default_instance()) delete block_;
}

void BitcoinBlockReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BitcoinBlockReply& BitcoinBlockReply::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BitcoinBlockReply_integration_2eproto.base);
  return *internal_default_instance();
}


void BitcoinBlockReply::Clear() {
// @@protoc_insertion_point(message_clear_start:VeriBlock.BitcoinBlockReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && block_ != nullptr) {
    delete block_;
  }
  block_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* BitcoinBlockReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .VeriBlock.GeneralReply result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_result(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .VeriBlock.BitcoinBlock block = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_block(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool BitcoinBlockReply::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:VeriBlock.BitcoinBlockReply)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .VeriBlock.GeneralReply result = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_result()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .VeriBlock.BitcoinBlock block = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_block()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:VeriBlock.BitcoinBlockReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:VeriBlock.BitcoinBlockReply)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void BitcoinBlockReply::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:VeriBlock.BitcoinBlockReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .VeriBlock.GeneralReply result = 1;
  if (this->has_result()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::result(this), output);
  }

  // .VeriBlock.BitcoinBlock block = 2;
  if (this->has_block()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, _Internal::block(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:VeriBlock.BitcoinBlockReply)
}

::PROTOBUF_NAMESPACE_ID::uint8* BitcoinBlockReply::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:VeriBlock.BitcoinBlockReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .VeriBlock.GeneralReply result = 1;
  if (this->has_result()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::result(this), target);
  }

  // .VeriBlock.BitcoinBlock block = 2;
  if (this->has_block()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::block(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:VeriBlock.BitcoinBlockReply)
  return target;
}

size_t BitcoinBlockReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:VeriBlock.BitcoinBlockReply)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .VeriBlock.GeneralReply result = 1;
  if (this->has_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *result_);
  }

  // .VeriBlock.BitcoinBlock block = 2;
  if (this->has_block()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *block_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BitcoinBlockReply::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:VeriBlock.BitcoinBlockReply)
  GOOGLE_DCHECK_NE(&from, this);
  const BitcoinBlockReply* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BitcoinBlockReply>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:VeriBlock.BitcoinBlockReply)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:VeriBlock.BitcoinBlockReply)
    MergeFrom(*source);
  }
}

void BitcoinBlockReply::MergeFrom(const BitcoinBlockReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:VeriBlock.BitcoinBlockReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_result()) {
    mutable_result()->::VeriBlock::GeneralReply::MergeFrom(from.result());
  }
  if (from.has_block()) {
    mutable_block()->::VeriBlock::BitcoinBlock::MergeFrom(from.block());
  }
}

void BitcoinBlockReply::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:VeriBlock.BitcoinBlockReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BitcoinBlockReply::CopyFrom(const BitcoinBlockReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:VeriBlock.BitcoinBlockReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BitcoinBlockReply::IsInitialized() const {
  return true;
}

void BitcoinBlockReply::InternalSwap(BitcoinBlockReply* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(result_, other->result_);
  swap(block_, other->block_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BitcoinBlockReply::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void VeriBlockMerklePathReply::InitAsDefaultInstance() {
  ::VeriBlock::_VeriBlockMerklePathReply_default_instance_._instance.get_mutable()->result_ = const_cast< ::VeriBlock::GeneralReply*>(
      ::VeriBlock::GeneralReply::internal_default_instance());
  ::VeriBlock::_VeriBlockMerklePathReply_default_instance_._instance.get_mutable()->merklepath_ = const_cast< ::VeriBlock::VeriBlockMerklePath*>(
      ::VeriBlock::VeriBlockMerklePath::internal_default_instance());
}
class VeriBlockMerklePathReply::_Internal {
 public:
  static const ::VeriBlock::GeneralReply& result(const VeriBlockMerklePathReply* msg);
  static const ::VeriBlock::VeriBlockMerklePath& merklepath(const VeriBlockMerklePathReply* msg);
};

const ::VeriBlock::GeneralReply&
VeriBlockMerklePathReply::_Internal::result(const VeriBlockMerklePathReply* msg) {
  return *msg->result_;
}
const ::VeriBlock::VeriBlockMerklePath&
VeriBlockMerklePathReply::_Internal::merklepath(const VeriBlockMerklePathReply* msg) {
  return *msg->merklepath_;
}
VeriBlockMerklePathReply::VeriBlockMerklePathReply()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:VeriBlock.VeriBlockMerklePathReply)
}
VeriBlockMerklePathReply::VeriBlockMerklePathReply(const VeriBlockMerklePathReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_result()) {
    result_ = new ::VeriBlock::GeneralReply(*from.result_);
  } else {
    result_ = nullptr;
  }
  if (from.has_merklepath()) {
    merklepath_ = new ::VeriBlock::VeriBlockMerklePath(*from.merklepath_);
  } else {
    merklepath_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:VeriBlock.VeriBlockMerklePathReply)
}

void VeriBlockMerklePathReply::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_VeriBlockMerklePathReply_integration_2eproto.base);
  ::memset(&result_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&merklepath_) -
      reinterpret_cast<char*>(&result_)) + sizeof(merklepath_));
}

VeriBlockMerklePathReply::~VeriBlockMerklePathReply() {
  // @@protoc_insertion_point(destructor:VeriBlock.VeriBlockMerklePathReply)
  SharedDtor();
}

void VeriBlockMerklePathReply::SharedDtor() {
  if (this != internal_default_instance()) delete result_;
  if (this != internal_default_instance()) delete merklepath_;
}

void VeriBlockMerklePathReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VeriBlockMerklePathReply& VeriBlockMerklePathReply::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_VeriBlockMerklePathReply_integration_2eproto.base);
  return *internal_default_instance();
}


void VeriBlockMerklePathReply::Clear() {
// @@protoc_insertion_point(message_clear_start:VeriBlock.VeriBlockMerklePathReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && merklepath_ != nullptr) {
    delete merklepath_;
  }
  merklepath_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* VeriBlockMerklePathReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .VeriBlock.GeneralReply result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_result(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .VeriBlock.VeriBlockMerklePath merklePath = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_merklepath(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool VeriBlockMerklePathReply::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:VeriBlock.VeriBlockMerklePathReply)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .VeriBlock.GeneralReply result = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_result()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .VeriBlock.VeriBlockMerklePath merklePath = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_merklepath()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:VeriBlock.VeriBlockMerklePathReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:VeriBlock.VeriBlockMerklePathReply)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void VeriBlockMerklePathReply::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:VeriBlock.VeriBlockMerklePathReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .VeriBlock.GeneralReply result = 1;
  if (this->has_result()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::result(this), output);
  }

  // .VeriBlock.VeriBlockMerklePath merklePath = 2;
  if (this->has_merklepath()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, _Internal::merklepath(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:VeriBlock.VeriBlockMerklePathReply)
}

::PROTOBUF_NAMESPACE_ID::uint8* VeriBlockMerklePathReply::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:VeriBlock.VeriBlockMerklePathReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .VeriBlock.GeneralReply result = 1;
  if (this->has_result()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::result(this), target);
  }

  // .VeriBlock.VeriBlockMerklePath merklePath = 2;
  if (this->has_merklepath()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::merklepath(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:VeriBlock.VeriBlockMerklePathReply)
  return target;
}

size_t VeriBlockMerklePathReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:VeriBlock.VeriBlockMerklePathReply)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .VeriBlock.GeneralReply result = 1;
  if (this->has_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *result_);
  }

  // .VeriBlock.VeriBlockMerklePath merklePath = 2;
  if (this->has_merklepath()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *merklepath_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VeriBlockMerklePathReply::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:VeriBlock.VeriBlockMerklePathReply)
  GOOGLE_DCHECK_NE(&from, this);
  const VeriBlockMerklePathReply* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VeriBlockMerklePathReply>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:VeriBlock.VeriBlockMerklePathReply)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:VeriBlock.VeriBlockMerklePathReply)
    MergeFrom(*source);
  }
}

void VeriBlockMerklePathReply::MergeFrom(const VeriBlockMerklePathReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:VeriBlock.VeriBlockMerklePathReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_result()) {
    mutable_result()->::VeriBlock::GeneralReply::MergeFrom(from.result());
  }
  if (from.has_merklepath()) {
    mutable_merklepath()->::VeriBlock::VeriBlockMerklePath::MergeFrom(from.merklepath());
  }
}

void VeriBlockMerklePathReply::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:VeriBlock.VeriBlockMerklePathReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VeriBlockMerklePathReply::CopyFrom(const VeriBlockMerklePathReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:VeriBlock.VeriBlockMerklePathReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VeriBlockMerklePathReply::IsInitialized() const {
  return true;
}

void VeriBlockMerklePathReply::InternalSwap(VeriBlockMerklePathReply* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(result_, other->result_);
  swap(merklepath_, other->merklepath_);
}

::PROTOBUF_NAMESPACE_ID::Metadata VeriBlockMerklePathReply::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MerklePathReply::InitAsDefaultInstance() {
  ::VeriBlock::_MerklePathReply_default_instance_._instance.get_mutable()->result_ = const_cast< ::VeriBlock::GeneralReply*>(
      ::VeriBlock::GeneralReply::internal_default_instance());
  ::VeriBlock::_MerklePathReply_default_instance_._instance.get_mutable()->merklepath_ = const_cast< ::VeriBlock::MerklePath*>(
      ::VeriBlock::MerklePath::internal_default_instance());
}
class MerklePathReply::_Internal {
 public:
  static const ::VeriBlock::GeneralReply& result(const MerklePathReply* msg);
  static const ::VeriBlock::MerklePath& merklepath(const MerklePathReply* msg);
};

const ::VeriBlock::GeneralReply&
MerklePathReply::_Internal::result(const MerklePathReply* msg) {
  return *msg->result_;
}
const ::VeriBlock::MerklePath&
MerklePathReply::_Internal::merklepath(const MerklePathReply* msg) {
  return *msg->merklepath_;
}
MerklePathReply::MerklePathReply()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:VeriBlock.MerklePathReply)
}
MerklePathReply::MerklePathReply(const MerklePathReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_result()) {
    result_ = new ::VeriBlock::GeneralReply(*from.result_);
  } else {
    result_ = nullptr;
  }
  if (from.has_merklepath()) {
    merklepath_ = new ::VeriBlock::MerklePath(*from.merklepath_);
  } else {
    merklepath_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:VeriBlock.MerklePathReply)
}

void MerklePathReply::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MerklePathReply_integration_2eproto.base);
  ::memset(&result_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&merklepath_) -
      reinterpret_cast<char*>(&result_)) + sizeof(merklepath_));
}

MerklePathReply::~MerklePathReply() {
  // @@protoc_insertion_point(destructor:VeriBlock.MerklePathReply)
  SharedDtor();
}

void MerklePathReply::SharedDtor() {
  if (this != internal_default_instance()) delete result_;
  if (this != internal_default_instance()) delete merklepath_;
}

void MerklePathReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MerklePathReply& MerklePathReply::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MerklePathReply_integration_2eproto.base);
  return *internal_default_instance();
}


void MerklePathReply::Clear() {
// @@protoc_insertion_point(message_clear_start:VeriBlock.MerklePathReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && merklepath_ != nullptr) {
    delete merklepath_;
  }
  merklepath_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MerklePathReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .VeriBlock.GeneralReply result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_result(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .VeriBlock.MerklePath merklePath = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_merklepath(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MerklePathReply::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:VeriBlock.MerklePathReply)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .VeriBlock.GeneralReply result = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_result()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .VeriBlock.MerklePath merklePath = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_merklepath()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:VeriBlock.MerklePathReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:VeriBlock.MerklePathReply)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MerklePathReply::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:VeriBlock.MerklePathReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .VeriBlock.GeneralReply result = 1;
  if (this->has_result()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::result(this), output);
  }

  // .VeriBlock.MerklePath merklePath = 2;
  if (this->has_merklepath()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, _Internal::merklepath(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:VeriBlock.MerklePathReply)
}

::PROTOBUF_NAMESPACE_ID::uint8* MerklePathReply::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:VeriBlock.MerklePathReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .VeriBlock.GeneralReply result = 1;
  if (this->has_result()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::result(this), target);
  }

  // .VeriBlock.MerklePath merklePath = 2;
  if (this->has_merklepath()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::merklepath(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:VeriBlock.MerklePathReply)
  return target;
}

size_t MerklePathReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:VeriBlock.MerklePathReply)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .VeriBlock.GeneralReply result = 1;
  if (this->has_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *result_);
  }

  // .VeriBlock.MerklePath merklePath = 2;
  if (this->has_merklepath()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *merklepath_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MerklePathReply::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:VeriBlock.MerklePathReply)
  GOOGLE_DCHECK_NE(&from, this);
  const MerklePathReply* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MerklePathReply>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:VeriBlock.MerklePathReply)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:VeriBlock.MerklePathReply)
    MergeFrom(*source);
  }
}

void MerklePathReply::MergeFrom(const MerklePathReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:VeriBlock.MerklePathReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_result()) {
    mutable_result()->::VeriBlock::GeneralReply::MergeFrom(from.result());
  }
  if (from.has_merklepath()) {
    mutable_merklepath()->::VeriBlock::MerklePath::MergeFrom(from.merklepath());
  }
}

void MerklePathReply::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:VeriBlock.MerklePathReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MerklePathReply::CopyFrom(const MerklePathReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:VeriBlock.MerklePathReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MerklePathReply::IsInitialized() const {
  return true;
}

void MerklePathReply::InternalSwap(MerklePathReply* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(result_, other->result_);
  swap(merklepath_, other->merklepath_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MerklePathReply::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AltChainBlock::InitAsDefaultInstance() {
  ::VeriBlock::_AltChainBlock_default_instance_._instance.get_mutable()->blockindex_ = const_cast< ::VeriBlock::BlockIndex*>(
      ::VeriBlock::BlockIndex::internal_default_instance());
}
class AltChainBlock::_Internal {
 public:
  static const ::VeriBlock::BlockIndex& blockindex(const AltChainBlock* msg);
};

const ::VeriBlock::BlockIndex&
AltChainBlock::_Internal::blockindex(const AltChainBlock* msg) {
  return *msg->blockindex_;
}
AltChainBlock::AltChainBlock()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:VeriBlock.AltChainBlock)
}
AltChainBlock::AltChainBlock(const AltChainBlock& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_blockindex()) {
    blockindex_ = new ::VeriBlock::BlockIndex(*from.blockindex_);
  } else {
    blockindex_ = nullptr;
  }
  timestamp_ = from.timestamp_;
  // @@protoc_insertion_point(copy_constructor:VeriBlock.AltChainBlock)
}

void AltChainBlock::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AltChainBlock_integration_2eproto.base);
  ::memset(&blockindex_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timestamp_) -
      reinterpret_cast<char*>(&blockindex_)) + sizeof(timestamp_));
}

AltChainBlock::~AltChainBlock() {
  // @@protoc_insertion_point(destructor:VeriBlock.AltChainBlock)
  SharedDtor();
}

void AltChainBlock::SharedDtor() {
  if (this != internal_default_instance()) delete blockindex_;
}

void AltChainBlock::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AltChainBlock& AltChainBlock::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AltChainBlock_integration_2eproto.base);
  return *internal_default_instance();
}


void AltChainBlock::Clear() {
// @@protoc_insertion_point(message_clear_start:VeriBlock.AltChainBlock)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && blockindex_ != nullptr) {
    delete blockindex_;
  }
  blockindex_ = nullptr;
  timestamp_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AltChainBlock::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .VeriBlock.BlockIndex blockIndex = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_blockindex(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 timestamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AltChainBlock::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:VeriBlock.AltChainBlock)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .VeriBlock.BlockIndex blockIndex = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_blockindex()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 timestamp = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:VeriBlock.AltChainBlock)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:VeriBlock.AltChainBlock)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AltChainBlock::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:VeriBlock.AltChainBlock)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .VeriBlock.BlockIndex blockIndex = 1;
  if (this->has_blockindex()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::blockindex(this), output);
  }

  // int32 timestamp = 2;
  if (this->timestamp() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->timestamp(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:VeriBlock.AltChainBlock)
}

::PROTOBUF_NAMESPACE_ID::uint8* AltChainBlock::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:VeriBlock.AltChainBlock)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .VeriBlock.BlockIndex blockIndex = 1;
  if (this->has_blockindex()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::blockindex(this), target);
  }

  // int32 timestamp = 2;
  if (this->timestamp() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->timestamp(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:VeriBlock.AltChainBlock)
  return target;
}

size_t AltChainBlock::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:VeriBlock.AltChainBlock)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .VeriBlock.BlockIndex blockIndex = 1;
  if (this->has_blockindex()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *blockindex_);
  }

  // int32 timestamp = 2;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->timestamp());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AltChainBlock::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:VeriBlock.AltChainBlock)
  GOOGLE_DCHECK_NE(&from, this);
  const AltChainBlock* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AltChainBlock>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:VeriBlock.AltChainBlock)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:VeriBlock.AltChainBlock)
    MergeFrom(*source);
  }
}

void AltChainBlock::MergeFrom(const AltChainBlock& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:VeriBlock.AltChainBlock)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_blockindex()) {
    mutable_blockindex()->::VeriBlock::BlockIndex::MergeFrom(from.blockindex());
  }
  if (from.timestamp() != 0) {
    set_timestamp(from.timestamp());
  }
}

void AltChainBlock::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:VeriBlock.AltChainBlock)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AltChainBlock::CopyFrom(const AltChainBlock& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:VeriBlock.AltChainBlock)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AltChainBlock::IsInitialized() const {
  return true;
}

void AltChainBlock::InternalSwap(AltChainBlock* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(blockindex_, other->blockindex_);
  swap(timestamp_, other->timestamp_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AltChainBlock::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TwoBranchesRequest::InitAsDefaultInstance() {
}
class TwoBranchesRequest::_Internal {
 public:
};

TwoBranchesRequest::TwoBranchesRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:VeriBlock.TwoBranchesRequest)
}
TwoBranchesRequest::TwoBranchesRequest(const TwoBranchesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      leftfork_(from.leftfork_),
      rightfork_(from.rightfork_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:VeriBlock.TwoBranchesRequest)
}

void TwoBranchesRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TwoBranchesRequest_integration_2eproto.base);
}

TwoBranchesRequest::~TwoBranchesRequest() {
  // @@protoc_insertion_point(destructor:VeriBlock.TwoBranchesRequest)
  SharedDtor();
}

void TwoBranchesRequest::SharedDtor() {
}

void TwoBranchesRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TwoBranchesRequest& TwoBranchesRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TwoBranchesRequest_integration_2eproto.base);
  return *internal_default_instance();
}


void TwoBranchesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:VeriBlock.TwoBranchesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  leftfork_.Clear();
  rightfork_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TwoBranchesRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .VeriBlock.AltChainBlock leftFork = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_leftfork(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      // repeated .VeriBlock.AltChainBlock rightFork = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_rightfork(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TwoBranchesRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:VeriBlock.TwoBranchesRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .VeriBlock.AltChainBlock leftFork = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_leftfork()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .VeriBlock.AltChainBlock rightFork = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_rightfork()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:VeriBlock.TwoBranchesRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:VeriBlock.TwoBranchesRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TwoBranchesRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:VeriBlock.TwoBranchesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .VeriBlock.AltChainBlock leftFork = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->leftfork_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->leftfork(static_cast<int>(i)),
      output);
  }

  // repeated .VeriBlock.AltChainBlock rightFork = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->rightfork_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->rightfork(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:VeriBlock.TwoBranchesRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* TwoBranchesRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:VeriBlock.TwoBranchesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .VeriBlock.AltChainBlock leftFork = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->leftfork_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->leftfork(static_cast<int>(i)), target);
  }

  // repeated .VeriBlock.AltChainBlock rightFork = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->rightfork_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->rightfork(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:VeriBlock.TwoBranchesRequest)
  return target;
}

size_t TwoBranchesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:VeriBlock.TwoBranchesRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .VeriBlock.AltChainBlock leftFork = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->leftfork_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->leftfork(static_cast<int>(i)));
    }
  }

  // repeated .VeriBlock.AltChainBlock rightFork = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->rightfork_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->rightfork(static_cast<int>(i)));
    }
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TwoBranchesRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:VeriBlock.TwoBranchesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const TwoBranchesRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TwoBranchesRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:VeriBlock.TwoBranchesRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:VeriBlock.TwoBranchesRequest)
    MergeFrom(*source);
  }
}

void TwoBranchesRequest::MergeFrom(const TwoBranchesRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:VeriBlock.TwoBranchesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  leftfork_.MergeFrom(from.leftfork_);
  rightfork_.MergeFrom(from.rightfork_);
}

void TwoBranchesRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:VeriBlock.TwoBranchesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TwoBranchesRequest::CopyFrom(const TwoBranchesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:VeriBlock.TwoBranchesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TwoBranchesRequest::IsInitialized() const {
  return true;
}

void TwoBranchesRequest::InternalSwap(TwoBranchesRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&leftfork_)->InternalSwap(CastToBase(&other->leftfork_));
  CastToBase(&rightfork_)->InternalSwap(CastToBase(&other->rightfork_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TwoBranchesRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CompareReply::InitAsDefaultInstance() {
  ::VeriBlock::_CompareReply_default_instance_._instance.get_mutable()->result_ = const_cast< ::VeriBlock::GeneralReply*>(
      ::VeriBlock::GeneralReply::internal_default_instance());
}
class CompareReply::_Internal {
 public:
  static const ::VeriBlock::GeneralReply& result(const CompareReply* msg);
};

const ::VeriBlock::GeneralReply&
CompareReply::_Internal::result(const CompareReply* msg) {
  return *msg->result_;
}
CompareReply::CompareReply()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:VeriBlock.CompareReply)
}
CompareReply::CompareReply(const CompareReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_result()) {
    result_ = new ::VeriBlock::GeneralReply(*from.result_);
  } else {
    result_ = nullptr;
  }
  comparingsresult_ = from.comparingsresult_;
  // @@protoc_insertion_point(copy_constructor:VeriBlock.CompareReply)
}

void CompareReply::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CompareReply_integration_2eproto.base);
  ::memset(&result_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&comparingsresult_) -
      reinterpret_cast<char*>(&result_)) + sizeof(comparingsresult_));
}

CompareReply::~CompareReply() {
  // @@protoc_insertion_point(destructor:VeriBlock.CompareReply)
  SharedDtor();
}

void CompareReply::SharedDtor() {
  if (this != internal_default_instance()) delete result_;
}

void CompareReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CompareReply& CompareReply::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CompareReply_integration_2eproto.base);
  return *internal_default_instance();
}


void CompareReply::Clear() {
// @@protoc_insertion_point(message_clear_start:VeriBlock.CompareReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
  comparingsresult_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CompareReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .VeriBlock.GeneralReply result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_result(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 comparingsResult = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          comparingsresult_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CompareReply::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:VeriBlock.CompareReply)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .VeriBlock.GeneralReply result = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_result()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 comparingsResult = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &comparingsresult_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:VeriBlock.CompareReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:VeriBlock.CompareReply)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CompareReply::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:VeriBlock.CompareReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .VeriBlock.GeneralReply result = 1;
  if (this->has_result()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::result(this), output);
  }

  // int32 comparingsResult = 2;
  if (this->comparingsresult() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->comparingsresult(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:VeriBlock.CompareReply)
}

::PROTOBUF_NAMESPACE_ID::uint8* CompareReply::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:VeriBlock.CompareReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .VeriBlock.GeneralReply result = 1;
  if (this->has_result()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::result(this), target);
  }

  // int32 comparingsResult = 2;
  if (this->comparingsresult() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->comparingsresult(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:VeriBlock.CompareReply)
  return target;
}

size_t CompareReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:VeriBlock.CompareReply)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .VeriBlock.GeneralReply result = 1;
  if (this->has_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *result_);
  }

  // int32 comparingsResult = 2;
  if (this->comparingsresult() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->comparingsresult());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CompareReply::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:VeriBlock.CompareReply)
  GOOGLE_DCHECK_NE(&from, this);
  const CompareReply* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CompareReply>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:VeriBlock.CompareReply)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:VeriBlock.CompareReply)
    MergeFrom(*source);
  }
}

void CompareReply::MergeFrom(const CompareReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:VeriBlock.CompareReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_result()) {
    mutable_result()->::VeriBlock::GeneralReply::MergeFrom(from.result());
  }
  if (from.comparingsresult() != 0) {
    set_comparingsresult(from.comparingsresult());
  }
}

void CompareReply::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:VeriBlock.CompareReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CompareReply::CopyFrom(const CompareReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:VeriBlock.CompareReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CompareReply::IsInitialized() const {
  return true;
}

void CompareReply::InternalSwap(CompareReply* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(result_, other->result_);
  swap(comparingsresult_, other->comparingsresult_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CompareReply::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ForkresolutionConfigRequest::InitAsDefaultInstance() {
}
class ForkresolutionConfigRequest::_Internal {
 public:
};

ForkresolutionConfigRequest::ForkresolutionConfigRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:VeriBlock.ForkresolutionConfigRequest)
}
ForkresolutionConfigRequest::ForkresolutionConfigRequest(const ForkresolutionConfigRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&keystonefinalitydelay_, &from.keystonefinalitydelay_,
    static_cast<size_t>(reinterpret_cast<char*>(&amnestyperiod_) -
    reinterpret_cast<char*>(&keystonefinalitydelay_)) + sizeof(amnestyperiod_));
  // @@protoc_insertion_point(copy_constructor:VeriBlock.ForkresolutionConfigRequest)
}

void ForkresolutionConfigRequest::SharedCtor() {
  ::memset(&keystonefinalitydelay_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&amnestyperiod_) -
      reinterpret_cast<char*>(&keystonefinalitydelay_)) + sizeof(amnestyperiod_));
}

ForkresolutionConfigRequest::~ForkresolutionConfigRequest() {
  // @@protoc_insertion_point(destructor:VeriBlock.ForkresolutionConfigRequest)
  SharedDtor();
}

void ForkresolutionConfigRequest::SharedDtor() {
}

void ForkresolutionConfigRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ForkresolutionConfigRequest& ForkresolutionConfigRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ForkresolutionConfigRequest_integration_2eproto.base);
  return *internal_default_instance();
}


void ForkresolutionConfigRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:VeriBlock.ForkresolutionConfigRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&keystonefinalitydelay_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&amnestyperiod_) -
      reinterpret_cast<char*>(&keystonefinalitydelay_)) + sizeof(amnestyperiod_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ForkresolutionConfigRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 keystoneFinalityDelay = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          keystonefinalitydelay_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 amnestyPeriod = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          amnestyperiod_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ForkresolutionConfigRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:VeriBlock.ForkresolutionConfigRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 keystoneFinalityDelay = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &keystonefinalitydelay_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 amnestyPeriod = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &amnestyperiod_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:VeriBlock.ForkresolutionConfigRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:VeriBlock.ForkresolutionConfigRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ForkresolutionConfigRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:VeriBlock.ForkresolutionConfigRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 keystoneFinalityDelay = 1;
  if (this->keystonefinalitydelay() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->keystonefinalitydelay(), output);
  }

  // int32 amnestyPeriod = 2;
  if (this->amnestyperiod() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->amnestyperiod(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:VeriBlock.ForkresolutionConfigRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* ForkresolutionConfigRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:VeriBlock.ForkresolutionConfigRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 keystoneFinalityDelay = 1;
  if (this->keystonefinalitydelay() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->keystonefinalitydelay(), target);
  }

  // int32 amnestyPeriod = 2;
  if (this->amnestyperiod() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->amnestyperiod(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:VeriBlock.ForkresolutionConfigRequest)
  return target;
}

size_t ForkresolutionConfigRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:VeriBlock.ForkresolutionConfigRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 keystoneFinalityDelay = 1;
  if (this->keystonefinalitydelay() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->keystonefinalitydelay());
  }

  // int32 amnestyPeriod = 2;
  if (this->amnestyperiod() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->amnestyperiod());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ForkresolutionConfigRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:VeriBlock.ForkresolutionConfigRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ForkresolutionConfigRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ForkresolutionConfigRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:VeriBlock.ForkresolutionConfigRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:VeriBlock.ForkresolutionConfigRequest)
    MergeFrom(*source);
  }
}

void ForkresolutionConfigRequest::MergeFrom(const ForkresolutionConfigRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:VeriBlock.ForkresolutionConfigRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.keystonefinalitydelay() != 0) {
    set_keystonefinalitydelay(from.keystonefinalitydelay());
  }
  if (from.amnestyperiod() != 0) {
    set_amnestyperiod(from.amnestyperiod());
  }
}

void ForkresolutionConfigRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:VeriBlock.ForkresolutionConfigRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ForkresolutionConfigRequest::CopyFrom(const ForkresolutionConfigRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:VeriBlock.ForkresolutionConfigRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ForkresolutionConfigRequest::IsInitialized() const {
  return true;
}

void ForkresolutionConfigRequest::InternalSwap(ForkresolutionConfigRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(keystonefinalitydelay_, other->keystonefinalitydelay_);
  swap(amnestyperiod_, other->amnestyperiod_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ForkresolutionConfigRequest::GetMetadata() const {
  return GetMetadataStatic();
}

::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::google::protobuf::FieldOptions,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< bool >, 8, false >
  hex_encoded(kHexEncodedFieldNumber, false);
::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::google::protobuf::FieldOptions,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< bool >, 8, false >
  address_encoded(kAddressEncodedFieldNumber, false);
::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::google::protobuf::FieldOptions,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< bool >, 8, false >
  ascii_encoded(kAsciiEncodedFieldNumber, false);
::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::google::protobuf::FieldOptions,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< bool >, 8, false >
  utf8_encoded(kUtf8EncodedFieldNumber, false);

// @@protoc_insertion_point(namespace_scope)
}  // namespace VeriBlock
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::VeriBlock::PublicationData* Arena::CreateMaybeMessage< ::VeriBlock::PublicationData >(Arena* arena) {
  return Arena::CreateInternal< ::VeriBlock::PublicationData >(arena);
}
template<> PROTOBUF_NOINLINE ::VeriBlock::BitcoinBlock* Arena::CreateMaybeMessage< ::VeriBlock::BitcoinBlock >(Arena* arena) {
  return Arena::CreateInternal< ::VeriBlock::BitcoinBlock >(arena);
}
template<> PROTOBUF_NOINLINE ::VeriBlock::BitcoinTransaction* Arena::CreateMaybeMessage< ::VeriBlock::BitcoinTransaction >(Arena* arena) {
  return Arena::CreateInternal< ::VeriBlock::BitcoinTransaction >(arena);
}
template<> PROTOBUF_NOINLINE ::VeriBlock::VeriBlockBlock* Arena::CreateMaybeMessage< ::VeriBlock::VeriBlockBlock >(Arena* arena) {
  return Arena::CreateInternal< ::VeriBlock::VeriBlockBlock >(arena);
}
template<> PROTOBUF_NOINLINE ::VeriBlock::NetworkByte* Arena::CreateMaybeMessage< ::VeriBlock::NetworkByte >(Arena* arena) {
  return Arena::CreateInternal< ::VeriBlock::NetworkByte >(arena);
}
template<> PROTOBUF_NOINLINE ::VeriBlock::VeriBlockTransaction* Arena::CreateMaybeMessage< ::VeriBlock::VeriBlockTransaction >(Arena* arena) {
  return Arena::CreateInternal< ::VeriBlock::VeriBlockTransaction >(arena);
}
template<> PROTOBUF_NOINLINE ::VeriBlock::Address* Arena::CreateMaybeMessage< ::VeriBlock::Address >(Arena* arena) {
  return Arena::CreateInternal< ::VeriBlock::Address >(arena);
}
template<> PROTOBUF_NOINLINE ::VeriBlock::Coin* Arena::CreateMaybeMessage< ::VeriBlock::Coin >(Arena* arena) {
  return Arena::CreateInternal< ::VeriBlock::Coin >(arena);
}
template<> PROTOBUF_NOINLINE ::VeriBlock::Output* Arena::CreateMaybeMessage< ::VeriBlock::Output >(Arena* arena) {
  return Arena::CreateInternal< ::VeriBlock::Output >(arena);
}
template<> PROTOBUF_NOINLINE ::VeriBlock::AltPublication* Arena::CreateMaybeMessage< ::VeriBlock::AltPublication >(Arena* arena) {
  return Arena::CreateInternal< ::VeriBlock::AltPublication >(arena);
}
template<> PROTOBUF_NOINLINE ::VeriBlock::VeriBlockPoPTransaction* Arena::CreateMaybeMessage< ::VeriBlock::VeriBlockPoPTransaction >(Arena* arena) {
  return Arena::CreateInternal< ::VeriBlock::VeriBlockPoPTransaction >(arena);
}
template<> PROTOBUF_NOINLINE ::VeriBlock::VeriBlockPublication* Arena::CreateMaybeMessage< ::VeriBlock::VeriBlockPublication >(Arena* arena) {
  return Arena::CreateInternal< ::VeriBlock::VeriBlockPublication >(arena);
}
template<> PROTOBUF_NOINLINE ::VeriBlock::EmptyRequest* Arena::CreateMaybeMessage< ::VeriBlock::EmptyRequest >(Arena* arena) {
  return Arena::CreateInternal< ::VeriBlock::EmptyRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::VeriBlock::GeneralReply* Arena::CreateMaybeMessage< ::VeriBlock::GeneralReply >(Arena* arena) {
  return Arena::CreateInternal< ::VeriBlock::GeneralReply >(arena);
}
template<> PROTOBUF_NOINLINE ::VeriBlock::BlockIndex* Arena::CreateMaybeMessage< ::VeriBlock::BlockIndex >(Arena* arena) {
  return Arena::CreateInternal< ::VeriBlock::BlockIndex >(arena);
}
template<> PROTOBUF_NOINLINE ::VeriBlock::AddPayloadsRequest* Arena::CreateMaybeMessage< ::VeriBlock::AddPayloadsRequest >(Arena* arena) {
  return Arena::CreateInternal< ::VeriBlock::AddPayloadsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::VeriBlock::AddTemporaryPayloadsRequest* Arena::CreateMaybeMessage< ::VeriBlock::AddTemporaryPayloadsRequest >(Arena* arena) {
  return Arena::CreateInternal< ::VeriBlock::AddTemporaryPayloadsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::VeriBlock::SimplifyVTBsRequest* Arena::CreateMaybeMessage< ::VeriBlock::SimplifyVTBsRequest >(Arena* arena) {
  return Arena::CreateInternal< ::VeriBlock::SimplifyVTBsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::VeriBlock::SimplifyVTBsReply* Arena::CreateMaybeMessage< ::VeriBlock::SimplifyVTBsReply >(Arena* arena) {
  return Arena::CreateInternal< ::VeriBlock::SimplifyVTBsReply >(arena);
}
template<> PROTOBUF_NOINLINE ::VeriBlock::GetMainVBKHeightOfATVReply* Arena::CreateMaybeMessage< ::VeriBlock::GetMainVBKHeightOfATVReply >(Arena* arena) {
  return Arena::CreateInternal< ::VeriBlock::GetMainVBKHeightOfATVReply >(arena);
}
template<> PROTOBUF_NOINLINE ::VeriBlock::RemovePayloadsRequest* Arena::CreateMaybeMessage< ::VeriBlock::RemovePayloadsRequest >(Arena* arena) {
  return Arena::CreateInternal< ::VeriBlock::RemovePayloadsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::VeriBlock::AltChainConfigRequest* Arena::CreateMaybeMessage< ::VeriBlock::AltChainConfigRequest >(Arena* arena) {
  return Arena::CreateInternal< ::VeriBlock::AltChainConfigRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::VeriBlock::GetLastKnownBlocksRequest* Arena::CreateMaybeMessage< ::VeriBlock::GetLastKnownBlocksRequest >(Arena* arena) {
  return Arena::CreateInternal< ::VeriBlock::GetLastKnownBlocksRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::VeriBlock::GetLastKnownVBKBlocksReply* Arena::CreateMaybeMessage< ::VeriBlock::GetLastKnownVBKBlocksReply >(Arena* arena) {
  return Arena::CreateInternal< ::VeriBlock::GetLastKnownVBKBlocksReply >(arena);
}
template<> PROTOBUF_NOINLINE ::VeriBlock::GetLastKnownBTCBlocksReply* Arena::CreateMaybeMessage< ::VeriBlock::GetLastKnownBTCBlocksReply >(Arena* arena) {
  return Arena::CreateInternal< ::VeriBlock::GetLastKnownBTCBlocksReply >(arena);
}
template<> PROTOBUF_NOINLINE ::VeriBlock::RoundRatioConfig* Arena::CreateMaybeMessage< ::VeriBlock::RoundRatioConfig >(Arena* arena) {
  return Arena::CreateInternal< ::VeriBlock::RoundRatioConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::VeriBlock::RewardCurveConfig* Arena::CreateMaybeMessage< ::VeriBlock::RewardCurveConfig >(Arena* arena) {
  return Arena::CreateInternal< ::VeriBlock::RewardCurveConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::VeriBlock::RelativeScoreConfig* Arena::CreateMaybeMessage< ::VeriBlock::RelativeScoreConfig >(Arena* arena) {
  return Arena::CreateInternal< ::VeriBlock::RelativeScoreConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::VeriBlock::FlatScoreRoundConfig* Arena::CreateMaybeMessage< ::VeriBlock::FlatScoreRoundConfig >(Arena* arena) {
  return Arena::CreateInternal< ::VeriBlock::FlatScoreRoundConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::VeriBlock::CalculatorConfig* Arena::CreateMaybeMessage< ::VeriBlock::CalculatorConfig >(Arena* arena) {
  return Arena::CreateInternal< ::VeriBlock::CalculatorConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::VeriBlock::SetCalculatorRequest* Arena::CreateMaybeMessage< ::VeriBlock::SetCalculatorRequest >(Arena* arena) {
  return Arena::CreateInternal< ::VeriBlock::SetCalculatorRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::VeriBlock::GetCalculatorReply* Arena::CreateMaybeMessage< ::VeriBlock::GetCalculatorReply >(Arena* arena) {
  return Arena::CreateInternal< ::VeriBlock::GetCalculatorReply >(arena);
}
template<> PROTOBUF_NOINLINE ::VeriBlock::RewardOutput* Arena::CreateMaybeMessage< ::VeriBlock::RewardOutput >(Arena* arena) {
  return Arena::CreateInternal< ::VeriBlock::RewardOutput >(arena);
}
template<> PROTOBUF_NOINLINE ::VeriBlock::PopEndorsement* Arena::CreateMaybeMessage< ::VeriBlock::PopEndorsement >(Arena* arena) {
  return Arena::CreateInternal< ::VeriBlock::PopEndorsement >(arena);
}
template<> PROTOBUF_NOINLINE ::VeriBlock::RewardEndorsement* Arena::CreateMaybeMessage< ::VeriBlock::RewardEndorsement >(Arena* arena) {
  return Arena::CreateInternal< ::VeriBlock::RewardEndorsement >(arena);
}
template<> PROTOBUF_NOINLINE ::VeriBlock::RewardsCalculateScoreRequest* Arena::CreateMaybeMessage< ::VeriBlock::RewardsCalculateScoreRequest >(Arena* arena) {
  return Arena::CreateInternal< ::VeriBlock::RewardsCalculateScoreRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::VeriBlock::RewardsCalculateScoreReply* Arena::CreateMaybeMessage< ::VeriBlock::RewardsCalculateScoreReply >(Arena* arena) {
  return Arena::CreateInternal< ::VeriBlock::RewardsCalculateScoreReply >(arena);
}
template<> PROTOBUF_NOINLINE ::VeriBlock::RewardsCalculateOutputsRequest* Arena::CreateMaybeMessage< ::VeriBlock::RewardsCalculateOutputsRequest >(Arena* arena) {
  return Arena::CreateInternal< ::VeriBlock::RewardsCalculateOutputsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::VeriBlock::RewardsCalculateOutputsReply* Arena::CreateMaybeMessage< ::VeriBlock::RewardsCalculateOutputsReply >(Arena* arena) {
  return Arena::CreateInternal< ::VeriBlock::RewardsCalculateOutputsReply >(arena);
}
template<> PROTOBUF_NOINLINE ::VeriBlock::BytesArrayRequest* Arena::CreateMaybeMessage< ::VeriBlock::BytesArrayRequest >(Arena* arena) {
  return Arena::CreateInternal< ::VeriBlock::BytesArrayRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::VeriBlock::BytesArrayReply* Arena::CreateMaybeMessage< ::VeriBlock::BytesArrayReply >(Arena* arena) {
  return Arena::CreateInternal< ::VeriBlock::BytesArrayReply >(arena);
}
template<> PROTOBUF_NOINLINE ::VeriBlock::MerklePath* Arena::CreateMaybeMessage< ::VeriBlock::MerklePath >(Arena* arena) {
  return Arena::CreateInternal< ::VeriBlock::MerklePath >(arena);
}
template<> PROTOBUF_NOINLINE ::VeriBlock::MerklePathRequest* Arena::CreateMaybeMessage< ::VeriBlock::MerklePathRequest >(Arena* arena) {
  return Arena::CreateInternal< ::VeriBlock::MerklePathRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::VeriBlock::VeriBlockMerklePath* Arena::CreateMaybeMessage< ::VeriBlock::VeriBlockMerklePath >(Arena* arena) {
  return Arena::CreateInternal< ::VeriBlock::VeriBlockMerklePath >(arena);
}
template<> PROTOBUF_NOINLINE ::VeriBlock::AltPublicationReply* Arena::CreateMaybeMessage< ::VeriBlock::AltPublicationReply >(Arena* arena) {
  return Arena::CreateInternal< ::VeriBlock::AltPublicationReply >(arena);
}
template<> PROTOBUF_NOINLINE ::VeriBlock::PublicationDataReply* Arena::CreateMaybeMessage< ::VeriBlock::PublicationDataReply >(Arena* arena) {
  return Arena::CreateInternal< ::VeriBlock::PublicationDataReply >(arena);
}
template<> PROTOBUF_NOINLINE ::VeriBlock::BitcoinTransactionReply* Arena::CreateMaybeMessage< ::VeriBlock::BitcoinTransactionReply >(Arena* arena) {
  return Arena::CreateInternal< ::VeriBlock::BitcoinTransactionReply >(arena);
}
template<> PROTOBUF_NOINLINE ::VeriBlock::VeriBlockBlockReply* Arena::CreateMaybeMessage< ::VeriBlock::VeriBlockBlockReply >(Arena* arena) {
  return Arena::CreateInternal< ::VeriBlock::VeriBlockBlockReply >(arena);
}
template<> PROTOBUF_NOINLINE ::VeriBlock::VeriBlockTransactionReply* Arena::CreateMaybeMessage< ::VeriBlock::VeriBlockTransactionReply >(Arena* arena) {
  return Arena::CreateInternal< ::VeriBlock::VeriBlockTransactionReply >(arena);
}
template<> PROTOBUF_NOINLINE ::VeriBlock::VeriBlockPublicationReply* Arena::CreateMaybeMessage< ::VeriBlock::VeriBlockPublicationReply >(Arena* arena) {
  return Arena::CreateInternal< ::VeriBlock::VeriBlockPublicationReply >(arena);
}
template<> PROTOBUF_NOINLINE ::VeriBlock::VeriBlockPoPTransactionReply* Arena::CreateMaybeMessage< ::VeriBlock::VeriBlockPoPTransactionReply >(Arena* arena) {
  return Arena::CreateInternal< ::VeriBlock::VeriBlockPoPTransactionReply >(arena);
}
template<> PROTOBUF_NOINLINE ::VeriBlock::OutputReply* Arena::CreateMaybeMessage< ::VeriBlock::OutputReply >(Arena* arena) {
  return Arena::CreateInternal< ::VeriBlock::OutputReply >(arena);
}
template<> PROTOBUF_NOINLINE ::VeriBlock::AddressReply* Arena::CreateMaybeMessage< ::VeriBlock::AddressReply >(Arena* arena) {
  return Arena::CreateInternal< ::VeriBlock::AddressReply >(arena);
}
template<> PROTOBUF_NOINLINE ::VeriBlock::BitcoinBlockReply* Arena::CreateMaybeMessage< ::VeriBlock::BitcoinBlockReply >(Arena* arena) {
  return Arena::CreateInternal< ::VeriBlock::BitcoinBlockReply >(arena);
}
template<> PROTOBUF_NOINLINE ::VeriBlock::VeriBlockMerklePathReply* Arena::CreateMaybeMessage< ::VeriBlock::VeriBlockMerklePathReply >(Arena* arena) {
  return Arena::CreateInternal< ::VeriBlock::VeriBlockMerklePathReply >(arena);
}
template<> PROTOBUF_NOINLINE ::VeriBlock::MerklePathReply* Arena::CreateMaybeMessage< ::VeriBlock::MerklePathReply >(Arena* arena) {
  return Arena::CreateInternal< ::VeriBlock::MerklePathReply >(arena);
}
template<> PROTOBUF_NOINLINE ::VeriBlock::AltChainBlock* Arena::CreateMaybeMessage< ::VeriBlock::AltChainBlock >(Arena* arena) {
  return Arena::CreateInternal< ::VeriBlock::AltChainBlock >(arena);
}
template<> PROTOBUF_NOINLINE ::VeriBlock::TwoBranchesRequest* Arena::CreateMaybeMessage< ::VeriBlock::TwoBranchesRequest >(Arena* arena) {
  return Arena::CreateInternal< ::VeriBlock::TwoBranchesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::VeriBlock::CompareReply* Arena::CreateMaybeMessage< ::VeriBlock::CompareReply >(Arena* arena) {
  return Arena::CreateInternal< ::VeriBlock::CompareReply >(arena);
}
template<> PROTOBUF_NOINLINE ::VeriBlock::ForkresolutionConfigRequest* Arena::CreateMaybeMessage< ::VeriBlock::ForkresolutionConfigRequest >(Arena* arena) {
  return Arena::CreateInternal< ::VeriBlock::ForkresolutionConfigRequest >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
